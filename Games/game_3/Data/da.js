!function webpackUniversalModuleDefinition(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.da=e():t.da=e()}(window,function(){return function(r){var n={};function __webpack_require__(t){if(n[t])return n[t].exports;var e=n[t]={i:t,l:!1,exports:{}};return r[t].call(e.exports,e,e.exports,__webpack_require__),e.l=!0,e.exports}return __webpack_require__.m=r,__webpack_require__.c=n,__webpack_require__.d=function(t,e,r){__webpack_require__.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},__webpack_require__.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(__webpack_require__.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)__webpack_require__.d(r,n,function(t){return e[t]}.bind(null,n));return r},__webpack_require__.n=function(t){var e=t&&t.__esModule?function getDefault(){return t.default}:function getModuleExports(){return t};return __webpack_require__.d(e,"a",e),e},__webpack_require__.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},__webpack_require__.p="/",__webpack_require__(__webpack_require__.s=6)}([function(t,e,r){t.exports=function(r){function n(t){if(o[t])return o[t].exports;var e=o[t]={i:t,l:!1,exports:{}};return r[t].call(e.exports,e,e.exports,n),e.l=!0,e.exports}var o={};return n.m=r,n.c=o,n.i=function(t){return t},n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=5)}([function(t,r,n){"use strict";function e(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}function o(t,e){return{x:t,y:e}}function u(t){for(var r=arguments.length,n=Array(1<r?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return o(t.apply(void 0,e(n.map(function(t){return t.x}))),t.apply(void 0,e(n.map(function(t){return t.y}))))}function c(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return u(function(t,e){return t+e*r},t,e)}function i(t,e){return u(function(t,e){return e-t},t,e)}function a(t){return Math.sqrt(t.x*t.x+t.y*t.y)}function p(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:f;return c(r,i(r,t),e)}function l(t){var e=a(t);return u(function(t){return t/e},t)}function s(t,e,r){if(!t)return t;var n=o(t.x+e,t.y+r);return t.cp1&&(n.cp1=o(t.cp1.x+e,t.cp1.y+r)),t.cp2&&(n.cp2=o(t.cp2.x+e,t.cp2.y+r)),n}function b(t,e,r,n){var o=i(t,e),a=o.x*n-o.y*r,s=o.x*r+o.y*n;e.x=t.x+a,e.y=t.y+s}Object.defineProperty(r,"__esModule",{value:!0}),r.point=o,r.makePoint=u,r.add=c,r.diff=i,r.norm=a,r.angle=function f(t){return Math.atan2(t.y,t.x)},r.scale=p,r.getUnitVector=l,r.getPerpendicularVector=function y(t){return l(o(-t.y,t.x))},r.extractPoint=function d(t){return o(t.x,t.y)},r.reflect=function v(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;if(!t)return t;var n=void 0,i=void 0;return e===1/0?(i=n=0,r=t.y):(n=(t.x+(t.y-r)*e)/(1+e*e),i=n*e),o(2*n-t.x,2*i-t.y+2*r)},r.adjust=s,r.adjustPoints=function x(e,r){for(var n=[],t=arguments.length,o=Array(2<t?t-2:0),i=2;i<t;i++)o[i-2]=arguments[i];return o.forEach(function(t){n.push(s(t,e,r))}),n},r.scalePoints=function h(o,i){for(var t=arguments.length,e=Array(2<t?t-2:0),r=2;r<t;r++)e[r-2]=arguments[r];e.forEach(function(t){if(t&&!1!==t.hasOwnProperty("x")){var e=p(t,i,o),r=e.x,n=e.y;t.x=r,t.y=n,t.cp1&&(t.cp1=p(t.cp1,i,o)),t.cp2&&(t.cp2=p(t.cp2,i,o))}})},r.rotatePoints=function P(e,t){for(var r=Math.cos(t),n=Math.sin(t),o=arguments.length,i=Array(2<o?o-2:0),a=2;a<o;a++)i[a-2]=arguments[a];i.forEach(function(t){t&&!1!==t.hasOwnProperty("x")&&(b(e,t,n,r),t.cp1&&b(e,t.cp1,n,r),t.cp2&&b(e,t.cp2,n,r))})};var f=r.origin=Object.freeze(o(0,0));r.breakPoint=Object.freeze({break:!0}),r.endPoint=Object.freeze({end:!0})},function(t,r,n){"use strict";function e(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}function o(t,e,r){var n=r.linear,o=r.quadratic,i=r.cubic,a=(0,k.extractPoint)(t),s=(0,k.extractPoint)(e);if(e.cp1&&e.cp2)return i(a,e.cp1,e.cp2,s);var c=e.cp1||e.cp2;return c?o(a,c,s):n(a,s)}function u(n,t,e){return o(t,e,{linear:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return c.apply(void 0,[n].concat(e))},quadratic:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return k.makePoint.apply(void 0,[function a(t,e,r,n){return(e+n-2*r)*t*t+2*(r-e)*t+e}.bind(null,n)].concat(e))},cubic:function(){for(var t=arguments.length,e=Array(t),r=0;r<t;r++)e[r]=arguments[r];return k.makePoint.apply(void 0,[function f(t,e,r,n,o){return e*(1-t)*(1-t)*(1-t)+3*r*(1-t)*(1-t)*t+3*n*(1-t)*t*t+o*t*t*t}.bind(null,n)].concat(e))}})}function c(t,e,r){return(0,k.makePoint)(function i(t,e,r){return t*(r-e)+e}.bind(null,t),e,r)}function p(t,e,r,n,o){var i=c(t,e,r),a=c(t,r,n),s=c(t,n,o),l=c(t,i,a),u=c(t,a,s),p=c(t,l,u),f={p1:e,p2:p};f.p2.cp1=i,f.p2.cp2=l;var h={p1:(0,k.extractPoint)(p),p2:o};return h.p2.cp1=u,h.p2.cp2=s,{left:f,right:h}}function l(t,e,r,n){var o=c(t,e,r),i=c(t,r,n),a=c(t,o,i),s={p1:e,p2:a};s.p2.cp1=o;var l={p1:(0,k.extractPoint)(a),p2:n};return l.p2.cp1=i,{left:s,right:l}}function y(t,e,r){var n=c(t,e,r);return{left:{p1:e,p2:n},right:{p1:n,p2:r}}}function v(t,e,r){return e===t?[]:[(r-t)/(e-t)]}function x(t,e,r,n){return function s(t,e,r){var n=e*e-4*t*r;return n<0?[]:[(-e+Math.sqrt(n))/(2*t),(-e-Math.sqrt(n))/(2*t)]}(t-2*e+r,2*(e-t),t-n)}function h(t){return t<0?-Math.pow(-t,1/3):Math.pow(t,1/3)}function b(t,e,r,n,o){var i=3*(e-=o)-(t-=o)-3*(r-=o)+(n-=o);return function P(t,e,r){var n=t/3,o=(3*e-t*t)/3/3,i=(2*t*t*t-9*t*e+27*r)/27/2,a=(0,w.roundToDec)(i*i+o*o*o,8);if(0<a){var s=Math.sqrt(a);return[h(-i+s)-h(i+s)-n]}if(0===a){var c=h(-i);return[2*c-n,-c-n]}var l=Math.sqrt(-o*o*o),u=-i/l;u<-1?u=-1:1<u&&(u=1);var p=Math.acos(u),f=2*h(l);return[f*Math.cos(p/3)-n,f*Math.cos((p+2*Math.PI)/3)-n,f*Math.cos((p+4*Math.PI)/3)-n]}((3*t-6*e+3*r)/i,(-3*t+3*e)/i,t/i).map(function(t){return(0,w.roundToDec)(t,4)})}function m(t,e){var n=[t];for(var r in e)r.startsWith("cp")&&e.hasOwnProperty(r)&&n.push(e[r]);n.push((0,k.extractPoint)(e));for(var o=(0,k.extractPoint)(e),i=1,a=n.length;i<a;++i)!function(t,e){var r=t/e;o["cp"+t]=(0,k.makePoint)(function(t,e){return r*t+(1-r)*e},n[t-1],n[t])}(i,a);return o}function M(e,r){return o(e,r,{linear:function(){var t=m(e,m(e,r));return[t.cp1,t.cp2]},quadratic:function(){var t=m(e,r);return[t.cp1,t.cp2]},cubic:function(){return[r.cp1,r.cp2]}})}Object.defineProperty(r,"__esModule",{value:!0});var C=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function r(t,e){var n=[],o=!0,i=!1,a=void 0;try{for(var s,c=t[Symbol.iterator]();!(o=(s=c.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(t){i=!0,a=t}finally{try{!o&&c.return&&c.return()}finally{if(i)throw a}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")};r.applyToCurve=o,r.getPointOnCurve=u,r.getPointOnLine=c,r.splitCurve=function d(t,e,r){return o(e,r,{linear:y.bind(null,t),quadratic:l.bind(null,t),cubic:p.bind(null,t)})},r.interpolateCurve=function g(r,n,i){var a=void 0;if(null===i.x)a="y";else{if(null!==i.y)return[];a="x"}return o(r,n,{linear:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return v.apply(void 0,e(r.map(function(t){return t[a]})).concat([i[a]]))},quadratic:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return x.apply(void 0,e(r.map(function(t){return t[a]})).concat([i[a]]))},cubic:function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return b.apply(void 0,e(r.map(function(t){return t[a]})).concat([i[a]]))}}).filter(function(t){return 0<=(t=(0,w.roundToDec)(t,3))&&t<=1}).map(function(t){var e=u(t,r,n);return e.t=t,e})},r.simpleQuadratic=function O(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.5,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,o=c(r,t,e);return(0,k.add)(o,(0,k.getPerpendicularVector)((0,k.diff)(t,e)),n)},r.elevateDegree=m,r.getCubicControlPoints=M,r.transformCurve=function j(t,e,r,n){if(!r)return n;if(!n)return r;var o=M(e,r),i=C(o,2),a=i[0],s=i[1],l=M(e,n),u=C(l,2),p=u[0],f=u[1],h=c(t,r,n);return h.cp1=c(t,a,p),h.cp2=c(t,s,f),h},r.reverseDrawPoint=function _(t,e){return t&&e?{x:t.x,y:t.y,cp1:(0,i.clone)(e.cp2),cp2:(0,i.clone)(e.cp1)}:t},r.continueCurve=function A(e,r){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return o(e,r,{linear:function(){return(0,k.add)(r,(0,k.diff)(e,r),n)},quadratic:function(){var t=m(e,r);return(0,k.scale)(t.cp2,-n,r)},cubic:function(){return(0,k.scale)(r.cp2,-n,r)}})};var k=n(0),i=n(3),w=n(2)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.deg=function e(t){return 180*t/Math.PI},e.rad=function o(t){return t*Math.PI/180},e.unwrapRad=function u(t){for(;t>Math.PI;)t-=2*Math.PI;for(;t<-Math.PI;)t+=2*Math.PI;return t},e.clamp=function c(t,e,r){return t<e?e:r<t?r:t},e.roundToDec=function i(t,e){return parseFloat(t.toFixed(e))}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.clone=function e(t){return t?JSON.parse(JSON.stringify(t)):t},e.fillerDefinition=function o(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};t.hasOwnProperty(e)||(t[e]=r)}},function(t,r,n){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.none=void 0,r.drawPoints=function e(t){for(var r=arguments.length,n=Array(1<r?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];if(!(n.length<1)){var i=n[0];i&&(i===b.breakPoint&&(i=n[1]),i&&i.hasOwnProperty("x")&&t.moveTo(i.x,i.y));for(var a=1,s=n.length;a<s;++a){var c=n[a];c&&(c===b.breakPoint?++a<n.length&&(c=n[a],t.moveTo(c.x,c.y)):c.cp2&&c.cp1?t.bezierCurveTo(c.cp1.x,c.cp1.y,c.cp2.x,c.cp2.y,c.x,c.y,c.traceOptions):c.cp1?t.quadraticCurveTo(c.cp1.x,c.cp1.y,c.x,c.y,c.traceOptions):c.cp2?t.quadraticCurveTo(c.cp2.x,c.cp2.y,c.x,c.y,c.traceOptions):c.hasOwnProperty("x")&&t.lineTo(c.x,c.y))}}},r.drawCircle=function o(t,e){var r=.552284749831*e,n={x:t.x,y:t.y+e},i={x:t.x+e,y:t.y},a={x:t.x,y:t.y-e},s={x:t.x-e,y:t.y};return n.cp1={x:s.x,y:s.y+r},n.cp2={x:n.x-r,y:n.y},i.cp1={x:n.x+r,y:n.y},i.cp2={x:i.x,y:i.y+r},a.cp1={x:i.x,y:i.y-r},a.cp2={x:a.x+r,y:a.y},s.cp1={x:a.x-r,y:a.y},s.cp2={x:s.x,y:s.y-r},[n,i,a,s,n]},r.drawSpecificCurl=function u(t,e,r){var n=(0,b.extractPoint)(t),o=(0,b.extractPoint)(e),i=(0,b.extractPoint)(r),a=t.t,s=void 0===a?.5:a,c=t.deflection,l=void 0===c?.5:c;o.cp1=(0,d.simpleQuadratic)(n,o,s,l);var p=r.t,f=void 0===p?.5:p,h=r.deflection,y=void 0===h?.5:h;return i.cp1=(0,d.simpleQuadratic)(n,o,f,y),[n,o,i]},r.tracePoint=function c(t,e){return e?"number"==typeof e&&(e={radius:e}):e={radius:1},t.traceOptions={point:e},t};var b=n(0),d=n(1);r.none="rgba(0,0,0,0)"},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(3);Object.keys(n).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return n[t]}})});var o=r(2);Object.keys(o).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return o[t]}})});var i=r(0);Object.keys(i).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return i[t]}})});var a=r(1);Object.keys(a).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return a[t]}})});var s=r(4);Object.keys(s).forEach(function(t){"default"!==t&&"__esModule"!==t&&Object.defineProperty(e,t,{enumerable:!0,get:function(){return s[t]}})})}])},function(t,e,r){"use strict";r.d(e,"b",function(){return c}),r.d(e,"d",function(){return processClothingPartLocation}),r.d(e,"a",function(){return l}),r.d(e,"c",function(){return u});var n=r(0),i=r(8),s=r(3),o=r(2),a=r(9);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}var c=function(){function Clothing(){for(var i=this,t=arguments.length,a=new Array(t),e=0;e<t;e++)a[e]=arguments[e];_classCallCheck(this,Clothing),Object.assign(this,{clothingLayer:l.Layer.BASE,thickness:1.2,noCover:!1}),this.parts=[],Object.assign.apply(Object,[this].concat(a)),this.side=Object(s.f)(this.side),this.partPrototypes.forEach(function(t){var e=t.side,r=t.Part,n={};Object.assign.apply(Object,[n].concat(_toConsumableArray(a.map(function(t){return t[r.name]}))));var o=new r(n);Object.assign(i,o),processClothingPartLocation(e,o),(o._owner=i).parts.push(o)}),Object.assign.apply(Object,[this].concat(a)),this.side=Object(s.f)(this.side),this.parts.forEach(function(t){t._owner=i})}return _createClass(Clothing,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"#fff"}}]),Clothing}();function processClothingPartLocation(t,e){void 0!==e.forcedSide&&(t=e.forcedSide);var r=Object(s.e)(t);if(!1===e.forcedNoSideString&&("right"===r||"left"===r)){var n=Object(i.e)(e.loc);if(!1===Object(i.g)(n)){var o=Object(i.c)(e.loc);e.loc=o+r+" "+n}}return e.side=Object(s.f)(t),e}var l={Layer:Object.freeze({BASE:0,INNER:1,MID:2,OUTER:3,OUTER_FAR:4,EVEN_FARER:5,NUM_LAYERS:6}),create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return _construct(t,r)},simpleStrokeFill:function simpleStrokeFill(t,e,r){Object(a.j)(t,{fill:r.fill,stroke:r.stroke},e),t.lineWidth=r.thickness}},u=function(){function ClothingPart(){_classCallCheck(this,ClothingPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.FRONT,loc:"torso",forcedNoSideString:!1}].concat(e))}return _createClass(ClothingPart,[{key:"renderClothingPoints",value:function renderClothingPoints(){}}]),ClothingPart}()},function(t,e,r){"use strict";r.d(e,"a",function(){return c}),r.d(e,"b",function(){return n}),r.d(e,"g",function(){return o}),r.d(e,"d",function(){return getCanvasGroup}),r.d(e,"c",function(){return getCanvas}),r.d(e,"f",function(){return hideCanvasGroup}),r.d(e,"h",function(){return showCanvasGroup}),r.d(e,"e",function(){return getCanvasHandle});var c=Object.freeze({BASE:0,BACK:1,FRONT:2,SHADING_FRONT:3,MALE_GENITALS:4,MIDRIFT:5,SHADING_MIDRIFT:6,ARMS:7,SHADING_ARMS:8,GENITALS:9,SHADING_GENITALS:10,BELOW_HAIR:11,SHADING_BELOW_HAIR:12,HAIR:13,SHADING_HAIR:14,ABOVE_HAIR:15,EFFECTS:16,NUM_LAYERS:17}),n=[c.SHADING_FRONT,c.SHADING_MIDRIFT,c.SHADING_ARMS,c.SHADING_GENITALS,c.SHADING_BELOW_HAIR,c.SHADING_HAIR],o=0;function getCanvasGroup(t,e){var r=t;"string"==typeof t?r=document.getElementById(t):t=t.id;var n=Object.assign({width:"500",height:"800",parent:r},e);r.style.width=n.width+"px",r.style.height=n.height+"px",r.style.textAlign="left";for(var o=[],i=0;i<=c.NUM_LAYERS;++i){var a=t+i,s=null;i!==c.NUM_LAYERS&&(s={visibility:"hidden"}),o.push(getCanvas(a,Object.assign({},n,{"z-index":i},s)))}return r}function getCanvas(t,e){if("string"!=typeof t)return t;var r=document.getElementById(t);if(!r){for(var n in!1===e.hasOwnProperty("parent")&&(e.parent=document.createElement("div"),document.body.appendChild(e.parent),e.parent.style.width=e.width+"px",e.parent.style.height=e.height+"px"),(r=document.createElement("canvas")).id=t,r.width=e.width,r.height=e.height,r.style.position="absolute",e)!1!==e.hasOwnProperty(n)&&"width"!==n&&"height"!==n&&e.hasOwnProperty(n)&&(r.style[n]=e[n]);e.parent.insertBefore(r,e.parent.firstChild)}return r}function hideCanvasGroup(t){getCanvasHandle(t).style.display="none"}function showCanvasGroup(t){getCanvasHandle(t).style.display="block"}function getCanvasHandle(t){return"string"==typeof t?document.getElementById(t):t}},function(t,e,r){"use strict";r.d(e,"a",function(){return i}),r.d(e,"b",function(){return a}),r.d(e,"e",function(){return getSideLocation}),r.d(e,"g",function(){return partConflict}),r.d(e,"d",function(){return getChildLocation}),r.d(e,"f",function(){return getSideValue}),r.d(e,"c",function(){return getAttachedLocation});var u=r(8),n=r(0),o=r(2);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function BodyPart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,BodyPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{loc:null,parentPart:null,layer:o.a.BASE,reflect:!1,coverConceal:[],uncoverable:!1,aboveParts:[],belowParts:[]}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(BodyPart,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"inherit"}},{key:"getLineWidth",value:function getLineWidth(){return.8}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r,n){}}]),BodyPart}(),a={RIGHT:0,LEFT:1,create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var o=Object.assign.apply(Object,[{}].concat(r)),i=new t(o),a=o&&o.hasOwnProperty("side")?o.side:null;null===a&&(a=Object(u.d)(i.loc)),void 0!==i.forcedSide&&(a=i.forcedSide);var s=getSideLocation(a);if("right"===s||"left"===s){var c=Object(u.b)(i.loc),l=Object(u.c)(i.loc);i.loc=l+s+" "+c,i.parentPart&&(i.parentPart=s+" "+i.parentPart)}return i.side=getSideValue(a),i}};function getSideLocation(t){return"right"===t||"left"===t?t:t===a.LEFT?"left":t===a.RIGHT?"right":null}function partConflict(t,e){return t.side===e.side&&(Object.getPrototypeOf(t)===Object.getPrototypeOf(e)||Object(u.e)(t.loc)===Object(u.e)(e.loc)&&("-"===t.loc.charAt(0)||"-"===e.loc.charAt(0)||"+"!==t.loc.charAt(0)&&"+"!==e.loc.charAt(0)))}function getChildLocation(t,e){var r=Object(u.d)(t),n=e;null!==r&&(n=r+" "+n);var o=getSideValue(r);return Object(u.d)(n)&&(o=getSideValue(Object(u.d)(n))),{childSide:o,childLoc:n}}function getSideValue(t){return"left"===t||t===a.LEFT?a.LEFT:a.RIGHT}function getAttachedLocation(t){var e=new t;return Object(u.e)(e.loc)}},function(t,e,r){"use strict";function clone(t){return t?JSON.parse(JSON.stringify(t)):t}function roundToDec(t,e){return parseFloat(t.toFixed(e))}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function point(t,e){return{x:t,y:e}}function makePoint(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return point(t.apply(void 0,_toConsumableArray(r.map(function(t){return t.x}))),t.apply(void 0,_toConsumableArray(r.map(function(t){return t.y}))))}var n=Object.freeze(point(0,0)),i=Object.freeze({break:!0}),o=Object.freeze({end:!0});function add(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return makePoint(function(t,e){return t+e*r},t,e)}function diff(t,e){return makePoint(function(t,e){return e-t},t,e)}function norm(t){return Math.sqrt(t.x*t.x+t.y*t.y)}function scale(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:n;return add(r,diff(r,t),e)}function getPerpendicularVector(t){return function getUnitVector(t){var e=norm(t);return makePoint(function(t){return t/e},t)}(point(-t.y,t.x))}function extractPoint(t){return point(t.x,t.y)}function reflect(t){var e,r,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1/0,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0;return t?(n===1/0?(r=e=0,o=t.y):r=(e=(t.x+(t.y-o)*n)/(1+n*n))*n,point(2*e-t.x,2*r-t.y+2*o)):t}function adjust(t,e,r){if(!t)return t;var n=point(t.x+e,t.y+r);return t.cp1&&(n.cp1=point(t.cp1.x+e,t.cp1.y+r)),t.cp2&&(n.cp2=point(t.cp2.x+e,t.cp2.y+r)),n}function scalePoints(o,i){for(var t=arguments.length,e=new Array(2<t?t-2:0),r=2;r<t;r++)e[r-2]=arguments[r];e.forEach(function(t){if(t&&!1!==t.hasOwnProperty("x")){var e=scale(t,i,o),r=e.x,n=e.y;t.x=r,t.y=n,t.cp1&&(t.cp1=scale(t.cp1,i,o)),t.cp2&&(t.cp2=scale(t.cp2,i,o))}})}function rotatePoints(e,t){for(var r=Math.cos(t),n=Math.sin(t),o=arguments.length,i=new Array(2<o?o-2:0),a=2;a<o;a++)i[a-2]=arguments[a];i.forEach(function(t){t&&!1!==t.hasOwnProperty("x")&&(rotateDiff(e,t,n,r),t.cp1&&rotateDiff(e,t.cp1,n,r),t.cp2&&rotateDiff(e,t.cp2,n,r))})}function rotateDiff(t,e,r,n){var o=diff(t,e),i=o.x*n-o.y*r,a=o.x*r+o.y*n;e.x=t.x+i,e.y=t.y+a}function curve_toConsumableArray(t){return function curve_arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function curve_iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function curve_nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function applyToCurve(t,e,r){var n=r.linear,o=r.quadratic,i=r.cubic,a=extractPoint(t),s=extractPoint(e);if(e.cp1&&e.cp2)return i(a,e.cp1,e.cp2,s);var c=e.cp1||e.cp2;return c?o(a,c,s):n(a,s)}function getPointOnLine(t,e,r){return makePoint(function getLinearValue(t,e,r){return t*(r-e)+e}.bind(null,t),e,r)}function splitCurve(t,e,r){return applyToCurve(e,r,{linear:function splitLinear(t,e,r){var n=getPointOnLine(t,e,r);return{left:{p1:e,p2:n},right:{p1:n,p2:r}}}.bind(null,t),quadratic:function splitQuadratic(t,e,r,n){var o=getPointOnLine(t,e,r),i=getPointOnLine(t,r,n),a=getPointOnLine(t,o,i),s={p1:e,p2:a};s.p2.cp1=o;var c={p1:extractPoint(a),p2:n};return c.p2.cp1=i,{left:s,right:c}}.bind(null,t),cubic:function splitBezier(t,e,r,n,o){var i=getPointOnLine(t,e,r),a=getPointOnLine(t,r,n),s=getPointOnLine(t,n,o),c=getPointOnLine(t,i,a),l=getPointOnLine(t,a,s),u=getPointOnLine(t,c,l),p={p1:e,p2:u};p.p2.cp1=i,p.p2.cp2=c;var f={p1:extractPoint(u),p2:o};return f.p2.cp1=l,f.p2.cp2=s,{left:p,right:f}}.bind(null,t)})}function interpolateQuadratic(t,e,r,n){return function solveQuadraticEquation(t,e,r){var n=e*e-4*t*r;return n<0?[]:[(-e+Math.sqrt(n))/(2*t),(-e-Math.sqrt(n))/(2*t)]}(t-2*e+r,2*(e-t),t-n)}function cubeRoot(t){return t<0?-Math.pow(-t,1/3):Math.pow(t,1/3)}function interpolateCubic(t,e,r,n,o){var i=3*(e-=o)-(t-=o)-3*(r-=o)+(n-=o);return function solveCubicEquation(t,e,r){var n=t/3,o=(3*e-t*t)/3/3,i=(2*t*t*t-9*t*e+27*r)/27/2,a=roundToDec(i*i+o*o*o,8);if(0<a){var s=Math.sqrt(a);return[cubeRoot(-i+s)-cubeRoot(i+s)-n]}if(0===a){var c=cubeRoot(-i);return[2*c-n,-c-n]}var l=Math.sqrt(-o*o*o),u=-i/l;u<-1?u=-1:1<u&&(u=1);var p=Math.acos(u),f=2*cubeRoot(l);return[f*Math.cos(p/3)-n,f*Math.cos((p+2*Math.PI)/3)-n,f*Math.cos((p+4*Math.PI)/3)-n]}((3*t-6*e+3*r)/i,(-3*t+3*e)/i,t/i).map(function(t){return roundToDec(t,4)})}function interpolateCurve(r,n,o){var i;if(null===o.x)i="y";else{if(null!==o.y)return[];i="x"}return applyToCurve(r,n,{linear:function linear(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function interpolateLinear(t,e,r){return e===t?[]:[(r-t)/(e-t)]}.apply(void 0,curve_toConsumableArray(e.map(function(t){return t[i]})).concat([o[i]]))},quadratic:function quadratic(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return interpolateQuadratic.apply(void 0,curve_toConsumableArray(e.map(function(t){return t[i]})).concat([o[i]]))},cubic:function cubic(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return interpolateCubic.apply(void 0,curve_toConsumableArray(e.map(function(t){return t[i]})).concat([o[i]]))}}).filter(function(t){return 0<=(t=roundToDec(t,3))&&t<=1}).map(function(t){var e=function getPointOnCurve(n,t,e){return applyToCurve(t,e,{linear:function linear(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return getPointOnLine.apply(void 0,[n].concat(e))},quadratic:function quadratic(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return makePoint.apply(void 0,[function getQuadraticValue(t,e,r,n){return(e+n-2*r)*t*t+2*(r-e)*t+e}.bind(null,n)].concat(e))},cubic:function cubic(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return makePoint.apply(void 0,[function getCubicValue(t,e,r,n,o){return e*(1-t)*(1-t)*(1-t)+3*r*(1-t)*(1-t)*t+3*n*(1-t)*t*t+o*t*t*t}.bind(null,n)].concat(e))}})}(t,r,n);return e.t=t,e})}function simpleQuadratic(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.5,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0;return add(getPointOnLine(r,t,e),getPerpendicularVector(diff(t,e)),n)}function elevateDegree(t,e){var n=[t];for(var r in e)r.startsWith("cp")&&e.hasOwnProperty(r)&&n.push(e[r]);n.push(extractPoint(e));for(var o=extractPoint(e),i=function _loop(t,e){var r=t/e;o["cp"+t]=makePoint(function(t,e){return r*t+(1-r)*e},n[t-1],n[t])},a=1,s=n.length;a<s;++a)i(a,s);return o}function reverseDrawPoint(t,e){return t&&e?{x:t.x,y:t.y,cp1:clone(e.cp2),cp2:clone(e.cp1)}:t}function continueCurve(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return applyToCurve(t,e,{linear:function linear(){return add(e,diff(t,e),r)},quadratic:function quadratic(){return scale(elevateDegree(t,e).cp2,-r,e)},cubic:function cubic(){return scale(e.cp2,-r,e)}})}function drawPoints(t){if(!((arguments.length<=1?0:arguments.length-1)<1)){var e=arguments.length<=1?void 0:arguments[1];e&&(e===i&&(e=arguments.length<=2?void 0:arguments[2]),e&&e.hasOwnProperty("x")&&t.moveTo(e.x,e.y));for(var r=1,n=arguments.length<=1?0:arguments.length-1;r<n;++r){var o=r+1<1||arguments.length<=r+1?void 0:arguments[r+1];o&&(o===i?++r<(arguments.length<=1?0:arguments.length-1)&&(o=r+1<1||arguments.length<=r+1?void 0:arguments[r+1],t.moveTo(o.x,o.y)):o.cp2&&o.cp1?t.bezierCurveTo(o.cp1.x,o.cp1.y,o.cp2.x,o.cp2.y,o.x,o.y,o.traceOptions):o.cp1?t.quadraticCurveTo(o.cp1.x,o.cp1.y,o.x,o.y,o.traceOptions):o.cp2?t.quadraticCurveTo(o.cp2.x,o.cp2.y,o.x,o.y,o.traceOptions):o.hasOwnProperty("x")&&t.lineTo(o.x,o.y))}}}function drawCircle(t,e){var r=.552284749831*e,n={x:t.x,y:t.y+e},o={x:t.x+e,y:t.y},i={x:t.x,y:t.y-e},a={x:t.x-e,y:t.y};return n.cp1={x:a.x,y:a.y+r},n.cp2={x:n.x-r,y:n.y},o.cp1={x:n.x+r,y:n.y},o.cp2={x:o.x,y:o.y+r},i.cp1={x:o.x,y:o.y-r},i.cp2={x:i.x+r,y:i.y},a.cp1={x:i.x-r,y:i.y},a.cp2={x:a.x,y:a.y-r},[n,o,i,a,n]}r.d(e,"b",function(){return i}),r.d(e,"g",function(){return o}),r.d(e,"d",function(){return diff}),r.d(e,"k",function(){return norm}),r.d(e,"o",function(){return scale}),r.d(e,"h",function(){return extractPoint}),r.d(e,"l",function(){return reflect}),r.d(e,"a",function(){return adjust}),r.d(e,"p",function(){return scalePoints}),r.d(e,"n",function(){return rotatePoints}),r.d(e,"r",function(){return splitCurve}),r.d(e,"i",function(){return interpolateCurve}),r.d(e,"q",function(){return simpleQuadratic}),r.d(e,"m",function(){return reverseDrawPoint}),r.d(e,"c",function(){return continueCurve}),r.d(e,"j",function(){return"rgba(0,0,0,0)"}),r.d(e,"f",function(){return drawPoints}),r.d(e,"e",function(){return drawCircle})},function(t,e,r){"use strict";r.d(e,"f",function(){return getLimbPoints}),r.d(e,"g",function(){return getLimbPointsAbovePoint}),r.d(e,"i",function(){return getLimbPointsNegative}),r.d(e,"h",function(){return getLimbPointsBellowPoint}),r.d(e,"d",function(){return findBetween}),r.d(e,"m",function(){return straightenCurve}),r.d(e,"j",function(){return lineLineIntersection}),r.d(e,"e",function(){return getLacingPoints}),r.d(e,"k",function(){return perpendicularPoint}),r.d(e,"a",function(){return cartesian2polar}),r.d(e,"l",function(){return polar2cartesian}),r.d(e,"b",function(){return copyCurve}),r.d(e,"c",function(){return drawStar});var d=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function getLimbPoints(){for(var t,e,r,n,o,i=[],a=[],s=arguments[0],c=arguments[1],l=arguments[2],u=s.y-(s.y-c.y)*l,p=3;p<arguments.length;p++)arguments[p]&&i.push(Object(d.clone)(arguments[p]));if(u>i[0].y)a[0]=i[0];else if(u<i[i.length-1].y)a=i;else for(var f=1;f<i.length;f++){if(u==i[f].y){a=i.splice(0,f+1);break}if(u>i[f].y){var h=(t=i[f-1],e=i[f],r=u,void 0,n=t.y-e.y,o=Math.abs((r-t.y)/n),Object(d.splitCurve)(o,t,e).left.p2);(a=i.splice(0,f))[a.length]=h;break}}return a}function getLimbPointsAbovePoint(){function point_between(t,e,r){var n=Object(d.interpolateCurve)(t,e,{x:null,y:i.y}),o=Object(d.splitCurve)(n[0].t,t,e);return{bottom:o.left.p2,second:o.right.p2}}for(var t=[],e=[],i=arguments[0],r=i.y,n=arguments[1],o=2;o<arguments.length;o++)arguments[o]&&t.push(Object(d.clone)(arguments[o]));if(r>t[0].y)e[0]=t[0];else if(r<t[t.length-1].y)e=t;else for(var a=1;a<t.length;a++){if(r==t[a].y){e=t.splice(0,a+1);break}if(r>t[a].y){var s=void 0;if(n){var c=point_between(t[a],t[a-1]);s=c.bottom,t[a-1]=c.second}else{s=point_between(t[a-1],t[a]).bottom}(e=t.splice(0,a)).push(s);break}}return n&&e.reverse(),e}function getLimbPointsNegative(){for(var t,e,r,n,o,i,a=[],s=[],c=arguments[0],l=arguments[1],u=arguments[2],p=c.y-(c.y-l.y)*u,f=3;f<arguments.length;f++)arguments[f]&&a.push(Object(d.clone)(arguments[f]));if(p>a[0].y)s=a;else if(p<a[a.length-1].y)s[0]=a[a.length-1];else for(var h=a.length-2;0<=h;h--)if(p<a[h].y){var y=(t=a[h],e=a[h+1],r=p,void 0,n=t.y-e.y,o=Math.abs((r-t.y)/n),{top:(i=Object(d.splitCurve)(o,t,e)).left.p2,second:i.right.p2}),b=y.top;a[h+1]=y.second,a.splice(0,h+1),(s=a).unshift(b);break}return s}function getLimbPointsBellowPoint(i,t){function point_between(t,e,r){var n=Object(d.interpolateCurve)(t,e,{x:null,y:i.y}),o=Object(d.splitCurve)(n[0].t,t,e);return n=o.left.p2,{point:o.left.p2,second:o.right.p2}}for(var e=[],r=[],n=i.y,o=2;o<arguments.length;o++)arguments[o]&&e.push(Object(d.clone)(arguments[o]));if(n>e[0].y)r=e;else if(n<e[e.length-1].y)r[0]=e[e.length-1];else for(var a=e.length-2;0<=a;a--)if(n<e[a].y){var s=void 0;t?s=point_between(e[a+1],e[a]):(s=point_between(e[a],e[a+1]),e[a+1]=s.second),e.splice(0,a+1),(r=e).unshift(s.point);break}return t&&r.reverse(),r}function findBetween(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.5;return"object"===_typeof(e)&&void 0!==_typeof(e.x)&&void 0!==_typeof(e.y)&&"object"===_typeof(t)&&void 0!==_typeof(t.x)&&void 0!==_typeof(t.y)?{x:findBetween(t.x,e.x,r),y:findBetween(t.y,e.y,r)}:("object"==_typeof(e)&&console.log("ERROR! The first variable inputed in findBetween() is not a primitive value (ie is object)! "),"object"==_typeof(t)&&console.log("ERROR! The second variable inputed in findBetween() is not a primitive value (ie is object)! "),t+(e-t)*r)}function straightenCurve(t,e,r){var n={x:findBetween(t.x,e.x,.5),y:findBetween(t.y,e.y,.5)};e.cp1&&(e.cp1.x=findBetween(e.cp1.x,n.x,r),e.cp1.y=findBetween(e.cp1.y,n.y,r)),e.cp2&&(e.cp2.x=findBetween(e.cp2.x,n.x,r),e.cp2.y=findBetween(e.cp2.y,n.y,r))}function lineLineIntersection(t,e,r,n){var o=e.y-t.y,i=t.x-e.x,a=o*t.x+i*t.y,s=n.y-r.y,c=r.x-n.x,l=s*r.x+c*r.y,u=o*c-s*i;return 0==u?void console.log("Err - lineLineIntersection - they are paralel"):{x:(c*a-i*l)/u,y:(o*l-s*a)/u}}function getLacingPoints(t,e,r,n,o){var i=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0;o=Math.abs(Math.round(o));for(var a=[],s=[],c=1/++o,l=0;l*c<=1;l++)s[l]=l%2!=0?(a[l]=Object(d.adjust)(Object(d.getPointOnCurve)(c*l,t,e),i,0),Object(d.adjust)(Object(d.getPointOnCurve)(c*l,r,n),-i,0)):(a[l]=Object(d.adjust)(Object(d.getPointOnCurve)(c*l,r,n),-i,0),Object(d.adjust)(Object(d.getPointOnCurve)(c*l,t,e),i,0));return{inner:a,outer:s}}function perpendicularPoint(t,e,r,n){var o=findBetween(t,e,r);return polar2cartesian(n,cartesian2polar(e,t).theta+Math.PI/2,o)}function cartesian2polar(t,e){e||(e={}),e.x||(e.x=0),e.y||(e.y=0);var r=t.x-e.x,n=t.y-e.y;return{r:Math.sqrt(Math.pow(r,2)+Math.pow(n,2)),theta:Math.atan2(n,r)}}function polar2cartesian(t,e,r){return r||(r={}),r.x||(r.x=0),r.y||(r.y=0),{x:t*Math.cos(e)+r.x,y:t*Math.sin(e)+r.y}}function copyCurve(t,e,r,n){var o=cartesian2polar(e,t).r,i=cartesian2polar(n,r).r/o,a=findBetween(e,t),s=findBetween(n,r);if(e.cp1){var c=cartesian2polar(e.cp1,a),l=c.r,u=c.theta;u-=cartesian2polar(e,a).theta,u+=cartesian2polar(n,s).theta,n.cp1=polar2cartesian(l*i,u,s)}if(e.cp2){var p=cartesian2polar(e.cp2,a),f=p.r,h=p.theta;h-=cartesian2polar(e,a).theta,h+=cartesian2polar(n,s).theta,n.cp2=polar2cartesian(f*i,h,s)}}function drawStar(t,e,r,n){for(var o=!(4<arguments.length&&void 0!==arguments[4])||arguments[4],i=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,s=[],c=Math.PI/2*3,l=Math.PI/e,u=o?-1:1,p=0;p<e;p++)s[s.length]={x:t.x+Math.cos(c)*r*u,y:t.y+Math.sin(c)*r*u},c+=l,s[s.length]={x:t.x+Math.cos(c)*n*u,y:t.y+Math.sin(c)*n*u},c+=l;if(s[s.length]={x:t.x,y:t.y-r*u},0<i)s[s.length]=d.breakPoint,s=s.concat(Object(d.drawCircle)({x:t.x,y:t.y},r));else if(i<0){s[s.length]=d.breakPoint;for(var f=0;f<=2*e;)s[s.length]=s[f],f++,f++;s[s.length]=s[0]}if(0<a)s[s.length]=d.breakPoint,s=s.concat(Object(d.drawCircle)({x:t.x,y:t.y},n));else if(a<0){s[s.length]=d.breakPoint;for(f=1;f<=2*e;)s[s.length]=s[f],f++,f++;s[s.length]=s[1]}return s}},function(t,e,r){"use strict";r.r(e);var n=r(0);for(var o in n)"default"!==o&&function(t){r.d(e,t,function(){return n[t]})}(o);var i=r(40);r.d(e,"Materials",function(){return i.a});var a=r(45);r.d(e,"loaded",function(){return a.b}),r.d(e,"load",function(){return a.a});var s=r(11);r.d(e,"extractRGB",function(){return s.f}),r.d(e,"extractHSL",function(){return s.d}),r.d(e,"extractHex",function(){return s.e}),r.d(e,"RGBToHSL",function(){return s.a}),r.d(e,"adjustColor",function(){return s.b}),r.d(e,"randNormal",function(){return s.h}),r.d(e,"initiateRandNormal",function(){return s.g}),r.d(e,"testRandGenerator",function(){return s.j}),r.d(e,"averagePoint",function(){return s.c}),r.d(e,"topologicalSort",function(){return s.k}),r.d(e,"simpleTopologicalSort",function(){return s.i});var c=r(64);r.d(e,"serialize",function(){return c.c}),r.d(e,"deserialize",function(){return c.a}),r.d(e,"loadSerialization",function(){return c.b});var l=r(8);r.d(e,"extractSideLocation",function(){return l.d}),r.d(e,"extractBaseLocation",function(){return l.b}),r.d(e,"extractUnmodifiedLocation",function(){return l.e}),r.d(e,"extractLocationModifier",function(){return l.c}),r.d(e,"Location",function(){return l.a}),r.d(e,"locationIsSideless",function(){return l.g}),r.d(e,"locateRelativeToDrawpoint",function(){return l.f});var u=r(13);r.d(e,"IMAGE_MAXSIZE",function(){return u.a}),r.d(e,"patternLoadingQueue",function(){return u.l}),r.d(e,"listAvailablePatterns",function(){return u.j}),r.d(e,"getPatternFullName",function(){return u.h}),r.d(e,"getPatternBaseName",function(){return u.g}),r.d(e,"getPattern",function(){return u.f}),r.d(e,"getLoadedPattern",function(){return u.e}),r.d(e,"addPattern",function(){return u.c}),r.d(e,"addDebugPattern",function(){return u.b}),r.d(e,"loadPattern",function(){return u.k}),r.d(e,"drawTattooPattern",function(){return u.d}),r.d(e,"isPattern",function(){return u.i});var p=r(9);r.d(e,"incu",function(){return p.f}),r.d(e,"cmcu",function(){return p.b}),r.d(e,"cucm",function(){return p.d}),r.d(e,"convertPointsToCanvasUnits",function(){return p.c}),r.d(e,"setStrokeAndFill",function(){return p.j}),r.d(e,"inheritStroke",function(){return p.h}),r.d(e,"inheritFill",function(){return p.g}),r.d(e,"requirePart",function(){return p.i}),r.d(e,"dist",function(){return p.e}),r.d(e,"averageQuadratic",function(){return p.a});var f=r(2);r.d(e,"Layer",function(){return f.a}),r.d(e,"ShadingLayers",function(){return f.b}),r.d(e,"seamWidth",function(){return f.g}),r.d(e,"getCanvasGroup",function(){return f.d}),r.d(e,"getCanvas",function(){return f.c}),r.d(e,"hideCanvasGroup",function(){return f.f}),r.d(e,"showCanvasGroup",function(){return f.h}),r.d(e,"getCanvasHandle",function(){return f.e});var h=r(30);r.d(e,"getDefault",function(){return h.d}),r.d(e,"applyMods",function(){return h.a}),r.d(e,"removeMods",function(){return h.e}),r.d(e,"getBiasMod",function(){return h.c}),r.d(e,"createTransformation",function(){return h.b}),r.d(e,"transformAndShow",function(){return h.f});var y=r(46);r.d(e,"configureBaseColors",function(){return y.a}),r.d(e,"initCanvas",function(){return y.b});var b=r(12);r.d(e,"draw",function(){return b.c}),r.d(e,"renderBase",function(){return b.g}),r.d(e,"renderParts",function(){return b.h}),r.d(e,"drawPart",function(){return b.e}),r.d(e,"drawPartsLayer",function(){return b.f}),r.d(e,"connectEndPoints",function(){return b.a}),r.d(e,"coverNipplesIfHaveNoBreasts",function(){return b.b}),r.d(e,"drawFocusedWindow",function(){return b.d});var d=r(44);r.d(e,"styles",function(){return d.a});var g=r(24);r.d(e,"DecorativePart",function(){return g.a});var P=r(81);r.d(e,"Mustache",function(){return P.a});var v=r(82);r.d(e,"LegFur",function(){return v.a});var _=r(83);r.d(e,"BeautyMark",function(){return _.a});var C=r(36);r.d(e,"BellyButtonOutline",function(){return C.b}),r.d(e,"DeltoidsOutline",function(){return C.d}),r.d(e,"CollarboneOutline",function(){return C.c}),r.d(e,"PectoralOutline",function(){return C.e}),r.d(e,"AbdominalOutline",function(){return C.a}),r.d(e,"QuadricepsOutline",function(){return C.f});var O=r(84);r.d(e,"StraightHorns",function(){return O.b}),r.d(e,"CurvedHorns",function(){return O.a});var k=r(85);r.d(e,"DemonicTail",function(){return k.b}),r.d(e,"CatTail",function(){return k.a});var m=r(86);r.d(e,"DemonicWings",function(){return m.a});var w=r(54);r.d(e,"EarsHuman",function(){return w.d}),r.d(e,"EarsElf",function(){return w.b}),r.d(e,"EarsElf2",function(){return w.c}),r.d(e,"CatEars",function(){return w.a});var j=r(60);r.d(e,"BrowHuman",function(){return j.a});var S=r(59);r.d(e,"EyelashHuman",function(){return S.a});var x=r(58);r.d(e,"EyelidHuman",function(){return x.a});var T=r(55);r.d(e,"EyesHuman",function(){return T.a});var A=r(19);r.d(e,"FacePart",function(){return A.a});var R=r(57);r.d(e,"IrisHuman",function(){return R.a});var L=r(74);r.d(e,"LipsHuman",function(){return L.a});var B=r(73);r.d(e,"MouthHuman",function(){return B.a});var E=r(75);r.d(e,"NoseHuman",function(){return E.a});var H=r(56);r.d(e,"PupilHuman",function(){return H.b}),r.d(e,"PupilCat",function(){return H.a});var F=r(87);r.d(e,"Player",function(){return F.a});var I=r(32);r.d(e,"baseDimDesc",function(){return I.a}),r.d(e,"basedimDiscretePool",function(){return I.b}),r.d(e,"extendDimensionCalc",function(){return I.c}),r.d(e,"loadDimensionDescriptions",function(){return I.d});var M=r(76);r.d(e,"Expression",function(){return M.a});var D=r(37);r.d(e,"modLimits",function(){return D.c}),r.d(e,"modDiscretePool",function(){return D.b}),r.d(e,"loadMods",function(){return D.a});var G=r(27);r.d(e,"statLimits",function(){return G.b}),r.d(e,"statDiscretePool",function(){return G.a});var N=r(3);r.d(e,"BodyPart",function(){return N.a}),r.d(e,"Part",function(){return N.b}),r.d(e,"getSideLocation",function(){return N.e}),r.d(e,"partConflict",function(){return N.g}),r.d(e,"getChildLocation",function(){return N.d}),r.d(e,"getSideValue",function(){return N.f}),r.d(e,"getAttachedLocation",function(){return N.c});var W=r(49);r.d(e,"ArmHuman",function(){return W.a});var z=r(72);r.d(e,"ButtHuman",function(){return z.a});var q=r(52);r.d(e,"ChestHuman",function(){return q.a}),r.d(e,"NipplesHuman",function(){return q.b});var Q=r(53);r.d(e,"FeetHuman",function(){return Q.a}),r.d(e,"HoofHorse",function(){return Q.b});var V=r(71);r.d(e,"GroinHuman",function(){return V.a});var Y=r(50);r.d(e,"HandHuman",function(){return Y.a});var U=r(68);r.d(e,"HeadHuman",function(){return U.a});var X=r(51);r.d(e,"LegHuman",function(){return X.a});var J=r(69);r.d(e,"NeckHuman",function(){return J.a});var K=r(48);r.d(e,"PenisHuman",function(){return K.b}),r.d(e,"PenisHeadHuman",function(){return K.a});var $=r(66);r.d(e,"TesticlesHuman",function(){return $.a});var Z=r(70);r.d(e,"TorsoHuman",function(){return Z.a});var tt=r(67);r.d(e,"VaginaHuman",function(){return tt.a});var et=r(1);r.d(e,"Clothing",function(){return et.b}),r.d(e,"processClothingPartLocation",function(){return et.d}),r.d(e,"Clothes",function(){return et.a}),r.d(e,"ClothingPart",function(){return et.c});var rt=r(88);r.d(e,"calcDressShirt",function(){return rt.i}),r.d(e,"DressShirtBasePart",function(){return rt.b}),r.d(e,"DressShirtCollarPart",function(){return rt.e}),r.d(e,"DressShirtButtonPart",function(){return rt.d}),r.d(e,"DressShirtBreastPart",function(){return rt.c}),r.d(e,"LongSleeveCuffPart",function(){return rt.f}),r.d(e,"DressShirt",function(){return rt.a}),r.d(e,"WomenDressShirt",function(){return rt.h}),r.d(e,"MenDressShirt",function(){return rt.g});var nt=r(15);r.d(e,"HeelPart",function(){return nt.h}),r.d(e,"HeelBaseShine",function(){return nt.g}),r.d(e,"HeelBasePart",function(){return nt.f}),r.d(e,"CoveredHeelBasePart",function(){return nt.d}),r.d(e,"HeelStrapPart",function(){return nt.l}),r.d(e,"calcHeels",function(){return nt.v}),r.d(e,"HeelSideBaseClosedPart",function(){return nt.i}),r.d(e,"CoveredHeelSideBasePart",function(){return nt.e}),r.d(e,"calcCoveredHeelBaseSide",function(){return nt.s}),r.d(e,"StilettoPart",function(){return nt.p}),r.d(e,"PlatformSidePart",function(){return nt.o}),r.d(e,"HeelSideSimpleStrapPart",function(){return nt.j}),r.d(e,"HeelSideWideStrapPart",function(){return nt.k}),r.d(e,"calcWideStrapSide",function(){return nt.x}),r.d(e,"calcHeelBaseSide",function(){return nt.t}),r.d(e,"calcHeelPlatformSide",function(){return nt.u}),r.d(e,"calcStiletto",function(){return nt.w}),r.d(e,"StrapLockSidePart",function(){return nt.r}),r.d(e,"StrapLockPart",function(){return nt.q}),r.d(e,"Heels",function(){return nt.m}),r.d(e,"ClosedToePumps",function(){return nt.a}),r.d(e,"ClosedToeStrappedPumps",function(){return nt.b}),r.d(e,"CoveredFancyStilettos",function(){return nt.c}),r.d(e,"LockedCoveredFancyStilettos",function(){return nt.n});var ot=r(61);r.d(e,"CapBasePart",function(){return ot.c}),r.d(e,"CapBandPart",function(){return ot.b}),r.d(e,"calcCap",function(){return ot.f}),r.d(e,"Hat",function(){return ot.d}),r.d(e,"SimpleCap",function(){return ot.e}),r.d(e,"BandedCap",function(){return ot.a});var it=r(77);r.d(e,"JacketBaseShading",function(){return it.c}),r.d(e,"JacketBasePart",function(){return it.b}),r.d(e,"calcJacket",function(){return it.f}),r.d(e,"MediumLooseSleevePart",function(){return it.e}),r.d(e,"Jacket",function(){return it.a}),r.d(e,"LooseJacket",function(){return it.d});var at=r(38);r.d(e,"NecktiePart",function(){return at.c}),r.d(e,"NeckAccessory",function(){return at.a}),r.d(e,"NeckTie",function(){return at.b});var st=r(26);r.d(e,"CoveredButtPart",function(){return st.a}),r.d(e,"LongPantsPart",function(){return st.b}),r.d(e,"MediumPantsPart",function(){return st.d}),r.d(e,"ShortPantsPart",function(){return st.g}),r.d(e,"ShortsPart",function(){return st.i}),r.d(e,"Pants",function(){return st.f}),r.d(e,"LongTightPants",function(){return st.c}),r.d(e,"MediumTightPants",function(){return st.e}),r.d(e,"ShortTightPants",function(){return st.h}),r.d(e,"TightShorts",function(){return st.j});var ct=r(28);r.d(e,"LeftBaseShoeShading",function(){return ct.b}),r.d(e,"RightBaseShoeShading",function(){return ct.c}),r.d(e,"ShoeSidePart",function(){return ct.g}),r.d(e,"ShoePart",function(){return ct.f}),r.d(e,"ShoeBasePart",function(){return ct.e}),r.d(e,"Shoe",function(){return ct.d}),r.d(e,"FlatShoes",function(){return ct.a});var lt=r(25);r.d(e,"SockPart",function(){return lt.h}),r.d(e,"ShortSockPart",function(){return lt.e}),r.d(e,"MediumSockPart",function(){return lt.c}),r.d(e,"LongSockPart",function(){return lt.a}),r.d(e,"ThighHighPart",function(){return lt.j}),r.d(e,"ThighHighBandPart",function(){return lt.i}),r.d(e,"Sock",function(){return lt.g}),r.d(e,"ShortSocks",function(){return lt.f}),r.d(e,"MediumSocks",function(){return lt.d}),r.d(e,"LongSocks",function(){return lt.b}),r.d(e,"ThighHighs",function(){return lt.k});var ut=r(39);r.d(e,"SweaterBasePart",function(){return ut.g}),r.d(e,"calcSweaterBase",function(){return ut.i}),r.d(e,"CoveredBreastPart",function(){return ut.b}),r.d(e,"LongSleevePart",function(){return ut.c}),r.d(e,"calcLongSleeve",function(){return ut.h}),r.d(e,"ShortSleevePart",function(){return ut.e}),r.d(e,"Sweater",function(){return ut.f}),r.d(e,"LongSleevedSweater",function(){return ut.d}),r.d(e,"AsymmetricSleevedSweater",function(){return ut.a});var pt=r(17);r.d(e,"BraTopStrapPart",function(){return pt.d}),r.d(e,"BraBotStrapPart",function(){return pt.b}),r.d(e,"BraPart",function(){return pt.c}),r.d(e,"calcBra",function(){return pt.j}),r.d(e,"BreastWrapStrapPart",function(){return pt.f}),r.d(e,"PantiesPart",function(){return pt.h}),r.d(e,"Underwear",function(){return pt.i}),r.d(e,"Bra",function(){return pt.a}),r.d(e,"BreastWrap",function(){return pt.e}),r.d(e,"Panties",function(){return pt.g});var ft=r(20);r.d(e,"RingBotPart",function(){return ft.e}),r.d(e,"RingTopPart",function(){return ft.g}),r.d(e,"StudPart",function(){return ft.h}),r.d(e,"ChainPart",function(){return ft.b}),r.d(e,"Jewelry",function(){return ft.c}),r.d(e,"Piercing",function(){return ft.d}),r.d(e,"RingPiercing",function(){return ft.f}),r.d(e,"StudPiercing",function(){return ft.i}),r.d(e,"ChainJewelry",function(){return ft.a});var ht=r(89);r.d(e,"BellyPiercingSimplePart",function(){return ht.d}),r.d(e,"BellyPiercingAdvancedPart",function(){return ht.b}),r.d(e,"NipplePiercingPart",function(){return ht.h}),r.d(e,"StudPart2",function(){return ht.j}),r.d(e,"TonguePart",function(){return ht.r}),r.d(e,"StudPart3",function(){return ht.k}),r.d(e,"BridgePart",function(){return ht.g}),r.d(e,"NipplePiercings",function(){return ht.i}),r.d(e,"BellyPiercingSimple",function(){return ht.c}),r.d(e,"BellyPiercingAdvanced",function(){return ht.a}),r.d(e,"StudPiercing2",function(){return ht.l}),r.d(e,"StudPiercing3",function(){return ht.m}),r.d(e,"StudPiercing4",function(){return ht.n}),r.d(e,"StudPiercing6",function(){return ht.p}),r.d(e,"StudPiercing5",function(){return ht.o}),r.d(e,"StudPiercing7",function(){return ht.q}),r.d(e,"TonguePiercing",function(){return ht.s}),r.d(e,"Bridge",function(){return ht.e}),r.d(e,"Bridge2",function(){return ht.f});var yt=r(29);r.d(e,"calcSuperBra",function(){return yt.l}),r.d(e,"calcSuperBraStrap",function(){return yt.m}),r.d(e,"SuperBraGenitalPart",function(){return yt.f}),r.d(e,"SuperBraChestPart",function(){return yt.e}),r.d(e,"calcPanties",function(){return yt.j}),r.d(e,"calcPanties2",function(){return yt.k}),r.d(e,"SuperPantiesPart",function(){return yt.i}),r.d(e,"ChastityBeltPart",function(){return yt.c}),r.d(e,"SuperPanties2Part",function(){return yt.h}),r.d(e,"SuperBra",function(){return yt.d}),r.d(e,"SuperPanties",function(){return yt.g}),r.d(e,"BikiniBottom",function(){return yt.a}),r.d(e,"ChastityBelt",function(){return yt.b});var bt=r(33);r.d(e,"calcSuperPantsTop",function(){return bt.o}),r.d(e,"calcSuperPants",function(){return bt.m}),r.d(e,"calcSuperPantsZip",function(){return bt.p}),r.d(e,"calcSuperPants2",function(){return bt.n}),r.d(e,"SuperPantsPart",function(){return bt.j}),r.d(e,"SuperLegginsPart",function(){return bt.h}),r.d(e,"SuperSkirtPart",function(){return bt.l}),r.d(e,"LacedLegginsPart",function(){return bt.d}),r.d(e,"JeansPart",function(){return bt.b}),r.d(e,"LoinclothPart",function(){return bt.f}),r.d(e,"SuperPants",function(){return bt.i}),r.d(e,"SuperLeggins",function(){return bt.g}),r.d(e,"SuperSkirt",function(){return bt.k}),r.d(e,"LacedLeggins",function(){return bt.c}),r.d(e,"Jeans",function(){return bt.a}),r.d(e,"Loincloth",function(){return bt.e});var dt=r(34);r.d(e,"calcSuperSocks",function(){return dt.i}),r.d(e,"Garter",function(){return dt.a}),r.d(e,"SuperSockBandPart",function(){return dt.f}),r.d(e,"SuperSockPart",function(){return dt.g}),r.d(e,"PantyhosePart",function(){return dt.c}),r.d(e,"SuperSocks",function(){return dt.h}),r.d(e,"Stockings",function(){return dt.d}),r.d(e,"StockingsGarter",function(){return dt.e}),r.d(e,"Pantyhose",function(){return dt.b});var gt=r(90);r.d(e,"MagicHatFrontPart",function(){return gt.c}),r.d(e,"MagicHatBackPart",function(){return gt.b}),r.d(e,"calcMagicHat",function(){return gt.f}),r.d(e,"MaidHeadpiecePart",function(){return gt.e}),r.d(e,"MagicHat",function(){return gt.a}),r.d(e,"MaidHeadpiece",function(){return gt.d});var Pt=r(18);r.d(e,"DressBreastPart",function(){return Pt.d}),r.d(e,"DressBasePart",function(){return Pt.c}),r.d(e,"calcDressCleavage",function(){return Pt.i}),r.d(e,"calcDressBase",function(){return Pt.h}),r.d(e,"DetachedSleevePart",function(){return Pt.a}),r.d(e,"SuperSleevePart",function(){return Pt.g}),r.d(e,"calcSuperSleeve",function(){return Pt.j}),r.d(e,"LacingPart",function(){return Pt.e}),r.d(e,"Dress",function(){return Pt.b}),r.d(e,"SuperDress",function(){return Pt.f});var vt=r(16);r.d(e,"calcTee",function(){return vt.p}),r.d(e,"TeePart",function(){return vt.i}),r.d(e,"LeotardPart",function(){return vt.f}),r.d(e,"HalterTopBreastPart",function(){return vt.d}),r.d(e,"TubeTopBreastPart",function(){return vt.n}),r.d(e,"TopChestPart",function(){return vt.k}),r.d(e,"TopGroinPart",function(){return vt.l}),r.d(e,"calcTopBody",function(){return vt.q}),r.d(e,"BikiniTopBreastPart",function(){return vt.b}),r.d(e,"Top",function(){return vt.j}),r.d(e,"Tee",function(){return vt.h}),r.d(e,"Leotard",function(){return vt.e}),r.d(e,"HalterTop",function(){return vt.c}),r.d(e,"TubeTop",function(){return vt.m}),r.d(e,"TubeTopSleeves",function(){return vt.o}),r.d(e,"BikiniTop",function(){return vt.a}),r.d(e,"Swimsuit",function(){return vt.g});var _t=r(78);r.d(e,"CorsetBreastPart",function(){return _t.b}),r.d(e,"calcCorset",function(){return _t.f}),r.d(e,"CorsetPart",function(){return _t.c}),r.d(e,"HalfCorsetPart",function(){return _t.e}),r.d(e,"Corset",function(){return _t.a}),r.d(e,"HalfCorset",function(){return _t.d});var Ct=r(23);r.d(e,"calcGlove",function(){return Ct.l}),r.d(e,"GloveSleevePart",function(){return Ct.j}),r.d(e,"GlovePart",function(){return Ct.h}),r.d(e,"FingerlessGlovePart",function(){return Ct.e}),r.d(e,"BraceletPart",function(){return Ct.c}),r.d(e,"Glove",function(){return Ct.g}),r.d(e,"GloveSleeve",function(){return Ct.i}),r.d(e,"LongGloves",function(){return Ct.k}),r.d(e,"FingerlessGloves",function(){return Ct.f}),r.d(e,"Bracelet",function(){return Ct.a}),r.d(e,"BraceletLeft",function(){return Ct.b}),r.d(e,"BraceletRight",function(){return Ct.d});var Ot=r(91);r.d(e,"ChokerPart",function(){return Ot.c}),r.d(e,"NeckCorsetPart",function(){return Ot.h}),r.d(e,"CollarPart",function(){return Ot.e}),r.d(e,"TagPart",function(){return Ot.i}),r.d(e,"ChokerCrossPart",function(){return Ot.b}),r.d(e,"Choker",function(){return Ot.a}),r.d(e,"NeckCorset",function(){return Ot.g}),r.d(e,"Collar",function(){return Ot.d}),r.d(e,"TaggedCollar",function(){return Ot.j}),r.d(e,"CrossedChoker",function(){return Ot.f});var kt=r(63);r.d(e,"BiChainPart",function(){return kt.b}),r.d(e,"TearPart",function(){return kt.o}),r.d(e,"DoubleNecklacePart",function(){return kt.d}),r.d(e,"MultiNecklacePart",function(){return kt.f}),r.d(e,"StarPart",function(){return kt.k}),r.d(e,"TNecklacePart",function(){return kt.m}),r.d(e,"Necklace",function(){return kt.g}),r.d(e,"BiChain",function(){return kt.a}),r.d(e,"DoubleNecklace",function(){return kt.c}),r.d(e,"MultiNecklace",function(){return kt.e}),r.d(e,"PearlNecklace",function(){return kt.h}),r.d(e,"SimpleChain",function(){return kt.i}),r.d(e,"StarNecklace",function(){return kt.j}),r.d(e,"TNecklace",function(){return kt.l}),r.d(e,"TearNecklace",function(){return kt.n}),r.d(e,"ThickChain",function(){return kt.p});var mt=r(92);r.d(e,"Earrings",function(){return mt.e}),r.d(e,"TriangleEarrings",function(){return mt.h}),r.d(e,"CrystalEarrings",function(){return mt.c}),r.d(e,"LoopEarrings",function(){return mt.f}),r.d(e,"ChainEarrings",function(){return mt.b}),r.d(e,"BallEarrings",function(){return mt.a}),r.d(e,"RhombEarrings",function(){return mt.g}),r.d(e,"EarPiercing",function(){return mt.d});var wt=r(93);r.d(e,"Bodychain",function(){return wt.a}),r.d(e,"Bodychain1",function(){return wt.b}),r.d(e,"Bodychain2",function(){return wt.c}),r.d(e,"Bodychain3",function(){return wt.d});var jt=r(94);r.d(e,"Armlet",function(){return jt.a}),r.d(e,"SpiralArmlet",function(){return jt.d}),r.d(e,"SimpleArmlet",function(){return jt.c}),r.d(e,"CrossedArmlet",function(){return jt.b});var St=r(22);r.d(e,"FaceAccessoryPart",function(){return St.g}),r.d(e,"GagStrapPart",function(){return St.i}),r.d(e,"TopTriangularStrap",function(){return St.s}),r.d(e,"RingGagPart",function(){return St.n}),r.d(e,"BallGagPart",function(){return St.d}),r.d(e,"BlindFoldPart",function(){return St.f}),r.d(e,"GlassesPart",function(){return St.k}),r.d(e,"SimpleBeltPart",function(){return St.q}),r.d(e,"calcBelt",function(){return St.t}),r.d(e,"ApronPart",function(){return St.c}),r.d(e,"Accessory",function(){return St.a}),r.d(e,"Glasses",function(){return St.j}),r.d(e,"Gag",function(){return St.h}),r.d(e,"SimpleRingGag",function(){return St.r}),r.d(e,"SimpleBallGag",function(){return St.o}),r.d(e,"MediumRingGag",function(){return St.m}),r.d(e,"MediumBallGag",function(){return St.l}),r.d(e,"BlindFold",function(){return St.e}),r.d(e,"SimpleBelt",function(){return St.p}),r.d(e,"Apron",function(){return St.b});var xt=r(41);r.d(e,"MascaraPart",function(){return xt.c}),r.d(e,"Makeup",function(){return xt.a}),r.d(e,"Mascara",function(){return xt.b});var Tt=r(95);r.d(e,"RestraintChainPart",function(){return Tt.i}),r.d(e,"BondageRopePart",function(){return Tt.d}),r.d(e,"ChestBondagePart",function(){return Tt.f}),r.d(e,"WaistBondagePart",function(){return Tt.l}),r.d(e,"ChestPentagramBondagePart",function(){return Tt.h}),r.d(e,"WristRestraintChainPart",function(){return Tt.m}),r.d(e,"AnkleRestraintChainPart",function(){return Tt.a}),r.d(e,"Restraints",function(){return Tt.j}),r.d(e,"Bondage",function(){return Tt.c}),r.d(e,"WristRestraints",function(){return Tt.n}),r.d(e,"AnkleRestraints",function(){return Tt.b}),r.d(e,"ChestBondage",function(){return Tt.e}),r.d(e,"ChestPentagramBondage",function(){return Tt.g}),r.d(e,"WaistBondage",function(){return Tt.k});var At=r(96);r.d(e,"AnkletPart",function(){return At.b}),r.d(e,"ChainAnkletPart",function(){return At.f}),r.d(e,"BandedAnkletPart",function(){return At.d}),r.d(e,"Anklet",function(){return At.a}),r.d(e,"ChainAnklet",function(){return At.e}),r.d(e,"BandedAnklet",function(){return At.c});var Rt=r(97);r.d(e,"LipstickPart",function(){return Rt.b}),r.d(e,"Lipstick",function(){return Rt.a});var Lt=r(21);r.d(e,"CuirassPart",function(){return Lt.d}),r.d(e,"CuirassBreastPart",function(){return Lt.c}),r.d(e,"GreavePart",function(){return Lt.e}),r.d(e,"VambracePart",function(){return Lt.g}),r.d(e,"Armor",function(){return Lt.a}),r.d(e,"Cuirass",function(){return Lt.b}),r.d(e,"Greaves",function(){return Lt.f}),r.d(e,"Vambraces",function(){return Lt.h});var Bt=r(79);r.d(e,"ThumbPart",function(){return Bt.d}),r.d(e,"FingerPart",function(){return Bt.b}),r.d(e,"BodyMakeup",function(){return Bt.a}),r.d(e,"Nails",function(){return Bt.c});var Et=r(47);r.d(e,"BraFurOutline",function(){return Et.b}),r.d(e,"FallenTopOrig",function(){return Et.h}),r.d(e,"calcFallenTop",function(){return Et.o}),r.d(e,"FallenTop",function(){return Et.g}),r.d(e,"GorgetPart",function(){return Et.j}),r.d(e,"calcGorget",function(){return Et.p}),r.d(e,"BarbaricBra",function(){return Et.a}),r.d(e,"Gorget",function(){return Et.i}),r.d(e,"Fallen",function(){return Et.e}),r.d(e,"FallenOrig",function(){return Et.f}),r.d(e,"CingulumPart",function(){return Et.d}),r.d(e,"GreaveLeft",function(){return Et.k}),r.d(e,"GreaveRight",function(){return Et.l}),r.d(e,"Cingulum",function(){return Et.c}),r.d(e,"VambraceLeft",function(){return Et.m}),r.d(e,"VambraceRight",function(){return Et.n});var Ht=r(98);r.d(e,"wVambracePart",function(){return Ht.t}),r.d(e,"wGreavePart",function(){return Ht.n}),r.d(e,"wLoinclothPart",function(){return Ht.r}),r.d(e,"wFallenTop",function(){return Ht.j}),r.d(e,"wGorgetPart",function(){return Ht.l}),r.d(e,"wLoincloth",function(){return Ht.q}),r.d(e,"wBarbaricBra",function(){return Ht.a}),r.d(e,"wGorget",function(){return Ht.k}),r.d(e,"wFallen",function(){return Ht.i}),r.d(e,"wBikiniTopBreastPart",function(){return Ht.c}),r.d(e,"wCuirassPart",function(){return Ht.h}),r.d(e,"wCuirassBreastPart",function(){return Ht.g}),r.d(e,"wCingulumPart",function(){return Ht.e}),r.d(e,"wGreaveLeft",function(){return Ht.m}),r.d(e,"wGreaveRight",function(){return Ht.o}),r.d(e,"wGreaves",function(){return Ht.p}),r.d(e,"wBikiniTop",function(){return Ht.b}),r.d(e,"wCuirass",function(){return Ht.f}),r.d(e,"wCingulum",function(){return Ht.d}),r.d(e,"wVambraces",function(){return Ht.v}),r.d(e,"wVambraceLeft",function(){return Ht.s}),r.d(e,"wVambraceRight",function(){return Ht.u});var Ft=r(99);r.d(e,"wThumbPart",function(){return Ft.c}),r.d(e,"wFingerPart",function(){return Ft.a}),r.d(e,"wNails",function(){return Ft.b});var It=r(100);r.d(e,"wGloveSleevePart",function(){return It.g}),r.d(e,"wGlovePart",function(){return It.e}),r.d(e,"wBraceletPart",function(){return It.c}),r.d(e,"wGloveSleeve",function(){return It.f}),r.d(e,"wLongGloves",function(){return It.h}),r.d(e,"wBracelet",function(){return It.a}),r.d(e,"wBraceletLeft",function(){return It.b}),r.d(e,"wBraceletRight",function(){return It.d});var Mt=r(101);r.d(e,"wCorsetBreastPart",function(){return Mt.b}),r.d(e,"wCorsetPart",function(){return Mt.c}),r.d(e,"wHalfCorsetPart",function(){return Mt.e}),r.d(e,"wCorset",function(){return Mt.a}),r.d(e,"wHalfCorset",function(){return Mt.d});var Dt=r(102);r.d(e,"wHighSneakersPart",function(){return Dt.o}),r.d(e,"SneakersPart",function(){return Dt.f}),r.d(e,"wSimpleSneakersPart",function(){return Dt.s}),r.d(e,"wSimpleShoesPart",function(){return Dt.q}),r.d(e,"wHighSneakers",function(){return Dt.n}),r.d(e,"wSimpleSneakers",function(){return Dt.r}),r.d(e,"wSimpleShoes",function(){return Dt.p}),r.d(e,"wwSneakers",function(){return Dt.t}),r.d(e,"GaiterPart",function(){return Dt.a}),r.d(e,"SandalRightPart",function(){return Dt.d}),r.d(e,"SandalLeftPart",function(){return Dt.b}),r.d(e,"SandalPart",function(){return Dt.c}),r.d(e,"Sandals",function(){return Dt.e}),r.d(e,"wHeelStrapPart",function(){return Dt.m}),r.d(e,"wClosedToeStrappedPumps",function(){return Dt.h}),r.d(e,"wHeelBasePart",function(){return Dt.l}),r.d(e,"wClosedToePumps",function(){return Dt.g}),r.d(e,"wDoubledSneakersPart",function(){return Dt.k}),r.d(e,"wDoubleHeelPart",function(){return Dt.i}),r.d(e,"wDoubleShoes",function(){return Dt.j});var Gt=r(31);r.d(e,"wDetachedSleevePart",function(){return Gt.a}),r.d(e,"wSuperSleevePart",function(){return Gt.e}),r.d(e,"wDressBreastPart",function(){return Gt.c}),r.d(e,"wDressBasePart",function(){return Gt.b}),r.d(e,"wSuperDress",function(){return Gt.d});var Nt=r(103);r.d(e,"wSuperSockPart",function(){return Nt.e}),r.d(e,"wSuperSocks",function(){return Nt.f}),r.d(e,"wStockings",function(){return Nt.c}),r.d(e,"wStockingsGarter",function(){return Nt.d}),r.d(e,"wPantyhosePart",function(){return Nt.b}),r.d(e,"wPantyhose",function(){return Nt.a});var Wt=r(104);r.d(e,"wLacedSuperLegginsPart",function(){return Wt.b}),r.d(e,"wLacedLeggins",function(){return Wt.a}),r.d(e,"wSuperSkirtPart",function(){return Wt.h}),r.d(e,"wSuperSkirtAbovePart",function(){return Wt.g}),r.d(e,"wSuperLegginsPart",function(){return Wt.d}),r.d(e,"wSuperLeggins",function(){return Wt.c}),r.d(e,"wSuperSkirt",function(){return Wt.e}),r.d(e,"wSuperSkirtAbove",function(){return Wt.f});var zt=r(105);r.d(e,"wTeePart",function(){return zt.d}),r.d(e,"wHalterTopBreastPart",function(){return zt.b}),r.d(e,"wTubeTopBreastPart",function(){return zt.g}),r.d(e,"wTopChestPart",function(){return zt.e}),r.d(e,"wTee",function(){return zt.c}),r.d(e,"wHalterTop",function(){return zt.a}),r.d(e,"wTubeTop",function(){return zt.f});var qt=r(62);r.d(e,"wSuperBraGenitalPart",function(){return qt.f}),r.d(e,"wSuperBraChestPart",function(){return qt.e}),r.d(e,"wSuperPantiesPart",function(){return qt.i}),r.d(e,"wSuperBra",function(){return qt.d}),r.d(e,"wSuperPanties",function(){return qt.g}),r.d(e,"wSuperPanties2Part",function(){return qt.h}),r.d(e,"wBikiniBottom",function(){return qt.b}),r.d(e,"LoaderPart",function(){return qt.a}),r.d(e,"wLoader",function(){return qt.c});var Qt=r(106);r.d(e,"wSimpleBeltPart",function(){return Qt.d}),r.d(e,"wGlassesPart",function(){return Qt.b}),r.d(e,"wGlasses",function(){return Qt.a}),r.d(e,"wSimpleBelt",function(){return Qt.c});var Vt=r(107);r.d(e,"wLipstickPart",function(){return Vt.b}),r.d(e,"wMascaraPart",function(){return Vt.d}),r.d(e,"wLipstick",function(){return Vt.a}),r.d(e,"wMascara",function(){return Vt.c});var Yt=r(42);r.d(e,"Item",function(){return Yt.a}),r.d(e,"Items",function(){return Yt.b});var Ut=r(43);r.d(e,"Tattoo",function(){return Ut.a}),r.d(e,"Tattoos",function(){return Ut.b});var Xt=r(65);r.d(e,"loadDefaultParts",function(){return Xt.a})},function(t,e,r){"use strict";r.d(e,"c",function(){return wwbb_ftw}),r.d(e,"d",function(){return wwbb_ftw_d}),r.d(e,"b",function(){return wCoverNipples}),r.d(e,"a",function(){return n});var i=r(1),o=(r(3),r(12),r(2)),l=(r(9),r(4));r(5),r(18);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function wwbb_ftw(t,e,r,n,o){if(void 0===n&&(n=r),e.strokeStyle="hsla("+this.hue+","+(this.satur-10)+"%,"+(this.light-10)+"%,1)",e.fillStyle="hsla("+this.hue+","+this.satur+"%,"+this.light+"%,"+this.alpha+")",o&&o.fillWithStroke&&(e.fillStyle=e.strokeStyle),o&&o.fillWithHighlightedFill&&(e.fillStyle="hsla("+this.hue+","+(this.satur-15)+"%,"+(this.light-22)+"%,1)"),o&&o.fillWithHighlight&&(e.fillStyle=this.highlight),o&&o.strokeWithHighlight&&(e.strokeStyle=this.highlight),!(1<=this.invisible)){if(void 0===this.pat&&(this.pat="fishnet"),void 0===this.pat_size&&(this.pat_size=75),1<=this.fishness||this.pat_show)e.fillStyle=da.getPattern(this.pat,this.pat_size),e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(r))),e.fill();else if(0<this.fishness){0<this.invisible&&(e.globalAlpha=1-this.invisible);var i=e.fillStyle;e.fillStyle=da.getPattern(this.pat,this.pat_size),e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(r))),e.fill(),e.fillStyle=i,e.globalAlpha=1-this.fishness,0<this.invisible&&(e.globalAlpha=e.globalAlpha-this.invisible),e.globalAlpha<0&&(e.globalAlpha=0),e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(r))),e.fill(),e.globalAlpha=1}else 0<this.invisible&&(e.globalAlpha=1-this.invisible),e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(r))),e.fill();.5<this.fishness&&(e.strokeStyle="black");var a=this.thickness-this.fishness;a<=0&&(a=.1),e.lineWidth=a,o&&o.lineWidth&&(e.lineWidth=o.lineWidth),0<this.invisible&&(e.globalAlpha=1-this.invisible),e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(n))),e.stroke()}}function wwbb_ftw_d(t,e,r,n,o,i){if(void 0===o&&(o=n),e.strokeStyle="hsla("+this.hue+","+(this.satur-10)+"%,"+(this.light-10)+"%,1)",e.fillStyle="hsla("+this.hue+","+this.satur+"%,"+this.light+"%,"+this.alpha+")",i&&i.fillWithStroke&&(e.fillStyle=e.strokeStyle),i&&i.fillWithHighlightedFill&&(e.fillStyle="hsla("+this.hue+","+(this.satur-15)+"%,"+(this.light-22)+"%,1)"),i&&i.fillWithHighlight&&(e.fillStyle=this.highlight),i&&i.strokeWithHighlight&&(e.strokeStyle=this.highlight),!(1<=this.invisible)){if(void 0===this.pat&&(this.pat="fishnet"),void 0===this.pat_size&&(this.pat_size=75),0<r){0<this.invisible&&(e.globalAlpha=1-this.invisible);var a=1-r;0<this.invisible&&(a=e.globalAlpha-this.invisible),e.globalAlpha=a<0?0:1<a?1:a,e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(n))),e.fill(),e.globalAlpha=1}else 0<this.invisible&&(e.globalAlpha=1-this.invisible),e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(n))),e.fill();if(1<this.invisible||1<r);else{var s=this.thickness;if(s<=0&&(s=.1),e.lineWidth=s,i&&i.lineWidth&&(e.lineWidth=i.lineWidth),0<this.invisible||0<r){var c=1-r;this.invisible&&(c-=this.invisible),e.globalAlpha=c<0?0:1<c?1:c}e.beginPath(),l.f.apply(void 0,[e].concat(_toConsumableArray(o))),e.stroke()}}}function wCoverNipples(t,e,r){return!1===t.hasOwnProperty("breast")&&(0<r.fishness||(e.lineWidth=5,e.strokeStyle="hsla("+r.hue+","+r.satur+"%,"+r.light+"%,"+r.alpha+")",e.beginPath(),Object(l.f)(e,l.b,t.chest.nipples),e.stroke()),!0)}var n=function(t){function NipplePart(){var t;!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,NipplePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NipplePart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{lact:0,showNipples:!1}].concat(r)))}return function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}(NipplePart,i["c"]),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(NipplePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(i.a.simpleStrokeFill(e,t,this),e.strokeStyle="hsla("+this.hue+","+(this.satur-10)+"%,"+(this.light-10)+"%,1)",e.fillStyle="hsla("+this.hue+","+this.satur+"%,"+this.light+"%,"+this.alpha+")",!(.2<this.fishness)&&(this.showNipples&&(e.fillStyle=da.adjustColor(e.fillStyle,{s:-10,l:-10}),e.lineWidth=2,e.strokeStyle=e.fillStyle,e.beginPath(),Object(l.f)(e,l.b,t.chest.nipples),e.stroke()),0<this.lact)){e.lineWidth=2,e.beginPath(),Object(l.f)(e,l.b,t.chest.nipples),e.stroke(),e.fillStyle=e.strokeStyle,e.beginPath();var r={x:t.chest.nipples.x-1.2*this.lact,y:t.chest.nipples.y},n={x:t.chest.nipples.x+1.2*this.lact,y:t.chest.nipples.y},o={x:t.chest.nipples.x,y:t.chest.nipples.y-5.4*this.lact};da.drawPoints(e,r,n,o,r),e.fill()}}}]),NipplePart}()},function(t,e,r){"use strict";r.d(e,"d",function(){return extractSideLocation}),r.d(e,"b",function(){return extractBaseLocation}),r.d(e,"e",function(){return extractUnmodifiedLocation}),r.d(e,"c",function(){return extractLocationModifier}),r.d(e,"a",function(){return o}),r.d(e,"g",function(){return locationIsSideless}),r.d(e,"f",function(){return locateRelativeToDrawpoint});var n=r(108),a=r.n(n),s=r(0);function extractSideLocation(t){var e=extractUnmodifiedLocation(t);return e.indexOf(" ")<0?null:e.substr(0,e.indexOf(" "))}function extractBaseLocation(t){var e=extractUnmodifiedLocation(t);return e.indexOf(" ")<0?e:e.substr(e.lastIndexOf(" ")+1)}function extractUnmodifiedLocation(t){for(var e=0;e<t.length;++e)switch(t[e]){case"+":case"-":break;default:return t.substr(e)}}function extractLocationModifier(t){for(var e="",r=0;r<t.length;++r)switch(t[r]){case"+":case"-":e+=t[r]}return e}var o={ARM:"arm",CHEST:"chest",TORSO:"torso",BUTT:"butt",FEET:"feet",GROIN:"groin",HAND:"hand",HEAD:"head",LEG:"leg",NECK:"neck",PENIS:"penis",VAGINA:"vagina",TESTICLES:"testicles",EAR:"ears",EYEBROW:"brow",EYELASH:"eyelash",EYELID:"eyelid",EYES:"eyes",IRIS:"iris",LIPS:"lips",MOUTH:"mouth",NOSE:"nose",PUPIL:"pupil"};function locationIsSideless(t){switch(t){case o.TORSO:case o.HEAD:case o.NECK:case o.PENIS:case o.TESTICLES:case o.VAGINA:case o.LIPS:case o.MOUTH:case o.NOSE:return!0;default:return!1}}function locateRelativeToDrawpoint(t,e){var r=e.drawpoint,n=e.dx,o=e.dy,i=a()(t,r);return Object(s.adjust)(i,n,o)}},function(t,e,r){"use strict";r.d(e,"f",function(){return incu}),r.d(e,"b",function(){return cmcu}),r.d(e,"d",function(){return cucm}),r.d(e,"c",function(){return convertPointsToCanvasUnits}),r.d(e,"j",function(){return setStrokeAndFill}),r.d(e,"h",function(){return inheritStroke}),r.d(e,"g",function(){return inheritFill}),r.d(e,"i",function(){return requirePart}),r.d(e,"e",function(){return dist}),r.d(e,"a",function(){return averageQuadratic});var i=r(13),s=r(8),u=r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function incu(t){return cmcu(2.54*t)}function cmcu(t){return 2*t}function cucm(t){return t/2}function convertPointsToCanvasUnits(t){if(Array.isArray(t))for(var e=0;e<t.length;++e)convertPointsToCanvasUnits(t[e]);else if("object"===_typeof(t))for(var r=Object.getOwnPropertyNames(t),n=0;n<r.length;++n){var o=r[n];"x"===o||"y"===o?t[o]=cmcu(t[o]):convertPointsToCanvasUnits(t[o])}}function setStrokeAndFill(t,e,r){var n=i.e.call(e,e.stroke,t,r);t.strokeStyle="inherit"===n?r.baseStroke:n;var o=i.e.call(e,e.fill,t,r);t.fillStyle="inherit"===o?r.baseFill:o}function inheritStroke(t,e){var r=Object(s.e)(this.loc),n=e.avatar.getClothingInLocation.call(e.avatar,r),o=null;if(n.forEach(function(t){(null===o||t.clothingLayer>o.clothingLayer)&&(o=t)}),o)return"function"==typeof o.stroke?o.stroke(t,e):o.stroke;var i=e.avatar.getPartInLocation.call(e.avatar,r);if(i){if("function"==typeof i.stroke){var a=i.stroke(t,e);if(a!==u.j)return a}if(i.stroke!==u.j)return i.stroke}return e.baseStroke}function inheritFill(t,e){var r=e.avatar.getPartInLocation(this.loc);return r?"function"==typeof r.fill?r.fill(t,e):r.fill:e.baseFill}function requirePart(t,e){if(!1===e.hasOwnProperty(t))throw new Error("Trying to draw ".concat(t," but it hasn't been defined yet"))}function dist(t,e){var r=Object(u.d)(t,e);return Object(u.k)(r)}function averageQuadratic(t,e,r,n,o,i,a){r||(r=.5),n||(n=0),o||(o=0);var s={x:t.x*r+e.x*(1-r)+n,y:t.y*r+e.y*(1-r)+o};if(i){var c=e;c.cp1=s,s=Object(u.r)(i,t,c).right.p2.cp1}if(a){var l=e;l.cp1=s,s=Object(u.r)(a,t,l).left.p2.cp1}return s}},function(t,e,r){"use strict";r.d(e,"c",function(){return i}),r.d(e,"b",function(){return a}),r.d(e,"a",function(){return s});var n=r(0),o=r(2);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i="hsla(0,100%,100%,0.2)",a="hsl(0,15%,85%)",s=function(){function ShadingPart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,ShadingPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.FRONT}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(ShadingPart,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"hsl(0,15%,80%)"}},{key:"getLineWidth",value:function getLineWidth(){return 0}}]),ShadingPart}()},function(t,e,r){"use strict";function extractRGB(t){var e=/rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);return e?{r:parseInt(e[1]),g:parseInt(e[2]),b:parseInt(e[3])}:null}function extractHSL(t){var e=/hsl\(\s*(\d+)\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)/.exec(t);return e?{h:parseInt(e[1]),s:parseInt(e[2]),l:parseInt(e[3])}:null}function extractHex(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}:null}function RGBToHSL(t){var e,r,n,o=[t.r,t.g,t.b];e=o[0],r=o[1],n=o[2],e/=255,r/=255,n/=255;var i,a,s=Math.max(e,r,n),c=Math.min(e,r,n),l=(s+c)/2;if(s===c)i=a=0;else{var u=s-c;switch(a=.5<l?u/(2-s-c):u/(s+c),s){case e:i=(r-n)/u+(r<n?6:0);break;case r:i=(n-e)/u+2;break;case n:i=(e-r)/u+4}i/=6}return i*=360,a*=100,l*=100,t.hasOwnProperty("a")?{h:i,s:a,l:l,a:t.a}:{h:i,s:a,l:l}}function adjustColor(t,e){var r=null;return"string"==typeof t?null===(r=extractHSL(t))&&(r=(r=r||extractRGB(t))||extractHex(t))&&(r=RGBToHSL(r)):t.hasOwnProperty("h")&&t.hasOwnProperty("s")&&t.hasOwnProperty("l")?r=t:t.hasOwnProperty("r")&&t.hasOwnProperty("g")&&t.hasOwnProperty("b")&&(r=RGBToHSL(t)),null===r?null:(r.h+=e.h||0,r.s+=e.s||0,r.l+=e.l||0,e.hasOwnProperty("a")?"hsla(".concat(r.h.toFixed(1),",").concat(r.s.toFixed(1),"%,").concat(r.l.toFixed(1),"%,").concat(e.a.toFixed(2),")"):"hsl(".concat(r.h.toFixed(1),",").concat(r.s.toFixed(1),"%,").concat(r.l.toFixed(1),"%)"))}function Ziggurat(t){var s=123456789,c=Array(128),l=Array(128),u=Array(128);function RNOR(){var t=SHR3(),e=127&t;return Math.abs(t)<u[e]?t*c[e]:function nfix(t,e){var r,n,o=3.442619855899,i=1/o;for(;;){if(r=t*c[e],0==e){for(r=-Math.log(UNI())*i,n=-Math.log(UNI());n+n<r*r;)r=-Math.log(UNI())*i,n=-Math.log(UNI());return 0<t?o+r:-o-r}if(l[e]+UNI()*(l[e-1]-l[e])<Math.exp(-.5*r*r))return r;if(t=SHR3(),e=127&t,Math.abs(t)<u[e])return t*c[e]}}(t,e)}function SHR3(){var t=s;return t^=t<<13,t^=t>>>17,s+(s=t^=t<<5)|0}function UNI(){return.5*(1+SHR3()/-Math.pow(2,31))}this.nextGaussian=function(){return RNOR()},function zigset(t){t||(t=(new Date).getTime()),s^=t;var e=2147483648,r=3.442619855899,n=r,o=.00991256303526217,i=o/Math.exp(-.5*r*r);u[0]=Math.floor(r/i*e),u[1]=0,c[0]=i/e,c[127]=r/e,l[0]=1,l[127]=Math.exp(-.5*r*r);for(var a=126;1<=a;a--)r=Math.sqrt(-2*Math.log(o/r+Math.exp(-.5*r*r))),u[a+1]=Math.floor(r/n*e),n=r,l[a]=Math.exp(-.5*r*r),c[a]=r/e}(t)}var n;function randNormal(t,e){return n||initiateRandNormal(seed),n.nextGaussian()*e+t}function initiateRandNormal(t){n=new Ziggurat(t)}function testRandGenerator(t){for(var e={},r=-100;r<101;++r)e[r]=0;for(;0<t--;)++e[Math.round(randNormal(10,20))];var n=[];for(var o in e)n.push(o+"\t"+e[o]);console.log(n.join("\n"))}function averagePoint(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.5;return{x:t.x*(1-r)+e.x*r,y:t.y*(1-r)+e.y*r}}function topologicalSort(a,s){for(var c=a.length,l=new Array(c),u={},t=c;t--;)u[t]||visit(a[t],t,[]);return l;function visit(e,t,r){if(0<=r.indexOf(e))throw new Error("Cyclic dependency: "+JSON.stringify(e));if(!~a.indexOf(e))throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: "+JSON.stringify(e));if(!u[t]){u[t]=!0;var n=s.filter(function(t){return t[0]===e});if(t=n.length){var o=r.concat(e);do{var i=n[--t][1];visit(i,a.indexOf(i),o)}while(t)}l[--c]=e}}}function simpleTopologicalSort(t){return topologicalSort(function uniqueNodes(t){for(var e=[],r=0,n=t.length;r<n;r++){var o=t[r];e.indexOf(o[0])<0&&e.push(o[0]),e.indexOf(o[1])<0&&e.push(o[1])}return e}(t),t)}r.d(e,"f",function(){return extractRGB}),r.d(e,"d",function(){return extractHSL}),r.d(e,"e",function(){return extractHex}),r.d(e,"a",function(){return RGBToHSL}),r.d(e,"b",function(){return adjustColor}),r.d(e,"h",function(){return randNormal}),r.d(e,"g",function(){return initiateRandNormal}),r.d(e,"j",function(){return testRandGenerator}),r.d(e,"c",function(){return averagePoint}),r.d(e,"k",function(){return topologicalSort}),r.d(e,"i",function(){return simpleTopologicalSort}),"function"!=typeof Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),r=1;r<arguments.length;r++){var n=arguments[r];if(null!=n)for(var o in n)n.hasOwnProperty(o)&&(e[o]=n[o])}return e}),String.prototype.capitalizeFirstLetter=function(){return this.charAt(0).toUpperCase()+this.slice(1)},Array.prototype.last||(Array.prototype.last=function(){return this.length?this[this.length-1]:null}),Array.prototype.extend||(Array.prototype.extend=function(t){this.push.apply(this,t)}),Array.prototype.contains=function(t){var o=t!=t;return-1<(o||"function"!=typeof Array.prototype.indexOf?function indexOf(t){var e=-1,r=-1;for(e=0;e<this.length;e++){var n=this[e];if(o&&n!=n||n===t){r=e;break}}return r}:Array.prototype.indexOf).call(this,t)},String.prototype.startsWith||(String.prototype.startsWith=function(t,e){return e=e||0,this.substr(e,t.length)===t})},function(t,e,r){"use strict";r.d(e,"c",function(){return draw}),r.d(e,"g",function(){return renderBase}),r.d(e,"h",function(){return renderParts}),r.d(e,"e",function(){return drawPart}),r.d(e,"f",function(){return drawPartsLayer}),r.d(e,"a",function(){return connectEndPoints}),r.d(e,"b",function(){return coverNipplesIfHaveNoBreasts}),r.d(e,"d",function(){return drawFocusedWindow});var n=r(80),u=r.n(n),f=r(13),p=r(45),h=r(35),d=r(3),y=r(8),b=r(9),g=r(46),P=r(11),v=r(2),_=r(1),c=r(0),C=r(4),O=r(30),k=r(42),m=r(28),w=r(43);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function draw(t,r,e){if(!p.b)throw new Error("trying to draw without having loaded first! (call da.load() before)");if(f.l.length)return Promise.all(f.l).then(function(){return f.l.length=0,draw(t,r,e)});var n={nameColor:"#000",genderColor:"#000",heightColor:"#000",heightBarColor:"#000",printAdditionalInfo:!0,printHeight:!0,renderShoeSideView:!0,offsetX:0,offsetY:0};if(e&&Object.assign(n,e),r.Mods.shoeHeight=r.heightAdjust(),n.passThrough||r.calcDimensions(),!h.a[r.skeleton])throw new Error("can't find skeleton with name "+r.skeleton);var o={};o.cx=80+n.offsetX,o.cy=200+n.offsetY,o.avatar=r,o[d.b.LEFT]={},o[d.b.RIGHT]={},r.parts.forEach(function(t){calcPart(o,t)}),r.faceParts.forEach(function(t){calcPart(o,t)}),r.decorativeParts.forEach(function(t){var e=t.loc;(r.getPartInLocation(e)||r.getPartInLocation(e,r.faceParts))&&calcPart(o,t)}),r.fillMissingDrawpoints(o[d.b.LEFT]),r.fillMissingDrawpoints(o[d.b.RIGHT]),Object(b.c)(o[d.b.LEFT]),Object(b.c)(o[d.b.RIGHT]),Object(g.a)(o);for(var i=[],a=t.children.length-1;0<=a;--a)i.push(t.children[a]);o.canvasGroup=i;for(var s=[],c=0;c<v.a.NUM_LAYERS;++c){var l=new u.a(i[c].getContext("2d"));Object(g.b)(i[c],l,n,r,o,c,!0),s.push(l)}return o.height=i[v.a.BASE].height,o.width=i[v.a.BASE].width,o.clip={},new Promise(function(t){return renderBase(s,o),renderParts(s,o,n),o.ctxGroup=s,o.ctx=new u.a(i[v.a.NUM_LAYERS].getContext("2d")),Object(g.b)(i[v.a.NUM_LAYERS],o.ctx,n,r,o,v.a.NUM_LAYERS,!1),t(o),o})}function calcPart(t,e){var r=t.avatar;e.hasOwnProperty("Mods")&&(Object(O.a)(r.Mods,e.Mods),r.calcDimensions()),e.calcDrawPoints.call(r.dim,t[e.side],r._clampedMods,!0,e),e.reflect&&e.calcDrawPoints.call(r.dim,t[1-e.side],r._clampedMods,!0,e),e.hasOwnProperty("Mods")&&(Object(O.e)(r.Mods,e.Mods),r.calcDimensions())}function renderBase(t,e){for(var r=v.a.BASE;r<v.a.NUM_LAYERS;++r){e.clip[r]={};var n=t[r];n.save(),n.scale(-1,1),n.beginPath(),e.clip[r][d.b.LEFT]=drawPartsLayer(e,r,d.b.LEFT,n),n.fill(),n.restore(),e.clip[r][d.b.RIGHT]=drawPartsLayer(e,r,d.b.RIGHT,n),n.fill()}}function strokePart(t,e){t.beginPath(),c.drawPoints.apply(null,[t].concat(e)),t.stroke()}function orderParts(a){var n=["parts","faceParts","decorativeParts","hairParts","clothingParts","shadingParts","tattoos"],r=[],s=new Map,o=[],i=0,c=[];n.forEach(function(e){a[e].forEach(function(t){r[i]=t,s.set(t,i),o.push(e),++i})}),n.forEach(function(t){a[t].forEach(function(t){!function findDependencies(o){var i=s.get(o);o.childParts&&o.childParts.forEach(function(t){var e=Object(d.d)(o.loc,t),r=e.childLoc,n=a.getPartInLocation(r,a.parts);null!==n&&c.push([s.get(n),i])});o.aboveParts&&o.aboveParts.forEach(function(e){var r=null;if(-1<e.indexOf(" ")){var t=e.split(" ");r=t[0],e=t[1]}n.forEach(function(t){r&&r!==t||a[t].forEach(function(t){t===o||t.layer>o.layer||e===Object(y.b)(Object(y.e)(t.loc))&&c.push([i,s.get(t)])})})});o.belowParts&&o.belowParts.forEach(function(e){var r=null;if(-1<e.indexOf(" ")){var t=e.split(" ");r=t[0],e=t[1]}n.forEach(function(t){r&&r!==t||a[t].forEach(function(t){t===o||o.layer>t.layer||e===Object(y.b)(Object(y.e)(t.loc))&&c.push([s.get(t),i])})})})}(t)})}),function findClothingLayerDependencies(){for(var r=[],t=0;t<_.a.Layer.NUM_LAYERS;++t)r.push([]);a.clothingParts.forEach(function(t){var e=t._owner.clothingLayer;r[e].push(t)});for(var e=0;e<r.length;++e)for(var n=function _loop(t){r[e].forEach(function(e){r[t].forEach(function(t){e.layer<=t.layer&&c.push([s.get(t),s.get(e)])})})},o=e+1;o<r.length;++o)n(o)}(),function findClothingSameLayerOrdering(){var r={};a.clothingParts.forEach(function(t){var e=t._owner.clothingLayer;r.hasOwnProperty(e)?r[e].push(t):r[e]=[t]});var t=function _loop2(t){if(!1===r.hasOwnProperty(t))return"continue";var e=r[t];e.forEach(function(r){(r.aboveSameLayerParts||r.belowSameLayerParts)&&e.forEach(function(t){if(t!==r&&t.layer===r.layer){var e=Object(y.b)(Object(y.e)(t.loc));mutualSameLayerOrdering(r.aboveSameLayerParts,t.aboveSameLayerParts)||mutualSameLayerOrdering(r.belowSameLayerParts,t.belowSameLayerParts)||(r.aboveSameLayerParts&&-1<r.aboveSameLayerParts.indexOf(e)&&c.push([s.get(r),s.get(t)]),r.belowSameLayerParts&&-1<r.belowSameLayerParts.indexOf(e)&&c.push([s.get(t),s.get(r)]))}})})};for(var e in r)t(e);function mutualSameLayerOrdering(t,e){var r=!1;return t&&e&&t.forEach(function(t){-1<e.indexOf(t)&&(r=!0)}),r}}();for(var t=[],e=0;e<i;++e)t.push(e);for(var l=Object(P.k)(t,c).reverse(),u=[],p=[],f=0;f<l.length;++f){var h=l[f];u.push(r[h]),p.push(o[h])}return{orderedPartTypes:p,orderedParts:u}}function renderParts(c,l,t){for(var u=l.avatar,e=orderParts(u),r=e.orderedPartTypes,p=e.orderedParts,o=[],n={},i=0;i<p.length;++i){var a=p[i];if(a.coverConceal&&a.coverConceal.length)if(u.checkPartCoveredByClothing(a))continue;!1===n.hasOwnProperty(r[i])&&(n[r[i]]={});var s=n[r[i]];switch(s.hasOwnProperty(a.loc)&&(s[a.loc]=null),r[i]){case"parts":case"faceParts":case"decorativeParts":renderPart(a,i,s);break;case"shadingParts":renderShading(a,i,s);break;case"hairParts":renderHairPart(a);break;case"clothingParts":renderClothingPart(a);break;case"tattoos":renderTattoo(a)}}function renderTattoo(t){var e=w.b.getRender(t),r=c[t.layer],n=t.renderTattooLocation(l[t.side]);(r.save(),t.side===d.b.LEFT&&r.scale(-1,1),t.ignoreClip)||clipPart(r,l.clip[t.layer][t.side]);Object(f.d)(t,e,r,n),r.restore()}function renderShading(t,e,r){var n=c[t.layer+1];n.save(),t.side!==d.b.LEFT&&!0!==t.reflect||n.scale(-1,1),Object(b.j)(n,t,l),n.save(),t.clipFill&&clipPart(n,t.clipFill.call(u.dim,l[t.side])),drawPart(l,p,e,t.layer,t.side,r),fillPart(n,r[t.loc]),strokePart(n,r[t.loc]),n.restore(),!0===t.reflect&&(n.scale(-1,1),t.clipFill&&clipPart(n,t.clipFill.call(u.dim,l[t.side])),fillPart(n,r[t.loc]),strokePart(n,r[t.loc])),n.restore()}function renderPart(t,e,r){if(t.calcDrawPoints){var n=c[t.layer];n.save(),t.side!==d.b.LEFT&&!0!==t.reflect||n.scale(-1,1),Object(b.j)(n,t,l),n.lineWidth=t.getLineWidth(u);var o=t.clipFill?t.clipFill(l[t.side]):l.clip[t.layer][t.side];n.save(),clipPart(n,o),drawPart(l,p,e,t.layer,t.side,r),fillPart(n,r[t.loc]),n.restore();var i=!0;if(i="function"==typeof t.stroke&&0===t.stroke.length?t.stroke()!==C.j:t.stroke!==C.j)if(t.clipStroke){var a=t.clipStroke(l[t.side]);n.save(),clipPart(n,a),strokePart(n,r[t.loc]),n.restore()}else strokePart(n,r[t.loc]);if(!0===t.reflect&&(n.scale(-1,1),n.save(),clipPart(n,o),fillPart(n,r[t.loc]),n.restore(),i))if(t.hasOwnProperty("clipStroke")){var s=t.clipStroke(l[t.side]);n.save(),clipPart(n,s),strokePart(n,r[t.loc]),n.restore()}else strokePart(n,r[t.loc]);n.restore()}}function renderHairPart(t){var e=c[t.layer];e.save(),Object(b.j)(e,t,l),t.renderHairPoints.call(u.dim,e,l[t.side],u._clampedMods,l),t.reflect&&(e.save(),e.scale(-1,1),t.renderHairPoints.call(u.dim,e,l[1-t.side],u._clampedMods,l),e.restore()),e.restore()}function renderClothingPart(t){if(t instanceof m.g)o.push(t);else{var e=c[t.layer],r=t.side;e.save(),t.side===d.b.LEFT&&e.scale(-1,1),t.renderClothingPoints.call(t._owner,l[r],e,u._clampedMods,u),e.restore(),t.reflect&&(e.save(),e.scale(-1,1),t.renderClothingPoints.call(t._owner,l[1-r],e,u._clampedMods,u),e.restore())}}!function renderItems(){var a={x:-l.cx-l.ox+5,y:.15*l.height/2.5};u.items.forEach(function(t){var e=k.b.getItemRender(t),r=e.width,n=e.height;t.width&&(n*=t.width/r,r=t.width);var o=c[t.layer];o.scale(1,-1);var i=t.renderItemLocation(l,r,n);i?o.drawImage(e,i.x,-i.y,r,-n):(o.drawImage(e,a.x,-a.y,r,-n),a.y+=n),o.scale(1,-1)})}(),function synthesizeLayers(){var t=l.canvasGroup[v.a.NUM_LAYERS],e=t.getContext("2d");e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,t.width,t.height);var r=document.createElement("canvas");r.width=l.canvasGroup[0].width,r.height=l.canvasGroup[0].height;for(var n=r.getContext("2d"),o=v.a.BASE;o<v.a.NUM_LAYERS;++o)v.b.indexOf(o)<0?(e.globalCompositeOperation="source-over",e.drawImage(l.canvasGroup[o],0,0)):(n.clearRect(0,0,r.width,r.height),n.drawImage(l.canvasGroup[o],0,0),n.globalCompositeOperation="destination-in",n.drawImage(t,0,0),e.globalCompositeOperation="multiply",e.drawImage(r,0,0),n.globalCompositeOperation="source-over")}(),t.renderShoeSideView&&function renderShoeSideView(){var r=l.canvasGroup[v.a.NUM_LAYERS].getContext("2d");r.save(),r.translate(l.ox,l.height-30);var t=l.scaling;r.scale(t,-t);var e=220/t,n=.2*l.height/t;r.rect(0,0,e,n),r.clip(),o.forEach(function(t){var e=t.side;r.save(),t.renderShoeSidePart.call(t._owner,l[e],r,u._clampedMods),r.restore()}),r.restore()}()}function drawPart(t,e,r,n,o,i){var a=e[r];if("number"==typeof a.layer){if(a.calcDrawPoints&&a.layer===n&&(!1!==a.reflect||a.side===o&&!i[a.loc])){var s=t.avatar;a.hasOwnProperty("Mods")&&(Object(O.a)(s.Mods,a.Mods),s.calcDimensions());var c=a._owner?a._owner:s.dim,l=a.calcDrawPoints.call(c,t[o],s._clampedMods,!1,a,s);a.hasOwnProperty("Mods")&&(Object(O.e)(s.Mods,a.Mods),s.calcDimensions());for(var u=[],p=0;p<l.length;++p)if(l[p]&&l[p].hasOwnProperty("child")){var f=Object(d.d)(a.loc,l[p].child),h=f.childLoc,y=f.childSide;if(!1===i.hasOwnProperty(h))for(var b=0;b<e.length;++b)if(e[b].loc===h&&e[b]instanceof d.a){drawPart(t,e,b,n,y,i);break}u.extend(i[h]),i[h]=[]}else u.push(l[p]);return i[a.loc]=u}}else console.log(a.loc,"in layer",a.layer,"not found typeof",_typeof(v.a[a.layer]))}function drawPartsLayer(t,e,r,n){for(var o=[],i={},a=0;a<t.avatar.parts.length;++a){drawPart(t,t.avatar.parts,a,e,r,i);var s=t.avatar.parts[a];!1===t.avatar.checkPartCoveredByClothing(s)&&o.push(t.avatar.parts[a].loc)}return o=function synthesizeDrawPoints(t,e){for(var r=[],n=0;n<t.length;++n)r.extend(e[t[n]]);return r}(o,i),c.drawPoints.apply(null,[n].concat(o)),o}function clipPart(t,e){e&&(t.beginPath(),c.drawPoints.apply(null,[t].concat(e)),t.closePath(),t.clip())}function fillPart(t,e){t.beginPath();var r=[];e.forEach(function(t){t&&t.hasOwnProperty("fillOnly")?r.push.apply(r,_toConsumableArray(t.fillOnly)):r.push(t)}),c.drawPoints.apply(null,[t].concat(r));var n=null,o=r[r.length-1];if(o!==C.g){for(var i=0;i<r.length;++i)if(r[i]&&r[i].hasOwnProperty("x")){n=r[i];break}for(var a=r.length-1;0<=a;--a)if(r[a]&&r[a].hasOwnProperty("x")){o=r[a];break}if(null!==n){var s=connectEndPoints(o,n);Object(c.drawPoints)(t,null,s),t.fill()}}else t.fill()}function connectEndPoints(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.25,n=Object(C.h)(e);return n.cp1=Object(C.q)(t,e,.5,Object(b.e)(t,e)*r),n}function coverNipplesIfHaveNoBreasts(t,e,r){return!1===t.hasOwnProperty("breast")&&(e.save(),e.lineWidth=10,Object(b.j)(e,{fill:C.j,stroke:r.fill},t),e.beginPath(),Object(c.drawPoints)(e,C.b,t.chest.nipples),e.stroke(),e.restore(),!0)}function drawFocusedWindow(t,e,r){var n=t.getContext("2d");n.clearRect(0,0,t.width,t.height);var o=e.ctx.canvas,i=r.center.x-r.width/2,a=r.center.y+r.height/2,s=e.ctx.tf.last().applyToPoint(i,a),c=r.width*e.scaling,l=r.height*e.scaling,u=Math.min(t.width,t.height/l*c);n.drawImage(o,s.x,s.y,c,l,0,0,u,t.height)}},function(t,e,r){"use strict";r.d(e,"a",function(){return n}),r.d(e,"l",function(){return a}),r.d(e,"j",function(){return listAvailablePatterns}),r.d(e,"h",function(){return getPatternFullName}),r.d(e,"g",function(){return getPatternBaseName}),r.d(e,"f",function(){return getPattern}),r.d(e,"e",function(){return getLoadedPattern}),r.d(e,"c",function(){return addPattern}),r.d(e,"b",function(){return addDebugPattern}),r.d(e,"k",function(){return loadPattern}),r.d(e,"d",function(){return drawTattooPattern}),r.d(e,"i",function(){return isPattern});var h=r(0),n=100,o=!1,i=document.createElement("canvas");i.width=n,i.height=n;var s=i.getContext("2d"),y=document.createElement("canvas"),c={},a=[],l={};function listAvailablePatterns(){var t=[];for(var e in l)l.hasOwnProperty(e)&&t.push(e);return t}function getPatternFullName(t,e){return t+"."+e}function getPatternBaseName(t){var e=t.indexOf(".");return e<0?t:t.substr(0,e)}function getPattern(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n,r=getPatternFullName(t,e);if(c.hasOwnProperty(r))return c[r];if(!1===l.hasOwnProperty(t))throw new Error("Trying to get pattern that hasn't been added yet: "+t);return a.push(loadPattern(t,l[t],e)),["pattern",{patternName:r,patternSize:e}]}function getLoadedPattern(t,e,r){if(isPattern(t)){var n=c[t[1].patternName];return"function"==typeof n?n(e,r):n}return"function"==typeof t?getLoadedPattern.call(this,t.call(this,e,r),e,r):t}function addPattern(t,e){l[t]||(l[t]=e)}function addDebugPattern(t,e,r){var n=e;return o&&(n=r),addPattern(t,n)}function loadPattern(e,r,i){var a=getPatternFullName(e,i);return"function"==typeof r?r.length<=1?new Promise(function(t){c[a]=r(s),t()}):new Promise(function(t){c[a]=r,t()}):new Promise(function(n,t){var o=new Image;o.onload=function(){var t=o.width/i,e=Math.round(o.height/t);y.width=i,y.height=e;var r=y.getContext("2d");r.scale(1,-1),r.drawImage(o,0,0,o.width,o.height,0,0,i,-e),c[a]=r.createPattern(y,"repeat"),n()},o.onerror=function(){alert(Error("failed to load pattern '"+e+"' from "+r)),t()},o.src=r})}function drawTattooPattern(t,e,r,n){var o=Object(h.rad)(t.rotation),i=t.width?t.width/e.width:1,a=e.width,s=e.height,c=Math.max(a,s)*Math.sqrt(2);y.width=c*i,y.height=c*i;var l=y.getContext("2d");l.scale(i,i),l.translate(c/2,c/2),l.rotate(o),t.mirror&&l.scale(-1,1),l.drawImage(e,-a/2,-s/2);var u=r.transformPoint(y.width/2,y.height/2),p=r.transformPoint(0,0),f=Object(h.diff)(u,p);r.drawImage(y,n.x+f.x,n.y+f.y)}function isPattern(t){return Array.isArray(t)&&"pattern"===t[0]}},function(t,e,r){"use strict";r.d(e,"b",function(){return o}),r.d(e,"a",function(){return a});var n=r(2),i=r(3);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=function(){function HairPart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,HairPart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:n.a.HAIR,reflect:!1,coverConceal:[],uncoverable:!1}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(HairPart,[{key:"stroke",value:function stroke(t,e){return e.hairStroke}},{key:"fill",value:function fill(t,e){return e.hairFill}},{key:"getLineWidth",value:function getLineWidth(){return 1.5}}]),HairPart}(),a={create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var o=_construct(t,r);return!1===o.hasOwnProperty("side")&&(o.side=Object(i.f)(null)),o},hairBack:Object.freeze({loc:"back hair",layer:n.a.BACK,belowParts:["parts groin"]}),hairAboveEars:Object.freeze({loc:"ears hair",layer:n.a.BELOW_HAIR,aboveParts:["ears"]}),hairMedium:Object.freeze({loc:"medium hair",layer:n.a.GENITALS,aboveParts:["chest","neck"]}),hairFront:Object.freeze({loc:"front hair",layer:n.a.HAIR})}},function(t,e,r){"use strict";r.d(e,"h",function(){return a}),r.d(e,"g",function(){return s}),r.d(e,"f",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"l",function(){return p}),r.d(e,"v",function(){return calcHeels}),r.d(e,"i",function(){return b}),r.d(e,"e",function(){return d}),r.d(e,"s",function(){return calcCoveredHeelBaseSide}),r.d(e,"p",function(){return g}),r.d(e,"o",function(){return P}),r.d(e,"j",function(){return v}),r.d(e,"k",function(){return _}),r.d(e,"x",function(){return calcWideStrapSide}),r.d(e,"t",function(){return calcHeelBaseSide}),r.d(e,"u",function(){return calcHeelPlatformSide}),r.d(e,"w",function(){return calcStiletto}),r.d(e,"r",function(){return O}),r.d(e,"q",function(){return k}),r.d(e,"m",function(){return m}),r.d(e,"a",function(){return w}),r.d(e,"b",function(){return j}),r.d(e,"c",function(){return S}),r.d(e,"n",function(){return T});var f=r(1),c=r(10),n=r(3),o=r(2),h=r(9),i=r(28),y=r(4);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _get(t,e,r){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function _get(t,e,r){var n=function _superPropBase(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_getPrototypeOf(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(r):o.value}})(t,e,r||t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function HeelPart(){var t;_classCallCheck(this,HeelPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"],belowParts:["shadingParts feet"]}].concat(r)))}return _inherits(HeelPart,f["c"]),HeelPart}(),s=function(t){function HeelBaseShine(){var t;_classCallCheck(this,HeelBaseShine);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelBaseShine)).call.apply(t,[this,{layer:o.a.ARMS}].concat(r)))}return _inherits(HeelBaseShine,a),_createClass(HeelBaseShine,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcHeels.call(this,t),n=r.bot,o=r.outBot,i=r.out;n.y+=3,n.x+=1;var a=Object(y.a)(o,-1,.5),s=Object(y.a)(i,-.5,-4.8);a.cp1=Object(y.q)(n,a,.7,-1),s.cp1=Object(y.q)(a,s,.5,-.5),n.cp1=Object(y.q)(s,n,.3,1),e.fillStyle=c.c,e.beginPath(),Object(y.f)(e,n,a,s,n),e.fill()}}]),HeelBaseShine}(),l=function(t){function HeelBasePart(){var t;_classCallCheck(this,HeelBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelBasePart)).call.apply(t,[this].concat(r)))}return _inherits(HeelBasePart,a),_createClass(HeelBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=t.toe;r.toebox={x:r.center.x,y:r.center.y};var n=calcHeels.call(this,t),o=n.out,i=n.outBot,a=n.bot,s=n.inBot,c=n.inTop,l=n.tongue;f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(y.f)(e,o,i,a,s,c,l,o),e.fill();var u=Object(y.h)(t.ankle.in),p=Object(y.r)(.6,t.toe.in,t.ankle.inbot).left.p2;p.cp1=Object(y.q)(u,p,.2,-3.3),u.cp1=Object(y.q)(p,u,.7,1.4),e.beginPath(),Object(y.f)(e,u,p,u),e.fill()}}]),HeelBasePart}(),u=function(t){function CoveredHeelBasePart(){var t;_classCallCheck(this,CoveredHeelBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CoveredHeelBasePart)).call.apply(t,[this].concat(r)))}return _inherits(CoveredHeelBasePart,a),_createClass(CoveredHeelBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcHeels.call(this,t),n=r.out,o=r.outBot,i=r.bot,a=r.inBot,s=r.inTop,c=Object(y.a)(Object(y.h)(t.ankle.in),1.1,-.7),l=Object(y.a)(Object(y.h)(t.ankle.out),-1.1,-.7);n.cp1=Object(y.q)(l,n,.5,-1),n.cp2=null,c.cp1=Object(y.q)(s,c,.5,-1),f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(y.f)(e,n,o,i,a,s,c,l,n),e.fill()}}]),CoveredHeelBasePart}(),p=function(t){function HeelStrapPart(){var t;_classCallCheck(this,HeelStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelStrapPart)).call.apply(t,[this,{strapWidth:1.5}].concat(r)))}return _inherits(HeelStrapPart,a),_createClass(HeelStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(y.r)(1.06-.03*this.strapWidth,t.calf.out,t.ankle.out),n=r.right.p1,o=Object(y.h)(t.ankle.out),i=Object(y.h)(t.ankle.in);o.cp1=r.right.cp1,o.cp2=r.right.cp2;i.cp1=Object(y.q)(o,i,.5,3),r=Object(y.r)(.035*this.strapWidth,t.ankle.in,t.calf.in);var a=Object(y.h)(r.left.p2);n.cp1=Object(y.q)(a,n,.5,-3),Object(h.j)(e,{fill:this.fill,stroke:this.fill},t),e.beginPath(),Object(y.f)(e,n,o,i,a,n),e.fill()}}]),HeelStrapPart}();function calcHeels(t){var e=t.toe,r=Object(y.r)(.7,t.ankle.outbot,e.out),n=r.left.p2,o={x:e.out.x+2,y:e.in.y+2},i={x:.45*e.out.x+.55*e.in.x,y:e.in.y-this.heelPointiness},a={x:e.in.x-2.5,y:e.in.y+2},s=(r=Object(y.r)(.6,e.in,t.ankle.inbot)).left.p2,c={x:i.x,y:e.center.y-2.3+1.3*this.toeCoverage};return i.cp1=Object(y.q)(o,i,.6,2),a.cp1=Object(y.q)(i,a,.6,2),c.cp1=Object(y.o)(s,.5,a),c.cp2={x:c.x-4,y:c.y},n.cp1=Object(y.c)(s,c,1),n.cp2=Object(y.o)(n,.5,o),o.cp1=Object(y.q)(n,o,.8,.6),s.cp1=Object(y.q)(a,s,.1,1),{out:n,outBot:o,bot:i,inBot:a,inTop:s,tongue:c}}var b=function(t){function HeelSideBaseClosedPart(){return _classCallCheck(this,HeelSideBaseClosedPart),_possibleConstructorReturn(this,_getPrototypeOf(HeelSideBaseClosedPart).apply(this,arguments))}return _inherits(HeelSideBaseClosedPart,i["g"]),_createClass(HeelSideBaseClosedPart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e,r){}}]),HeelSideBaseClosedPart}(),d=function(t){function CoveredHeelSideBasePart(){var t;_classCallCheck(this,CoveredHeelSideBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CoveredHeelSideBasePart)).call.apply(t,[this].concat(r,[{toeCoverage:.2,soleWidth:3,tongueSplitRatio:.75}])))}return _inherits(CoveredHeelSideBasePart,i["g"]),_createClass(CoveredHeelSideBasePart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e,r){var n=calcCoveredHeelBaseSide.call(this,t,r),o=n.vamp,i=n.toeTip,a=n.soleBot,s=n.heelBack,c=n.heelBackTop,l=n.tongueStart,u=n.tongueSide,p=n.tongue;e.beginPath(),Object(h.j)(e,{stroke:this.fill,fill:this.fill},t),Object(y.f)(e,o,i,a,s,c,l,u,p,o),e.fill()}}]),CoveredHeelSideBasePart}();function calcCoveredHeelBaseSide(t,e){var r=calcHeelBaseSide.call(this,t,e),n=r.vamp,o=r.toeTip,i=r.soleBot,a=r.heelBack,s=r.counterTip;o.cp1.y+=1;var c=Object(y.r)(this.tongueSplitRatio,i,a),l=c.right.p1,u=Object(y.m)(c.right.p1,c.right.p2);l.cp1=u.cp1,l.cp2=u.cp2,l=Object(y.a)(l,0,this.soleWidth);var p=Object(y.a)(Object(y.h)(a),0,this.soleWidth);p.cp1=Object(y.q)(a,p,.5,-1);var f={x:s.x-16,y:s.y};f.cp1=Object(y.q)(l,f,.5,5);var h={x:f.x-5,y:f.y};return n.cp1={x:h.x,y:h.y-15},n.cp2={x:n.x+6,y:n.y},{vamp:n,toeTip:o,soleBot:i,heelBack:a,heelBackTop:p,tongueStart:l,tongueSide:f,tongue:h,counterTip:s}}var g=function(t){function StilettoPart(){var t;_classCallCheck(this,StilettoPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StilettoPart)).call.apply(t,[this].concat(r,[{separationAlongArch:.83,heelTipWidth:3.5,backHeelDeflection:2,stilettoFill:"black"}])))}return _inherits(StilettoPart,i["g"]),_createClass(StilettoPart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e,r){var n=calcStiletto.call(this,t,r),o=n.archTip,i=n.heelTip,a=n.heelTipBack,s=n.stilettoHeelBack,c=this.stilettoFill||this.fill;e.beginPath(),Object(h.j)(e,{stroke:c,fill:c},t),Object(y.f)(e,o,i,a,s,o),e.fill()}}]),StilettoPart}(),P=function(t){function PlatformSidePart(){var t;_classCallCheck(this,PlatformSidePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PlatformSidePart)).call.apply(t,[this].concat(r,[{platformHeight:0,platformFill:"black"}])))}return _inherits(PlatformSidePart,i["g"]),_createClass(PlatformSidePart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e,r){if(!(this.platformHeight<=0)){var n=calcHeelPlatformSide.call(this,t,r),o=n.topLeft,i=n.left,a=n.bot,s=n.right,c=this.platformFill||this.fill;e.beginPath(),Object(h.j)(e,{stroke:c,fill:c},t),Object(y.f)(e,o,i,a,s,o),e.fill()}}}]),PlatformSidePart}(),v=function(t){function HeelSideSimpleStrapPart(){var t;_classCallCheck(this,HeelSideSimpleStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelSideSimpleStrapPart)).call.apply(t,[this].concat(r)))}return _inherits(HeelSideSimpleStrapPart,i["g"]),_createClass(HeelSideSimpleStrapPart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e,r){var n=calcHeelBaseSide.call(this,t,r).counterTip,o=Object(y.a)(n,-10,0);e.beginPath(),Object(h.j)(e,{stroke:this.fill,fill:this.fill},t),e.lineWidth=1.33*this.strapWidth,e.ellipse(o.x-1,o.y-2,10,3.5,-.95*Math.PI,0,2*Math.PI),e.stroke()}}]),HeelSideSimpleStrapPart}(),_=function(t){function HeelSideWideStrapPart(){var t;_classCallCheck(this,HeelSideWideStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeelSideWideStrapPart)).call.apply(t,[this,{strapWidth:5}].concat(r)))}return _inherits(HeelSideWideStrapPart,i["g"]),_createClass(HeelSideWideStrapPart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e,r){var n=calcWideStrapSide.call(this,t,r);e.beginPath(),Object(h.j)(e,{stroke:this.fill,fill:this.fill},t),Object(y.f)(e,n.left,n.topLeft,n.topRight,n.right,n.left),e.fill()}}]),HeelSideWideStrapPart}();function calcWideStrapSide(t,e){var r=calcCoveredHeelBaseSide.call(this,t,e),n=r.tongue,o=r.counterTip,i={x:n.x,y:n.y+this.strapWidth},a={x:o.x-.5,y:o.y+this.strapWidth};return a.cp1=Object(y.q)(i,a,.5,-2.5),n.cp1=Object(y.q)(o,n,.5,2.5),o.cp1=Object(y.q)(a,o,.5,-.5),o.cp2=null,{left:n,topLeft:i,topRight:a,right:o}}var C=3;function calcHeelBaseSide(t,e){var r={x:5,y:12+this.platformHeight},n={x:r.x+14-.5*this.shoeHeight,y:r.y-9};n.cp1={x:r.x,y:r.y-3},n.cp2={x:n.x-8,y:n.y};var o={x:r.x+52+.5*e.feetLength-5*this.shoeHeight,y:r.y+5*this.shoeHeight},i={x:o.x+10,y:o.y};i.cp1={x:n.x+28,y:n.y},i.cp2={x:o.x-20,y:o.y-10};var a={x:o.x+4,y:i.y+19};a.cp1={x:i.x+3,y:i.y+10},a.cp2={x:a.x+3,y:a.y-5};var s={x:r.x+10.5+1.7*this.toeCoverage-.5*this.shoeHeight,y:r.y+4+1.3*this.toeCoverage};return r.cp1=Object(y.q)(s,r,.7,-1.5),s.cp1={x:a.x-19,y:a.y-5},s.cp2={x:s.x+18,y:s.y-10},{vamp:s,toeTip:r,soleBot:n,heelBack:i,counterTip:a}}function calcHeelPlatformSide(t,e){var r=calcHeelBaseSide.call(this,t,e),n=r.toeTip,o=r.soleBot,i=r.heelBack,a=Object(y.h)(n),s=Object(y.a)(a,.2*this.platformHeight,-this.platformHeight);s.cp1=Object(y.q)(a,s,.3,-.4);var c=Object(y.a)(o,0,-this.platformHeight);c.cp1.x+=.2*this.platformHeight;var l=Object(y.r)(.5,o,i).left.p2;return l.cp1.y-=this.platformHeight,l.cp2.y-=.5*this.platformHeight,{topLeft:a,left:s,bot:c,right:l}}function calcStiletto(t,e){var r=calcHeelBaseSide.call(this,t,e),n=r.soleBot,o=r.heelBack,i=Object(y.r)(this.separationAlongArch,n,o),a=Object(y.h)(i.left.p2),s={x:o.x-5.8,y:C},c={x:s.x-.5*this.heelTipWidth,y:C};c.cp1={x:c.x,y:a.y};var l=Object(y.h)(o);l.cp1=Object(y.q)(s,l,.7,this.backHeelDeflection);var u=Object(y.m)(i.right.p1,i.right.p2);a.cp1=u.cp1,a.cp2=u.cp2;return{archTip:a=Object(y.a)(a,0,.4),heelTip:c,heelTipBack:s,stilettoHeelBack:l=Object(y.a)(l,0,.4)}}function renderLock(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1,n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:0,o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:2,i=5<arguments.length&&void 0!==arguments[5]?arguments[5]:"#D3D3D3",a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:"gold",s=Object(y.a)(e,-o,-2),c=Object(y.a)(e,o,-2);c.cp1={x:s.x,y:s.y+5},c.cp2={x:c.x,y:c.y+5};var l={};l.topLeft=Object(y.a)(s,-1,1),l.topRight=Object(y.a)(Object(y.h)(c),1,1),l.right=Object(y.a)(l.topRight,0,-5),l.left=Object(y.a)(l.topLeft,0,-5),Object(y.p)(e,r,s,c,l.topLeft,l.topRight,l.left,l.right),Object(y.n)(e,n,s,c,l.topLeft,l.topRight,l.left,l.right),t.beginPath(),t.fillStyle=a,Object(y.f)(t,l.topLeft,l.topRight,l.right,l.left,l.topLeft),t.fill(),t.beginPath(),t.strokeStyle=i,t.lineWidth=r,t.lineCap="round",Object(y.f)(t,s,c),t.stroke()}var O=function(t){function StrapLockSidePart(){var t;_classCallCheck(this,StrapLockSidePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StrapLockSidePart)).call.apply(t,[this,{lockSize:1,aboveSameLayerParts:["feet"]}].concat(r)))}return _inherits(StrapLockSidePart,i["g"]),_createClass(StrapLockSidePart,[{key:"renderShoeSidePart",value:function renderShoeSidePart(t,e,r){var n=calcWideStrapSide.call(this,t,r);renderLock(e,{x:n.left.x+6,y:.9*n.left.y+.1*n.topLeft.y},this.lockSize,-.1)}}]),StrapLockSidePart}(),k=function(t){function StrapLockPart(){var t;_classCallCheck(this,StrapLockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StrapLockPart)).call.apply(t,[this,{layer:o.a.GENITALS,lockSize:1,aboveSameLayerParts:["feet"]}].concat(r)))}return _inherits(StrapLockPart,a),_createClass(StrapLockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){renderLock(e,{x:t.ankle.out.x-1,y:t.ankle.out.y},.5*this.lockSize,.3,.8)}}]),StrapLockPart}(),m=function(t){function Heels(){var t,e;_classCallCheck(this,Heels);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(Heels)).call.apply(t,[this,{clothingLayer:f.a.Layer.MID,aboveParts:["parts arm","decorativeParts arm","parts hand"],belowParts:["parts leg"],thickness:1,shoeHeight:3,basePointiness:5,shoeTightness:10}].concat(n)))).Mods=Object.assign({feetWidth:-e.shoeTightness,feetLength:0},e.Mods),e.Mods.feetLength+=4*e.shoeHeight,e.Mods.feetWidth-=e.shoeHeight,e.heelPointiness=e.basePointiness-.5*e.shoeHeight,e}return _inherits(Heels,f["b"]),_createClass(Heels,[{key:"fill",value:function fill(){return"#000"}}]),Heels}(),w=function(t){function ClosedToePumps(){var t;_classCallCheck(this,ClosedToePumps);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ClosedToePumps)).call.apply(t,[this,{toeCoverage:.5}].concat(r)))}return _inherits(ClosedToePumps,m),_createClass(ClosedToePumps,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:s}]}}]),ClosedToePumps}(),j=function(t){function ClosedToeStrappedPumps(){var t;_classCallCheck(this,ClosedToeStrappedPumps);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ClosedToeStrappedPumps)).call.apply(t,[this,{strapWidth:1.5}].concat(r)))}return _inherits(ClosedToeStrappedPumps,m),_createClass(ClosedToeStrappedPumps,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:b},{side:n.b.RIGHT,Part:g},{side:n.b.RIGHT,Part:v},{side:n.b.RIGHT,Part:P}]}}]),ClosedToeStrappedPumps}(),S=function(t){function CoveredFancyStilettos(){var t;_classCallCheck(this,CoveredFancyStilettos);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CoveredFancyStilettos)).call.apply(t,[this].concat(r)))}return _inherits(CoveredFancyStilettos,m),_createClass(CoveredFancyStilettos,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u},{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:d},{side:n.b.RIGHT,Part:_},{side:n.b.RIGHT,Part:g},{side:n.b.RIGHT,Part:P}]}}]),CoveredFancyStilettos}(),x=[{side:n.b.RIGHT,Part:O},{side:n.b.LEFT,Part:k},{side:n.b.RIGHT,Part:k}],T=function(t){function LockedCoveredFancyStilettos(){var t;_classCallCheck(this,LockedCoveredFancyStilettos);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LockedCoveredFancyStilettos)).call.apply(t,[this].concat(r)))}return _inherits(LockedCoveredFancyStilettos,S),_createClass(LockedCoveredFancyStilettos,[{key:"partPrototypes",get:function get(){return _get(_getPrototypeOf(LockedCoveredFancyStilettos.prototype),"partPrototypes",this).concat(x)}}]),LockedCoveredFancyStilettos}()},function(t,e,r){"use strict";r.d(e,"p",function(){return calcTee}),r.d(e,"i",function(){return i}),r.d(e,"f",function(){return a}),r.d(e,"d",function(){return s}),r.d(e,"n",function(){return c}),r.d(e,"k",function(){return l}),r.d(e,"l",function(){return f}),r.d(e,"q",function(){return calcTopBody}),r.d(e,"b",function(){return d}),r.d(e,"j",function(){return g}),r.d(e,"h",function(){return P}),r.d(e,"e",function(){return v}),r.d(e,"c",function(){return _}),r.d(e,"m",function(){return C}),r.d(e,"o",function(){return O}),r.d(e,"a",function(){return k}),r.d(e,"g",function(){return m});var y=r(1),n=r(3),h=r(12),o=r(2),b=r(0),p=r(5),u=r(18);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcTee(t){var e=Object(b.clone)(t.collarbone),r=calcTopBody.call(this,t),n=r.armpit,o=r.lat,i=r.waist,a=r.hip,s=r.out,c=r.bottom,l=u.i.call(this,t);return{cleavageBot:l.cleavageBot,cleavageTop:l.cleavageTop,neck:l.neck,shoulder:e,armpit:n,lat:o,waist:i,hip:a,out:s,bottom:c}}var i=function(t){function TeePart(){var t;_classCallCheck(this,TeePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TeePart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(TeePart,y["c"]),_createClass(TeePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcTee.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=r.shoulder,s=r.armpit,c=r.waist,l=r.hip,u=r.out,p=r.bottom;y.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(b.drawPoints)(e,n,o,i,a,s,c,l,u,p),e.fill(),e.stroke()}}]),TeePart}(),a=function(t){function LeotardPart(){var t;_classCallCheck(this,LeotardPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeotardPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(LeotardPart,y["c"]),_createClass(LeotardPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcTee.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=r.shoulder,s=r.armpit,c=r.waist,l=r.hip,u=r.out,p=(r.bottom,Object(b.adjust)(Object(b.clone)(t.groin),-.2,0)),f=Object(b.splitCurve)(this.genCoverage,t.groin,Object(b.extractPoint)(t.thigh.top)),h=Object(b.extractPoint)(f.left.p2);f=Object(b.splitCurve)(.5,u,h),h.cp1=Object(b.extractPoint)(f.left.p2),h.cp1.x+=this.curveBotX-9,h.cp1.y+=this.curveBotY+5,y.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(b.drawPoints)(e,n,o,i,a,s,c,l,u,h,p),e.fill(),e.stroke()}}]),LeotardPart}(),s=function(t){function HalterTopBreastPart(){var t;_classCallCheck(this,HalterTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalterTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(HalterTopBreastPart,y["c"]),_createClass(HalterTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){function checkCleavage(t,e){n.y<e.y&&(n.y=e.y+3),r=Object(b.splitCurve)(.5,n,a),a.cp1={x:r.left.p2.x+t.curveCleavageX,y:r.left.p2.y+t.curveCleavageY}}y.a.simpleStrokeFill(e,t,this);var r=Object(b.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin),n={x:-.2,y:r.left.p2.y};this.outerNeckCoverage<this.innerNeckCoverage&&(this.outerNeckCoverage=this.innerNeckCoverage),this.innerNeckCoverage>this.outerNeckCoverage&&(this.innerNeckCoverage=this.outerNeckCoverage);var o=t.trapezius?t.trapezius:t.neck.cusp;r=Object(b.splitCurve)(this.outerNeckCoverage,o,t.collarbone);var i=1<this.outerNeckCoverage?t.collarbone:r.left.p2;r=this.innerNeckCoverage<0?Object(b.splitCurve)(1+this.innerNeckCoverage,t.neck.top,o):Object(b.splitCurve)(this.innerNeckCoverage,o,t.collarbone);var a=Object(b.extractPoint)(r.left.p2),s=this.innerNeckCoverage<0?o:void 0,c=Object(b.extractPoint)(t.armpit);if(!1===t.hasOwnProperty("breast")){var l={x:-.2,y:c.y-1};return checkCleavage(this,l),e.beginPath(),Object(b.drawPoints)(e,n,a,s,i,c,l),e.fill(),e.beginPath(),Object(b.drawPoints)(e,n,a,s,i,c),e.stroke(),void Object(h.b)(t,e,this)}var u=Object(b.adjust)(t.breast.tip,.1,0),p=Object(b.adjust)(t.breast.bot,0,-.1),f={x:-.2,y:p.y};checkCleavage(this,f),e.beginPath(),Object(b.drawPoints)(e,n,a,s,i,u,p,f),e.fill(),e.beginPath(),Object(b.drawPoints)(e,n,a,s,i,u,p),e.stroke()}}]),HalterTopBreastPart}(),c=function(t){function TubeTopBreastPart(){var t;_classCallCheck(this,TubeTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TubeTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(TubeTopBreastPart,y["c"]),_createClass(TubeTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!Object(h.b)(t,e,this)){y.a.simpleStrokeFill(e,t,this);var r=[];if(1<this.chestCoverage){2<this.chestCoverage&&(this.chestCoverage=1.9);this.chestCoverage;(r=Object(p.i)(t.neck.top,t.breast.top,1-(this.chestCoverage-1),t.neck.top,t.neck.cusp,t.collarbone,Object(b.extractPoint)(t.breast.top)))[0]=Object(b.extractPoint)(r[0]),r[r.length]=Object(b.adjust)(t.breast.tip,.1,0)}else{var n=Object(b.splitCurve)(1-this.chestCoverage,t.breast.top,t.breast.tip);r[0]=Object(b.extractPoint)(n.left.p2),r[1]=Object(b.adjust)(n.right.p2,.1,0)}var o={x:-.2,y:r[0].y+1};r[0].cp1={x:.8*(r[0].x+o.x),y:o.y};var i=Object(b.adjust)(t.breast.bot,0,-.1),a={x:-.2,y:i.y};e.beginPath(),b.drawPoints.apply(void 0,[e,o].concat(_toConsumableArray(r),[i,a])),e.fill(),e.beginPath(),b.drawPoints.apply(void 0,[e,o].concat(_toConsumableArray(r),[i])),e.stroke()}}}]),TubeTopBreastPart}(),l=function(t){function TopChestPart(){var t;_classCallCheck(this,TopChestPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TopChestPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(TopChestPart,y["c"]),_createClass(TopChestPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(y.a.simpleStrokeFill(e,t,this),!(2<=this.waistCoverage)){var r=calcTopBody.call(this,t),n=r.armpit,o=r.lat,i=r.waist,a=r.hip,s=r.out,c=r.bottom,l={x:-.2};l.y=t.breast?t.breast.in.y:t.armpit.y,e.beginPath(),Object(b.drawPoints)(e,n,o,i,a,s,c,l,Object(b.extractPoint)(n)),e.fill(),e.beginPath(),Object(b.drawPoints)(e,n,o,i,a,s,c),e.stroke()}}}]),TopChestPart}(),f=function(t){function TopGroinPart(){var t;_classCallCheck(this,TopGroinPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TopGroinPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(TopGroinPart,y["c"]),_createClass(TopGroinPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(y.a.simpleStrokeFill(e,t,this),!(2<=this.waistCoverage)){var r=calcTopBody.call(this,t),n=r.armpit,o=r.lat,i=r.waist,a=r.hip,s=r.out,c=(r.bottom,{x:-.2});c.y=t.breast?t.breast.in.y:t.armpit.y;var l=Object(b.adjust)(Object(b.clone)(t.groin),-.2,0),u=Object(b.splitCurve)(this.genCoverage,t.groin,Object(b.extractPoint)(t.thigh.top)),p=Object(b.extractPoint)(u.left.p2);u=Object(b.splitCurve)(.5,s,p),p.cp1=Object(b.extractPoint)(u.left.p2),p.cp1.x+=this.curveBotX-9,p.cp1.y+=this.curveBotY+5,e.beginPath(),Object(b.drawPoints)(e,n,o,i,a,s,p,l,c,Object(b.extractPoint)(n)),e.fill(),e.beginPath(),Object(b.drawPoints)(e,n,o,i,a,s,p,l),e.stroke()}}}]),TopGroinPart}();function calcTopBody(t){var e=Object(b.clone)(t.armpit),r=Object(b.clone)(t.lat),n=Object(b.adjust)(t.hip,0,0),o=Object(b.adjust)(t.waist,.8*this.thickness,0),i=e;r&&(i=r);var a,s=Object(p.j)(i,n,{x:0,y:o.y},{x:100,y:o.y});if(s.x>o.x&&(o.x=Object(p.d)(o.x,s.x,this.sideLoose),Object(p.m)(e,o,this.sideLoose),Object(p.m)(o,n,this.sideLoose)),1<this.waistCoverage){var c=Object(b.splitCurve)(1-(this.waistCoverage-1),t.armpit,o);n=o=void 0,a=c.left.p2}else if(0<=this.waistCoverage){var l=Object(b.splitCurve)(1-this.waistCoverage,o,n);n=void 0,a=l.left.p2}else{a=Object(b.splitCurve)(Math.abs(this.waistCoverage),n,t.thigh.out).left.p2}var u={y:a.y-3,x:-.2};return u.cp1={x:.5*u.x+.5*a.x,y:u.y},{armpit:e,lat:r,waist:o,hip:n,out:a,bottom:u}}var d=function(t){function BikiniTopBreastPart(){var t;_classCallCheck(this,BikiniTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BikiniTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(BikiniTopBreastPart,y["c"]),_createClass(BikiniTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){y.a.simpleStrokeFill(e,t,this),this.outerNeckCoverage<this.innerNeckCoverage&&(this.outerNeckCoverage=this.innerNeckCoverage),this.innerNeckCoverage>this.outerNeckCoverage&&(this.innerNeckCoverage=this.outerNeckCoverage);var r=t.neck.cusp;t.trapezius&&(r=t.trapezius);var n=Object(b.splitCurve)(this.outerNeckCoverage,r,t.collarbone),o=n.left.p2;n=this.innerNeckCoverage<0?Object(b.splitCurve)(1+this.innerNeckCoverage,t.neck.top,r):Object(b.splitCurve)(this.innerNeckCoverage,r,t.collarbone);var i=Object(b.extractPoint)(n.left.p2);if(!1===t.hasOwnProperty("breast")){var a=Object(b.adjust)(t.armpit,0,0),s={x:-.2,y:a.y-1},c={x:-.2,y:s.y+2*this.radius};return c.cp1={x:s.x+2*this.radius,y:s.y+this.radius},n=Object(b.splitCurve)(.5,c,i),i.cp1={x:n.left.p2.x+this.curveCleavageX,y:n.left.p2.y+this.curveCleavageY},e.beginPath(),Object(b.drawPoints)(e,c,i,o,Object(b.extractPoint)(a),s),e.fill(),e.beginPath(),Object(b.drawPoints)(e,c,i,o,Object(b.extractPoint)(a)),e.stroke(),void Object(h.b)(t,e,this)}var l=Object(b.adjust)(t.breast.tip,.1,0),u=Object(b.adjust)(t.breast.bot,0,-.1),p={x:-.2,y:u.y},f={x:-.2,y:p.y+2*this.radius};f.cp1={x:p.x+2*this.radius,y:p.y+this.radius},n=Object(b.splitCurve)(.5,f,i),i.cp1={x:n.left.p2.x+this.curveCleavageX,y:n.left.p2.y+this.curveCleavageY},e.beginPath(),Object(b.drawPoints)(e,f,i,o,l,u,p,f),e.fill(),e.beginPath(),Object(b.drawPoints)(e,f,i,o,l,u,p,f),e.stroke()}}]),BikiniTopBreastPart}(),g=function(t){function Top(){var t;_classCallCheck(this,Top);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Top)).call.apply(t,[this,{clothingLayer:y.a.Layer.MID,thickness:.6}].concat(r)))}return _inherits(Top,y["b"]),_createClass(Top,[{key:"stroke",value:function stroke(){return"hsla(335, 800%, 30%, 1)"}},{key:"fill",value:function fill(){return"hsla(335, 100%, 42%, 1)"}}]),Top}(),P=function(t){function Tee(){var t;_classCallCheck(this,Tee);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Tee)).call.apply(t,[this,{cleavageOpeness:.3,cleavageCoverage:.16,sideLoose:0,waistCoverage:0,curveCleavageX:0,curveCleavageY:0,legCoverage:1}].concat(r)))}return _inherits(Tee,g),_createClass(Tee,[{key:"partPrototypes",get:function get(){return[{side:null,Part:u.e},{side:null,Part:i},{side:null,Part:u.d},{side:n.b.LEFT,Part:u.g},{side:n.b.RIGHT,Part:u.g}]}}]),Tee}(),v=function(t){function Leotard(){var t;_classCallCheck(this,Leotard);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Leotard)).call.apply(t,[this,{cleavageOpeness:.2,cleavageCoverage:.1,waistCoverage:.5,curveCleavageX:2,curveCleavageY:-2,armCoverage:.8,sideLoose:0,genCoverage:1,curveBotX:6,curveBotY:6,legCoverage:1}].concat(r)))}return _inherits(Leotard,g),_createClass(Leotard,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:null,Part:u.d},{side:n.b.LEFT,Part:u.g},{side:n.b.RIGHT,Part:u.g}]}}]),Leotard}(),_=function(t){function HalterTop(){var t;_classCallCheck(this,HalterTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalterTop)).call.apply(t,[this,{cleavageCoverage:.3,outerNeckCoverage:.35,innerNeckCoverage:.15,curveCleavageX:9,curveCleavageY:-9,waistCoverage:.66,sideLoose:0}].concat(r)))}return _inherits(HalterTop,g),_createClass(HalterTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:null,Part:l}]}}]),HalterTop}(),C=function(t){function TubeTop(){var t;_classCallCheck(this,TubeTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TubeTop)).call.apply(t,[this,{chestCoverage:.3,waistCoverage:.3,sideLoose:0}].concat(r)))}return _inherits(TubeTop,g),_createClass(TubeTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:l}]}}]),TubeTop}(),O=function(t){function TubeTopSleeves(){var t;_classCallCheck(this,TubeTopSleeves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TubeTopSleeves)).call.apply(t,[this,{chestCoverage:.3,waistCoverage:.3,sideLoose:0,shoulderCoverage:0,armCoverage:.5,armLoose:.5}].concat(r)))}return _inherits(TubeTopSleeves,g),_createClass(TubeTopSleeves,[{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:l},{side:n.b.LEFT,Part:u.a},{side:n.b.RIGHT,Part:u.a}]}}]),TubeTopSleeves}(),k=function(t){function BikiniTop(){var t;_classCallCheck(this,BikiniTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BikiniTop)).call.apply(t,[this,{radius:3.6,outerNeckCoverage:.35,innerNeckCoverage:.03,curveCleavageX:14,curveCleavageY:-14}].concat(r)))}return _inherits(BikiniTop,g),_createClass(BikiniTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:d}]}}]),BikiniTop}(),m=function(t){function Swimsuit(){var t;_classCallCheck(this,Swimsuit);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Swimsuit)).call.apply(t,[this,{cleavageCoverage:.3,outerNeckCoverage:.35,innerNeckCoverage:.15,curveCleavageX:9,curveCleavageY:-9,waistCoverage:.2,sideLoose:0,genCoverage:1,curveBotX:6,curveBotY:6}].concat(r)))}return _inherits(Swimsuit,g),_createClass(Swimsuit,[{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:null,Part:f}]}}]),Swimsuit}()},function(t,e,r){"use strict";r.d(e,"d",function(){return n}),r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"j",function(){return calcBra}),r.d(e,"f",function(){return h}),r.d(e,"h",function(){return y}),r.d(e,"i",function(){return b}),r.d(e,"a",function(){return d}),r.d(e,"e",function(){return g}),r.d(e,"g",function(){return P});var l=r(1),u=r(12),o=r(2),p=r(9),i=r(13),f=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function BraTopStrapPart(){var t;_classCallCheck(this,BraTopStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraTopStrapPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0,aboveParts:["parts neck","parts chest"]}].concat(r)))}return _inherits(BraTopStrapPart,l["c"]),_createClass(BraTopStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcBra(t);if(null!==r){var n=Object(f.splitCurve)(.2,t.neck.cusp,t.collarbone),o={};o.top=n.left.p2,r.top.cp1={x:o.top.x-2,y:o.top.y-15},r.top.cp2={x:r.top.x,y:r.top.y+5},Object(p.j)(e,{fill:this.fill,stroke:this.stroke},t),e.lineWidth=this.strapWidth,e.beginPath(),Object(f.drawPoints)(e,o.top,r.top),e.stroke()}}}]),BraTopStrapPart}(),a=function(t){function BraBotStrapPart(){var t;_classCallCheck(this,BraBotStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraBotStrapPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+chest",reflect:!0,aboveParts:["parts torso"],belowParts:["parts chest"]}].concat(r)))}return _inherits(BraBotStrapPart,l["c"]),_createClass(BraBotStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(null!==calcBra(t)){var r={};r.out={x:t.breast.bot.x,y:t.breast.cleavage.y},r.outbot={x:t.breast.bot.x,y:t.breast.bot.y+1},r.bot={x:-o.g,y:t.breast.bot.y+3},r.mid={x:-o.g,y:t.breast.cleavage.y},Object(p.j)(e,{fill:this.fill,stroke:this.stroke},t),e.beginPath(),Object(f.drawPoints)(e,r.out,r.outbot,r.bot,r.mid,r.out),e.fill()}}}]),BraBotStrapPart}(),s=function(t){function BraPart(){var t;_classCallCheck(this,BraPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(BraPart,l["c"]),_createClass(BraPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcBra(t);null!==r&&(r.out.cp1=Object(f.simpleQuadratic)(r.top,r.out,.4,1),r.top.cp1=Object(f.simpleQuadratic)(t.breast.cleavage,r.top,.6,2),Object(p.j)(e,{fill:this.fill,stroke:this.stroke},t),e.beginPath(),Object(f.drawPoints)(e,r.top,r.out,r.tip,t.breast.bot,t.breast.in,t.breast.cleavage,r.top),e.fill(),e.stroke())}}]),BraPart}();function calcBra(t){if(!1===t.hasOwnProperty("breast"))return null;var e=Object(f.splitCurve)(.7,t.breast.top,t.breast.tip),r={out:Object(f.clone)(e.right.p1),tip:Object(f.clone)(e.right.p2)};return r.top={x:t.breast.bot.x,y:r.out.y+2},r}var c=function(t){function BreastWrapPart(){var t;_classCallCheck(this,BreastWrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BreastWrapPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(BreastWrapPart,l["c"]),_createClass(BreastWrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e,r,n){if(t.breast){for(var o=Object(f.clone)(t.breast.top),i=Object(f.splitCurve)(Object(f.clamp)(.01*n.getDim("breastSize")-.25,0,1),t.breast.top,t.breast.tip),a=i.left.p2,s=i.right.p2,c=0,l=n.getPartInLocation("chest",n.decorativeParts,c);l;)l.coverConceal=["chest"],l=n.getPartInLocation("chest",n.decorativeParts,++c);Object(p.j)(e,{fill:this.fill,stroke:this.stroke},t),e.beginPath(),Object(f.drawPoints)(e,o,t.breast.tip,t.breast.bot,t.breast.in,Object(u.a)(t.breast.in,o)),e.fill(),e.beginPath(),Object(f.drawPoints)(e,a,s,t.breast.bot),e.stroke()}}}]),BreastWrapPart}(),h=function(t){function BreastWrapStrapPart(){var t;_classCallCheck(this,BreastWrapStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BreastWrapStrapPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+chest",reflect:!0,aboveParts:["parts torso"],belowParts:["parts chest"]}].concat(r)))}return _inherits(BreastWrapStrapPart,l["c"]),_createClass(BreastWrapStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e,r,n){var o,i={x:0,y:t.armpit.y},a=Object(f.extractPoint)(t.armpit);t.breast&&(i.y=t.breast.top.y-2,(o=Object(f.extractPoint)(t.breast.top)).cp1={x:.5*o.x,y:i.y},a.cp1=Object(f.simpleQuadratic)(o,a,.5,1));var s=Object(f.splitCurve)(Object(f.clamp)(this.chestCoverage+.01*n.getDim("breastSize"),0,1),t.armpit,t.waist).left.p2,c={x:0,y:s.y-1};c.cp1={x:.5*s.x,y:c.y},l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(f.drawPoints)(e,i,o,a,s,c),e.fill(),e.stroke()}}]),BreastWrapStrapPart}(),y=function(t){function PantiesPart(){var t;_classCallCheck(this,PantiesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PantiesPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso"],belowParts:["parts leg"]}].concat(r)))}return _inherits(PantiesPart,l["c"]),_createClass(PantiesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!1!==t.hasOwnProperty("groin")){var r={};r.top={x:-o.g,y:t.pelvis.y};var n=Object(f.splitCurve)(.9,t.waist,t.hip);r.out=n.right.p1,r.out.cp1=Object(f.simpleQuadratic)(r.top,r.out,.4,-3),r.outbot=n.right.p2,r.bot={x:-o.g,y:t.groin.y},r.bot.cp1={x:r.outbot.x,y:r.outbot.y},r.bot.cp2={x:r.bot.x+5,y:r.bot.y},l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(f.drawPoints)(e,r.top,r.out,r.outbot,r.bot,r.top),e.fill(),e.beginPath(),Object(f.drawPoints)(e,r.top,r.out,r.outbot,r.bot),e.stroke()}}}]),PantiesPart}(),b=function(t){function Underwear(){var t;_classCallCheck(this,Underwear);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Underwear)).call.apply(t,[this,{clothingLayer:l.a.Layer.BASE}].concat(r)))}return _inherits(Underwear,l["b"]),Underwear}(),d=function(t){function Bra(){var t;_classCallCheck(this,Bra);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bra)).call.apply(t,[this].concat(r)))}return _inherits(Bra,b),_createClass(Bra,[{key:"fill",value:function fill(){return"hsl(0,50%,50%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:null,Part:s}]}}]),Bra}(),g=function(t){function BreastWrap(){var t,e;_classCallCheck(this,BreastWrap);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(BreastWrap)).call.apply(t,[this,{chestCoverage:.6,thickness:.5,wrapSize:30}].concat(n)))).fill=Object(i.f)("bandages",e.wrapSize),e}return _inherits(BreastWrap,b),_createClass(BreastWrap,[{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:h}]}}]),BreastWrap}(),P=function(t){function Panties(){var t;_classCallCheck(this,Panties);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Panties)).call.apply(t,[this].concat(r)))}return _inherits(Panties,b),_createClass(Panties,[{key:"fill",value:function fill(){return"hsl(0,50%,50%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:y}]}}]),Panties}()},function(t,e,r){"use strict";r.d(e,"d",function(){return i}),r.d(e,"c",function(){return a}),r.d(e,"i",function(){return calcDressCleavage}),r.d(e,"h",function(){return calcDressBase}),r.d(e,"a",function(){return s}),r.d(e,"g",function(){return c}),r.d(e,"j",function(){return calcSuperSleeve}),r.d(e,"e",function(){return l}),r.d(e,"b",function(){return u}),r.d(e,"f",function(){return h});var p=r(1),n=r(3),f=r(12),o=r(2),v=r(0),_=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function DressBreastPart(){var t;_classCallCheck(this,DressBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(DressBreastPart,p["c"]),_createClass(DressBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=calcDressBase.call(this,t),n=r.cleavageBot,o=r.cleavageTop;if(e.beginPath(),Object(v.drawPoints)(e,{x:0,y:0},Object(v.adjust)(n,.38*-this.thickness,0),Object(v.adjust)(o,.38*-this.thickness,0),{x:100,y:250},{x:100,y:0}),e.clip(),!Object(f.b)(t,e,this)){var i=Object(v.adjust)(t.breast.top,.5,.7),a=Object(v.adjust)(t.breast.tip,.1,0),s=Object(v.adjust)(t.breast.bot,0,-.6),c=Object(v.adjust)(t.breast.in,-.9,-.5),l=Object(v.adjust)(t.breast.cleavage,-.6,0),u=Object(v.adjust)(Object(f.a)(l,i),0,.2);e.beginPath(),Object(v.drawPoints)(e,i,a,s,c,l,u),e.fill(),e.beginPath(),Object(v.drawPoints)(e,i,a,s),e.stroke(),e.beginPath(),Object(v.drawPoints)(e,n,o),e.stroke()}}}]),DressBreastPart}(),a=function(t){function DressBasePart(){var t;_classCallCheck(this,DressBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressBasePart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg","decorativeParts leg"],aboveSameLayerParts:["groin","leg"]},{cleavageOpeness:.3,cleavageCoverage:.3,sideLoose:0,legCoverage:.4,legLoose:0,curveCleavageX:0,curveCleavageY:0,bustle:!1}].concat(r)))}return _inherits(DressBasePart,p["c"]),_createClass(DressBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcDressBase.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=(r.collarbone,r.armpit,r.waist,r.hip,r.outerPoints),s=r.shoulder,c=r.pit,l=r.bottom;p.a.simpleStrokeFill(e,t,this),e.beginPath(),v.drawPoints.apply(void 0,[e,n,o,i,s,c].concat(_toConsumableArray(a),[l])),e.fill(),e.beginPath(),v.drawPoints.apply(void 0,[e,n,o,i,s,v.breakPoint,c].concat(_toConsumableArray(a),[l])),e.stroke()}}]),DressBasePart}();function calcDressCleavage(t,e){var r,n,o;if(r={x:-.2,y:Object(v.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin).left.p2.y},this.cleavageOpeness<0){var i=Object(v.splitCurve)(1+this.cleavageOpeness,t.neck.top,t.neck.cusp);n=Object(v.extractPoint)(i.left.p2),o=Object(v.clone)(t.neck.cusp)}else if(1<this.cleavageOpeness){var a=Object(v.splitCurve)(this.cleavageOpeness-1,t.collarbone,t.shoulder);n=Object(v.extractPoint)(a.left.p2)}else{var s=Object(v.splitCurve)(this.cleavageOpeness,t.neck.cusp,t.collarbone);n=Object(v.extractPoint)(s.left.p2)}!this.lacing&&e&&r.y<e.y&&(r.y=e.y+3);var c=Object(v.splitCurve)(.5,r,n);return n.cp1={x:c.left.p2.x+this.curveCleavageX,y:c.left.p2.y+this.curveCleavageY},{cleavageBot:r,cleavageTop:n,neck:o}}function calcDressBase(t){var e,r=Object(v.clone)(t.collarbone),n=Object(v.clone)(t.armpit),o=Object(v.clone)(t.collarbone),i=Object(v.clone)(t.armpit),a=Object(v.clone)(t.lat),s=Object(v.adjust)(t.hip,0,0),c=Object(v.adjust)(t.waist,0,0),l=a||i,u=Object(_.j)(l,s,{x:0,y:c.y},{x:100,y:c.y});if(u.x>c.x&&(c.x=Object(_.d)(c.x,u.x,this.sideLoose),Object(_.m)(i,c,this.sideLoose),Object(_.m)(c,s,this.sideLoose)),this.legCoverage<0)e=Object(_.f)(i,s,1+this.legCoverage,i,a,c,s);else if(0==this.legCoverage)e=[i,a,c,s];else{var p,f=[i,a,c];if(0<this.legLoose){p=Object(_.f)(s,t.ankle.out,this.legCoverage,s,t.thigh.out);var h=s.y-(s.y-t.ankle.out.y)*this.legCoverage;h<t.groin.y&&((p=[])[p.length]=Object(v.clone)(s),p[p.length]=Object(v.clone)(t.thigh.out),this.bustle&&(p[p.length]=Object(v.extractPoint)(t.thigh.out)),p[p.length-1].y=h,p[p.length-1].x+=30*this.legLoose*this.legCoverage)}else p=Object(_.f)(s,t.ankle.out,this.legCoverage,s,t.thigh.out,t.knee.out,t.calf.out,t.ankle.out);e=f.concat(p)}var y={y:e[e.length-1].y,x:-.1},b=calcDressCleavage.call(this,t,y),d=b.cleavageBot,g=b.cleavageTop,P=b.neck;return e[e.length-1].y+=2,y.y+=-2,y.cp1={x:.5*y.x+.5*e[e.length-1].x,y:y.y},{cleavageBot:d,cleavageTop:g,neck:P,collarbone:o,armpit:i,waist:c,hip:s,outerPoints:e,shoulder:r,pit:n,bottom:y}}var s=function(t){function DetachedSleevePart(){var t;_classCallCheck(this,DetachedSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DetachedSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{shoulderCoverage:-.1,armCoverage:.5,armLoose:0}].concat(r)))}return _inherits(DetachedSleevePart,p["c"]),_createClass(DetachedSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!(this.armCoverage<=0)){var r=calcSuperSleeve.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;if(p.a.simpleStrokeFill(e,t,this),1<=this.shoulderCoverage){var i=Object(v.adjust)(t.collarbone,-.5,0),a=Object(v.adjust)(t.armpit,-.5,0);e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o),[Object(f.a)(a,i)])),e.fill(),e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o))),e.stroke()}else{if(0<this.shoulderCoverage){var s=Object(v.splitCurve)(1-this.shoulderCoverage,t.collarbone,t.shoulder);t.deltoids&&t.collarbone.y!=t.deltoids.y&&(s=Object(v.splitCurve)(1-this.shoulderCoverage,t.collarbone,t.deltoids)),n[0]=Object(v.extractPoint)(s.left.p2),n[1]=s.right.p2}else{var c=Object(v.splitCurve)(Math.abs(this.shoulderCoverage),t.shoulder,t.elbow.out);n.splice(0,1),t.deltoids&&t.collarbone.y!=t.deltoids.y&&n.splice(0,1),n[0]=Object(v.extractPoint)(c.left.p2)}e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o),[n[0]])),e.fill(),e.stroke()}}}}]),DetachedSleevePart}(),c=function(t){function SuperSleevePart(){var t;_classCallCheck(this,SuperSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5,armLoose:0}].concat(r)))}return _inherits(SuperSleevePart,p["c"]),_createClass(SuperSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!(this.armCoverage<=0)){var r=calcSuperSleeve.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints,i=Object(v.adjust)(t.collarbone,-.5,0),a=Object(v.adjust)(t.armpit,-.5,0);p.a.simpleStrokeFill(e,t,this),e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o),[Object(f.a)(a,i)])),e.fill(),e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o))),e.stroke()}}}]),SuperSleevePart}();function calcSuperSleeve(t){var e=[],r=[];if(0<this.armLoose){var n=Object(v.adjust)(t.wrist.in,0,0);n.y=t.hand.tip.y;var o,i=Object(v.adjust)(t.shoulder,5*this.armLoose*.75,0);t.deltoids&&t.deltoids.y!=t.collarbone.y&&(o=Object(v.adjust)(t.deltoids,5*this.armLoose*1,0));var a=Object(v.adjust)(t.hand.knuckle,5*this.armLoose*1.5,0),s=Object(v.adjust)(t.hand.tip,5*this.armLoose*1,0);e=Object(_.f)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,o,i,a,s),void 0!==(r=Object(_.g)(e[e.length-1],!0,t.armpit,n))[0]&&(r[0].x-=5*this.armLoose*1),void 0!==r[1]&&(r[1].x-=5*this.armLoose*1)}else{var c;t.deltoids&&t.deltoids.y!=t.collarbone.y&&(c=t.deltoids),(e=Object(_.f)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,c,t.shoulder,t.elbow.out,t.wrist.out,t.hand.knuckle,t.hand.fist,t.hand.tip))[e.length-1].y<=t.thumb.tip.y?(e[e.length]=t.hand.palm,(r=[t.armpit,t.elbow.in,t.wrist.in,t.thumb.out,t.thumb.tip]).reverse()):r=Object(_.g)(e[e.length-1],!0,t.armpit,t.elbow.in,t.wrist.in,t.thumb.out,t.thumb.tip)}return this.armCoverage<1&&(r[0]=Object(v.extractPoint)(r[0])),{outerArmPoints:e,innerArmPoints:r}}var l=function(t){function LacingPart(){var t;_classCallCheck(this,LacingPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LacingPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!1,aboveParts:["parts chest","decorativeParts chest"]},{lacing:!1,crosses:0}].concat(r)))}return _inherits(LacingPart,p["c"]),_createClass(LacingPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(this.lacing){p.a.simpleStrokeFill(e,t,this);var r=calcDressCleavage.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=this.crosses;i<=0&&(i=13*this.cleavageCoverage);var a=Object(v.reflect)(o);a.cp1=Object(v.reflect)(o.cp1),a.cp2=Object(v.reflect)(o.cp2);var s=Object(_.e)(n,o,Object(v.reflect)(n),a,i,0);e.lineWidth=1,e.beginPath(),v.drawPoints.apply(void 0,[e].concat(_toConsumableArray(s.inner),[v.breakPoint],_toConsumableArray(s.outer))),e.stroke()}}}]),LacingPart}(),u=function(t){function Dress(){var t;_classCallCheck(this,Dress);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Dress)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,armCoverage:.5,armLoose:0,thickness:1}].concat(r)))}return _inherits(Dress,p["b"]),Dress}(),h=function(t){function SuperDress(){var t;_classCallCheck(this,SuperDress);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperDress)).call.apply(t,[this,{}].concat(r)))}return _inherits(SuperDress,u),_createClass(SuperDress,[{key:"stroke",value:function stroke(){return"hsla(335, 80%, 30%, 1)"}},{key:"fill",value:function fill(){return"hsla(335, 100%, 42%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:l},{side:null,Part:a},{side:null,Part:i},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),SuperDress}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var n=r(0),o=r(2);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function FacePart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,FacePart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.BELOW_HAIR,reflect:!1,coverConceal:[],uncoverable:!1}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(FacePart,[{key:"stroke",value:function stroke(){return n.none}},{key:"fill",value:function fill(){return"inherit"}},{key:"getLineWidth",value:function getLineWidth(){return 1.5}}]),FacePart}()},function(t,e,r){"use strict";r.d(e,"e",function(){return n}),r.d(e,"g",function(){return c}),r.d(e,"h",function(){return l}),r.d(e,"b",function(){return u}),r.d(e,"c",function(){return p}),r.d(e,"d",function(){return f}),r.d(e,"f",function(){return h}),r.d(e,"i",function(){return y}),r.d(e,"a",function(){return b});var i=r(1),o=r(2),a=r(6),s=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function RingBotPart(){var t;_classCallCheck(this,RingBotPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RingBotPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(a.Location.EAR),reflect:!1,belowParts:["faceParts ".concat(a.Location.EAR)]},{radius:2}].concat(r)))}return _inherits(RingBotPart,i["c"]),_createClass(RingBotPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation);i.a.simpleStrokeFill(e,t,this),e.beginPath(),e.arc(r.x,r.y,this.radius,0,2*Math.PI),e.stroke()}}]),RingBotPart}(),c=function(t){function RingTopPart(){var t;_classCallCheck(this,RingTopPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RingTopPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(a.Location.EAR),reflect:!1,aboveParts:["faceParts ".concat(a.Location.EAR)]}].concat(r)))}return _inherits(RingTopPart,i["c"]),_createClass(RingTopPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation);i.a.simpleStrokeFill(e,t,this),e.beginPath();var n=Object(s.rad)(this.rotation);e.arc(r.x,r.y,this.radius,n,Math.PI+n),e.stroke()}}]),RingTopPart}(),l=function(t){function StudPart(){var t;_classCallCheck(this,StudPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(a.Location.NOSE),reflect:!1,aboveParts:["faceParts ".concat(a.Location.NOSE)]},{radius:.3}].concat(r)))}return _inherits(StudPart,i["c"]),_createClass(StudPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation);i.a.simpleStrokeFill(e,t,this),e.beginPath();var n=da.drawCircle(r,this.radius);s.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n))),e.fill()}}]),StudPart}(),u=function(t){function ChainPart(){var t;_classCallCheck(this,ChainPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainPart)).call.apply(t,[this,{layer:o.a.HAIR,loc:"+".concat(a.Location.NOSE),reflect:!1},{thickness:.7,slack:1}].concat(r)))}return _inherits(ChainPart,i["c"]),_createClass(ChainPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.locateRelativeToDrawpoint)(t,this.relativeLocation),n=Object(a.locateRelativeToDrawpoint)(t,this.endRelativeLocation);i.a.simpleStrokeFill(e,t,this),n.cp1=Object(s.point)((r.x+n.x)/2,(r.y+n.y)/2-this.slack*Object(s.norm)(Object(s.diff)(r,n))),e.beginPath(),e.setLineDash([1,1]),Object(s.drawPoints)(e,r,n),e.stroke(),e.setLineDash([])}}]),ChainPart}(),p=function(t){function Jewelry(){var t,e;_classCallCheck(this,Jewelry);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(Jewelry)).call.apply(t,[this,{clothingLayer:i.a.Layer.INNER,rotation:0,stroke:"rgb(255,223,0)",fill:"rgb(255,223,0)"}].concat(n)))).parts.forEach(function(t){t.loc=e.loc,Object(i.d)(e.side,t)}),e}return _inherits(Jewelry,i["b"]),Jewelry}(),f=function(t){function Piercing(){var t;_classCallCheck(this,Piercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Piercing)).call.apply(t,[this].concat(r)))}return _inherits(Piercing,p),Piercing}(),h=function(t){function RingPiercing(){var t;_classCallCheck(this,RingPiercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RingPiercing)).call.apply(t,[this,{relativeLocation:{drawpoint:"ear.mid",dx:0,dy:0},loc:"".concat(a.Location.EAR),requiredParts:"faceParts"}].concat(r)))}return _inherits(RingPiercing,f),_createClass(RingPiercing,[{key:"partPrototypes",get:function get(){return[{side:null,Part:n},{side:null,Part:c}]}}]),RingPiercing}(),y=function(t){function StudPiercing(){var t;_classCallCheck(this,StudPiercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},loc:"".concat(a.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing,f),_createClass(StudPiercing,[{key:"partPrototypes",get:function get(){return[{side:null,Part:l}]}}]),StudPiercing}(),b=function(t){function ChainJewelry(){var t;_classCallCheck(this,ChainJewelry);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainJewelry)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},endRelativeLocation:{drawpoint:"ear.mid",dx:0,dy:0},loc:"".concat(a.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(ChainJewelry,p),_createClass(ChainJewelry,[{key:"partPrototypes",get:function get(){return[{side:null,Part:u}]}}]),ChainJewelry}()},function(t,e,r){"use strict";r.d(e,"d",function(){return c}),r.d(e,"c",function(){return l}),r.d(e,"e",function(){return u}),r.d(e,"g",function(){return p}),r.d(e,"a",function(){return b}),r.d(e,"b",function(){return d}),r.d(e,"f",function(){return g}),r.d(e,"h",function(){return P});var f=r(1),n=r(3),o=r(2),i=r(12),h=r(0),a=r(23),s=r(5),y=r(16);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function CuirassPart(){var t;_classCallCheck(this,CuirassPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CuirassPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(CuirassPart,f["c"]),_createClass(CuirassPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){f.a.simpleStrokeFill(e,t,this);var r=y.p.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=r.shoulder,s=r.armpit,c=r.waist,l=r.hip,u=r.out,p=r.bottom;o=Object(h.adjust)(o,0,.5),a=Object(h.adjust)(a,-1,.5),s.cp1={x:a.x-5,y:.5*(a.y-s.y)+s.y},s.cp2=void 0,(p={y:u.y-6,x:-.2}).cp1={x:.5*p.x+.5*u.x,y:p.y},e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c,l,u,p),e.fill(),e.stroke()}}]),CuirassPart}(),l=function(t){function CuirassBreastPart(){var t;_classCallCheck(this,CuirassBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CuirassBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(CuirassBreastPart,f["c"]),_createClass(CuirassBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(f.a.simpleStrokeFill(e,t,this),!Object(i.b)(t,e,this)){var r=t.breast;e.beginPath(),Object(h.drawPoints)(e,r.top,r.tip,r.bot,r.in,r.cleavage,r.top),e.fill(),e.beginPath(),Object(h.drawPoints)(e,r.top,r.tip,r.bot),e.stroke(),e.strokeStyle=e.fillStyle,e.beginPath(),Object(h.drawPoints)(e,r.bot,r.in,r.cleavage,r.top),e.stroke()}}}]),CuirassBreastPart}(),u=function(t){function GreavePart(){var t;_classCallCheck(this,GreavePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GreavePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"],reflect:!1},{}].concat(r)))}return _inherits(GreavePart,f["c"]),_createClass(GreavePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){f.a.simpleStrokeFill(e,t,this);var r=[];void 0!==t.quads&&(r[0]=da.clone(t.quads.top),r[0].x=t.thigh.out.x,r[1]=da.clone(t.quads.out));var n=s.i.apply(void 0,[t.hip,t.ankle.out,this.legCoverage,t.hip,t.thigh.out].concat(r,[t.knee.out,t.calf.out,t.ankle.out])),o=Object(s.h)(n[0],!0,t.groin,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in);n[1]&&(n[1]=Object(h.extractPoint)(n[1])),n[0]=Object(h.extractPoint)(n[0]),n[0].cp1={x:Object(s.d)(o[o.length-1].x,n[0].x,.5),y:n[0].y+16},o[0]=da.extractPoint(o[0]),o[0].cp1={x:Object(s.d)(n[n.length-1].x,o[0].x,.5),y:o[0].y+6},e.beginPath(),h.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),_toConsumableArray(o),[n[0]])),e.fill(),e.stroke()}}]),GreavePart}(),p=function(t){function VambracePart(){var t;_classCallCheck(this,VambracePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(VambracePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(VambracePart,f["c"]),_createClass(VambracePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){f.a.simpleStrokeFill(e,t,this);var r=a.l.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;e.beginPath(),h.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[Object(h.extractPoint)(t.wrist.out),t.wrist.in],_toConsumableArray(o),[Object(h.extractPoint)(n[0])])),e.fill(),e.stroke()}}]),VambracePart}(),b=function(t){function Armor(){var t;_classCallCheck(this,Armor);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Armor)).call.apply(t,[this,{clothingLayer:f.a.Layer.OUTER}].concat(r)))}return _inherits(Armor,f["b"]),_createClass(Armor,[{key:"stroke",value:function stroke(){return"#252539"}},{key:"fill",value:function fill(){return"#8b8e91"}}]),Armor}(),d=function(t){function Cuirass(){var t;_classCallCheck(this,Cuirass);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Cuirass)).call.apply(t,[this,{cleavageOpeness:.055,cleavageCoverage:.1,sideLoose:.3,waistCoverage:.5,curveCleavageX:1,curveCleavageY:-4,legCoverage:1}].concat(r)))}return _inherits(Cuirass,b),_createClass(Cuirass,[{key:"partPrototypes",get:function get(){return[{side:null,Part:l},{side:null,Part:c}]}}]),Cuirass}(),g=function(t){function Greaves(){var t;_classCallCheck(this,Greaves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Greaves)).call.apply(t,[this,{legCoverage:.54}].concat(r)))}return _inherits(Greaves,b),_createClass(Greaves,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u}]}}]),Greaves}(),P=function(t){function Vambraces(){var t;_classCallCheck(this,Vambraces);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Vambraces)).call.apply(t,[this,{armCoverage:.6}].concat(r)))}return _inherits(Vambraces,b),_createClass(Vambraces,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p}]}}]),Vambraces}()},function(t,e,r){"use strict";r.d(e,"g",function(){return n}),r.d(e,"i",function(){return i}),r.d(e,"s",function(){return a}),r.d(e,"n",function(){return s}),r.d(e,"d",function(){return l}),r.d(e,"f",function(){return u}),r.d(e,"k",function(){return y}),r.d(e,"q",function(){return b}),r.d(e,"t",function(){return calcBelt}),r.d(e,"c",function(){return d}),r.d(e,"a",function(){return g}),r.d(e,"j",function(){return P}),r.d(e,"h",function(){return v}),r.d(e,"r",function(){return _}),r.d(e,"o",function(){return C}),r.d(e,"m",function(){return O}),r.d(e,"l",function(){return k}),r.d(e,"e",function(){return m}),r.d(e,"p",function(){return w}),r.d(e,"b",function(){return j});var p=r(1),o=r(2),f=r(4),h=r(5),c=r(6);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function FaceAccessoryPart(){var t;_classCallCheck(this,FaceAccessoryPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FaceAccessoryPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",aboveParts:["eyelid","brow","eyelash","decorativeParts head"]}].concat(r)))}return _inherits(FaceAccessoryPart,p["c"]),FaceAccessoryPart}(),i=function(t){function GagStrapPart(){var t;_classCallCheck(this,GagStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GagStrapPart)).call.apply(t,[this,{reflect:!0}].concat(r)))}return _inherits(GagStrapPart,n),_createClass(GagStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(f.h)(t.chin.out),n=_slicedToArray(calcGag(t),4)[1];n.cp1=Object(f.q)(r,n,.5,1),n.cp2=null,p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(f.f)(e,r,n),e.stroke()}}]),GagStrapPart}(),a=function(t){function TopTriangularStrap(){var t;_classCallCheck(this,TopTriangularStrap);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TopTriangularStrap)).call.apply(t,[this,{layer:o.a.ABOVE_HAIR,reflect:!0,branchOutDistance:18}].concat(r)))}return _inherits(TopTriangularStrap,n),_createClass(TopTriangularStrap,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(f.h)(t.chin.out),n={x:0,y:t.skull.y-this.branchOutDistance};n.cp1=Object(f.q)(r,n,.5,1);var o=Object(f.h)(t.skull);p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(f.f)(e,r,n,o),e.stroke()}}]),TopTriangularStrap}(),s=function(t){function RingGagPart(){var t;_classCallCheck(this,RingGagPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RingGagPart)).call.apply(t,[this,{ringStroke:"#393939",ringThickness:.5,spiderLegs:!1}].concat(r)))}return _inherits(RingGagPart,n),_createClass(RingGagPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){Object(c.setStrokeAndFill)(e,{stroke:this.ringStroke,fill:this.ringStroke},t),e.lineWidth=this.ringThickness;var r=calcGag(t);if(e.beginPath(),f.f.apply(void 0,[e].concat(_toConsumableArray(r))),e.stroke(),this.spiderLegs){for(var n=[],o=0;o<r.length-1;++o){var i=Object(f.r)(.5,r[o],r[o+1]).left.p2,a=null;a=o%2==0?{x:1.2*r[o+1].x,y:r[o].y}:{x:1.2*r[o].x,y:r[o+1].y};var s=null;s=o in[0,1]?{x:a.x+1,y:a.y}:{x:a.x-1,y:a.y},n.push(i,a,s,f.b)}e.beginPath(),f.f.apply(void 0,[e].concat(n)),e.stroke()}}}]),RingGagPart}(),l=function(t){function BallGagPart(){var t;_classCallCheck(this,BallGagPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BallGagPart)).call.apply(t,[this,{ballFill:"red"}].concat(r)))}return _inherits(BallGagPart,n),_createClass(BallGagPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){Object(c.setStrokeAndFill)(e,{stroke:this.ballFill,fill:this.ballFill},t);var r=_slicedToArray(calcGag(t),5),n=r[0],o=r[1],i=r[2],a=r[3];r[4];e.beginPath(),Object(f.f)(e,n,o,i,a,n),e.fill()}}]),BallGagPart}();function calcGag(t){var e={x:0,y:.53*t.lips.top.y+.47*t.lips.bot.y},r=.7*Math.min((t.lips.top.y-t.lips.bot.y)/2,t.lips.out.x);return Object(f.e)(e,r)}var u=function(t){function BlindFoldPart(){var t;_classCallCheck(this,BlindFoldPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BlindFoldPart)).call.apply(t,[this,{reflect:!0},{width:6,splitAlongSkull:.9,fromSkullDistance:16}].concat(r)))}return _inherits(BlindFoldPart,n),_createClass(BlindFoldPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(f.r)(.96,t.skull,t.skull.side),n=Object(f.h)(r.right.p1),o={x:0,y:t.skull.y-this.fromSkullDistance};o.cp1={x:n.x-.5,y:n.y-2},o.cp2={x:o.x+2,y:o.y};var i={x:0,y:o.y-this.width},a=(r=Object(f.r)(this.splitAlongSkull,t.skull.side,t.skull.bot)).right.p1;p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(f.f)(e,n,o,i,a,n),e.fill()}}]),BlindFoldPart}(),y=function(t){function GlassesPart(){var t;_classCallCheck(this,GlassesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GlassesPart)).call.apply(t,[this,{reflect:!0},{eccentricity:5,height:3,thickness:.5}].concat(r)))}return _inherits(GlassesPart,n),_createClass(GlassesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=Object(f.h)(t.ear.mid);r.y+=1,r.x-=1;var n=Object(f.h)(t.eyes.out);n.x+=1;var o=Object(f.h)(t.ear.mid);o.x-=2,o.y+=2;var i=Object(f.h)(t.eyes.in);i.x-=1.8;var a=this.eccentricity,s=this.height,c={x:i.x,y:i.y};c.cp1=Object(h.k)(i,n,.5,s),c.cp1.x+=a,c.cp2=Object(h.k)(i,n,.5,s),c.cp2.x+=-a;var l={x:i.x,y:i.y};l.cp1=Object(h.k)(i,n,.5,-s),l.cp1.x+=a,l.cp2=Object(h.k)(i,n,.5,-s),l.cp2.x+=-a;var u=Object(f.l)(i);u.cp1={y:i.y+2,x:0},e.beginPath(),Object(f.f)(e,n,c,f.b,n,l),e.fill(),e.beginPath(),Object(f.f)(e,o,n,c,f.b,n,l,u),e.stroke()}}]),GlassesPart}(),b=function(t){function SimpleBeltPart(){var t;_classCallCheck(this,SimpleBeltPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleBeltPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+torso",reflect:!0,aboveParts:["parts leg","clothingParts groin","parts chest","clothingParts chest","decorativeParts chest"],aboveSameLayerParts:["clothingParts torso"]},{waistCoverage:.2,beltWidth:4,beltCurve:-1,highlight:"#cdc331"}].concat(r)))}return _inherits(SimpleBeltPart,p["c"]),_createClass(SimpleBeltPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=calcBelt.call(this,t),n=r.inTop,o=r.outTop,i=r.outMid,a=r.outBot,s=r.inBot;e.beginPath(),Object(f.f)(e,n,o,i,a,s),e.fill(),e.stroke()}}]),SimpleBeltPart}();function calcBelt(t){var e,r,n,o,i,a;this.beltWidth<0&&(this.beltWidth=0),n=(e=(a=0<this.waistCoverage?Object(f.r)(1-this.waistCoverage,t.waist,t.hip):Object(f.r)(Math.abs(this.waistCoverage),t.hip,t.thigh.out),Object(f.h)(a.left.p2))).y-this.beltWidth>t.hip.y?(n=Object(f.i)(a.left.p2,a.right.p2,{x:null,y:e.y-this.beltWidth}),(n=Object(f.r)(n[0].t,a.left.p2,a.right.p2)).left.p2):e.y>t.hip.y?(r=a.right.p2,n=Object(f.i)(t.hip,t.thigh.out,{x:null,y:e.y-this.beltWidth}),(n=Object(f.r)(n[0].t,t.hip,t.thigh.out)).left.p2):(n=Object(f.i)(a.left.p2,a.right.p2,{x:null,y:e.y-this.beltWidth}),(n=Object(f.r)(n[0].t,a.left.p2,a.right.p2)).left.p2);var s=e.y-t.hip.y;return i={x:-.2,y:(o={x:-.2,y:t.pelvis.y+1.2*s+this.beltCurve}).y-this.beltWidth},e.cp1={x:.5*(e.x+o.x),y:o.y},i.cp1={x:.5*(i.x+n.x),y:i.y},{inTop:o,outTop:e,outMid:r,outBot:n,inBot:i}}var d=function(t){function ApronPart(){var t;_classCallCheck(this,ApronPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ApronPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"+torso",reflect:!0,aboveSameLayerParts:["clothingParts torso"],aboveParts:["parts leg","clothingParts groin","parts chest","clothingParts chest","decorativeParts chest"]},{waistCoverage:.5,beltWidth:3,beltCurve:-1,coverage:.9,length:50,curveX:20,curveY:0,highlight:"#cdc331"}].concat(r)))}return _inherits(ApronPart,p["c"]),_createClass(ApronPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=calcBelt.call(this,t),n=r.inTop,o=r.outTop,i=(r.outMid,r.outBot,r.inBot),a=Object(f.r)(this.coverage,n,o).left.p2,s={x:i.x,y:i.y-this.length};s.cp1={x:a.x+this.curveX,y:s.y+this.curveY},e.beginPath(),Object(f.f)(e,n,a,s),e.fill(),e.stroke()}}]),ApronPart}(),g=function(t){function Accessory(){var t;_classCallCheck(this,Accessory);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Accessory)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID}].concat(r)))}return _inherits(Accessory,p["b"]),Accessory}(),P=function(t){function Glasses(){var t;_classCallCheck(this,Glasses);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Glasses)).call.apply(t,[this].concat(r)))}return _inherits(Glasses,g),_createClass(Glasses,[{key:"fill",value:function fill(){return"#a2a2a2"}},{key:"stroke",value:function stroke(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:y}]}}]),Glasses}(),v=function(t){function Gag(){var t,e;_classCallCheck(this,Gag);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(Gag)).call.apply(t,[this,{lipParting:60,thickness:1.5}].concat(n)))).Mods=Object.assign({lipParting:e.lipParting},e.Mods),e}return _inherits(Gag,g),_createClass(Gag,[{key:"fill",value:function fill(){return"#a2a2a2"}},{key:"stroke",value:function stroke(){return"#1e1e1e"}}]),Gag}(),_=function(t){function SimpleRingGag(){var t;_classCallCheck(this,SimpleRingGag);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleRingGag)).call.apply(t,[this].concat(r)))}return _inherits(SimpleRingGag,v),_createClass(SimpleRingGag,[{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:s}]}}]),SimpleRingGag}(),C=function(t){function SimpleBallGag(){var t;_classCallCheck(this,SimpleBallGag);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleBallGag)).call.apply(t,[this].concat(r)))}return _inherits(SimpleBallGag,v),_createClass(SimpleBallGag,[{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:l}]}}]),SimpleBallGag}(),O=function(t){function MediumRingGag(){var t;_classCallCheck(this,MediumRingGag);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumRingGag)).call.apply(t,[this].concat(r)))}return _inherits(MediumRingGag,v),_createClass(MediumRingGag,[{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:null,Part:s}]}}]),MediumRingGag}(),k=function(t){function MediumBallGag(){var t;_classCallCheck(this,MediumBallGag);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumBallGag)).call.apply(t,[this].concat(r)))}return _inherits(MediumBallGag,v),_createClass(MediumBallGag,[{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:null,Part:l}]}}]),MediumBallGag}(),m=function(t){function BlindFold(){var t;_classCallCheck(this,BlindFold);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BlindFold)).call.apply(t,[this].concat(r)))}return _inherits(BlindFold,g),_createClass(BlindFold,[{key:"fill",value:function fill(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:u}]}}]),BlindFold}(),w=function(t){function SimpleBelt(){var t;_classCallCheck(this,SimpleBelt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleBelt)).call.apply(t,[this,{clothingLayer:p.a.Layer.OUTER_FAR}].concat(r)))}return _inherits(SimpleBelt,g),_createClass(SimpleBelt,[{key:"fill",value:function fill(){return"#464646"}},{key:"stroke",value:function stroke(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:b}]}}]),SimpleBelt}(),j=function(t){function Apron(){var t;_classCallCheck(this,Apron);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Apron)).call.apply(t,[this,{clothingLayer:p.a.Layer.EVEN_FARER}].concat(r)))}return _inherits(Apron,g),_createClass(Apron,[{key:"fill",value:function fill(){return"#ffffff"}},{key:"stroke",value:function stroke(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:b},{side:null,Part:d}]}}]),Apron}()},function(t,e,r){"use strict";r.d(e,"l",function(){return calcGlove}),r.d(e,"j",function(){return i}),r.d(e,"h",function(){return a}),r.d(e,"e",function(){return s}),r.d(e,"c",function(){return f}),r.d(e,"g",function(){return h}),r.d(e,"i",function(){return y}),r.d(e,"k",function(){return b}),r.d(e,"f",function(){return d}),r.d(e,"a",function(){return g}),r.d(e,"b",function(){return P}),r.d(e,"d",function(){return v});var c=r(1),n=r(3),l=r(12),o=r(2),u=r(0),p=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcGlove(t){var e=Object(p.i)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out);return{outerArmPoints:e,innerArmPoints:Object(p.h)({y:e[0].y-3,x:e[0].x},!0,t.armpit,t.elbow.in,t.wrist.in)}}var i=function(t){function GloveSleevePart(){var t;_classCallCheck(this,GloveSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GloveSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(GloveSleevePart,c["c"]),_createClass(GloveSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcGlove.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;c.a.simpleStrokeFill(e,t,this),0<this.armCoverage?(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[Object(u.extractPoint)(t.hand.palm)],_toConsumableArray(o),[Object(u.extractPoint)(n[0])]))):(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[Object(u.extractPoint)(t.hand.palm)],_toConsumableArray(o),[Object(l.a)(o[o.length-1],n[0])]))),e.fill(),e.stroke(),e.fill(),e.stroke()}}]),GloveSleevePart}(),a=function(t){function GlovePart(){var t;_classCallCheck(this,GlovePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GlovePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(GlovePart,c["c"]),_createClass(GlovePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=calcGlove.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints,i=[t.hand.knuckle,t.hand.tip,t.hand.palm,t.thumb.tip,t.thumb.out];0<this.armCoverage?(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),i,_toConsumableArray(o),[Object(u.extractPoint)(n[0])]))):(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),i,_toConsumableArray(o),[Object(l.a)(o[o.length-1],n[0])]))),e.fill(),e.stroke()}}]),GlovePart}(),s=function(t){function FingerlessGlovePart(){var t;_classCallCheck(this,FingerlessGlovePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FingerlessGlovePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(FingerlessGlovePart,c["c"]),_createClass(FingerlessGlovePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r;c.a.simpleStrokeFill(e,t,this);var n=Object(p.i)(t.collarbone,t.hand.palm,this.armCoverage,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,t.hand.knuckle),o=Object(p.h)({y:n[0].y-3,x:n[0].x},!0,t.armpit,t.elbow.in,t.wrist.in,t.thumb.out);r=Object(u.splitCurve)(.3,t.hand.knuckle,t.hand.tip);var i=Object(u.extractPoint)(r.left.p2);r=Object(u.splitCurve)(.8,t.hand.tip,t.hand.palm);var a=Object(u.extractPoint)(r.left.p2);r=Object(u.splitCurve)(.3,t.thumb.tip,t.thumb.out);var s=Object(u.extractPoint)(r.left.p2);0<this.armCoverage?(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[i,a,Object(u.extractPoint)(t.hand.palm),s],_toConsumableArray(o),[Object(u.extractPoint)(n[0])]))):(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[i,a,Object(u.extractPoint)(t.hand.palm),s],_toConsumableArray(o),[Object(l.a)(o[o.length-1],n[0])]))),e.fill(),e.stroke()}}]),FingerlessGlovePart}(),f=function(t){function BraceletPart(){var t;_classCallCheck(this,BraceletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraceletPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(BraceletPart,c["c"]),_createClass(BraceletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=calcGlove.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;0<this.armCoverage?(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[Object(u.extractPoint)(t.wrist.out),t.wrist.in],_toConsumableArray(o),[Object(u.extractPoint)(n[0])]))):(e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[t.wrist.out,t.wrist.in],_toConsumableArray(o),[Object(l.a)(o[o.length-1],n[0])]))),e.fill(),e.stroke()}}]),BraceletPart}(),h=function(t){function Glove(){var t;_classCallCheck(this,Glove);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Glove)).call.apply(t,[this,{clothingLayer:c.a.Layer.BASE,thickness:.8}].concat(r)))}return _inherits(Glove,c["b"]),_createClass(Glove,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}}]),Glove}(),y=function(t){function GloveSleeve(){var t;_classCallCheck(this,GloveSleeve);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GloveSleeve)).call.apply(t,[this,{armCoverage:.5,thickness:.6}].concat(r)))}return _inherits(GloveSleeve,h),_createClass(GloveSleeve,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:i},{side:n.b.RIGHT,Part:i}]}}]),GloveSleeve}(),b=function(t){function LongGloves(){var t;_classCallCheck(this,LongGloves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongGloves)).call.apply(t,[this,{armCoverage:.5}].concat(r)))}return _inherits(LongGloves,h),_createClass(LongGloves,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),LongGloves}(),d=function(t){function FingerlessGloves(){var t;_classCallCheck(this,FingerlessGloves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FingerlessGloves)).call.apply(t,[this,{armCoverage:.9}].concat(r)))}return _inherits(FingerlessGloves,h),_createClass(FingerlessGloves,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),FingerlessGloves}(),g=function(t){function Bracelet(){var t;_classCallCheck(this,Bracelet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bracelet)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(Bracelet,h),_createClass(Bracelet,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:f},{side:n.b.RIGHT,Part:f}]}}]),Bracelet}(),P=function(t){function BraceletLeft(){var t;_classCallCheck(this,BraceletLeft);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraceletLeft)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(BraceletLeft,h),_createClass(BraceletLeft,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:f}]}}]),BraceletLeft}(),v=function(t){function BraceletRight(){var t;_classCallCheck(this,BraceletRight);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraceletRight)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(BraceletRight,h),_createClass(BraceletRight,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:f}]}}]),BraceletRight}()},function(t,e,r){"use strict";r.d(e,"a",function(){return o});var n=r(2);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var o=function(){function DecorativePart(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,DecorativePart);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{loc:null,layer:n.a.BASE,reflect:!1,coverConceal:[],uncoverable:!1}].concat(e))}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(DecorativePart,[{key:"stroke",value:function stroke(){return"inherit"}},{key:"fill",value:function fill(){return"inherit"}},{key:"getLineWidth",value:function getLineWidth(){return 1.5}}]),DecorativePart}()},function(t,e,r){"use strict";r.d(e,"h",function(){return i}),r.d(e,"e",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"a",function(){return c}),r.d(e,"j",function(){return p}),r.d(e,"i",function(){return f}),r.d(e,"g",function(){return h}),r.d(e,"f",function(){return y}),r.d(e,"d",function(){return b}),r.d(e,"b",function(){return d}),r.d(e,"k",function(){return g});var l=r(1),n=r(3),o=r(2),u=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function SockPart(){var t;_classCallCheck(this,SockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SockPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"]}].concat(r)))}return _inherits(SockPart,l["c"]),SockPart}(),a=function(t){function ShortSockPart(){var t;_classCallCheck(this,ShortSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortSockPart)).call.apply(t,[this].concat(r)))}return _inherits(ShortSockPart,i),_createClass(ShortSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(u.extractPoint)(t.ankle.out),n=t.ankle.outbot,o=t.toe.out,i=t.toe.in,a=t.ankle.inbot,s=t.ankle.in;r.cp1=Object(u.simpleQuadratic)(s,r,.5,-3),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,r,n,o,i,a,s,r),e.fill(),e.stroke()}}]),ShortSockPart}(),s=function(t){function MediumSockPart(){var t;_classCallCheck(this,MediumSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumSockPart)).call.apply(t,[this].concat(r)))}return _inherits(MediumSockPart,i),_createClass(MediumSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=1-this.length;.75<this.length&&(r+=.3*(this.length-.75));var n=Object(u.splitCurve)(r,t.calf.out,t.ankle.out),o=n.left.p2,i=n.right.p2,a=(n=Object(u.splitCurve)(this.length,t.ankle.in,t.calf.in)).left.p2;o.cp1=Object(u.simpleQuadratic)(a,o,.5,-2.5+this.length),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,o,i,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,a,o),e.fill(),e.stroke()}}]),MediumSockPart}(),c=function(t){function LongSockPart(){var t;_classCallCheck(this,LongSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSockPart)).call.apply(t,[this].concat(r)))}return _inherits(LongSockPart,i),_createClass(LongSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=1-this.length,n=Object(u.splitCurve)(r,t.knee.out,t.calf.out),o=n.left.p2,i=n.right.p2,a=this.length;this.length<.7&&(a+=.3*(.7-this.length));var s=(n=Object(u.splitCurve)(a,t.calf.in,t.knee.in)).left.p2;o.cp1=Object(u.simpleQuadratic)(s,o,.5,-2.5+this.length),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,o,i,t.ankle.out,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,t.calf.in,s,o),e.fill(),e.stroke()}}]),LongSockPart}(),p=function(t){function ThighHighPart(){var t;_classCallCheck(this,ThighHighPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighHighPart)).call.apply(t,[this].concat(r)))}return _inherits(ThighHighPart,i),_createClass(ThighHighPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=.5-.5*this.length,n=Object(u.splitCurve)(r,t.thigh.out,t.knee.out),o=n.left.p2,i=n.right.p2,a=.5*this.length,s=(n=Object(u.splitCurve)(a,t.thigh.in,t.thigh.top)).left.p2;o.cp1=Object(u.simpleQuadratic)(s,o,.5,2.5+this.length),l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,o,i,t.calf.out,t.ankle.out,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,t.calf.in,t.knee.in,t.knee.intop,s),e.stroke(),Object(u.drawPoints)(e,null,o),e.fill()}}]),ThighHighPart}(),f=function(t){function ThighHighBandPart(){var t;_classCallCheck(this,ThighHighBandPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighHighBandPart)).call.apply(t,[this,{aboveSameLayerParts:["feet"]}].concat(r)))}return _inherits(ThighHighBandPart,i),_createClass(ThighHighBandPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=.5-.5*this.length-.03*this.bandWidth,n=Object(u.splitCurve)(r,t.thigh.out,t.knee.out),o=n.left.p2,i=(n=Object(u.splitCurve)(.1*this.bandWidth,o,t.knee.out)).left.p2,a=.5*this.length+.03*this.bandWidth,s=(n=Object(u.splitCurve)(a,t.thigh.in,t.thigh.top)).left.p2,c=(n=Object(u.splitCurve)(.2*this.bandWidth,t.thigh.in,s)).left.p2;s.cp1=n.right.p2.cp1,s.cp2=n.right.p2.cp2,c.cp1=Object(u.simpleQuadratic)(i,c,.5,-2.5-this.length),o.cp1=Object(u.simpleQuadratic)(s,o,.5,2.5+this.length),l.a.simpleStrokeFill(e,t,{stroke:this.bandPattern,fill:this.bandPattern}),e.beginPath(),Object(u.drawPoints)(e,o,i,c,s,o),e.fill(),e.stroke()}}]),ThighHighBandPart}(),h=function(t){function Sock(){var t;_classCallCheck(this,Sock);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Sock)).call.apply(t,[this,{clothingLayer:l.a.Layer.BASE,length:.5,thickness:1,stroke:"#b1a693"}].concat(r)))}return _inherits(Sock,l["b"]),Sock}(),y=function(t){function ShortSocks(){var t;_classCallCheck(this,ShortSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortSocks)).call.apply(t,[this].concat(r)))}return _inherits(ShortSocks,h),_createClass(ShortSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),ShortSocks}(),b=function(t){function MediumSocks(){var t;_classCallCheck(this,MediumSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumSocks)).call.apply(t,[this].concat(r)))}return _inherits(MediumSocks,h),_createClass(MediumSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),MediumSocks}(),d=function(t){function LongSocks(){var t;_classCallCheck(this,LongSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSocks)).call.apply(t,[this].concat(r)))}return _inherits(LongSocks,h),_createClass(LongSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),LongSocks}(),g=function(t){function ThighHighs(){var t;_classCallCheck(this,ThighHighs);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighHighs)).call.apply(t,[this,{bandWidth:2,bandPattern:"#000"}].concat(r)))}return _inherits(ThighHighs,h),_createClass(ThighHighs,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p},{side:n.b.RIGHT,Part:f}]}}]),ThighHighs}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a}),r.d(e,"b",function(){return s}),r.d(e,"d",function(){return c}),r.d(e,"g",function(){return l}),r.d(e,"i",function(){return u}),r.d(e,"f",function(){return p}),r.d(e,"c",function(){return f}),r.d(e,"e",function(){return h}),r.d(e,"h",function(){return y}),r.d(e,"j",function(){return b});var P=r(1),n=r(3),o=r(2),v=r(0),i=r(11);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function CoveredButtPart(){var t;_classCallCheck(this,CoveredButtPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CoveredButtPart)).call.apply(t,[this,{layer:o.a.BACK,reflect:!0,loc:"butt",aboveParts:["parts butt"]}].concat(r)))}return _inherits(CoveredButtPart,P["c"]),_createClass(CoveredButtPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){P.a.simpleStrokeFill(e,t,this),e.strokeStyle=Object(i.b)(e.strokeStyle,{s:-5,l:-5}),e.beginPath(),Object(v.drawPoints)(e,t.butt.in,t.butt.out,t.butt.in),e.fill(),e.stroke()}}]),CoveredButtPart}(),s=function(t){function LongPantsPart(){var t;_classCallCheck(this,LongPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(LongPantsPart,P["c"]),_createClass(LongPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(this.legCoverage,t.calf.out,t.ankle.out),n=r.left.p2,o=(r=Object(v.splitCurve)(1-this.legCoverage,t.ankle.in,t.calf.in)).left.p2,i=r.right.p2;o.cp1=Object(v.simpleQuadratic)(n,o,.5,1);var a=t.knee.out,s=t.knee.in,c=t.knee.intop,l=t.calf.out,u=t.thigh.top,p=t.thigh.in,f=calcPantsTop(t,this.waistCoverage),h=f.out,y=f.hip,b=f.top,d=f.thighOut,g=f.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,b,h,y,d,a,l,n,o,i,s,c,p,u,g),e.fill(),e.stroke()}}]),LongPantsPart}(),c=function(t){function MediumPantsPart(){var t;_classCallCheck(this,MediumPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(MediumPantsPart,P["c"]),_createClass(MediumPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(this.legCoverage,t.knee.out,t.calf.out),n=r.left.p2,o=(r=Object(v.splitCurve)(1-this.legCoverage,t.calf.in,t.knee.in)).left.p2,i=r.right.p2;o.cp1=Object(v.simpleQuadratic)(n,o,.75,2);var a=t.knee.out,s=t.knee.intop,c=t.thigh.top,l=t.thigh.in,u=calcPantsTop(t,this.waistCoverage),p=u.out,f=u.hip,h=u.top,y=u.thighOut,b=u.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,h,p,f,y,a,n,o,i,s,l,c,b),e.fill(),e.stroke()}}]),MediumPantsPart}(),l=function(t){function ShortPantsPart(){var t;_classCallCheck(this,ShortPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(ShortPantsPart,P["c"]),_createClass(ShortPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(.35+.6*this.legCoverage,t.thigh.out,t.knee.out),n=r.left.p2,o=(r=Object(v.splitCurve)(1-this.legCoverage,t.knee.intop,t.thigh.in)).left.p2,i=r.right.p2,a=t.thigh.top;o.cp1=Object(v.simpleQuadratic)(n,o,.5,1/Object(v.clamp)(this.legCoverage,.3,1));var s=calcPantsTop(t,this.waistCoverage),c=s.out,l=s.hip,u=s.top,p=s.thighOut,f=s.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,u,c,l,p,n,o,i,a,f),e.fill(),e.stroke()}}]),ShortPantsPart}(),u=function(t){function ShortsPart(){var t;_classCallCheck(this,ShortsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(ShortsPart,P["c"]),_createClass(ShortsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(v.splitCurve)(.4+.55*this.legCoverage,t.hip,t.thigh.out),n=r.left.p2,o=(r=Object(v.splitCurve)(Object(v.clamp)(1.25-.75*this.legCoverage,0,1),t.thigh.in,t.thigh.top)).left.p2,i=r.right.p2;o.cp1=Object(v.simpleQuadratic)(n,o,.6,-3/Object(v.clamp)(this.legCoverage,.3,1));var a=calcPantsTop(t,this.waistCoverage),s=a.out,c=a.hip,l=a.top,u=a.groin;P.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,l,s,c,n,o,i,u),e.fill(),e.stroke()}}]),ShortsPart}();function calcPantsTop(t,e){var r,n,o;if(-.1<=e){var i=Object(v.splitCurve)(.9-e,t.waist,t.hip);r=i.left.p2,n=i.right.p2,o=t.thigh.out}else{var a=Object(v.splitCurve)(-.1-e,t.hip,t.thigh.out);r=a.left.p2,o=a.right.p2}var s=r.y-t.hip.y,c={x:0,y:t.pelvis.y+1.2*s};r.cp1={x:.5*r.x+.5*c.x,y:c.y};var l=Object(v.extractPoint)(t.groin);return l.cp1={x:.5*l.x+.5*t.thigh.top.x,y:l.y},{out:r,hip:n,top:c,thighOut:o,groin:l}}var p=function(t){function Pants(){var t;_classCallCheck(this,Pants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Pants)).call.apply(t,[this,{clothingLayer:P.a.Layer.MID,legCoverage:1,waistCoverage:0}].concat(r)))}return _inherits(Pants,P["b"]),_createClass(Pants,[{key:"fill",value:function fill(){return"hsl(200, 65%, 10%)"}}]),Pants}(),f=function(t){function LongTightPants(){var t;_classCallCheck(this,LongTightPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongTightPants)).call.apply(t,[this].concat(r)))}return _inherits(LongTightPants,p),_createClass(LongTightPants,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),LongTightPants}(),h=function(t){function MediumTightPants(){var t;_classCallCheck(this,MediumTightPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumTightPants)).call.apply(t,[this].concat(r)))}return _inherits(MediumTightPants,p),_createClass(MediumTightPants,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),MediumTightPants}(),y=function(t){function ShortTightPants(){var t;_classCallCheck(this,ShortTightPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortTightPants)).call.apply(t,[this].concat(r)))}return _inherits(ShortTightPants,p),_createClass(ShortTightPants,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l}]}}]),ShortTightPants}(),b=function(t){function TightShorts(){var t;_classCallCheck(this,TightShorts);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TightShorts)).call.apply(t,[this].concat(r)))}return _inherits(TightShorts,p),_createClass(TightShorts,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u}]}}]),TightShorts}()},function(t,e,r){"use strict";r.d(e,"b",function(){return n}),r.d(e,"a",function(){return o});var n={age:{low:0,high:1e9,avg:30,stdev:6,bias:0},fem:{low:0,high:11,avg:5,stdev:1,bias:2},sub:{low:0,high:11,avg:4,stdev:1,bias:1},pregnancy:{low:0,high:10,avg:0,stdev:0,bias:0}},o={skeleton:["human"]}},function(t,e,r){"use strict";r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"g",function(){return u}),r.d(e,"f",function(){return p}),r.d(e,"e",function(){return f}),r.d(e,"d",function(){return h}),r.d(e,"a",function(){return y});var c=r(1),n=r(3),o=r(2),i=r(10),l=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LeftBaseShoeShading(){var t;_classCallCheck(this,LeftBaseShoeShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBaseShoeShading)).call.apply(t,[this,{loc:"left feet",layer:o.a.FRONT}].concat(r)))}return _inherits(LeftBaseShoeShading,i["a"]),_createClass(LeftBaseShoeShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=t.toe.toebox,r=Object(l.splitCurve)(.5,t.toe.out,t.toe.in),n=r.right.p2,o=r.left.p2;o.cp1=Object(l.simpleQuadratic)(e,o,.5,1);var i=Object(l.clone)(t.ankle.inbot);return e.cp1={x:i.x-1,y:i.y-5},e.cp2={x:e.x-3,y:e.y},[e,o,n,i,e]}}]),LeftBaseShoeShading}(),s=function(t){function RightBaseShoeShading(){var t;_classCallCheck(this,RightBaseShoeShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightBaseShoeShading)).call.apply(t,[this,{loc:"right feet",layer:o.a.FRONT}].concat(r)))}return _inherits(RightBaseShoeShading,i["a"]),_createClass(RightBaseShoeShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=t.toe.toebox,r=Object(l.splitCurve)(.8,t.toe.out,t.toe.in).left.p2;r.cp1=Object(l.simpleQuadratic)(e,r,.5,-1);var n=Object(l.extractPoint)(t.ankle.outbot);return n.cp1=Object(l.simpleQuadratic)(r,n,.5,-10),e.cp1=Object(l.simpleQuadratic)(n,e,.7,3),[n,e,r,n]}}]),RightBaseShoeShading}(),u=function(t){function ShoeSidePart(){var t;_classCallCheck(this,ShoeSidePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShoeSidePart)).call.apply(t,[this,{layer:o.a.BACK,loc:"feet"}].concat(r)))}return _inherits(ShoeSidePart,c["c"]),ShoeSidePart}(),p=function(t){function ShoePart(){var t;_classCallCheck(this,ShoePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShoePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"],belowParts:["shadingParts feet"]}].concat(r)))}return _inherits(ShoePart,c["c"]),ShoePart}(),f=function(t){function ShoeBasePart(){var t;_classCallCheck(this,ShoeBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShoeBasePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",shadingParts:[a,s]}].concat(r)))}return _inherits(ShoeBasePart,p),_createClass(ShoeBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){t.toe.toebox={x:t.toe.center.x,y:t.toe.center.y+this.toeHeight};var r=Object(l.extractPoint)(t.ankle.out),n=t.ankle.outbot,o=t.toe.out,i=t.toe.in,a=Object(l.clone)(t.ankle.inbot),s=t.ankle.in;a.cp2.x-=2,r.cp1=Object(l.simpleQuadratic)(s,r,.5,this.tongueDeflection),c.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(l.drawPoints)(e,r,n,o,i,a,s,r),e.fill(),e.stroke()}}]),ShoeBasePart}(),h=function(t){function Shoe(){var t;_classCallCheck(this,Shoe);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Shoe)).call.apply(t,[this,{clothingLayer:c.a.Layer.MID,shoeHeight:0,tongueDeflection:2,toeHeight:0,Mods:{feetLength:-10,feetWidth:-2}}].concat(r)))}return _inherits(Shoe,c["b"]),Shoe}(),y=function(t){function FlatShoes(){var t;_classCallCheck(this,FlatShoes);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FlatShoes)).call.apply(t,[this,{shoeHeight:0}].concat(r)))}return _inherits(FlatShoes,h),_createClass(FlatShoes,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:f},{side:n.b.RIGHT,Part:f}]}}]),FlatShoes}()},function(t,e,r){"use strict";r.d(e,"l",function(){return calcSuperBra}),r.d(e,"m",function(){return calcSuperBraStrap}),r.d(e,"f",function(){return s}),r.d(e,"e",function(){return c}),r.d(e,"j",function(){return calcPanties}),r.d(e,"k",function(){return calcPanties2}),r.d(e,"i",function(){return f}),r.d(e,"c",function(){return h}),r.d(e,"h",function(){return y}),r.d(e,"d",function(){return b}),r.d(e,"g",function(){return d}),r.d(e,"a",function(){return g}),r.d(e,"b",function(){return P});var l=r(1),o=r(17),i=r(2),a=r(9),u=r(0),n=r(5),p=r(22);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcSuperBra(t){if(!1===t.hasOwnProperty("breast"))return null;var e=Object(u.splitCurve)(.7,t.breast.top,t.breast.tip),r={out:Object(u.clone)(Object(u.extractPoint)(e.right.p1)),tip:Object(u.clone)(Object(u.extractPoint)(e.right.p2))};return r.top={x:t.breast.bot.x,y:r.out.y+2},r.out.cp1=Object(u.simpleQuadratic)(r.top,r.out,.4,1),r.top.cp1=Object(u.simpleQuadratic)(t.breast.cleavage,r.top,.6,2),r.bot=Object(u.adjust)(t.breast.bot,0,0),r.cleavage=Object(u.adjust)(t.breast.cleavage,0,0),r.inner=Object(u.adjust)(t.breast.in,0,0),r}function calcSuperBraStrap(t){var e=Object(o.j)(t),r={};r.out={x:t.breast.bot.x,y:t.breast.cleavage.y},r.outbot={x:t.breast.bot.x,y:t.breast.bot.y+3-this.botStrapWidth},r.bot={x:-i.g,y:t.breast.bot.y+4-this.botStrapWidth},r.mid={x:-i.g,y:t.breast.cleavage.y};var n=Object(u.splitCurve)(1-this.neckCoverage,t.neck.cusp,t.collarbone);return r.strapTop=n.left.p2,r.strapTop.y-=this.strapWidth/2,r.breastTop=Object(u.adjust)(t.breast.top,-.5*this.strapWidth,-.5*this.strapWidth),r.breastTop.cp1={x:r.breastTop.x-5+this.topStrapCurveX,y:r.breastTop.y+10+this.topStrapCurveY},r.breastOut=Object(u.extractPoint)(Object(u.adjust)(e.out,-.5*this.strapWidth,0)),r}var s=function(t){function SuperBraGenitalPart(){var t;_classCallCheck(this,SuperBraGenitalPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperBraGenitalPart)).call.apply(t,[this,{layer:i.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(SuperBraGenitalPart,l["c"]),_createClass(SuperBraGenitalPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperBra(t);if(null!==r){var n=calcSuperBraStrap.call(this,t);this.showStrap&&(e.lineWidth=this.strapWidth,e.strokeStyle=this.highlight,e.beginPath(),Object(u.drawPoints)(e,n.breastTop,n.breastOut),e.stroke()),Object(a.j)(e,{fill:this.fill,stroke:this.stroke},t),e.lineWidth=this.thickness;Object(u.adjust)(t.breast.top,.1,.2),Object(u.adjust)(t.breast.tip,.1,0),Object(u.adjust)(t.breast.bot,0,-.1),Object(u.adjust)(t.breast.in,-.4,0);e.beginPath(),Object(u.drawPoints)(e,r.top,r.out,r.tip,r.bot,r.inner,r.cleavage,r.top),e.fill(),e.stroke()}}}]),SuperBraGenitalPart}(),c=function(t){function SuperBraChestPart(){var t;_classCallCheck(this,SuperBraChestPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperBraChestPart)).call.apply(t,[this,{layer:i.a.FRONT,loc:"+torso",reflect:!0,aboveParts:["parts torso"],belowParts:["parts chest"]}].concat(r)))}return _inherits(SuperBraChestPart,l["c"]),_createClass(SuperBraChestPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(null!==calcSuperBra(t)){var r=calcSuperBraStrap.call(this,t);Object(a.j)(e,{fill:this.fill,stroke:this.stroke},t),e.lineWidth=this.thickness,e.beginPath(),Object(u.drawPoints)(e,r.out,r.outbot,r.bot,r.mid,r.out),e.fill(),this.showStrap&&(e.lineWidth=this.strapWidth,e.strokeStyle=this.highlight,e.beginPath(),Object(u.drawPoints)(e,r.strapTop,r.breastTop),e.stroke())}}}]),SuperBraChestPart}();function calcPanties(t){var e,r={};if(this.waistCoverageLower>this.waistCoverage&&(this.waistCoverageLower=this.waistCoverage),0<this.waistCoverage&&0<this.waistCoverageLower){e=Object(u.splitCurve)(1-this.waistCoverage,t.waist,t.hip),r.sideTop=e.left.p2;var n=e.right.p2,o=(this.waistCoverage-this.waistCoverageLower)/this.waistCoverage;e=Object(u.splitCurve)(o,r.sideTop,n),r.sideBot=e.left.p2,r.sideTop=Object(u.extractPoint)(r.sideTop)}else if(this.waistCoverage<0&&this.waistCoverageLower<0){e=Object(u.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out),r.sideTop=e.left.p2;var i=e.right.p2,a=Math.abs((1+this.waistCoverage-(1+this.waistCoverageLower))/(1+this.waistCoverage));e=Object(u.splitCurve)(a,r.sideTop,i),r.sideBot=e.left.p2,r.sideTop=Object(u.extractPoint)(r.sideTop)}else e=Object(u.splitCurve)(1-this.waistCoverage,t.waist,t.hip),r.sideTop=Object(u.extractPoint)(e.left.p2),r.hip=e.right.p2,e=Object(u.splitCurve)(Math.abs(this.waistCoverageLower),t.hip,t.thigh.out),r.sideBot=e.left.p2;return r.top={x:-.1,y:r.sideTop.y+this.topY-8},r.sideTop.cp1={x:.5*r.sideTop.x+.5*r.top.x,y:r.sideTop.y},r.sideTop.cp1.x+=this.curveTopX,r.sideTop.cp1.y+=this.curveTopY-9,r.bot=Object(u.adjust)(Object(u.clone)(t.groin),-.1,0),e=Object(u.splitCurve)(this.genCoverage,t.groin,Object(u.extractPoint)(t.thigh.top)),r.botOut=Object(u.extractPoint)(e.left.p2),e=Object(u.splitCurve)(.5,r.sideBot,r.botOut),r.botOut.cp1=Object(u.extractPoint)(e.left.p2),r.botOut.cp1.x+=this.curveBotX-9,r.botOut.cp1.y+=this.curveBotY+5,r}function calcPanties2(t){var e=calcPanties.call(this,t);e.center={x:-.1,y:e.top.y-2*this.radius},e.top.cp1={x:2*this.radius,y:e.top.y-this.radius};var r=Object(n.a)(e.sideTop,e.sideBot).theta;return e.sideBot.cp1=Object(n.k)(e.sideTop,e.sideBot,.5,-2*r),e.sideBot.cp=void 0,e}var f=function(t){function SuperPantiesPart(){var t;_classCallCheck(this,SuperPantiesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPantiesPart)).call.apply(t,[this,{layer:i.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso","parts leg"],belowSameLayerParts:["clothingParts leg"]}].concat(r)))}return _inherits(SuperPantiesPart,l["c"]),_createClass(SuperPantiesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!1!==t.hasOwnProperty("groin")){var r=calcPanties.call(this,t);if(l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,r.top,r.sideTop,r.hip,r.sideBot,r.botOut,r.bot),e.fill(),e.stroke(),this.bow){var n=Object(u.adjust)(r.top,0,-2),o=Object(u.adjust)(n,0,1),i=Object(u.adjust)(n,0,-1),a=Object(u.adjust)(n,3,2),s=Object(u.adjust)(n,3,-2);e.fillStyle=da.adjustColor(e.fillStyle,{s:-10,l:-15}),e.beginPath(),Object(u.drawPoints)(e,o,a,s,i),e.fill(),e.stroke()}}}}]),SuperPantiesPart}(),h=function(t){function ChastityBeltPart(){var t;_classCallCheck(this,ChastityBeltPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChastityBeltPart)).call.apply(t,[this,{layer:i.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso","parts leg","parts torso","decorativeParts torso"],belowSameLayerParts:["clothingParts leg"]},{waistCoverage:.72,beltWidth:6,beltCurve:-2,highlight:"#cdc331",coverage:.2}].concat(r)))}return _inherits(ChastityBeltPart,l["c"]),_createClass(ChastityBeltPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=p.t.call(this,t),n=r.inTop,o=r.outTop,i=r.outMid,a=r.outBot,s=r.inBot;e.beginPath(),Object(u.drawPoints)(e,n,o,i,a,s),e.fill(),e.stroke();var c=Object(u.splitCurve)(this.coverage,n,o).left.p2;Object(u.drawPoints)(e,n,c,t.vagina.side,t.groin),e.fill(),e.stroke()}}]),ChastityBeltPart}(),y=function(t){function SuperPanties2Part(){var t;_classCallCheck(this,SuperPanties2Part);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPanties2Part)).call.apply(t,[this,{layer:i.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso","parts leg"],belowSameLayerParts:["clothingParts leg"]}].concat(r)))}return _inherits(SuperPanties2Part,l["c"]),_createClass(SuperPanties2Part,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!1!==t.hasOwnProperty("groin")){var r=calcPanties2.call(this,t);l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,r.center,r.top,r.sideTop,r.sideBot,r.botOut,r.bot),e.fill(),e.stroke()}}}]),SuperPanties2Part}(),b=function(t){function SuperBra(){var t;_classCallCheck(this,SuperBra);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperBra)).call.apply(t,[this,{showStrap:!1,strapWidth:2,neckCoverage:.7,thickness:.5,botStrapWidth:0,topStrapCurveX:0,topStrapCurveY:0,highlight:"hsl(346, 50%, 70%)"}].concat(r)))}return _inherits(SuperBra,o["i"]),_createClass(SuperBra,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:s}]}}]),SuperBra}(),d=function(t){function SuperPanties(){var t;_classCallCheck(this,SuperPanties);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPanties)).call.apply(t,[this,{waistCoverage:.11,waistCoverageLower:-.05,genCoverage:1,topY:0,curveTopX:0,curveTopY:0,curveBotX:0,curveBotY:0,bow:!0}].concat(r)))}return _inherits(SuperPanties,o["i"]),_createClass(SuperPanties,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),SuperPanties}(),g=function(t){function BikiniBottom(){var t;_classCallCheck(this,BikiniBottom);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BikiniBottom)).call.apply(t,[this,{waistCoverage:.11,waistCoverageLower:-.05,genCoverage:1,topY:0,curveTopX:0,curveTopY:0,curveBotX:0,curveBotY:0,radius:2.8,thickness:.6}].concat(r)))}return _inherits(BikiniBottom,o["i"]),_createClass(BikiniBottom,[{key:"stroke",value:function stroke(){return"hsla(335, 800%, 30%, 1)"}},{key:"fill",value:function fill(){return"hsla(335, 100%, 42%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:y}]}}]),BikiniBottom}(),P=function(t){function ChastityBelt(){var t;_classCallCheck(this,ChastityBelt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChastityBelt)).call.apply(t,[this,{}].concat(r)))}return _inherits(ChastityBelt,o["i"]),_createClass(ChastityBelt,[{key:"fill",value:function fill(){return"#50a9cc"}},{key:"stroke",value:function stroke(){return"#343570"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:h}]}}]),ChastityBelt}()},function(t,e,r){"use strict";var n={age:0,str:-.5,dex:-.3,con:-.2,wil:0,eyes:5,breast:2,skin:2,fem:2,sub:2,hairc:0,height:-3,genitals:0,face:3,lips:2,hairlength:3,shoulders:1.5,breasts:5,testes:2,penis:2,waist:2,legs:3,skinc:-3,lipw:0,lipt:4,liph:0,lipc:0,lipa:0,legl:0,eyec:0,noseskew:0,penist:-2,browh:0};function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function getDefault(n,o){return function run(){var t={};for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e].avg);if(o)for(var r in o)o.hasOwnProperty(r)&&(t[r]=o[r][0]);return t}}function applyMods(t,e){for(var r in e)e.hasOwnProperty(r)&&(t.hasOwnProperty(r)?t[r]+=e[r]:t[r]=e[r])}function removeMods(t,e){for(var r in e)e.hasOwnProperty(r)&&t.hasOwnProperty(r)&&(t[r]-=e[r])}function getBiasMod(t,e){return t.hasOwnProperty("bias")?t.bias:n.hasOwnProperty(e)?n[e]:1}function createTransformation(r,t,n){var o=0;return{object:r,transform:function transform(t){var e=t;return 1<o+t?(e=1-o,o=1):o+=t,function performTransformation(t,e,r){for(var n in e)if(e.hasOwnProperty(n)&&t.hasOwnProperty(n))switch(_typeof(e[n])){case"object":performTransformation(t[n],e[n],r);break;case"number":t[n]+=e[n]*r;break;default:console.log("unrecognized transformation property type ".concat(_typeof(e[n])," for ").concat(n))}}(r,n,e),o},showTransformation:t}}function transformAndShow(i){var a=1<arguments.length&&void 0!==arguments[1]?arguments[1]:5e3,s=null;return new Promise(function(o){window.requestAnimationFrame(function doTransform(t){var e=null===s?0:t-s;s=t;var r=e/a,n=i.transform(r);i.showTransformation(),n<1?window.requestAnimationFrame(doTransform):o()})})}r.d(e,"d",function(){return getDefault}),r.d(e,"a",function(){return applyMods}),r.d(e,"e",function(){return removeMods}),r.d(e,"c",function(){return getBiasMod}),r.d(e,"b",function(){return createTransformation}),r.d(e,"f",function(){return transformAndShow})},function(t,e,r){"use strict";r.d(e,"a",function(){return i}),r.d(e,"e",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"b",function(){return c}),r.d(e,"d",function(){return l});var p=r(1),n=r(3),f=r(12),o=r(2),h=(r(9),r(4)),y=(r(5),r(18)),b=r(7);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function wDetachedSleevePart(){var t;_classCallCheck(this,wDetachedSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wDetachedSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{shoulderCoverage:.5,armCoverage:.5,armLoose:0}].concat(r)))}return _inherits(wDetachedSleevePart,p["c"]),_createClass(wDetachedSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!(this.armCoverage<=0)){var r=y.j.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;if(p.a.simpleStrokeFill(e,t,this),1<=this.shoulderCoverage){var i=Object(h.a)(t.collarbone,-.5,0),a=Object(h.a)(t.armpit,-.5,0);b.c.call(this,t,e,[].concat(_toConsumableArray(n),_toConsumableArray(o),[Object(f.a)(a,i)]),[].concat(_toConsumableArray(n),_toConsumableArray(o)))}else{if(0<this.shoulderCoverage){var s=Object(h.r)(1-this.shoulderCoverage,t.collarbone,t.shoulder);t.deltoids&&t.collarbone.y!=t.deltoids.y&&(s=Object(h.r)(1-this.shoulderCoverage,t.collarbone,t.deltoids)),n[0]=Object(h.h)(s.left.p2),n[1]=s.right.p2}else{var c=Object(h.r)(Math.abs(this.shoulderCoverage),t.shoulder,t.elbow.out);n.splice(0,1),t.deltoids&&t.collarbone.y!=t.deltoids.y&&n.splice(0,1),n[0]=Object(h.h)(c.left.p2)}b.c.call(this,t,e,[].concat(_toConsumableArray(n),_toConsumableArray(o),[n[0]]),[].concat(_toConsumableArray(n),_toConsumableArray(o),[n[0]]))}}}}]),wDetachedSleevePart}(),a=function(t){function wSuperSleevePart(){var t;_classCallCheck(this,wSuperSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5,armLoose:0}].concat(r)))}return _inherits(wSuperSleevePart,p["c"]),_createClass(wSuperSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!(this.armCoverage<=0)){p.a.simpleStrokeFill(e,t,this);var r=y.j.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints,i=Object(h.a)(t.collarbone,-.5,0),a=Object(h.a)(t.armpit,-.5,0);b.c.call(this,t,e,[].concat(_toConsumableArray(n),_toConsumableArray(o),[Object(f.a)(a,i)]),[].concat(_toConsumableArray(n),_toConsumableArray(o)))}}}]),wSuperSleevePart}(),s=function(t){function wDressBreastPart(){var t;_classCallCheck(this,wDressBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wDressBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(wDressBreastPart,p["c"]),_createClass(wDressBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=y.h.call(this,t),n=r.cleavageBot,o=r.cleavageTop;if(e.beginPath(),Object(h.f)(e,{x:0,y:0},Object(h.a)(n,.38*-this.thickness,0),Object(h.a)(o,.38*-this.thickness,0),{x:100,y:250},{x:100,y:0}),e.clip(),!Object(b.b)(t,e,this)){var i=Object(h.a)(t.breast.top,.5,.7),a=Object(h.a)(t.breast.tip,.1,0),s=Object(h.a)(t.breast.bot,0,-.6),c=Object(h.a)(t.breast.in,-.9,-.5),l=Object(h.a)(t.breast.cleavage,-.6,0),u=Object(h.a)(Object(f.a)(l,i),0,.2);b.c.call(this,t,e,[i,a,s,c,l,u],[i,a,s,h.b])}}}]),wDressBreastPart}(),c=function(t){function wDressBasePart(){var t;_classCallCheck(this,wDressBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wDressBasePart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg","decorativeParts leg"],aboveSameLayerParts:["groin","leg"]},{cleavageOpeness:.3,cleavageCoverage:.3,sideLoose:0,legCoverage:.4,legLoose:0,curveCleavageX:0,curveCleavageY:0,bustle:!1}].concat(r)))}return _inherits(wDressBasePart,p["c"]),_createClass(wDressBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=y.h.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=(r.collarbone,r.armpit,r.waist,r.hip,r.outerPoints),s=r.shoulder,c=r.pit,l=r.bottom;p.a.simpleStrokeFill(e,t,this),b.c.call(this,t,e,[n,o,i,s,c].concat(_toConsumableArray(a),[l]),[n,o,i,s,c].concat(_toConsumableArray(a),[l,!0]))}}]),wDressBasePart}(),l=function(t){function wSuperDress(){var t;_classCallCheck(this,wSuperDress);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperDress)).call.apply(t,[this,{hue:100,satur:100,light:42,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1}].concat(r)))}return _inherits(wSuperDress,y["b"]),_createClass(wSuperDress,[{key:"stroke",value:function stroke(){return"hsla(335, 80%, 30%, 1)"}},{key:"fill",value:function fill(){return"hsla(335, 100%, 42%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:y.e},{side:null,Part:b.a},{side:null,Part:c},{side:null,Part:s},{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),wSuperDress}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s}),r.d(e,"b",function(){return i}),r.d(e,"c",function(){return extendDimensionCalc}),r.d(e,"d",function(){return loadDimensionDescriptions});var n=r(44),o=r(8);function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s={human:{hornyness:{linkedPart:"head",desc:"Does the character have horns",units:"arbitrary",low:0,high:2,avg:1,stdev:0,bias:0},tail:{linkedPart:"butt",desc:"Does the character have horns",units:"arbitrary",low:0,high:2,avg:1,stdev:0,bias:0},wings:{linkedPart:"chest",desc:"Does the character have horns",units:"arbitrary",low:0,high:2,avg:1,stdev:0,bias:0},areolaSize:{linkedPart:"".concat(o.a.CHEST),units:"mm",low:0,high:50,avg:20,stdev:2,bias:3,calc:function calc(){return this.getDim("areolaSize")+this.get("pregnancy")}},armThickness:{linkedPart:"".concat(o.a.ARM),units:"mm",low:45,high:95,avg:65,stdev:3,bias:-7,calc:function calc(){return adjustLengthByHeight(this.getDim("armThickness")-.5*this.get("fem"),this.getDim("height"),.2)}},armLength:{linkedPart:"".concat(o.a.ARM),units:"cm",low:30,high:80,avg:45,stdev:2,bias:0,calc:function calc(){return adjustLengthByHeight(this.getDim("armLength"),this.getDim("height"))}},bellyProtrusion:{linkedPart:"".concat(o.a.TORSO),units:"cm",low:0,high:60,avg:0,stdev:0,bias:0,calc:function calc(){return this.getDim("bellyProtrusion")+5*this.get("pregnancy")}},breastSize:{linkedPart:"".concat(o.a.CHEST),units:"cm",low:-10,high:80,avg:-1,stdev:5,bias:20,calc:function calc(){return this.getDim("breastSize")+.1*this.get("fem")+.7*this.get("pregnancy")}},buttFullness:{linkedPart:"".concat(o.a.BUTT),units:"arbitrary",low:0,high:40,avg:10,stdev:2,bias:4,calc:function calc(){return this.getDim("buttFullness")+.2*this.get("fem")}},chinWidth:{linkedPart:"".concat(o.a.HEAD),units:"mm",low:30,high:140,avg:70,stdev:2,bias:-2},eyelashLength:{linkedPart:"".concat(o.a.EYELASH),units:"mm",low:0,high:15,avg:3,stdev:2,bias:3},eyeSize:{linkedPart:"".concat(o.a.EYES),units:"mm",low:0,high:40,avg:15,stdev:2,bias:3},faceFem:{linkedPart:"".concat(o.a.HEAD),units:"arbitrary",low:0,high:40,avg:15,stdev:2,bias:14,calc:function calc(){return this.getDim("faceFem")+.5*this.get("fem")}},faceLength:{linkedPart:"".concat(o.a.HEAD),units:"mm",low:180,high:270,avg:230,stdev:5,bias:-2},faceWidth:{linkedPart:"".concat(o.a.HEAD),units:"mm",low:75,high:105,avg:93,stdev:2,bias:-2,calc:function calc(){return this.getDim("faceWidth")-.5*this.get("fem")}},hairLength:{linkedPart:"".concat(o.a.HAIR),units:"cm",low:0,high:110,avg:6,stdev:2,bias:10,calc:function calc(){return this.getDim("hairLength")+this.get("fem")}},hairStyle:{linkedPart:"".concat(o.a.HAIR),desc:"Index of base hair style to be worn (individual parts can be swapped afterwards)",units:"index",low:0,high:n.a.length-1,avg:1,stdev:1,bias:0,calc:function calc(){return Math.round(this.getDim("hairStyle"))}},hairHue:{linkedPart:"".concat(o.a.HAIR),units:"degree",low:0,high:360,avg:30,stdev:30,bias:0},hairSaturation:{linkedPart:"".concat(o.a.HAIR),units:"%",low:0,high:100,avg:50,stdev:10,bias:0},hairLightness:{linkedPart:"".concat(o.a.HAIR),units:"%",low:0,high:100,avg:30,stdev:10,bias:0},handSize:{linkedPart:"".concat(o.a.HAND),units:"mm",low:0,high:200,avg:100,stdev:5,bias:-10,calc:function calc(){return adjustLengthByHeight(this.getDim("handSize")-.3*this.get("fem"),this.getDim("height"),.4)}},height:{units:"cm",low:50,high:270,avg:167,stdev:3,bias:-5},hipWidth:{linkedPart:"".concat(o.a.TORSO),units:"mm",low:70,high:200,avg:125,stdev:2.5,bias:3,calc:function calc(){return this.getDim("hipWidth")+2*this.get("fem")}},legFem:{linkedPart:"".concat(o.a.LEG),units:"arbitrary",low:0,high:40,avg:13,stdev:2,bias:9,calc:function calc(){return this.getDim("legFem")+.6*this.get("fem")}},legFullness:{linkedPart:"".concat(o.a.LEG),desc:"Approximately how thick the leg is as a combination of fat and muscle",units:"arbitrary",low:0,high:40,avg:10,stdev:3,bias:2,calc:function calc(){return this.getDim("legFullness")+.5*this.get("fem")}},legLength:{linkedPart:"".concat(o.a.LEG),units:"cm",low:20,high:200,avg:95,stdev:2.5,bias:4,calc:function calc(){return adjustLengthByHeight(this.getDim("legLength"),this.getDim("height"))}},lipSize:{linkedPart:"".concat(o.a.LIPS),units:"mm",low:0,high:40,avg:14,stdev:1.5,bias:2,calc:function calc(){return this.getDim("lipSize")+.05*this.get("fem")}},lowerMuscle:{linkedPart:"".concat(o.a.LEG),units:"arbitrary",low:0,high:40,avg:16,stdev:3,bias:-17,calc:function calc(){return this.getDim("lowerMuscle")-this.get("fem")}},neckLength:{linkedPart:"".concat(o.a.NECK),units:"mm",low:0,high:120,avg:72,stdev:5,bias:0},neckWidth:{linkedPart:"".concat(o.a.NECK),units:"mm",low:35,high:75,avg:45,stdev:2,bias:-2},penisSize:{linkedPart:"".concat(o.a.GENITALS),units:"mm",low:0,high:200,avg:20,stdev:5,bias:-20,calc:function calc(){return this.getDim("penisSize")-.5*this.get("fem")+.5*this.getMod("arousal")}},shoulderWidth:{linkedPart:"".concat(o.a.CHEST),units:"mm",low:0,high:200,avg:73,stdev:2,bias:-7,calc:function calc(){return adjustLengthByHeight(this.getDim("shoulderWidth")-.3*this.get("fem"),this.getDim("height"),.4)}},skin:{units:"arbitrary",low:-20,high:50,avg:7,stdev:5},testicleSize:{linkedPart:"".concat(o.a.GENITALS),units:"mm",low:0,high:100,avg:35,stdev:4,bias:-20,calc:function calc(){return this.getDim("testicleSize")-this.get("fem")}},upperMuscle:{linkedPart:"".concat(o.a.CHEST),units:"arbitrary",low:0,high:40,avg:14,stdev:3,bias:-15,calc:function calc(){return this.getDim("upperMuscle")-.5*this.get("fem")}},vaginaSize:{linkedPart:"".concat(o.a.GENITALS),units:"mm",low:0,high:100,avg:40,stdev:10,bias:5,calc:function calc(){return this.getDim("vaginaSize")+this.Mods.labiaFullness+.2*this.Mods.arousal}},waistWidth:{linkedPart:"".concat(o.a.TORSO),units:"mm",low:70,high:150,avg:120,stdev:3,bias:-3,calc:function calc(){return this.getDim("waistWidth")-this.get("fem")+this.getDim("upperMuscle")}}}};function adjustLengthByHeight(t,e){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;return t*(1-r)+t*r*e/170}var i={eyecolor:["white"]};function extendDimensionCalc(o,i){if("string"==typeof o){var t=_slicedToArray(o.split("."),2),e=t[0],r=t[1];o=s[e][r]}var a=o.calc;o.calc=function(){for(var t,e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return t=a?a.call.apply(a,[this].concat(r)):this.getDim(o.name),i.call.apply(i,[this,t].concat(r))}}function loadDimensionDescriptions(){for(var t in s)if(!1!==s.hasOwnProperty(t)){var e=s[t];for(var r in e)e.hasOwnProperty(r)&&(e[r].name=r)}}},function(t,e,r){"use strict";r.d(e,"o",function(){return calcSuperPantsTop}),r.d(e,"m",function(){return calcSuperPants}),r.d(e,"p",function(){return calcSuperPantsZip}),r.d(e,"n",function(){return calcSuperPants2}),r.d(e,"j",function(){return s}),r.d(e,"h",function(){return c}),r.d(e,"l",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"b",function(){return p}),r.d(e,"f",function(){return f}),r.d(e,"i",function(){return h}),r.d(e,"g",function(){return b}),r.d(e,"k",function(){return d}),r.d(e,"c",function(){return g}),r.d(e,"a",function(){return P}),r.d(e,"e",function(){return v});var y=r(1),n=r(3),o=r(2),S=r(0),i=(r(11),r(26)),x=r(5),a=r(22);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcSuperPantsTop(t){var e,r,n;if(0<this.waistCoverage){var o=Object(S.splitCurve)(1-this.waistCoverage,t.waist,t.hip);e=Object(S.extractPoint)(o.left.p2),r=o.right.p2,n=t.thigh.out}else{var i=Object(S.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out);e=Object(S.extractPoint)(i.left.p2),n=i.right.p2}var a=e.y-t.hip.y,s={x:-.2,y:t.pelvis.y+1.2*a};return e.cp1={x:.5*e.x+.5*s.x,y:s.y},{top:s,out:e,hip:r,thighOut:n}}function calcSuperPants(t){var e=calcSuperPantsTop.call(this,t),r=e.top,n=e.out,o=e.hip,i=e.thighOut,a=Object(S.adjust)(t.groin,-.2,0);this.innerLoose<1&&(a.cp1={x:.5*a.x+.5*t.thigh.top.x,y:a.y});var s=[],c=[];c[0]=n,c[1]=n.y>t.hip.y?o:void 0;var l=[];if(void 0!==t.quads&&(l[0]=Object(S.clone)(t.quads.top),l[0].x=t.thigh.out.x,l[1]=Object(S.clone)(t.quads.out)),1<=this.outerLoose){var u,p=t.hip.y-(t.hip.y-t.ankle.out.y)*this.legCoverage;if(p<t.thigh.out.y){if(s=x.f.apply(void 0,[t.hip,t.ankle.out,this.legCoverage].concat(c,[i])),this.bustle?s[u=s.length]=Object(S.extractPoint)(t.thigh.out):s[u=s.length-1]=Object(S.clone)(t.thigh.out),s[u].y=p,s[u].x+=(this.outerLoose-1)*(50*this.legCoverage),!this.bustle)Object(S.interpolateCurve)(s[u-1],s[u],{x:null,y:t.thigh.out.y})[0].x<t.thigh.out.x&&(s[u+1]=Object(S.extractPoint)(s[u]),s[u]=t.thigh.out)}else(s=x.f.apply(void 0,[t.hip,t.ankle.out,this.legCoverage].concat(c,[i])))[s.length-1].y=p,s[s.length-1].x+=(this.outerLoose-1)*(50*this.legCoverage)}else if(0<this.outerLoose){var f;f=void 0!==t.quads?Object(x.d)(t.quads.out.x,t.quads.out.cp1.x,.5):t.thigh.out.x,s=x.f.apply(void 0,[t.hip,t.ankle.out,this.legCoverage].concat(c,[i],l,[t.knee.out,t.calf.out,t.ankle.out]));var h=c.length+1;0<l.length&&h++;for(var y=h;y<s.length;y++)s[y].x=Object(x.d)(s[y].x,f,this.outerLoose),s[y].cp1&&(s[y].cp1.x=Object(x.d)(s[y].cp1.x,f,this.outerLoose)),s[y].cp2&&(s[y].cp2.x=Object(x.d)(s[y].cp2.x,f,this.outerLoose))}else s=x.f.apply(void 0,[t.hip,t.ankle.out,this.legCoverage,n,o,i].concat(l,[t.knee.out,t.calf.out,t.ankle.out]));var b=[];if((b=1<=this.innerLoose?Object(x.g)(s[s.length-1],!0,r,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in):Object(x.g)(s[s.length-1],!0,a,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in))[0]=Object(S.extractPoint)(b[0]),0<this.innerLoose){b[0].x-=b[0].x*this.innerLoose;for(var d=1;d<b.length;d++)b[d]=Object(S.transformCurve)(this.innerLoose,b[d-1],b[d],{x:0,y:b[d].y})}return this.innerLoose<1&&b[0].y<t.groin.y?b[0].cp1={x:Object(x.d)(s[s.length-1].x,b[0].x,.5),y:b[0].y+3}:1<=this.innerLoose&&(s[s.length-1].y+=2,b[0].y-=2,b[0].x-=.2,b[0].cp1={x:.5*b[0].x+.5*s[s.length-1].x,y:b[0].y}),{top:r,out:n,hip:o,thighOut:i,groin:a,outerPoints:s,innerPoints:b}}function calcSuperPantsZip(t){var e,r=calcSuperPants.call(this,t),n=r.top,o=r.out,i=r.hip,a=r.thighOut,s=r.groin,c=r.outerPoints,l=r.innerPoints;e=Object(S.splitCurve)(this.zipOpen,n,o);var u=Object(S.extractPoint)(e.left.p2);return o=e.right.p2,{zip:{x:-.2,y:(e=Object(S.splitCurve)(this.zipDeep,n,s)).left.p2.y},top:n,mid:u,out:o,hip:i,thighOut:a,groin:s,outerPoints:c,innerPoints:l}}function calcSuperPants2(t,e,r,n,o,i,a,s){var c,l,u,p;u=0<n?(p=Object(S.splitCurve)(1-n,t.waist,t.hip),c=Object(S.extractPoint)(p.left.p2),l=p.right.p2,t.thigh.out):(p=Object(S.splitCurve)(Math.abs(n),t.hip,t.thigh.out),c=Object(S.extractPoint)(p.left.p2),p.right.p2);var f=c.y-t.hip.y,h={x:-.1,y:t.pelvis.y+1.2*f};c.cp1={x:.5*c.x+.5*h.x,y:h.y};var y=Object(S.adjust)(t.groin,-.1,0);a<1&&(y.cp1={x:.5*y.x+.5*t.thigh.top.x,y:y.y}),p=Object(S.splitCurve)(e,h,c);var b=Object(S.extractPoint)(p.left.p2);c=p.right.p2;var d={x:0,y:(p=Object(S.splitCurve)(r,h,y)).left.p2.y},g=[],P=[];(P[0]=c).y>t.hip.y&&(P[1]=l);var v=[];if(void 0!==t.quads&&(v[0]=Object(S.clone)(t.quads.top),v[0].x=t.thigh.out.x,v[1]=Object(S.clone)(t.quads.out)),1<=i){var _,C=t.hip.y-(t.hip.y-t.ankle.out.y)*o;if(C<t.thigh.out.y){if(g=x.f.apply(void 0,[t.hip,t.ankle.out,o].concat(P,[u])),s?g[_=g.length]=Object(S.extractPoint)(t.thigh.out):g[_=g.length-1]=Object(S.clone)(t.thigh.out),g[_].y=C,g[_].x+=50*o*(i-1),!s)Object(S.interpolateCurve)(g[_-1],g[_],{x:null,y:t.thigh.out.y})[0].x<t.thigh.out.x&&(g[_+1]=Object(S.extractPoint)(g[_]),g[_]=t.thigh.out)}else(g=x.f.apply(void 0,[t.hip,t.ankle.out,o].concat(P,[u])))[g.length-1].y=C,g[g.length-1].x+=50*o*(i-1)}else if(0<i){var O;O=void 0!==t.quads?Object(x.d)(t.quads.out.x,t.quads.out.cp1.x,.5):t.thigh.out.x,g=x.f.apply(void 0,[t.hip,t.ankle.out,o].concat(P,[u],v,[t.knee.out,t.calf.out,t.ankle.out]));var k=P.length+1;0<v.length&&k++;for(var m=k;m<g.length;m++)g[m].x=Object(x.d)(g[m].x,O,i),g[m].cp1&&(g[m].cp1.x=Object(x.d)(g[m].cp1.x,O,i)),g[m].cp2&&(g[m].cp2.x=Object(x.d)(g[m].cp2.x,O,i))}else g=x.f.apply(void 0,[t.hip,t.ankle.out,o,c,l,u].concat(v,[t.knee.out,t.calf.out,t.ankle.out]));var w=[];if((w=1<=a?Object(x.g)(g[g.length-1],!0,h,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in):Object(x.g)(g[g.length-1],!0,y,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in))[0]=Object(S.extractPoint)(w[0]),0<a){w[0].x-=w[0].x*a;for(var j=1;j<w.length;j++)w[j]=Object(S.transformCurve)(a,w[j-1],w[j],{x:0,y:w[j].y})}return a<1&&w[0].y<t.groin.y?w[0].cp1={x:Object(x.d)(g[g.length-1].x,w[0].x,.5),y:w[0].y+3}:1<=a&&(g[g.length-1].y+=2,w[0].y+=-2,w[0].cp1={x:.5*w[0].x+.5*g[g.length-1].x,y:w[0].y}),c.y>t.hip.y&&c.y<t.hip.y+10&&void 0!==g[1]&&(g[1]=Object(S.extractPoint)(g[1])),{out:c,hip:l,top:h,center:d,mid:b,thighOut:u,groin:y,outerPoints:g,innerPoints:w}}var s=function(t){function SuperPantsPart(){var t;_classCallCheck(this,SuperPantsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPantsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(SuperPantsPart,y["c"]),_createClass(SuperPantsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperPants.call(this,t),n=r.top,o=r.out,i=(r.hip,r.thighOut,r.groin),a=r.outerPoints,s=r.innerPoints;y.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?(e.beginPath(),S.drawPoints.apply(void 0,[e,n].concat(_toConsumableArray(a),[s[0],n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),[s[0]]))):(e.beginPath(),S.drawPoints.apply(void 0,[e,n].concat(_toConsumableArray(a),_toConsumableArray(s),[i,n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),_toConsumableArray(s),[i]))),e.stroke(),e.beginPath(),e.lineWidth=this.belt,Object(S.drawPoints)(e,n,Object(S.adjust)(o,-.5,0)),e.stroke()}}]),SuperPantsPart}(),c=function(t){function SuperLegginsPart(){var t;_classCallCheck(this,SuperLegginsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperLegginsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(SuperLegginsPart,y["c"]),_createClass(SuperLegginsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperPants.call(this,t),n=r.top,o=r.out,i=(r.hip,r.highOut,r.groin),a=r.outerPoints,s=r.innerPoints;y.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?(e.beginPath(),S.drawPoints.apply(void 0,[e,n].concat(_toConsumableArray(a),[s[0],n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),[s[0]]))):(e.beginPath(),S.drawPoints.apply(void 0,[e,n].concat(_toConsumableArray(a),_toConsumableArray(s),[i,n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),_toConsumableArray(s),[i]))),e.stroke(),e.beginPath(),e.lineWidth=this.belt,Object(S.drawPoints)(e,n,Object(S.adjust)(o,-.5,0)),e.stroke()}}]),SuperLegginsPart}(),l=function(t){function SuperSkirtPart(){var t;_classCallCheck(this,SuperSkirtPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSkirtPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(SuperSkirtPart,y["c"]),_createClass(SuperSkirtPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperPants.call(this,t),n=r.top,o=r.out,i=(r.hip,r.thighOut,r.groin),a=r.outerPoints,s=r.innerPoints;y.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?(e.beginPath(),S.drawPoints.apply(void 0,[e,n].concat(_toConsumableArray(a),[s[0],n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),[s[0]]))):(e.beginPath(),S.drawPoints.apply(void 0,[e,n].concat(_toConsumableArray(a),_toConsumableArray(s),[i,n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a),_toConsumableArray(s),[i]))),e.stroke(),e.beginPath(),e.lineWidth=this.belt,Object(S.drawPoints)(e,n,Object(S.adjust)(o,-.5,0)),e.stroke()}}]),SuperSkirtPart}(),u=function(t){function LacedLegginsPart(){var t;_classCallCheck(this,LacedLegginsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LacedLegginsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(LacedLegginsPart,y["c"]),_createClass(LacedLegginsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperPantsZip.call(this,t),n=r.zip,o=(r.top,r.mid),i=r.out,a=(r.hip,r.highOut,r.groin),s=r.outerPoints,c=r.innerPoints;y.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?(e.beginPath(),S.drawPoints.apply(void 0,[e,n,o].concat(_toConsumableArray(s),[c[0],n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(s),[c[0]]))):(e.beginPath(),S.drawPoints.apply(void 0,[e,n,o].concat(_toConsumableArray(s),_toConsumableArray(c),[a,n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(s),_toConsumableArray(c),[a]))),e.stroke();var l=0<this.crosses?this.crosses:3,u=Object(x.e)(n,o,n,Object(S.reflect)(o),l,1);e.lineWidth=1,e.beginPath(),S.drawPoints.apply(void 0,[e].concat(_toConsumableArray(u.inner),[S.breakPoint],_toConsumableArray(u.outer))),e.stroke(),e.beginPath(),e.lineWidth=this.belt,Object(S.drawPoints)(e,o,Object(S.adjust)(i,-.5,0)),e.stroke()}}]),LacedLegginsPart}(),p=function(t){function JeansPart(){var t;_classCallCheck(this,JeansPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(JeansPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(JeansPart,y["c"]),_createClass(JeansPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperPantsZip.call(this,t),n=r.zip,o=r.top,i=r.mid,a=r.out,s=(r.hip,r.thighOut,r.groin),c=r.outerPoints,l=r.innerPoints;y.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?(e.beginPath(),S.drawPoints.apply(void 0,[e,n,i].concat(_toConsumableArray(c),[l[0],n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e,n,i].concat(_toConsumableArray(c),[l[0]]))):(e.beginPath(),S.drawPoints.apply(void 0,[e,n,i].concat(_toConsumableArray(c),_toConsumableArray(l),[s,n])),e.fill(),e.beginPath(),S.drawPoints.apply(void 0,[e,n,i].concat(_toConsumableArray(c),_toConsumableArray(l),[s]))),e.stroke(),e.lineWidth=.5,e.beginPath(),Object(S.drawPoints)(e,Object(S.adjust)(i,1,-3),Object(S.adjust)(a,0,-3)),e.stroke();var u=i.x,p=o.y-n.y,f=Math.atan(u/p),h=Object(x.l)(p,-1.6*f+Math.PI/2,n);e.fillStyle=da.adjustColor(e.fillStyle,{s:-10,l:10}),e.beginPath(),Object(S.drawPoints)(e,n,h,i),e.fill(),e.stroke()}}]),JeansPart}(),f=function(t){function LoinclothPart(){var t;_classCallCheck(this,LoinclothPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LoinclothPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(LoinclothPart,y["c"]),_createClass(LoinclothPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r;y.a.simpleStrokeFill(e,t,this);var n=a.t.call(this,t),o={};o.inTop=Object(S.extractPoint)(n.inBot),r=Object(S.splitCurve)(this.topCoverage,n.inBot,n.outBot),o.outTop=Object(S.extractPoint)(r.left.p2),o.outTop.cp1=n.inBot.cp1;var i=Object(x.d)(t.ankle.out.y,t.hip.y,1-this.legCoverage);r=Object(S.splitCurve)(this.bottomCoverage,n.inBot,n.outBot),o.outBot={x:r.left.p2.x,y:i},r=Object(S.splitCurve)(.3,o.outTop,o.outBot),o.outBot.cp1=r.left.p2,o.outBot.cp1.x+=this.curveX,o.outBot.cp1.y+=this.curveY,o.inBot={x:-.2,y:i-4*this.bottomCoverage},o.inBot.cp1={x:Object(x.d)(o.outBot.x,o.inBot.x),y:o.inBot.y},e.beginPath(),Object(S.drawPoints)(e,o.inTop,o.outTop,o.outBot,o.inBot),e.stroke(),e.fill(),e.fillStyle=this.highlight,e.beginPath(),Object(S.drawPoints)(e,n.inTop,n.outTop,n.outMid,n.outBot,n.inBot),e.stroke(),e.fill()}}]),LoinclothPart}(),h=function(t){function SuperPants(){var t;_classCallCheck(this,SuperPants);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperPants)).call.apply(t,[this,{clothingLayer:y.a.Layer.MID,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.5,opacity:1,thickness:1,bustle:!1,belt:2}].concat(r)))}return _inherits(SuperPants,i["f"]),_createClass(SuperPants,[{key:"fill",value:function fill(){return"hsl(200, 65%, 20%)"}},{key:"stroke",value:function stroke(){return"hsl(200, 50%, 10%)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),SuperPants}(),b=function(t){function SuperLeggins(){var t;_classCallCheck(this,SuperLeggins);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperLeggins)).call.apply(t,[this,{clothingLayer:y.a.Layer.MID,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.5,opacity:1,thickness:1,bustle:!1,belt:2}].concat(r)))}return _inherits(SuperLeggins,i["f"]),_createClass(SuperLeggins,[{key:"fill",value:function fill(){return"hsla(200, 0%, 20%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(200, 0%, 10%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),SuperLeggins}(),d=function(t){function SuperSkirt(){var t;_classCallCheck(this,SuperSkirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSkirt)).call.apply(t,[this,{clothingLayer:y.a.Layer.MID,innerLoose:1,outerLoose:1.3,legCoverage:.4,waistCoverage:.1,opacity:1,thickness:1,bustle:!1,belt:2}].concat(r)))}return _inherits(SuperSkirt,i["f"]),_createClass(SuperSkirt,[{key:"fill",value:function fill(){return"hsl(0, 65%, 20%)"}},{key:"stroke",value:function stroke(){return"hsl(0, 50%, 10%)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l}]}}]),SuperSkirt}(),g=function(t){function LacedLeggins(){var t;_classCallCheck(this,LacedLeggins);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LacedLeggins)).call.apply(t,[this,{clothingLayer:y.a.Layer.MID,zipOpen:.2,zipDeep:.3,crosses:4,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.4,opacity:1,thickness:1,bustle:!1}].concat(r)))}return _inherits(LacedLeggins,i["f"]),_createClass(LacedLeggins,[{key:"fill",value:function fill(){return"hsla(200, 0%, 20%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(200, 0%, 10%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u}]}}]),LacedLeggins}(),P=function(t){function Jeans(){var t;_classCallCheck(this,Jeans);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Jeans)).call.apply(t,[this,{clothingLayer:y.a.Layer.MID,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.4,opacity:1,thickness:1,bustle:!1,belt:2,zipOpen:.01,zipDeep:.21,highlight:"orange"}].concat(r)))}return _inherits(Jeans,i["f"]),_createClass(Jeans,[{key:"fill",value:function fill(){return"hsl(200, 65%, 20%)"}},{key:"stroke",value:function stroke(){return"hsl(200, 50%, 10%)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p}]}}]),Jeans}(),v=function(t){function Loincloth(){var t;_classCallCheck(this,Loincloth);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Loincloth)).call.apply(t,[this,{waistCoverage:.42,beltWidth:4,beltCurve:-3.5,thickness:1,topCoverage:.8,legCoverage:.5,bottomCoverage:.14,curveX:-16,curveY:14,highlight:"hsla(33, 80%, 10%, 1)"}].concat(r)))}return _inherits(Loincloth,i["f"]),_createClass(Loincloth,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:f},{side:n.b.RIGHT,Part:f}]}}]),Loincloth}()},function(t,e,r){"use strict";r.d(e,"i",function(){return calcSuperSocks}),r.d(e,"a",function(){return i}),r.d(e,"f",function(){return a}),r.d(e,"g",function(){return s}),r.d(e,"c",function(){return c}),r.d(e,"h",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"e",function(){return h}),r.d(e,"b",function(){return y});var p=r(1),n=r(3),g=(r(2),r(0)),P=r(5),o=r(25),f=r(33);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcSuperSocks(t){var e=[];void 0!==t.quads&&(e[0]=Object(g.clone)(t.quads.top),e[0].x=t.thigh.out.x,e[1]=Object(g.clone)(t.quads.out));var r=P.i.apply(void 0,[t.hip,t.ankle.out,this.legCoverage,t.hip,t.thigh.out].concat(e,[t.knee.out,t.calf.out,t.ankle.out]));if(!this.lockGroin&&this.legCoverage<0){var n=Object(P.i)(t.armpit,t.hip,1+this.legCoverage,t.armpit,t.waist,t.hip);n.pop(),r=n.concat(r)}var o=[];if(r[0]&&r[0].y?o=Object(P.h)(r[0],!0,t.groin,t.thigh.top,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in):(o=[t.ankle.in],console.log("Problem with socks"),r&&console.log(r),r||(r=[t.ankle.out])),r[0]=Object(g.extractPoint)(r[0]),r[0].y-6<=t.thigh.top.y)r[0].cp1={x:Object(P.d)(o[o.length-1].x,r[0].x,.5),y:r[0].y-6};else if(this.lockGroin){o.splice(o.length-1,1);var i=Object(g.interpolateCurve)(t.hip,t.thigh.out,{x:null,y:t.thigh.top.y});r[0]=Object(g.extractPoint)(i[0]),r[1]=Object(g.extractPoint)(r[1]),r[0].cp1={x:Object(P.d)(o[o.length-1].x,r[0].x,.5),y:r[0].y-6}}else{o[o.length]=Object(g.adjust)(t.groin,-.2,0);var a=r[0].y-t.hip.y,s={x:-.2,y:t.pelvis.y+1.2*a};r[0].cp2=void 0,r[0].cp1={x:Object(P.d)(r[0].x,s.x,.5),y:s.y},r.unshift(s),o[o.length-1].cp1={x:.5*o[o.length-1].x+.5*t.thigh.top.x,y:o[o.length-1].y},o[o.length]=s}return{outerPoints:r,innerPoints:o}}var i=function(t){function Garter(){var t;_classCallCheck(this,Garter);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Garter)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"],reflect:!0}].concat(r)))}return _inherits(Garter,o["h"]),_createClass(Garter,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r,n,o=calcSuperSocks.call(this,t),i=o.outerPoints,a=o.innerPoints;if(e.fillStyle=this.highlight,0<this.waistCoverage){var s=Object(g.splitCurve)(1-this.waistCoverage,t.waist,t.hip),c={x:0,y:(r=Object(g.extractPoint)(s.left.p2)).y-this.beltWidth};n=Object(P.g)(c,!1,r,t.hip,t.thigh.out)}else{var l=Object(g.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out),u={x:0,y:(r=Object(g.extractPoint)(l.left.p2)).y-this.beltWidth};n=Object(P.g)(u,!1,r,t.thigh.out)}var p={x:-.1,y:r.y-6};r.cp1={x:.5*r.x+.5*p.x,y:p.y};var f=a[a.length-1],h=Object(g.extractPoint)(i[0]);f.y-=6,h.y-=6;var y={y:h.y,x:.4*(f.x-h.x)+h.x+3};y.cp1={y:.9*(n[n.length-1].y-y.y)+y.y,x:-.1*(n[n.length-1].x-y.x)+y.x};var b={y:f.y,x:y.x-3},d={x:t.pelvis.x-.1,y:p.y-(r.y-n[n.length-1].y)};d.cp1={y:.2*(b.y-p.y)+p.y,x:.9*(b.x-p.x)+p.x},e.beginPath(),g.drawPoints.apply(void 0,[e,p,r].concat(_toConsumableArray(n),[y,b,d])),e.fill()}}]),Garter}(),a=function(t){function SuperSockBandPart(){var t;_classCallCheck(this,SuperSockBandPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSockBandPart)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"]}].concat(r)))}return _inherits(SuperSockBandPart,o["h"]),_createClass(SuperSockBandPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!(this.bandWidth<.1)){var r=calcSuperSocks.call(this,t),n=r.outerPoints,o=r.innerPoints;e.fillStyle=this.highlight;var i=o[o.length-1],a=Object(g.extractPoint)(n[0]),s=Object(g.clone)(i);s.y=s.y-this.bandWidth,o.reverse();var c=P.g.apply(void 0,[s,!0].concat(_toConsumableArray(o))),l=P.g.apply(void 0,[s,!1].concat(_toConsumableArray(n)));a.cp1={x:Object(P.d)(i.x,a.x,.5),y:a.y-6},c[0]=Object(g.extractPoint)(c[0]),c[0].cp1={x:Object(P.d)(l[l.length-1].x,c[0].x,.5),y:c[0].y-6},e.beginPath(),g.drawPoints.apply(void 0,[e,a].concat(_toConsumableArray(l),_toConsumableArray(c),[i,a])),e.fill()}}}]),SuperSockBandPart}(),s=function(t){function SuperSockPart(){var t;_classCallCheck(this,SuperSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSockPart)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"]}].concat(r)))}return _inherits(SuperSockPart,o["h"]),_createClass(SuperSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSuperSocks.call(this,t),n=r.outerPoints,o=r.innerPoints;p.a.simpleStrokeFill(e,t,this),e.beginPath(),g.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n),[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot],_toConsumableArray(o),[n[0]])),e.fill(),e.stroke()}}]),SuperSockPart}(),c=function(t){function PantyhosePart(){var t;_classCallCheck(this,PantyhosePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PantyhosePart)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"]}].concat(r)))}return _inherits(PantyhosePart,o["h"]),_createClass(PantyhosePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=f.o.call(this,t),n=r.top,o=r.out,i=r.hip,a=r.thighOut;p.a.simpleStrokeFill(e,t,this);var s=[];void 0!==t.quads&&(s[0]=Object(g.clone)(t.quads.top),s[0].x=t.thigh.out.x,s[1]=Object(g.clone)(t.quads.out));var c=t.thigh.top,l=t.groin;if(.02<this.open){var u=.7*(n.y-l.y)*this.open;(l=Object(g.adjust)(t.groin,0,u)).cp2=Object(g.adjust)(t.groin,22*this.open,22*this.open),l.cp1=Object(g.adjust)(t.groin,12*this.open,-14*this.open),c=(u=da.splitCurve(1-.9*this.open,t.thigh.in,t.thigh.top)).left.p2}e.beginPath(),g.drawPoints.apply(void 0,[e,n,o,i,a].concat(s,[t.knee.out,t.calf.out,t.ankle.out,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,t.calf.in,t.knee.in,t.knee.intop,t.thigh.in,c,l,n])),e.fill(),e.stroke()}}]),PantyhosePart}(),l=function(t){function SuperSocks(){var t;_classCallCheck(this,SuperSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SuperSocks)).call.apply(t,[this,{legCoverage:.5,thickness:.5,lockGroin:!1}].concat(r)))}return _inherits(SuperSocks,o["g"]),_createClass(SuperSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),SuperSocks}(),u=function(t){function Stockings(){var t;_classCallCheck(this,Stockings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Stockings)).call.apply(t,[this,{legCoverage:.2,thickness:.3,bandWidth:7,highlight:"hsla(0, 0%, 11%, 1)",lockGroin:!0}].concat(r)))}return _inherits(Stockings,o["g"]),_createClass(Stockings,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),Stockings}(),h=function(t){function StockingsGarter(){var t;_classCallCheck(this,StockingsGarter);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StockingsGarter)).call.apply(t,[this,{legCoverage:.2,thickness:.3,bandWidth:9,beltWidth:10,highlight:"hsla(0, 0%, 11%, 1)",waistCoverage:.5,lockGroin:!0}].concat(r)))}return _inherits(StockingsGarter,o["g"]),_createClass(StockingsGarter,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:i},{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),StockingsGarter}(),y=function(t){function Pantyhose(){var t;_classCallCheck(this,Pantyhose);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Pantyhose)).call.apply(t,[this,{waistCoverage:.45,thickness:.3,open:0}].concat(r)))}return _inherits(Pantyhose,o["g"]),_createClass(Pantyhose,[{key:"fill",value:function fill(){return"hsla(0,20%,30%,0.5)"}},{key:"stroke",value:function stroke(){return"hsla(0.0,5%,30%,1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),Pantyhose}()},function(t,e,r){"use strict";r.d(e,"a",function(){return n});var n={human:{}}},function(t,e,r){"use strict";r.d(e,"b",function(){return u}),r.d(e,"d",function(){return p}),r.d(e,"c",function(){return f}),r.d(e,"e",function(){return h}),r.d(e,"a",function(){return y}),r.d(e,"f",function(){return b});var n=r(24),o=r(2),l=r(0),i=r(9),a=r(11);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function Outline(){var t;_classCallCheck(this,Outline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Outline)).call.apply(t,[this].concat(r)))}return _inherits(Outline,n["a"]),_createClass(Outline,[{key:"stroke",value:function stroke(t,e){return Object(a.b)(e.baseStroke,{s:-30,l:-30})}},{key:"fill",value:function fill(){return l.none}}]),Outline}(),c=function(t){function MuscleOutline(){var t;_classCallCheck(this,MuscleOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MuscleOutline)).call.apply(t,[this].concat(r)))}return _inherits(MuscleOutline,s),_createClass(MuscleOutline,[{key:"getLineWidth",value:function getLineWidth(t){return Object(l.clamp)(.05*(t.getDim(this.muscleGroup)-10),0,1.2)}}]),MuscleOutline}(),u=function(t){function BellyButtonOutline(){var t;_classCallCheck(this,BellyButtonOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BellyButtonOutline)).call.apply(t,[this,{loc:"+torso",aboveParts:["parts torso"],belowParts:["clothingParts leg"],layer:o.a.FRONT}].concat(r)))}return _inherits(BellyButtonOutline,s),_createClass(BellyButtonOutline,[{key:"getLineWidth",value:function getLineWidth(){return 1}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.bellybutton={};n.top={x:0,y:.45*t.waist.y+.55*t.hip.y},n.bot={x:n.top.x,y:n.top.y-1},n.bot.cp1=Object(l.simpleQuadratic)(n.top,n.bot,.5,.5)}return[t.bellybutton.top,t.bellybutton.bot]}}]),BellyButtonOutline}(),p=function(t){function DeltoidsOutline(){var t;_classCallCheck(this,DeltoidsOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DeltoidsOutline)).call.apply(t,[this,{loc:"+arm",aboveParts:["parts arm"],layer:o.a.FRONT,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(DeltoidsOutline,c),_createClass(DeltoidsOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<20||!1===t.hasOwnProperty("deltoids"))return[];if(r){var n=this.upperMuscle-10,o=t.deltoids;o.top={x:t.armpit.x,y:t.armpit.y+2},o.bot={x:o.x-5,y:o.y},o.bot.cp1=Object(l.simpleQuadratic)(o.top,o.bot,.7,.1*-n)}return[t.deltoids.top,t.deltoids.bot]}}]),DeltoidsOutline}(),f=function(t){function CollarboneOutline(){var t;_classCallCheck(this,CollarboneOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CollarboneOutline)).call.apply(t,[this,{loc:"+torso",layer:o.a.FRONT,reflect:!0,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(CollarboneOutline,c),_createClass(CollarboneOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<20||!1===t.hasOwnProperty("collarbone"))return[];if(r){var n=t.collarbone;n.out={x:n.x-.5,y:n.y-2},n.in={x:2,y:n.out.y-2},n.in.cp1={x:n.out.x-5,y:n.out.y},n.in.cp2={x:n.in.x+1,y:n.in.y+2}}return[t.collarbone.out,t.collarbone.in]}}]),CollarboneOutline}(),h=function(t){function PectoralOutline(){var t;_classCallCheck(this,PectoralOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PectoralOutline)).call.apply(t,[this,{loc:"+torso",aboveParts:["parts torso"],belowParts:["parts chest","decorativeParts chest"],layer:o.a.FRONT,reflect:!0,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(PectoralOutline,c),_createClass(PectoralOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<20)return[];if(r){var n=this.upperMuscle-20,o=t.pecs={};o.outtop={x:t.armpit.x,y:t.armpit.y+4},o.outbot={x:o.outtop.x-3,y:o.outtop.y-9},o.inbot={x:2,y:o.outbot.y+.5},o.intop={x:.5,y:o.inbot.y+1+.3*n},o.outbot.cp1={x:o.outtop.x,y:o.outtop.y-3},o.outbot.cp2={x:o.outbot.x+1,y:o.outbot.y+1},o.inbot.cp1={x:o.outbot.x-.5,y:o.outbot.y-1},o.inbot.cp2={x:o.inbot.x+.5,y:o.inbot.y-1},o.intop.cp1={x:o.inbot.x-.1*n,y:o.inbot.y+.05*n},o.intop.cp2={x:o.intop.x,y:o.intop.y-.1*n}}return[t.pecs.outtop,t.pecs.outbot,t.pecs.inbot,t.pecs.intop]}}]),PectoralOutline}(),y=function(t){function AbdominalOutline(){var t;_classCallCheck(this,AbdominalOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AbdominalOutline)).call.apply(t,[this,{loc:"+torso",aboveParts:["parts torso"],layer:o.a.FRONT,reflect:!0,muscleGroup:"upperMuscle"}].concat(r)))}return _inherits(AbdominalOutline,c),_createClass(AbdominalOutline,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.upperMuscle<15)return[];var n=this.upperMuscle-20;if(r){var o=.12*(.75*(this.height-this.legLength)),i=.05*n,a=t.abs={};if(a.top={x:t.waist.x-3,y:t.armpit.y-7},a.first={x:a.top.x-1,y:a.top.y-o},a.first.cp1=Object(l.simpleQuadratic)(a.top,a.first,.5,i),a.second={x:a.first.x-.4,y:a.first.y-o},a.second.cp1=Object(l.simpleQuadratic)(a.first,a.second,.5,i),a.bot={x:a.second.x-.3,y:a.second.y-o},a.bot.cp1=Object(l.simpleQuadratic)(a.second,a.bot,.5,i),5<n){a.top.out={x:a.top.x-1.7,y:a.top.y},a.top.in={x:.9,y:a.top.y+.5},a.top.in.cp1=Object(l.simpleQuadratic)(a.top,a.top.in,.5,-i),a.first.out={x:a.first.x-1.7,y:a.first.y},a.first.in={x:1.5,y:a.first.y},a.first.in.cp1=Object(l.simpleQuadratic)(a.first,a.first.in,.5,i),a.second.out={x:a.second.x-1.7,y:a.second.y},a.second.in={x:1.2,y:a.second.y},a.second.in.cp1=Object(l.simpleQuadratic)(a.second,a.second.in,.5,i),a.bot.in={x:.6,y:a.bot.y},a.bot.in.cp1=Object(l.simpleQuadratic)(a.bot,a.bot.in,.5,i);var s=t.lat;s.top={x:s.x-1.5,y:s.y},s.bot={x:a.top.x+1,y:.5*a.top.y+.5*a.first.y},s.bot.cp1=Object(l.simpleQuadratic)(s.top,s.bot,.5,1.5*i)}}var c=[t.abs.top,t.abs.first,t.abs.second,t.abs.bot];return 5<n&&(c=[].concat(_toConsumableArray(c),[l.breakPoint,t.abs.top.out,t.abs.top.in,l.breakPoint,t.abs.first.out,t.abs.first.in,l.breakPoint,t.abs.second.out,t.abs.second.in,l.breakPoint,t.lat.top,t.lat.bot])),c}}]),AbdominalOutline}(),b=function(t){function QuadricepsOutline(){var t;_classCallCheck(this,QuadricepsOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(QuadricepsOutline)).call.apply(t,[this,{loc:"+leg",aboveParts:["parts leg"],belowParts:["clothingParts leg","clothingParts feet"],layer:o.a.FRONT,muscleGroup:"lowerMuscle"}].concat(r)))}return _inherits(QuadricepsOutline,c),_createClass(QuadricepsOutline,[{key:"fill",value:function fill(t,e){return i.g.call(this,t,e)}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.lowerMuscle<20||!1===t.hasOwnProperty("thigh"))return[];if(r){var n=this.lowerMuscle-10,o=t.quads={};o.top={x:.1*t.thigh.in.x+.9*t.thigh.out.x,y:t.thigh.out.y};var i=Object(l.splitCurve)(.95,t.thigh.out,t.knee.out);o.out=i.right.p1,o.out.cp1=Object(l.simpleQuadratic)(o.top,o.out,.55,.25*n),o.in={x:.65*t.thigh.in.x+.35*t.thigh.out.x,y:t.thigh.in.y+3.5},o.bot={x:t.knee.out.x-6-.05*n,y:t.knee.intop.y+2},o.bot.cp1=Object(l.simpleQuadratic)(o.in,o.bot,.7,.1*-n)}return[t.quads.top,t.quads.out,l.breakPoint,t.quads.in,t.quads.bot]}}]),QuadricepsOutline}()},function(t,e,r){"use strict";r.d(e,"c",function(){return s}),r.d(e,"b",function(){return n}),r.d(e,"a",function(){return loadMods});var i=r(27),a=r(32),s={armRotation:{linkedPart:"arm",units:"degree",low:-40,high:40,avg:0,stdev:0,bias:0},arousal:{units:"arbitrary",low:0,high:100,avg:10,stdev:5,bias:0},breastPerkiness:{linkedPart:"chest",desc:"counter sagging effect when breasts grow too large",units:"arbitrary",low:-10,high:30,avg:0,stdev:2,bias:0},browBotCurl:{linkedPart:"brow",desc:"How much the bottom of the eyebrow curls up or down; 0 is flat",units:"mm",low:-10,high:15,avg:3,stdev:2,bias:3},browTopCurl:{linkedPart:"brow",desc:"How much the top of the eyebrow curls up or down; 0 is flat",units:"mm",low:-10,high:15,avg:8,stdev:2,bias:1},browCloseness:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},browHeight:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},browLength:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},browSharpness:{linkedPart:"brow",units:"arbitrary",low:-10,high:10,avg:0,stdev:2,bias:0},browThickness:{linkedPart:"brow",units:"mm",low:-10,high:10,avg:0,stdev:1,bias:-1.5},browOutBias:{linkedPart:"brow",desc:"Whether the top of the outer brow ends inside or outside the bottom",units:"mm",low:-10,high:10,avg:-1,stdev:2,bias:0},browTilt:{linkedPart:"brow",units:"degree",low:-20,high:20,avg:5,stdev:4,bias:0},cheekFullness:{linkedPart:"head",units:"arbitrary",low:-20,high:20,avg:0,stdev:3,bias:0},chinLength:{linkedPart:"head",units:"mm",low:-30,high:30,avg:0,stdev:3,bias:0},earlobeLength:{linkedPart:"ears",low:-2,high:4,avg:0,stdev:.2,bias:0},eyeBias:{linkedPart:"eyes",desc:"Whether the eyes bias towards the inside or outside",units:"arbitrary",low:-10,high:10,avg:1,stdev:2,bias:0},eyeCloseness:{linkedPart:"eyes",units:"mm",low:-100,high:100,avg:0,stdev:5,bias:0},eyeBotBias:{linkedPart:"eyes",desc:"Whether the eye bottom bias towards the inside or outside",units:"arbitrary",low:-10,high:10,avg:0,stdev:2,bias:0},eyeBotSize:{linkedPart:"eyes",desc:"How much does the bottom of the eyes dip",units:"mm",low:-20,high:20,avg:0,stdev:0,bias:1},eyeHeight:{linkedPart:"eyes",units:"mm",low:-15,high:10,avg:-3,stdev:2,bias:0},eyeTilt:{linkedPart:"eyes",units:"degree",low:-20,high:30,avg:2,stdev:4,bias:0},eyeTopSize:{linkedPart:"eyes",desc:"How much does the top of the eyes curve",units:"mm",low:-10,high:8,avg:0,stdev:.5,bias:0},eyeWidth:{linkedPart:"eyes",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},eyelashBias:{linkedPart:"eyelash",desc:"Whether the eyelashes bias towards the inside or outside",units:"arbitrary",low:-10,high:20,avg:5,stdev:1,bias:0},eyelashAngle:{linkedPart:"eyelash",desc:"Whether the eyelash points down or up",units:"arbitrary",low:-1,high:1,avg:.9,stdev:0,bias:0},eyelidBias:{linkedPart:"eyelid",desc:"Whether the eyelids bias towards the inside or outside",units:"arbitrary",low:-10,high:10,avg:1,stdev:2,bias:0},eyelidHeight:{linkedPart:"eyelid",units:"mm",low:-6,high:12,avg:0,stdev:2,bias:0},feetBias:{linkedPart:"feet",desc:"Relative importance of inner toes vs outer toes",units:"arbitrary",low:-10,high:20,avg:0,stdev:2,bias:0},feetLength:{linkedPart:"feet",units:"mm",low:-10,high:40,avg:0,stdev:2,bias:0},feetWidth:{linkedPart:"feet",units:"mm",low:-20,high:12,avg:0,stdev:2,bias:0},hairAccessoryHue:{linkedPart:"hair",units:"degree",low:0,high:360,avg:360,stdev:50,bias:0},hairAccessorySaturation:{linkedPart:"hair",units:"%",low:0,high:100,avg:80,stdev:5,bias:0},hairAccessoryLightness:{linkedPart:"hair",units:"%",low:0,high:100,avg:50,stdev:10,bias:0},handRotation:{linkedPart:"hand",units:"degree",low:-40,high:40,avg:0,stdev:0,bias:0},irisHeight:{linkedPart:"iris",units:"mm",low:-10,high:10,avg:0,stdev:1,bias:0},irisHue:{linkedPart:"iris",units:"degree",low:0,high:360,avg:30,stdev:30,bias:0},irisSaturation:{linkedPart:"iris",units:"%",low:0,high:100,avg:50,stdev:10,bias:0},irisLightness:{linkedPart:"iris",units:"%",low:0,high:100,avg:20,stdev:10,bias:0},irisSize:{linkedPart:"iris",desc:"Diameter of the iris",units:"mm",low:0,high:50,avg:16,stdev:1.5,bias:0},jawJut:{linkedPart:"head",units:"mm",low:-10,high:10,avg:0,stdev:.5,bias:0},limbalRingSize:{linkedPart:"iris",desc:"Width of the limbal ring (dark ring surrounding iris)",units:"um",low:0,high:100,avg:20,stdev:5,bias:0},lipBias:{linkedPart:"lips",desc:"Whether the top lip sits above the bottom lip or vise versa",units:"arbitrary",low:-50,high:50,avg:10,stdev:10,bias:0},lipCupidsBow:{linkedPart:"lips",units:"mm",low:-100,high:30,avg:0,stdev:20,bias:0},lipCurl:{linkedPart:"lips",units:"arbitrary",low:-20,high:20,avg:0,stdev:5,bias:0},lipHeight:{linkedPart:"lips",units:"mm",low:-10,high:10,avg:0,stdev:1.2,bias:0},lipTopCurve:{linkedPart:"lips",units:"arbitrary",low:-50,high:50,avg:0,stdev:10,bias:0},lipTopSize:{linkedPart:"lips",units:"um",low:-20,high:60,avg:8,stdev:4,bias:0},lipBotSize:{linkedPart:"lips",units:"mm",low:-80,high:100,avg:30,stdev:10,bias:3},lipParting:{linkedPart:"lips",units:"um",low:0,high:100,avg:0,stdev:0,bias:0},lipWidth:{linkedPart:"lips",units:"mm",low:-250,high:100,avg:0,stdev:30,bias:-70},lipHue:{linkedPart:"lips",units:"degree",low:-20,high:20,avg:0,stdev:2,bias:0},lipSaturation:{linkedPart:"lips",units:"%",low:-20,high:20,avg:0,stdev:2,bias:0},lipLightness:{linkedPart:"lips",units:"%",low:-20,high:20,avg:0,stdev:2,bias:0},neckCurve:{linkedPart:"neck",units:"mm",low:-20,high:10,avg:-5,stdev:3,bias:-2},noseHeight:{linkedPart:"nose",units:"mm",low:-10,high:10,avg:0,stdev:4,bias:0},noseLength:{linkedPart:"nose",units:"mm",low:0,high:70,avg:45,stdev:3,bias:0},noseRidgeHeight:{linkedPart:"nose",units:"mm",low:-10,high:10,avg:0,stdev:2,bias:0},noseRoundness:{linkedPart:"nose",units:"arbitrary",low:-6,high:10,avg:0,stdev:2,bias:0},noseWidth:{linkedPart:"nose",units:"mm",low:10,high:30,avg:18,stdev:2,bias:-1},nostrilSize:{linkedPart:"nose",units:"mm",low:5,high:30,avg:10,stdev:2,bias:0},pupilSize:{linkedPart:"pupil",desc:"Diameter of the pupil",units:"mm",low:0,high:20,avg:10,stdev:.5,bias:0},labiaFullness:{linkedPart:"genitals",desc:"How puffy the labia is",units:"arbitrary",low:-10,high:10,avg:0,stdev:1,bias:1},penisThickness:{linkedPart:"genitals",units:"um",low:-30,high:30,avg:0,stdev:4,bias:-4},shoeHeight:{units:"mm",low:0,high:300,avg:0,stdev:0,bias:0},skinHue:{units:"degree",low:-20,high:20,avg:0,stdev:2,bias:0},skinSaturation:{units:"%",low:-20,high:20,avg:0,stdev:2,bias:0},skinLightness:{units:"%",low:-20,high:20,avg:0,stdev:2,bias:0}},n={};function loadMods(){for(var t in i.b)if(i.b.hasOwnProperty(t)&&!s.hasOwnProperty(t)){var e=i.b[t].high-i.b[t].low;s[t]={low:-1e9,high:1e9,avg:0,stdev:.01*e,bias:0}}var r=a.a.human;for(var n in r)if(r.hasOwnProperty(n)&&!s.hasOwnProperty(n)){var o=r[n].high-r[n].low;s[n]={low:-1e9,high:1e9,avg:0,stdev:.01*o,bias:0}}}},function(t,e,r){"use strict";r.d(e,"c",function(){return n}),r.d(e,"a",function(){return i}),r.d(e,"b",function(){return a});var u=r(1),o=r(2),p=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function NecktiePart(){var t;_classCallCheck(this,NecktiePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NecktiePart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!1,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{offsetWidth:0,offsetHeight:-10,knotWidth:5,knotHeight:5,loopWidth:3,tongueTopWidth:4,tongueBotWidth:6,tongueHeight:15,tongueBotHeight:3,tongueRotation:0}].concat(r)))}return _inherits(NecktiePart,u["c"]),_createClass(NecktiePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r={x:this.offsetWidth,y:t.neck.cusp.y+this.offsetHeight},n={};n.topLeft={x:r.x-this.knotWidth/2,y:r.y},n.topRight={x:r.x+this.knotWidth/2,y:r.y},n.left={x:n.topLeft.x,y:r.y-this.loopWidth/2},n.right={x:n.topRight.x,y:n.left.y},n.botLeft={x:r.x-this.tongueTopWidth/2,y:r.y-this.knotHeight},n.botRight={x:r.x+this.tongueTopWidth/2,y:n.botLeft.y};var o=Object(p.splitCurve)(Object(p.clamp)(.035*this.loopWidth,0,1),t.trapezius,t.collarbone),i=Object(p.extractPoint)(o.left.p2),a=o.left.p1;a.cp1=o.left.p2.cp2,a.cp2=o.left.p2.cp1;var s=Object(p.reflect)(a),c=Object(p.reflect)(i);s.cp1=Object(p.reflect)(a.cp1),s.cp2=Object(p.reflect)(a.cp2);var l={};l.bot={x:r.x,y:n.botRight.y-this.tongueHeight},l.left={x:r.x-this.tongueBotWidth/2,y:l.bot.y+this.tongueBotHeight},l.right={x:r.x+this.tongueBotWidth/2,y:l.left.y},Object(p.rotatePoints)(r,Object(p.rad)(this.tongueRotation),l.bot,l.left,l.right),u.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(p.drawPoints)(e,n.topLeft,r,n.topRight,n.right,n.botRight,n.botLeft,n.left,n.topLeft);n.topLeft.cp1=Object(p.simpleQuadratic)(s,n.topLeft,.5,-1.5),c.cp1=Object(p.simpleQuadratic)(n.left,c,.5,1.5),Object(p.drawPoints)(e,c,s,n.topLeft,n.left,c),n.topRight.cp1=Object(p.simpleQuadratic)(a,n.topRight,.5,1.5),i.cp1=Object(p.simpleQuadratic)(n.right,i,.5,-1.5),Object(p.drawPoints)(e,i,a,n.topRight,n.right,i),Object(p.drawPoints)(e,n.botLeft,l.left,l.bot,l.right,n.botRight),e.fill()}}]),NecktiePart}(),i=function(t){function NeckAccessory(){var t;_classCallCheck(this,NeckAccessory);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckAccessory)).call.apply(t,[this,{clothingLayer:u.a.Layer.MID}].concat(r)))}return _inherits(NeckAccessory,u["b"]),NeckAccessory}(),a=function(t){function NeckTie(){var t;_classCallCheck(this,NeckTie);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckTie)).call.apply(t,[this].concat(r)))}return _inherits(NeckTie,i),_createClass(NeckTie,[{key:"fill",value:function fill(){return"#333"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:n}]}}]),NeckTie}()},function(t,e,r){"use strict";r.d(e,"g",function(){return i}),r.d(e,"i",function(){return calcSweaterBase}),r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"h",function(){return calcLongSleeve}),r.d(e,"e",function(){return c}),r.d(e,"f",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"a",function(){return y});var p=r(1),n=r(3),f=r(12),o=r(2),h=(r(9),r(0));function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function SweaterBasePart(){var t;_classCallCheck(this,SweaterBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SweaterBasePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],aboveSameLayerParts:["groin"]}].concat(r)))}return _inherits(SweaterBasePart,p["c"]),_createClass(SweaterBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcSweaterBase.call(this,t),n=r.top,o=r.out,i=r.cusp,a=r.collarbone,s=r.waist,c=r.bot;p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,t.armpit,t.lat,s,c.out,c.bot),e.fill(),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,h.breakPoint,t.armpit,t.lat,s,c.out,c.bot),e.stroke()}}]),SweaterBasePart}();function calcSweaterBase(t){var e=Object(h.splitCurve)(1-this.neckCoverage,t.neck.top,t.neck.cusp),r=e.left.p2,n={x:0,y:r.y-2};r.cp1={x:.5*n.x+.5*r.x,y:n.y};var o=Object(h.extractPoint)(t.trapezius);o.cp1={x:r.x+2*this.neckCoverage,y:r.y-1},o.cp2={x:o.x,y:o.y+3*this.neckCoverage},e=Object(h.splitCurve)(this.stomachCoverage,t.waist,t.hip);var i={};return i.out=e.left.p2,i.out.x+=.4*this.thickness,i.bot=Object(h.extractPoint)(t.pelvis),i.bot.y+=i.out.y-t.hip.y,i.bot.cp1={x:.5*i.bot.x+.5*i.out.x,y:i.bot.y},{top:n,out:r,cusp:o,collarbone:Object(h.clone)(t.collarbone),waist:Object(h.adjust)(t.waist,.8*this.thickness,0),bot:i}}var a=function(t){function CoveredBreastPart(){var t;_classCallCheck(this,CoveredBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CoveredBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(CoveredBreastPart,p["c"]),_createClass(CoveredBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!Object(f.b)(t,e,this)){var r=Object(h.adjust)(t.breast.top,0,0),n=Object(h.adjust)(t.breast.tip,.1,0),o=Object(h.adjust)(t.breast.bot,0,-.1),i=Object(h.adjust)(t.breast.in,0,0),a=Object(h.adjust)(t.breast.cleavage,-.1,0),s=Object(h.adjust)(Object(f.a)(a,r),0,.2);p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,r,n,o,i,a,s),e.fill(),e.beginPath(),Object(h.drawPoints)(e,r,n,o,i),e.stroke()}}}]),CoveredBreastPart}(),s=function(t){function LongSleevePart(){var t;_classCallCheck(this,LongSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{sleeveLength:1}].concat(r)))}return _inherits(LongSleevePart,p["c"]),_createClass(LongSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcLongSleeve.call(this,t),n=r.collarbone,o=r.deltoids,i=r.shoulder,a=r.elbowOut,s=r.out,c=r.bot,l=r.elbow,u=r.armpit;p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c,l,u,Object(f.a)(u,n)),e.fill(),e.beginPath(),Object(h.drawPoints)(e,n,o,i,a,s,c,l,u),e.stroke()}}]),LongSleevePart}();function calcLongSleeve(t){var e=Object(h.splitCurve)(this.sleeveLength,t.elbow.out,t.wrist.out),r=e.left.p2;r.cp1&&r.cp2&&(r.cp1.x+=.5*this.thickness,r.cp2.x+=.3*this.thickness);var n=(e=Object(h.splitCurve)(.9*(1-this.sleeveLength),t.wrist.in,t.elbow.in)).left.p2,o=e.right.p2;o=Object(h.adjust)(o,.4*-this.thickness,0);var i=Object(h.extractPoint)(t.collarbone);i.x-=.2;var a=Object(h.adjust)(t.shoulder,.5*this.thickness,0),s=Object(h.adjust)(t.elbow.out,.5*this.thickness,0);n.cp1=Object(h.simpleQuadratic)(r,n,.5,1);var c=Object(h.adjust)(t.armpit,-.2,0);return{collarbone:i,deltoids:t.deltoids,shoulder:a,elbowOut:s,out:r,bot:n,elbow:o,armpit:c}}var c=function(t){function ShortSleevePart(){var t;_classCallCheck(this,ShortSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ShortSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm"]}].concat(r)))}return _inherits(ShortSleevePart,p["c"]),_createClass(ShortSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(h.splitCurve)(1-this.sleeveLength,t.shoulder,t.elbow.out),n=r.left.p2,o=(r=Object(h.splitCurve)(.9*(1-this.sleeveLength),t.elbow.in,t.armpit)).left.p2,i=r.right.p2;i=Object(h.adjust)(i,-.1,0);var a=calcSweaterBase.call(this,t).collarbone;a.x-=.1;var s=Object(h.adjust)(t.shoulder,.5*this.thickness,0);o.cp1=Object(h.simpleQuadratic)(n,o,.5,1),p.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(h.drawPoints)(e,a,t.deltoids,s,n,o,i,Object(f.a)(i,a)),e.fill(),e.beginPath(),Object(h.drawPoints)(e,a,t.deltoids,s,n,o,i),e.stroke()}}]),ShortSleevePart}(),l=function(t){function Sweater(){var t;_classCallCheck(this,Sweater);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Sweater)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,stomachCoverage:.8,neckCoverage:.5,sleeveLength:.8}].concat(r)))}return _inherits(Sweater,p["b"]),Sweater}(),u=function(t){function LongSleevedSweater(){var t;_classCallCheck(this,LongSleevedSweater);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSleevedSweater)).call.apply(t,[this,{stomachCoverage:.7,neckCoverage:.5,sleeveLength:1}].concat(r)))}return _inherits(LongSleevedSweater,l),_createClass(LongSleevedSweater,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),LongSleevedSweater}(),y=function(t){function AsymmetricSleevedSweater(){var t;_classCallCheck(this,AsymmetricSleevedSweater);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AsymmetricSleevedSweater)).call.apply(t,[this,{stomachCoverage:.7,neckCoverage:.5,sleeveLength:1}].concat(r)))}return _inherits(AsymmetricSleevedSweater,l),_createClass(AsymmetricSleevedSweater,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:s}]}}]),AsymmetricSleevedSweater}()},function(t,e,r){"use strict";r.d(e,"a",function(){return n});var n={brownFur:Object.freeze({stroke:"#663300",fill:"#ac7339",coverConceal:["this"]}),sheerFabric:Object.freeze({stroke:"#000",fill:"rgba(0,0,0,0.8)"})}},function(t,e,r){"use strict";r.d(e,"c",function(){return c}),r.d(e,"a",function(){return l}),r.d(e,"b",function(){return u});var o=r(1),i=r(2),n=r(0),a=r(6),s=r(3);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function MascaraPart(){var t;_classCallCheck(this,MascaraPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MascaraPart)).call.apply(t,[this,{layer:i.a.BELOW_HAIR,loc:"".concat(a.Location.EYELASH),reflect:!1,aboveParts:["faceParts eyelash"]},{topFill:"black",botFill:"black"}].concat(r)))}return _inherits(MascaraPart,o["c"]),_createClass(MascaraPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){Object(a.setStrokeAndFill)(e,{stroke:n.none,fill:this.topFill},t),e.beginPath(),Object(n.drawPoints)(e,t.eyes.out,t.eyelid.top,t.eyelid.in,t.eyelash.top,t.eyelash.out),e.fill(),Object(a.setStrokeAndFill)(e,{stroke:n.none,fill:this.botFill},t),e.beginPath(),Object(n.drawPoints)(e,t.eyes.out,t.eyes.in,t.eyelash.outBot),e.fill()}}]),MascaraPart}(),l=function(t){function Makeup(){var t;_classCallCheck(this,Makeup);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Makeup)).call.apply(t,[this,{clothingLayer:o.a.Layer.MID,requiredParts:"faceParts"}].concat(r)))}return _inherits(Makeup,o["b"]),Makeup}(),u=function(t){function Mascara(){var t,e;_classCallCheck(this,Mascara);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(Mascara)).call.apply(t,[this,{extraLength:2}].concat(n)))).Mods=Object.assign({eyelashLength:e.extraLength},e.Mods),e}return _inherits(Mascara,l),_createClass(Mascara,[{key:"partPrototypes",get:function get(){return[{side:s.b.LEFT,Part:c},{side:s.b.RIGHT,Part:c}]}}]),Mascara}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i}),r.d(e,"b",function(){return s});var n=r(2),o=r(13);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function Item(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Item);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];if(Object.assign.apply(Object,[this,{layer:n.a.BASE}].concat(e)),!1===this.hasOwnProperty("name"))throw new Error("Constructing item with no name!");if(!1===this.hasOwnProperty("src"))throw new Error("Constructing item with no src!")}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(Item,[{key:"renderItemLocation",value:function renderItemLocation(){return this.hasOwnProperty("x")&&this.hasOwnProperty("y")?{x:this.x,y:this.y}:null}},{key:"modifyPose",value:function modifyPose(){}},{key:"restorePose",value:function restorePose(){}}]),Item}(),a={},s={getItemRender:function getItemRender(t){if(a.hasOwnProperty(t.name))return a[t.name];throw new Error("Item not loaded yet: "+t.name)},loadItem:function loadItem(n){a.hasOwnProperty(n.name)||o.l.push(new Promise(function(t,e){var r=new Image;r.onload=function(){a[n.name]=r,t()},r.onerror=function(){console.log(Error("failed to load "+n.src)),e()},r.src=n.src}))},create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return _construct(t,r)}}},function(t,e,r){"use strict";r.d(e,"a",function(){return s}),r.d(e,"b",function(){return n});var o=r(2),i=r(6),a=r(3);function _construct(t,e,r){return(_construct=function isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function _construct(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(o,r.prototype),o}).apply(null,arguments)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=function(){function Tattoo(){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Tattoo);for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];Object.assign.apply(Object,[this,{layer:o.a.BASE,side:a.b.RIGHT,rotation:0,width:20,loc:"+arm",ignoreClip:!1}].concat(e)),this.loc.startsWith("+")||(this.loc="+"+this.loc);var n=Object(i.extractBaseLocation)(this.loc);if(this.aboveParts=["parts ".concat(n),"decorativeParts ".concat(n)],this.belowParts=["clothingParts ".concat(n)],this.side=Object(i.getSideValue)(this.side),!1===this.hasOwnProperty("name"))throw new Error("Constructing tattoo with no name!");if(!1===this.hasOwnProperty("src"))throw new Error("Constructing tattoo with no src!");if(!1===this.hasOwnProperty("relativeLocation"))throw new Error("Constructing tattoo without relativeLocation object")}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(Tattoo,[{key:"renderTattooLocation",value:function renderTattooLocation(t){return Object(i.locateRelativeToDrawpoint)(t,this.relativeLocation)}}]),Tattoo}(),c={},n={getRender:function getRender(t){if(c.hasOwnProperty(t.name))return c[t.name];throw new Error("Tattoo not loaded yet: "+t.name)},loadTattoo:function loadTattoo(n){c.hasOwnProperty(n.name)||i.patternLoadingQueue.push(new Promise(function(t,e){var r=new Image;r.onload=function(){c[n.name]=r,t()},r.onerror=function(){console.log(Error("failed to load "+n.src)),e()},r.src=n.src}))},create:function create(t){for(var e=arguments.length,r=new Array(1<e?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return _construct(s,r)}}},function(t,e,r){"use strict";var o=r(14),C=r(0),p=r(2),i=r(3),n=r(10);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function AsianBunBack(){var t;_classCallCheck(this,AsianBunBack);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AsianBunBack)).call.apply(t,[this,o.a.hairBack,{}].concat(r)))}return _inherits(AsianBunBack,o["b"]),_createClass(AsianBunBack,[{key:"renderHairPoints",value:function renderHairPoints(e,r,t,n){var o=this.hairLength;if(function drawBackBuns(){var t=Object(C.adjust)(r.neck.top,1,-1);e.beginPath(),e.save(),e.translate(t.x,t.y),e.rotate(.25*Math.PI),e.scale(.08*o,.06*o),e.arc(0,0,1,0,2*Math.PI,!0),e.restore(),e.fill(),e.stroke()}(),10<(o=this.hairLength)){var i={x:0,y:r.skull.y+3},a={x:i.x+.13*o,y:i.y+.05*o},s={x:i.x+.1*o,y:i.y+.1*o};e.save(),e.beginPath(),e.strokeStyle=n.hairAccessoryColor,Object(C.drawPoints)(e,i,a),e.stroke(),e.restore(),e.beginPath(),e.save(),e.translate(i.x,i.y),e.scale(.1*o,.06*o),e.arc(0,0,1,0,2*Math.PI,!1),e.restore(),e.fill(),e.stroke(),e.beginPath(),e.save(),e.strokeStyle=n.hairAccessoryColor,Object(C.drawPoints)(e,Object(C.adjust)(i,1+.02*o,1+.02*o),s),e.stroke(),e.restore()}}}]),AsianBunBack}(),s=function(t){function LargeSideBangShading(){var t;_classCallCheck(this,LargeSideBangShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LargeSideBangShading)).call.apply(t,[this,{loc:"+head",layer:p.a.HAIR,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LargeSideBangShading,n["a"]),_createClass(LargeSideBangShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r,n,o){var i=Object(C.clamp)(o.dim.hairLength,0,50),a=calcLargeSideBang.call(this,t,i),s=a.tip,c=a.bot,l=_slicedToArray(Object(C.adjustPoints)(.03*-i,.04*-i,s.cp1,s.cp2),2),u=l[0],p=l[1],f=_slicedToArray(Object(C.adjustPoints)(.06*i,.05*i,s.cp1,s.cp2),2),h=f[0],y=f[1];return c.cp1=y,c.cp2=h,s.cp1=u,s.cp2=p,[c,s,c]}}]),LargeSideBangShading}(),c=function(t){function AsianBunFront(){var t;_classCallCheck(this,AsianBunFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AsianBunFront)).call.apply(t,[this,o.a.hairFront,{shadingParts:[s]}].concat(r)))}return _inherits(AsianBunFront,o["b"]),_createClass(AsianBunFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=Object(C.clamp)(this.hairLength,0,70),n={x:e.skull.x-2,y:e.skull.y+3},o=Object(C.adjust)(e.skull.side,1,0);o.cp1.x+=3+.01*r,o.cp1.y+=3+.01*r,o.cp2.x=o.x,n.cp1={x:o.x-4,y:o.y+3},n.cp2={x:n.x,y:n.y-this.faceLength/15},t.beginPath(),Object(C.drawPoints)(t,n,o,n),t.fill(),t.stroke();var i=Object(C.clamp)(this.hairLength,0,50);t.save();var a=calcLargeSideBang.call(this,e,i),s=a.tip,c=a.out,l=a.bot;t.scale(-1,1),t.beginPath(),Object(C.drawPoints)(t,s,c,l,s),t.fill(),t.stroke(),t.restore()}}]),AsianBunFront}();function calcLargeSideBang(t,e){var r={x:t.skull.x-2,y:t.skull.y+3},n=Object(C.adjust)(t.skull.side,1+.03*e,Object(C.clamp)(2-.05*e,-3,2));n.cp2.x=n.x,n.cp2.y-=2,n.cp1.x+=.05*e,n.cp1.y+=2+.04*e;var o={x:n.x-Object(C.clamp)(.1*e,0,10),y:n.y-Object(C.clamp)(e,0,20)};if(o.x=Object(C.clamp)(o.x,13,n.x),o.cp2={x:Object(C.clamp)(o.x+.08*e,0,Math.POSITIVE_INFINITY),y:o.y+2+.07*e},5<e&&(o.x-=.1*(e-5),20<e)){var i=e-20;o=Object(C.adjust)(o,.02*-i,.15*-i)}return o.cp1=Object(C.continueCurve)(r,n),r.cp1=Object(C.scale)(o.cp2,2,o),r.cp1.y=n.y,r.cp2={x:r.x-8,y:r.y-this.faceLength/15},e<10&&(r.cp2.y-=.5*(10-e)),{tip:r,out:n,bot:o}}function curly_tail_typeof(t){return(curly_tail_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function curly_tail_slicedToArray(t,e){return function curly_tail_arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function curly_tail_iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function curly_tail_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function curly_tail_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function curly_tail_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function curly_tail_createClass(t,e,r){return e&&curly_tail_defineProperties(t.prototype,e),r&&curly_tail_defineProperties(t,r),t}function curly_tail_possibleConstructorReturn(t,e){return!e||"object"!==curly_tail_typeof(e)&&"function"!=typeof e?function curly_tail_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function curly_tail_getPrototypeOf(t){return(curly_tail_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function curly_tail_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&curly_tail_setPrototypeOf(t,e)}function curly_tail_setPrototypeOf(t,e){return(curly_tail_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function CurlyTailFront(){var t;curly_tail_classCallCheck(this,CurlyTailFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return curly_tail_possibleConstructorReturn(this,(t=curly_tail_getPrototypeOf(CurlyTailFront)).call.apply(t,[this,o.a.hairFront].concat(r)))}return curly_tail_inherits(CurlyTailFront,o["b"]),curly_tail_createClass(CurlyTailFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=Object(C.clamp)(this.hairLength,0,70),n={x:e.skull.x+.02*r,y:e.skull.y+3},o=Object(C.splitCurve)(Object(C.clamp)(.75+.0045*r,0,1.1),n,e.skull.side).left.p2;o.cp1.x+=3+.01*r,o.cp1.y+=3+.01*r,o.cp2.x=o.x,n.cp1={x:o.x-4+.03*r,y:o.y+3+.1*r},n.cp2={x:n.x,y:n.y-this.faceLength/15-.05*r},t.beginPath(),Object(C.drawPoints)(t,n,o,n),t.fill(),t.stroke();var i=calcCurlyTop(e,r),a=i.tip,s=i.out,c=i.bot;s.cp2.y-=.03*r,s.cp2.x+=.01*r,s.cp1.x+=.05*r,s.cp1.y+=4+.05*r,c.cp1={x:s.x,y:Object(C.clamp)(s.y-5-.05*r,c.y,s.y)},c.cp2={x:Object(C.clamp)(c.x+.07*r,0,s.x),y:c.y+2+.07*r},a.cp1=Object(C.scale)(c.cp2,3,c),a.cp2={x:a.x-7,y:a.y-this.faceLength/20},r<10&&(a.cp2.y-=.5*(10-r));var l=Object(C.splitCurve)(.5,c,a),u=curly_tail_slicedToArray(Object(C.drawSpecificCurl)({x:l.left.p2.x,y:l.left.p2.y,deflection:.03*-r},{x:l.left.p2.x,y:l.left.p2.y-.08*r},{x:a.x,y:a.y,deflection:-5}),3),p=u[0],f=u[1],h=u[2];h.cp2=l.right.p2.cp2,p.cp1=l.left.p2.cp1,p.cp2=l.left.p2.cp2,t.save(),t.scale(-1,1),t.beginPath(),Object(C.drawPoints)(t,a,s,c,p,f,h),t.fill(),t.stroke(),t.restore()}}]),CurlyTailFront}(),u=function(t){function CurlyTailMedium(){var t;curly_tail_classCallCheck(this,CurlyTailMedium);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return curly_tail_possibleConstructorReturn(this,(t=curly_tail_getPrototypeOf(CurlyTailMedium)).call.apply(t,[this,o.a.hairMedium].concat(r)))}return curly_tail_inherits(CurlyTailMedium,o["b"]),curly_tail_createClass(CurlyTailMedium,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength,n=r-40;if(0<n){var o=calcCurlyTop(e,Object(C.clamp)(r,0,70)),i=o.out,a=o.bot,s={x:a.x+.04*n,y:a.y-.35*n,cp1:{x:a.x,y:a.y-.2*n}};s.cp2={x:s.x,y:s.y+.15*n};var c={x:a.x-.1*n,y:a.y-n,cp1:{x:s.x,y:s.y-.3*n}};c.cp2={x:c.x-.05*n,y:c.y+.4*n};var l=Object(C.extractPoint)(e.neck.top);l.cp1={x:c.x-.3*n,y:c.y+.2*n},l.cp2={x:l.x,y:l.y-.05*n},t.save(),t.scale(-1,1),t.beginPath(),Object(C.drawPoints)(t,a,s,c,l,i),t.fill(),t.stroke(),t.restore()}}}]),CurlyTailMedium}();function calcCurlyTop(t,e){var r={x:t.skull.x-.08*e,y:t.skull.y+3},n=Object(C.adjust)(t.skull.side,1+.03*e,Object(C.clamp)(2-.05*e,-3,2)),o={x:n.x-Object(C.clamp)(.05*e,0,10),y:n.y-Object(C.clamp)(.25*e,0,25)};return 50<e&&(o.x+=.06*(e-50)),{tip:r,out:n,bot:o}}var O=r(11);function hime_cut_slicedToArray(t,e){return function hime_cut_arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function hime_cut_iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function hime_cut_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function hime_cut_typeof(t){return(hime_cut_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hime_cut_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function hime_cut_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function hime_cut_createClass(t,e,r){return e&&hime_cut_defineProperties(t.prototype,e),r&&hime_cut_defineProperties(t,r),t}function hime_cut_possibleConstructorReturn(t,e){return!e||"object"!==hime_cut_typeof(e)&&"function"!=typeof e?function hime_cut_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function hime_cut_getPrototypeOf(t){return(hime_cut_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function hime_cut_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&hime_cut_setPrototypeOf(t,e)}function hime_cut_setPrototypeOf(t,e){return(hime_cut_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var f=function(t){function HimeCutFrontShading(){var t;hime_cut_classCallCheck(this,HimeCutFrontShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutFrontShading)).call.apply(t,[this,{loc:"+head",layer:p.a.BELOW_HAIR}].concat(r)))}return hime_cut_inherits(HimeCutFrontShading,n["a"]),hime_cut_createClass(HimeCutFrontShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcHimeCut(t,Object(C.clamp)(this.hairLength,0,53)),r=e.left,n=e.right,o=e.top;return r=Object(C.adjust)(r,0,-1),[n=Object(C.adjust)(n,0,-1),r,o,n]}}]),HimeCutFrontShading}(),h=function(t){function HimeCutBack(){var t;hime_cut_classCallCheck(this,HimeCutBack);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutBack)).call.apply(t,[this,o.a.hairBack,{reflect:!0}].concat(r)))}return hime_cut_inherits(HimeCutBack,o["b"]),hime_cut_createClass(HimeCutBack,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength,n=calcHimeCut(e,Object(C.clamp)(r,0,53)),o=n.right,i=n.top;i.y+=.01*r,i.x-=p.g,(o=Object(C.adjust)(o,.005*r,0)).cp1.y+=.01*r;var a={x:o.x,y:o.y-.8*r},s={x:-p.g,y:a.y-.01*r};t.beginPath(),Object(C.drawPoints)(t,i,o,a,s),t.fill(),t.stroke()}}]),HimeCutBack}(),y=function(t){function HimeCutFront(){var t;hime_cut_classCallCheck(this,HimeCutFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutFront)).call.apply(t,[this,o.a.hairFront,{shadingParts:[f]}].concat(r)))}return hime_cut_inherits(HimeCutFront,o["b"]),hime_cut_createClass(HimeCutFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcHimeCut(e,Object(C.clamp)(this.hairLength,0,53)),n=r.left,o=r.right,i=r.top;t.beginPath(),Object(C.drawPoints)(t,o);var a=Object(C.splitCurve)(.2,o,n),s=a.left.p2;s.deflection=-2,a=Object(C.splitCurve)(.221,o,n),n.cp1=a.left.p2.cp1;var c=hime_cut_slicedToArray(Object(C.drawSpecificCurl)(s,Object(O.c)(s,i,.6),{x:a.left.p2.x,y:a.left.p2.y,deflection:-2}),3),l=c[1],u=c[2];Object(C.drawPoints)(t,null,s,l,u);var p=Object(C.splitCurve)(.6,o,n),f=p.left.p2;f.deflection=-1,p=Object(C.splitCurve)(.615,o,n),n.cp1=p.left.p2.cp1;var h=hime_cut_slicedToArray(Object(C.drawSpecificCurl)(f,Object(O.c)(f,i,.4),{x:p.left.p2.x,y:p.left.p2.y,deflection:-1}),3),y=h[1],b=h[2];Object(C.drawPoints)(t,null,f,y,b);var d=Object(C.splitCurve)(.9,o,n),g=d.left.p2;g.deflection=4,d=Object(C.splitCurve)(.91,o,n),n.cp1=d.left.p2.cp1;var P=hime_cut_slicedToArray(Object(C.drawSpecificCurl)(g,Object(O.c)(g,i,.5),{x:d.left.p2.x,y:d.left.p2.y,deflection:4}),3),v=P[1],_=P[2];Object(C.drawPoints)(t,null,g,v,_),Object(C.drawPoints)(t,null,n,i,o),t.fill()}}]),HimeCutFront}(),b=function(t){function HimeCutSide(){var t;hime_cut_classCallCheck(this,HimeCutSide);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_cut_possibleConstructorReturn(this,(t=hime_cut_getPrototypeOf(HimeCutSide)).call.apply(t,[this,o.a.hairFront,{loc:"+front hair",aboveParts:["hairParts hair"],reflect:!0}].concat(r)))}return hime_cut_inherits(HimeCutSide,o["b"]),hime_cut_createClass(HimeCutSide,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength;if(!(r<40)){var n=calcHimeCut(e,Object(C.clamp)(r,0,53)),o=n.left,i=n.right;(i=Object(C.adjust)(i,.4,.9)).cp1.y+=.01*r;var a=Object(C.splitCurve)(.1,i,o).left.p2,s={x:i.x,y:i.y-.4*(r-40)},c={x:a.x,y:s.y-1};c.cp1=Object(C.simpleQuadratic)(s,c,.5,1),t.beginPath(),Object(C.drawPoints)(t,i,s,c,a),t.fill()}}}]),HimeCutSide}();function calcHimeCut(t,e){var r=Object(C.splitCurve)(.4+e/82,t.skull,t.skull.side).left.p2;(r=Object(C.adjust)(r,1,e/100)).cp1.x-=.09*e;var n=Object(C.reflect)(r);n.cp1=Object(C.simpleQuadratic)(r,n,.5,e/20);var o=Object(C.extractPoint)(t.skull);return o.cp1=Object(C.reflect)(r.cp2),o.cp2=Object(C.reflect)(r.cp1),o=Object(C.adjust)(o,0,2),r.cp1.y+=2,r.cp2.y+=2,{left:n,right:r,top:o}}function straight_typeof(t){return(straight_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function straight_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function straight_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function straight_createClass(t,e,r){return e&&straight_defineProperties(t.prototype,e),r&&straight_defineProperties(t,r),t}function straight_possibleConstructorReturn(t,e){return!e||"object"!==straight_typeof(e)&&"function"!=typeof e?function straight_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function straight_getPrototypeOf(t){return(straight_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function straight_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&straight_setPrototypeOf(t,e)}function straight_setPrototypeOf(t,e){return(straight_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var d=function(t){function StraightFrontShading(){var t;straight_classCallCheck(this,StraightFrontShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFrontShading)).call.apply(t,[this,{loc:"front hair",layer:p.a.HAIR}].concat(r)))}return straight_inherits(StraightFrontShading,n["a"]),straight_createClass(StraightFrontShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcStraight.call(this,t),r=e.top,n=e.topBot;return n.cp1=Object(C.simpleQuadratic)(r,n,.5,2.5),n.cp2=null,r.cp1=Object(C.simpleQuadratic)(n,r,.5,-.5),[r,n,r]}}]),StraightFrontShading}(),g=function(t){function StraightFrontSideShading(){var t;straight_classCallCheck(this,StraightFrontSideShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFrontSideShading)).call.apply(t,[this,{loc:"+front hair",layer:p.a.HAIR,reflect:!0}].concat(r)))}return straight_inherits(StraightFrontSideShading,n["a"]),straight_createClass(StraightFrontSideShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcStraight.call(this,t),r=e.top,n=e.side,o=e.topBot,i=Object(C.splitCurve)(.8,r,n),a=[],s={x:1,y:.8*r.y+.2*o.y},c=Object(C.adjust)(Object(C.extractPoint)(i.left.p2),-.3,0);c.cp1=Object(C.simpleQuadratic)(s,c,.35,7),s.cp1=Object(C.simpleQuadratic)(c,s,.65,-6.6),a.push(s,c,s);var l={x:-1,y:.4*r.y+.6*o.y},u=Object(C.adjust)(Object(C.extractPoint)(i.left.p2),-.5,-1.5);return u.cp1=Object(C.simpleQuadratic)(l,u,.55,7),l.cp1=Object(C.simpleQuadratic)(u,l,1-.55,-6.6),a.push(C.breakPoint,l,u,l),a.push(C.endPoint),a}}]),StraightFrontSideShading}(),P=function(t){function StraightFrontShine(){var t;straight_classCallCheck(this,StraightFrontShine);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFrontShine)).call.apply(t,[this,{loc:"+ears hair",layer:p.a.HAIR,aboveParts:["hairParts hair"]}].concat(r)))}return straight_inherits(StraightFrontShine,o["b"]),straight_createClass(StraightFrontShine,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcStraight.call(this,e),n=r.top,o=r.topBot;n=Object(C.adjust)(n,2.5,-1),o=Object(C.adjust)(o,2.5,1);var i=Object(C.adjust)(Object(O.c)(n,o,.5),.5,0);o.cp1={x:n.x-1,y:n.y},o.cp2={x:o.x-1,y:o.y+.5},i.cp1={x:o.x+1.5,y:o.y},i.cp2={x:i.x-.2,y:i.y-.3},n.cp1=Object(C.continueCurve)(o,i),n.cp2={x:n.x+2,y:n.y},t.fillStyle="hsla(0,0%,100%,0.2)",t.scale(-1,1),t.beginPath(),Object(C.drawPoints)(t,n,o,i,n),t.fill(),t.scale(-1,1)}}]),StraightFrontShine}(),v=function(t){function StraightFront(){var t;straight_classCallCheck(this,StraightFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightFront)).call.apply(t,[this,o.a.hairFront,{reflect:!0,shadingParts:[d,g]}].concat(r)))}return straight_inherits(StraightFront,o["b"]),straight_createClass(StraightFront,[{key:"stroke",value:function stroke(){return C.none}},{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcStraight.call(this,e),n=r.top,o=r.side,i=r.topBot;t.beginPath(),Object(C.drawPoints)(t,n,o,i,n),t.fill()}}]),StraightFront}(),_=function(t){function StraightSideBangShading(){var t;straight_classCallCheck(this,StraightSideBangShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightSideBangShading)).call.apply(t,[this,{loc:"+front hair",layer:p.a.BELOW_HAIR}].concat(r)))}return straight_inherits(StraightSideBangShading,n["a"]),straight_createClass(StraightSideBangShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=this.hairLength-12;if(e<0)return[];var r=calcStraightSide.call(this,t,e),n=r.sideBot,o=r.innerBot;return n.y+=.1*e,[n,o,{x:o.x+6,y:o.y+10},{x:n.x+3,y:n.y+2},n]}}]),StraightSideBangShading}(),k=function(t){function StraightSideBang(){var t;straight_classCallCheck(this,StraightSideBang);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightSideBang)).call.apply(t,[this,o.a.hairAboveEars,{shadingParts:[_]}].concat(r)))}return straight_inherits(StraightSideBang,o["b"]),straight_createClass(StraightSideBang,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength-12;if(!(r<0)){var n=calcStraightSide.call(this,e,r),o=n.top,i=n.side,a=n.sideBot,s=n.innerBot,c=n.innerTop;a.cp1=Object(C.simpleQuadratic)(i,a,.5,.5+.005*r),c.cp1=Object(C.simpleQuadratic)(s,c,.5,-.5),t.beginPath(),Object(C.drawPoints)(t,o,i,a,s,c),t.fill()}}}]),StraightSideBang}();function calcStraightSide(t,e){var r=calcStraight.call(this,t),n=r.top,o=r.side;o.x+=.02*e;var i={x:o.x-.03*e,y:o.y-.65*e},a={x:i.x-.02*e,y:i.y-.05*e},s=Object(C.splitCurve)(.6,n,o);return{top:n,side:o,sideBot:i,innerBot:a,innerTop:Object(C.extractPoint)(s.left.p2)}}var m=function(t){function StraightBack(){var t;straight_classCallCheck(this,StraightBack);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return straight_possibleConstructorReturn(this,(t=straight_getPrototypeOf(StraightBack)).call.apply(t,[this,o.a.hairBack,{reflect:!0}].concat(r)))}return straight_inherits(StraightBack,o["b"]),straight_createClass(StraightBack,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength-12;if(!(r<0)){var n=calcStraight.call(this,e,r+12),o=n.top,i=n.side;i.x+=.02*r;var a={x:i.x+.05*r,y:i.y-r},s={x:0,y:a.y-.05*r};t.beginPath(),Object(C.drawPoints)(t,o,i,a,s),t.fill(),t.stroke()}}}]),StraightBack}();function calcStraight(t){var e=Object(C.extractPoint)(t.skull);e.y+=1;var r=Object(C.splitCurve)(.5,t.skull.side,t.skull.bot).left.p2;r.cp1={x:.5*e.x+.5*r.x,y:e.y+2},r.cp2={x:r.x+3.5,y:.7*e.y+.3*r.y};var n={x:e.x,y:e.y-.04*this.faceLength};return n.cp1={x:r.x,y:.4*r.y+.6*e.y},n.cp2={x:n.x,y:n.y-.02*this.faceLength},e.cp1=Object(C.simpleQuadratic)(n,e,.5,1),{top:e,side:r,topBot:n}}function side_high_tail_typeof(t){return(side_high_tail_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function side_high_tail_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function side_high_tail_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function side_high_tail_createClass(t,e,r){return e&&side_high_tail_defineProperties(t.prototype,e),r&&side_high_tail_defineProperties(t,r),t}function side_high_tail_possibleConstructorReturn(t,e){return!e||"object"!==side_high_tail_typeof(e)&&"function"!=typeof e?function side_high_tail_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function side_high_tail_getPrototypeOf(t){return(side_high_tail_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function side_high_tail_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&side_high_tail_setPrototypeOf(t,e)}function side_high_tail_setPrototypeOf(t,e){return(side_high_tail_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var w=function(t){function SideHighTailFront(){var t;side_high_tail_classCallCheck(this,SideHighTailFront);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return side_high_tail_possibleConstructorReturn(this,(t=side_high_tail_getPrototypeOf(SideHighTailFront)).call.apply(t,[this,o.a.hairFront].concat(r)))}return side_high_tail_inherits(SideHighTailFront,o["b"]),side_high_tail_createClass(SideHighTailFront,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=Object(C.clamp)(this.hairLength,0,70),n={x:e.skull.x+.02*r,y:e.skull.y+3},o=Object(C.splitCurve)(Object(C.clamp)(.75+.0045*r,.9,1.1),n,e.skull.side).left.p2;o.cp1.x+=3+.01*r,o.cp1.y+=3+.01*r,o.cp2.x=o.x,n.cp1={x:o.x-4+.03*r,y:o.y+3+.1*r},n.cp2={x:n.x,y:n.y-this.faceLength/15-.05*r},t.beginPath(),Object(C.drawPoints)(t,n,o,n),t.fill(),t.stroke();var i=calcSideHighTailTop(e,r),a=i.tip,s=i.out,c=i.bot;s.cp2.y-=.03*r,s.cp2.x+=.01*r,s.cp1.x+=.05*r,s.cp1.y+=4+.05*r,c.cp1={x:s.x,y:Object(C.clamp)(s.y-5-.05*r,c.y,s.y)},c.cp2={x:Object(C.clamp)(c.x+.07*r,0,s.x),y:c.y+2+.07*r},a.cp1=Object(C.scale)(c.cp2,3,c),a.cp2={x:a.x-5,y:a.y-this.faceLength/15-.05*r},r<10&&(a.cp2.y-=.5*(10-r)),t.save(),t.scale(-1,1),t.beginPath(),Object(C.drawPoints)(t,a,s,c,a),t.fill(),t.stroke(),t.restore()}}]),SideHighTailFront}(),j=function(t){function SideHighTailTail(){var t;side_high_tail_classCallCheck(this,SideHighTailTail);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return side_high_tail_possibleConstructorReturn(this,(t=side_high_tail_getPrototypeOf(SideHighTailTail)).call.apply(t,[this,o.a.hairMedium].concat(r)))}return side_high_tail_inherits(SideHighTailTail,o["b"]),side_high_tail_createClass(SideHighTailTail,[{key:"renderHairPoints",value:function renderHairPoints(t,e,r,n){var o=this.hairLength,i=this.hairLength-50;if(!(i<0)){var a=calcSideHighTailTop(e,Object(C.clamp)(o,0,70)).tip;a.x*=-1,a.y-=.01*i;var s={x:a.x,y:a.y+.12*i},c={x:a.x-.09*i,y:a.y},l={x:a.x+.09*i,y:a.y};s.cp1={x:c.x+.02*o,y:c.y+.02*o},s.cp2={x:s.x-.1*i,y:s.y-.02*i},l.cp1={x:s.x+.1*i,y:s.y-.02*i},l.cp2={x:l.x-.02*o,y:l.y+.02*o},Object(C.rotatePoints)(a,-.24,s,c,l);var u={};u.out={x:s.x+.2*i,y:s.y-.8*i},u.outbot={x:s.x+.18*i,y:u.out.y-.8*i},u.in=Object(C.extractPoint)(e.neck.top),u.out.cp1={x:s.x+.3*i,y:s.y-.1*i},u.out.cp2={x:u.out.x-.1*i,y:u.out.y+.3*i},u.outbot.cp1=Object(C.continueCurve)(s,u.out),u.outbot.cp2={x:u.outbot.x+.2*i,y:u.outbot.y+.05*i},u.in.cp1={x:u.outbot.x-.05*i,y:u.outbot.y+.4*i},u.in.cp2={x:u.in.x-.1*i,y:u.in.y-.5*i},t.beginPath(),Object(C.drawPoints)(t,s,u.out,u.outbot,u.in),t.fill(),t.stroke();var p=this.hairLength-90;if(0<p){var f={};f.top=Object(C.extractPoint)(e.neck.top),f.tip={x:f.top.x+.6*p,y:f.top.y-3.5*p},f.tip.cp1={x:f.top.x+1.5*p,y:f.top.y-2*p},f.tip.cp2={x:f.tip.x-.5*p,y:f.tip.y+1.2*p},f.right=Object(C.extractPoint)(e.neck.cusp),f.right.x+=.5,f.right.cp1={x:f.tip.x-.6*p,y:f.tip.y+p},f.right.cp2={x:f.right.x+.3*p,y:f.right.y-.8*p},t.save(),t.scale(-1,1),t.beginPath(),Object(C.drawPoints)(t,f.top,f.tip,f.right),t.fill(),t.stroke(),t.restore()}t.beginPath(),Object(C.drawPoints)(t,c,s,l),t.fill(),t.stroke();var h=Object(C.splitCurve)(.3,c,s),y=h.left.p2,b=(h=Object(C.splitCurve)(.7,s,l)).left.p2;b.cp1=Object(C.simpleQuadratic)(y,b,.5,.03*i),t.save(),t.strokeStyle=n.hairAccessoryColor,t.beginPath(),Object(C.drawPoints)(t,y,b),t.stroke(),t.restore()}}}]),SideHighTailTail}();function calcSideHighTailTop(t,e){var r={x:t.skull.x-.08*e,y:t.skull.y+3},n=Object(C.adjust)(t.skull.side,.03*e,Object(C.clamp)(2-.05*e,-3,2)),o={x:n.x-Object(C.clamp)(.05*e,0,10),y:n.y-Object(C.clamp)(.25*e,0,25)};return 50<e&&(o.x+=.06*(e-50)),{tip:r,out:n,bot:o}}function hime_curl_typeof(t){return(hime_curl_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hime_curl_slicedToArray(t,e){return function hime_curl_arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function hime_curl_iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function hime_curl_nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function hime_curl_classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function hime_curl_defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function hime_curl_createClass(t,e,r){return e&&hime_curl_defineProperties(t.prototype,e),r&&hime_curl_defineProperties(t,r),t}function hime_curl_possibleConstructorReturn(t,e){return!e||"object"!==hime_curl_typeof(e)&&"function"!=typeof e?function hime_curl_assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function hime_curl_getPrototypeOf(t){return(hime_curl_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function hime_curl_inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&hime_curl_setPrototypeOf(t,e)}function hime_curl_setPrototypeOf(t,e){return(hime_curl_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var S=function(t){function HimeCurlShading(){var t;hime_curl_classCallCheck(this,HimeCurlShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_curl_possibleConstructorReturn(this,(t=hime_curl_getPrototypeOf(HimeCurlShading)).call.apply(t,[this,{loc:"+front hair",layer:p.a.GENITALS}].concat(r)))}return hime_curl_inherits(HimeCurlShading,n["a"]),hime_curl_createClass(HimeCurlShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcHimeCurl(t,this.hairLength),r=e.right,n=e.out,o=e.bot,i=e.fork,a=e.forkIn,s=hime_curl_slicedToArray(Object(C.adjustPoints)(-2,0,r,n),2),c=s[0],l=s[1];o.cp1=Object(C.adjust)(o.cp1,-3,0),o.cp2=Object(C.adjust)(o.cp2,-4,0);var u=Object(C.splitCurve)(.35,l,o),p=Object(C.adjust)(u.left.p2,-2,0);return p.cp1=u.left.p2.cp1,p.cp2={x:p.x+.04*this.hairLength,y:p.y-.2*this.hairLength},o.cp1={x:p.x-.02*this.hairLength,y:p.y-.07*this.hairLength},o.cp2=u.right.p2.cp2,r.cp1={x:o.x+12,y:o.y},r.cp2={x:r.x+5,y:c.y},i.y+=1.5,i.x+=.7,i.cp1=Object(C.simpleQuadratic)(i,a,.5,-7),i.cp2=null,[r,l,p,o,r,C.breakPoint,o,i,a,i,Object(C.extractPoint)(o),C.endPoint]}}]),HimeCurlShading}(),x=function(t){function HimeCurlMedium(){var t;hime_curl_classCallCheck(this,HimeCurlMedium);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_curl_possibleConstructorReturn(this,(t=hime_curl_getPrototypeOf(HimeCurlMedium)).call.apply(t,[this,o.a.hairMedium,{shadingParts:[S]}].concat(r)))}return hime_curl_inherits(HimeCurlMedium,o["b"]),hime_curl_createClass(HimeCurlMedium,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=calcHimeCurl(e,this.hairLength),n=r.left,o=r.top,i=r.right,a=r.out,s=r.bot,c=r.fork,l=r.forkIn,u=r.forkTop;e.hair=e.hair||{},e.hair.mid={left:n,top:o,right:i,out:a,bot:s,fork:c,forkIn:l,forkTop:u},t.beginPath(),Object(C.drawPoints)(t,n,o,i,a,s,c,l,u),t.fill(),t.stroke()}}]),HimeCurlMedium}();function calcHimeCurl(t,e){var r=calcHimeCut(t,Object(C.clamp)(e,0,53)),n=r.right,o=r.top;o.y+=.01*e,o.x-=p.g,(n=Object(C.adjust)(n,.005*e,0)).cp1.y+=.01*e,o.cp1.y+=.01*e,o.cp2.x-=.005*e;var i=Object(C.reflect)(n);n.x+=.012*e;var a={x:n.x,y:n.y-.8*e},s={x:n.x-.01*e,y:.7*n.y+.3*a.y};s.cp1={x:n.x+.01*e,y:n.y-.15*e},s.cp2={x:s.x,y:s.y+.1*e},a.cp1={x:s.x,y:s.y-.07*e},a.cp2={x:a.x+.1*e,y:a.y+.1*e};var c={x:a.x-.03*e,y:a.y+.2*e},l={x:c.x-.02*e,y:c.y-.1*e},u=Object(C.extractPoint)(t.neck.top);return u.y-=2,u.cp1={x:l.x-.18*e,y:l.y+.23*e},u.cp2={x:u.x,y:u.y-.23*e},c.cp1={x:a.x+.02*e,y:a.y+.07*e},c.cp2={x:c.x-.02*e,y:c.y-.07*e},l.cp1=Object(C.simpleQuadratic)(c,l,.3,.02*-e),{left:i,top:o,right:n,out:s,bot:a,fork:c,forkIn:l,forkTop:u}}var T=function(t){function HimeCurlSide(){var t;hime_curl_classCallCheck(this,HimeCurlSide);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return hime_curl_possibleConstructorReturn(this,(t=hime_curl_getPrototypeOf(HimeCurlSide)).call.apply(t,[this,o.a.hairFront,{loc:"+front hair",aboveParts:["hairParts hair"]}].concat(r)))}return hime_curl_inherits(HimeCurlSide,o["b"]),hime_curl_createClass(HimeCurlSide,[{key:"renderHairPoints",value:function renderHairPoints(t,e){var r=this.hairLength,n=r-35;if(!(n<0)){var o=calcHimeCut(e,Object(C.clamp)(r,0,53)),i=o.left,a=o.right;(a=Object(C.adjust)(a,.4,1.5)).cp1.y+=.01*r;var s,c=Object(C.splitCurve)(.1,a,i),l=c.left.p2;(s=n<15?{x:a.x-3,y:a.y-n}:(c=Object(C.splitCurve)(Object(C.clamp)(.015*n-.3,-.3,.8),e.jaw,e.chin.out),Object(C.adjust)(c.left.p2,.2,-.2))).cp1={x:a.x,y:a.y-.1*n},s.cp2={x:s.x+.13*n,y:s.y+.06*n},l.cp1=Object(C.simpleQuadratic)(s,l,.45,.07*-n),t.save(),t.scale(-1,1),t.beginPath(),Object(C.drawPoints)(t,a,s,l),t.fill(),t.stroke(),t.restore()}}}]),HimeCurlSide}();r.d(e,"a",function(){return A});var A=[[],[c,a],[l,u],[y,h,b],[v,k,m,P],[w,j],[y,x,T]]},function(t,e,r){"use strict";var n=r(13);var o=r(64),i=r(65),a=r(37),s=r(32);r.d(e,"b",function(){return c}),r.d(e,"a",function(){return load});var c=!1;function load(){return new Promise(function(t){Object(s.d)(),Object(a.a)(),Object(i.a)(),Object(o.b)(),function loadPatterns(){Object(n.c)("sequins","http://us.123rf.com/450wm/agonda/agonda1503/agonda150300035/37619569-melange-wool-knitting-pattern-seamless-background.jpg?ver=6"),Object(n.c)("soft brown fur","https://cdn.tobi.com/swatch_images/black-multi-cant-be-tamed-fur-vest-swatch.jpg"),Object(n.c)("black leather","http://www.textures123.com/free-texture/leather/leather-texture05.jpg"),Object(n.c)("yellow stripes","http://images.naldzgraphics.net/2014/07/16-yellow-stripe-texture.jpg"),Object(n.c)("purple squares","http://images.naldzgraphics.net/2014/07/17-square-fabric-textures.jpg"),Object(n.c)("chainmail1","Images/chainmail.jpg"),Object(n.c)("chainmail2","Images/chainmail2.jpg"),Object(n.c)("iron","Images/iron.jpg"),Object(n.c)("copper","Images/copper.jpg"),Object(n.c)("foil","Images/foil.jpg"),Object(n.c)("silver","Images/silver1.jpg"),Object(n.c)("gold","Images/gold1.jpg"),Object(n.c)("damask","Images/damask.jpg"),Object(n.c)("fishnet","Images/fishnet.png"),Object(n.c)("lace","http://i.imgur.com/RZc72OK.gif"),Object(n.c)("red plaid","http://www.creattor.com/files/37/1681/plaid-fabrics-textures-screenshots-1.jpg"),Object(n.b)("green camouflage","res/green camouflage.png","http://i.imgur.com/cSQUcjj.png"),Object(n.b)("camouflage","res/camouflage.jpg","http://images.naldzgraphics.net/2014/07/15-camo-fabric-texture.jpg"),Object(n.b)("kimono flowers","res/kimono_flowers.png","http://oksancia.com/wp-content/uploads/2011/03/beautiful_garden_seamless_pattern_wm.png"),Object(n.b)("bandages","res/bandages.png","http://i.imgur.com/Om7lYpO.png"),Object(n.b)("knit cashmere","res/knit_cashmere.jpg","https://i.imgur.com/kcyIFUT.jpg")}(),c=!0,t()})}},function(t,e,r){"use strict";r.d(e,"a",function(){return configureBaseColors}),r.d(e,"b",function(){return initCanvas});var f=r(11),u=r(2),p=r(9),h=r(0);function configureBaseColors(n){var t=n.avatar,e=t.dim.skin;if(isNaN(e))return n.baseFill=e,n.baseStroke=e,n.baseLipColor=e,void(n.nippleColor=e);if(e<11)n.baseFill=[Math.floor(255-2.8*e),Math.floor(214-5.3*e),Math.floor(180-6.5*e)],n.baseStroke=[Math.floor(214-5.1*e),Math.floor(156-4*e),Math.floor(147-6.4*e)],n.baseLipColor=[Math.floor(194-4.1*e),Math.floor(123-4.1*e),Math.floor(119-4.1*e)],n.nippleColor=[Math.floor(140-4.1*e),Math.floor(89-4.1*e),Math.floor(86-4.1*e)];else if(e<100){var r=e-11;n.baseFill=[Math.floor(227-9.6*r),Math.floor(161-9.1*r),Math.floor(115-6.3*r)],28<e&&(r-=2.5*(e-23)),n.baseStroke=[Math.floor(163-12*r),Math.floor(116-10.8*r),Math.floor(83-7.3*r)],n.baseLipColor=[Math.floor(153-8.9*r),Math.floor(82-6.2*r),Math.floor(78-6.4*r)],n.nippleColor=[Math.floor(99-9.9*r),Math.floor(48-7.2*r),Math.floor(45-7.4*r)]}var o=.7+Object(h.clamp)(t.getDim("faceFem")/(3*t.getDimDesc("faceFem").high),0,.3);n.baseLipColor.forEach(function(t,e,r){r[e]=n.baseFill[e]*(1-o)+t*o}),n.baseFill=finalizeColor(n.baseFill,t.Mods,"skin"),n.baseStroke=finalizeColor(n.baseStroke,t.Mods,"skin"),n.baseLipColor=finalizeColor(n.baseLipColor,t.Mods,"lip"),n.nippleColor=finalizeColor(n.nippleColor,t.Mods);var i=t.getDim("faceFem")/t.getDimDesc("faceFem").high*20;n.eyelidColor=Object(f.b)(n.baseStroke,{s:-i,l:-i}),n.defaultHairFill="hsl(".concat(Math.round(t.dim.hairHue),",").concat(Math.round(t.dim.hairSaturation),"%,\n        ").concat(Math.round(t.dim.hairLightness),"%)"),n.hairFill=t.hairFill,n.hairStroke=t.hairStroke,n.browFill=t.browFill,n.lashFill=t.lashFill,t.hairFill||(n.hairFill=n.defaultHairFill),t.hairStroke||(n.hairStroke=Object(f.b)(n.defaultHairFill,{l:-10,s:-10})),t.browFill||(n.browFill=Object(f.b)(n.defaultHairFill,{l:-5,s:-5})),t.lashFill||(n.lashFill=Object(f.b)(n.defaultHairFill,{l:-10,s:-10})),n.hairAccessoryColor="hsl(".concat(t.getMod("hairAccessoryHue"),",").concat(t.getMod("hairAccessorySaturation"),"%,").concat(t.getMod("hairAccessoryLightness"),"%)")}function finalizeColor(t,e,r){var n=Object(f.a)({r:Object(h.clamp)(t[0],0,255),g:Object(h.clamp)(t[1],0,255),b:Object(h.clamp)(t[2],0,255)});return r&&(n.h+=e[r+"Hue"],n.s+=e[r+"Saturation"],n.l+=e[r+"Lightness"]),"hsl("+Object(h.clamp)(Math.floor(n.h),0,360)+","+Object(h.clamp)(Math.floor(n.s),0,100)+"%,"+Object(h.clamp)(Math.floor(n.l),0,100)+"%)"}function initCanvas(t,e,r,n,o,i,a){a&&e.clearRect(0,0,t.width,t.height);var s=t.width/180,c=t.height/400,l=o.scaling=Math.min(s,c);e.scale(l,l),o.ox=r.ox=Math.floor(t.width/l-t.width/s),o.oy=r.oy=Math.floor(t.height/l-t.height/c),i===u.a.BASE&&r.printAdditionalInfo&&function printAdditionalInfo(t,e,r,n){e.save(),e.font="bold 20px Arial",e.fillStyle=r.genderColor;var o=Object(h.clamp)(t.width/n.name.length/2,10,24);e.font=o+"px Arial",e.fillText(0==n.gender?String.fromCharCode(9794):String.fromCharCode(9792),6,26),e.fillStyle=r.nameColor;24<n.name.length?e.fillText(n.name.slice(0,24)+"...",30,26):e.fillText(n.name,30,26);e.restore()}(t,e,r,n),i===u.a.BASE&&function printTokens(t,l,e,r){if(!r.tokens)return;l.save();for(var n=0<=r.tokens.size?r.tokens.size:.1,u=r.tokens.front,p=r.tokens.back,o=r.tokens.top,i=r.tokens.left,a=r.tokens.space?r.tokens.space:.3,s=0;s<r.tokens.length;s++)r.tokens[s].size<=0||token(r.tokens[s].typ,i+n*(1-r.tokens[s].size),o+(2+a)*n*s+1.1*n*(1-r.tokens[s].size),n*r.tokens[s].size,r.tokens[s].color);function token(t,e,r,n,o){switch(l.fillStyle=Object(f.b)(u,{s:-50*(1-o),l:50*(1-o)}),e+=n,r+=n,l.beginPath(),l.arc(e,r,n,0,2*Math.PI),l.fill(),l.fillStyle=p,t){default:break;case"age":l.lineWidth=.25*n,l.strokeStyle=l.fillStyle;var i={x:0,y:.5*-n},a={x:0,y:.5*n},s={x:.5*n,y:0*n};l.beginPath(),l.moveTo(e+i.x,r+i.y),l.lineTo(e+a.x,r+a.y),l.stroke(),l.beginPath(),l.moveTo(e-s.x,r+s.y),l.lineTo(e+a.x,r+a.y),l.lineTo(e+s.x,r+s.y),l.stroke();break;case"fer":var c=function asdf(t,e,r){l.beginPath(),l.moveTo(t-r,e-r),l.lineTo(t+r,e+r),l.stroke()};l.lineWidth=.3*n,l.strokeStyle=l.fillStyle,c(e-.2*n,r+.2*n,.3*n),c(e+.2*n,r-.2*n,.3*n);break;case"bi":l.lineWidth=.15*n,l.strokeStyle=l.fillStyle,l.beginPath(),l.arc(e-.2*n,r-.2*n,.5*n,0,2*Math.PI),l.stroke(),l.beginPath(),l.arc(e+.2*n,r+.2*n,.5*n,0,2*Math.PI),l.stroke();break;case"dom":l.beginPath(),l.fillRect(e-.7*n,r-.25*n,.7*n*2,.25*n*2),l.fill(),l.beginPath(),l.fillRect(e-.25*n,r-.7*n,.25*n*2,.7*n*2),l.fill();break;case"sub":l.beginPath(),l.fillRect(e-.7*n,r-.25*n,.7*n*2,.25*n*2),l.fill();break;case"nympho":l.beginPath(),l.moveTo(e,r+.7*n),l.arc(e+.36*n*.98,r-.15*n,.36*n,Math.PI,.25*Math.PI),l.lineTo(e,r+.7*n),l.arc(e-.36*n*.98,r-.15*n,.36*n,.75*Math.PI,0),l.fill();break;case"dumb":l.beginPath(),l.arc(e,r-.25*n,.5*n,.75*Math.PI,.25*Math.PI),l.lineTo(e+.25*n,r+.4*n),l.lineTo(e-.25*n,r+.4*n),l.fill(),l.beginPath(),l.fillRect(e-.25*n,r+.5*n,.25*n*2,.2*n),l.fill();break;case"phero":l.beginPath(),l.moveTo(e+.2*n,r-.3*n),l.lineTo(e+.2*n,r+n*(.6-.15)),l.lineTo(e,r+.5*n),l.lineTo(e-.2*n,r+n*(.6-.15)),l.lineTo(e-.2*n,r-.3*n),l.lineTo(e-.5*n,r-.3*n),l.lineTo(e-.5*n,r+.6*n),l.lineTo(e,r+.8*n),l.lineTo(e+.5*n,r+.6*n),l.lineTo(e+.5*n,r-.3*n),l.fill(),l.lineTo(e+.5*n,r-.3*n),l.beginPath(),l.fillRect(e+.2*n,r-.6*n,.3*n,.3*.75*n),l.fill(),l.beginPath(),l.fillRect(e-.2*n,r-.6*n,-.3*n,.3*.75*n),l.fill();break;case"test":l.beginPath(),l.moveTo(e+.3*n,r),l.arcTo(e,r+10,e-.3*n,r,50),l.lineTo(e-.3*n,r),l.strokeStyle="navy",l.fill(),l.stroke(),l.beginPath(),l.moveTo(e,r+.75*n),l.lineTo(e-.3*n,r+.6*n),l.strokeStyle="black",l.stroke()}}l.restore()}(0,e,0,n),e.translate(r.ox,0),i===u.a.BASE&&r.printHeight&&function printHeight(t,e,r){r.age&&(t.font="8px Arial",t.fillStyle=e.heightColor,t.fillText(Math.floor(r.age)+" yo",140,34));void 0!==r.sexuality&&(t.font="8px Arial",t.fillStyle=e.heightColor,r.sexuality<-1?t.fillText(String.fromCharCode(9794),145,44):1<r.sexuality?t.fillText(String.fromCharCode(9792),145,44):t.fillText(String.fromCharCode(9794)+""+String.fromCharCode(9792),145,44));var n=r.heightAdjust(),o=r.dim.height/2.54+n+2,i=Math.floor(o/12)+"'",a=Math.floor(o-12*Math.floor(o/12))+'"',s=e.oy;o=i+a,t.save(),t.fillStyle=e.heightColor,t.font="12px Arial",t.fillText(o,125,16),0<n&&(o=r.dim.height/2.54+2,i=Math.floor(o/12)+"'",a=Math.floor(o-12*Math.floor(o/12))+'"',o=i+a,t.fillText("("+o+")",150,16));t.strokeStyle=e.heightBarColor,t.beginPath();t.moveTo(150,20),t.lineTo(178,20),t.lineTo(178,390+s);var c=Math.floor(72+s/(370/72)),l=1;for(l=1;l<c;l++){var u=390+s-l*(370/72);t.moveTo(178,u),l%12==0?t.lineTo(164,u):l%6==0?t.lineTo(171,u):l%3==0?t.lineTo(173,u):t.lineTo(175,u)}t.stroke(),t.restore()}(e,r,n),e.scale(1,-1),e.translate(0,-400-r.oy+10+Object(p.f)(n.heightAdjust())/2),e.translate(o.cx,0),e.strokeStyle=o.baseStroke,e.fillStyle=o.baseFill,e.lineCap="round",e.lineJoin="round"}},function(t,e,r){"use strict";r.d(e,"b",function(){return l}),r.d(e,"h",function(){return u}),r.d(e,"o",function(){return calcFallenTop}),r.d(e,"g",function(){return p}),r.d(e,"j",function(){return f}),r.d(e,"p",function(){return calcGorget}),r.d(e,"a",function(){return g}),r.d(e,"i",function(){return P}),r.d(e,"e",function(){return v}),r.d(e,"f",function(){return _}),r.d(e,"d",function(){return C}),r.d(e,"k",function(){return O}),r.d(e,"l",function(){return k}),r.d(e,"c",function(){return m}),r.d(e,"m",function(){return w}),r.d(e,"n",function(){return j});var h=r(1),n=r(3),o=r(2),y=(r(12),r(0)),i=r(16),b=(r(26),r(22)),a=r(17),s=r(29),c=(r(63),r(23),r(21)),d=r(5);r(18);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function BraFurOutline(){var t;_classCallCheck(this,BraFurOutline);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BraFurOutline)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(BraFurOutline,h["c"]),_createClass(BraFurOutline,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(s.l)(t);null!==r&&(e.strokeStyle=this.highlight,e.lineWidth=this.furWidth,e.beginPath(),Object(y.drawPoints)(e,r.cleavage,r.top,r.out),e.stroke())}}]),BraFurOutline}(),u=function(t){function FallenTopOrig(){var t;_classCallCheck(this,FallenTopOrig);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FallenTopOrig)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(FallenTopOrig,h["c"]),_createClass(FallenTopOrig,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){h.a.simpleStrokeFill(e,t,this);var r=calcGorget.call(this,t),n=b.t.call(this,t),o=(0<=this.topInCoverage?Object(y.splitCurve)(this.topInCoverage,t.neck.cusp,t.collarbone):Object(y.splitCurve)(1+this.topInCoverage,t.neck.top,t.neck.cusp)).left.p2,i=this.topInCoverage<0?t.neck.cusp:null,a=Object(y.splitCurve)(this.topOutCoverage,t.neck.cusp,t.collarbone).left.p2,s=Object(y.splitCurve)(this.botInCoverage,n.inTop,n.outTop).left.p2,c=Object(y.splitCurve)(this.botOutCoverage,n.inTop,n.outTop).left.p2,l=Object(y.adjust)(t.chest.nipples,-this.middle,0),u=Object(y.adjust)(t.chest.nipples,this.middle,0);o.cp2=l,o.cp2.x*=1.4,c.cp1=u,c.cp1.x*=2.2;var p=Object(y.adjust)(t.waist,this.bellyX,this.bellyY),f=Object(y.adjust)(t.waist,this.bellyX,this.bellyY);o.cp1=p,c.cp2=f,e.beginPath(),Object(y.drawPoints)(e,o,i,a,c,s,o),e.fill(),e.stroke(),e.strokeStyle=this.highlight,e.fillStyle=this.highlight,e.beginPath(),Object(y.drawPoints)(e,r.inTop,r.outTop,r.mid,r.outBot,r.inBot),e.strokeStyle=this.highlight,e.fillStyle=this.highlight,e.beginPath(),Object(y.drawPoints)(e,n.inTop,n.outTop,n.outMid,n.outBot,n.inBot),e.fill(),e.stroke()}}]),FallenTopOrig}();function calcFallenTop(t){var e=b.t.call(this,t),r=(0<=this.topInCoverage?Object(y.splitCurve)(this.topInCoverage,t.neck.cusp,t.collarbone):Object(y.splitCurve)(1+this.topInCoverage,t.neck.top,t.neck.cusp)).left.p2,n=this.topInCoverage<0?t.neck.cusp:null,o=Object(y.splitCurve)(this.topOutCoverage,t.neck.cusp,t.collarbone).left.p2,i=Object(y.splitCurve)(this.botInCoverage,e.inTop,e.outTop).left.p2,a=Object(y.splitCurve)(this.botOutCoverage,e.inTop,e.outTop).left.p2,s=Object(y.adjust)(t.chest.nipples,-this.middle,0),c=Object(y.adjust)(t.chest.nipples,this.middle,0);r.cp2=s,r.cp2.x*=1.4,a.cp1=c,a.cp1.x*=2.2;var l=Object(y.adjust)(t.waist,this.bellyX,this.bellyY),u=Object(y.adjust)(t.waist,this.bellyX,this.bellyY);return r.cp1=l,a.cp2=u,{belt:e,topIn:r,topNeck:n,topOut:o,botOut:a,botIn:i}}var p=function(t){function FallenTop(){var t;_classCallCheck(this,FallenTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FallenTop)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(FallenTop,h["c"]),_createClass(FallenTop,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){h.a.simpleStrokeFill(e,t,this);var r=calcFallenTop.call(this,t),n=r.belt,o=r.topIn,i=r.topNeck,a=r.topOut,s=r.botOut,c=r.botIn;e.beginPath(),Object(y.drawPoints)(e,o,i,a,s,c,o),e.fill(),e.stroke(),e.fillStyle=this.strokeStyle,e.beginPath(),Object(y.drawPoints)(e,n.inTop,n.outTop,n.outMid,n.outBot,n.inBot),e.fill(),e.stroke()}}]),FallenTop}(),f=function(t){function GorgetPart(){var t;_classCallCheck(this,GorgetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GorgetPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0}].concat(r)))}return _inherits(GorgetPart,h["c"]),_createClass(GorgetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){h.a.simpleStrokeFill(e,t,this);var r=calcGorget.call(this,t);if(e.beginPath(),Object(y.drawPoints)(e,r.inTop,r.outTop,r.mid,r.outBot,r.outBot,r.inBot),e.fill(),e.stroke(),this.groove){var n=Object(y.splitCurve)(.4,r.outBot,r.inBot),o=Object(y.extractPoint)(n.left.p2);n=Object(y.splitCurve)(.5,r.inTop,r.outTop);var i=Object(y.extractPoint)(n.left.p2);e.beginPath(),Object(y.drawPoints)(e,o,i,y.breakPoint,r.inBot,r.inTop),e.stroke()}}}]),GorgetPart}();function calcGorget(t){var e,r=(this.neckTopCoverage<0?Object(y.splitCurve)(1+this.neckTopCoverage,t.neck.top,t.neck.cusp):Object(y.splitCurve)(this.neckTopCoverage,t.neck.cusp,t.collarbone)).left.p2,n={x:-.1,y:r.y-1};r.cp1={x:.5*r.x+.5*n.x,y:n.y},this.curveX&&(r.cp1.x+=this.curveX),this.curveY&&(r.cp1.y+=this.curveY),this.neckTopCoverage<0&&0<this.neckBotCoverage&&(e=t.neck.cusp);var o=(this.neckBotCoverage<0?Object(y.splitCurve)(1+this.neckBotCoverage,t.neck.top,t.neck.cusp):Object(y.splitCurve)(this.neckBotCoverage,t.neck.cusp,t.collarbone)).left.p2,i=Object(y.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin).left.p2;return i.x=-.1,i.cp1={x:.5*o.x+.5*i.x,y:i.y},this.curveX&&(o.cp1.x+=this.curveX),this.curveY&&(o.cp1.y+=this.curveY),{inTop:n,mid:e,outTop:r,outBot:o,inBot:i}}var g=function(t){function BarbaricBra(){var t;_classCallCheck(this,BarbaricBra);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BarbaricBra)).call.apply(t,[this,{furWidth:4,highlight:"hsla(33, 80%, 10%, 1)",showStrap:!1,strapWidth:2,neckCoverage:.7,thickness:.5}].concat(r)))}return _inherits(BarbaricBra,a["i"]),_createClass(BarbaricBra,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:l},{side:null,Part:s.e},{side:null,Part:s.f}]}}]),BarbaricBra}(),P=function(t){function Gorget(){var t;_classCallCheck(this,Gorget);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Gorget)).call.apply(t,[this,{curveX:0,curveY:0,groove:!1,cleavageCoverage:.16,neckTopCoverage:-.1,neckBotCoverage:.81}].concat(r)))}return _inherits(Gorget,b["a"]),_createClass(Gorget,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),Gorget}(),v=function(t){function Fallen(){var t;_classCallCheck(this,Fallen);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Fallen)).call.apply(t,[this,{topInCoverage:0,topOutCoverage:.22,botInCoverage:.02,botOutCoverage:.69,middle:3,bellyX:-15,bellyY:-8,waistCoverage:.3,beltWidth:2,beltCurve:-7,thickness:.5}].concat(r)))}return _inherits(Fallen,i["j"]),_createClass(Fallen,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:p}]}}]),Fallen}(),_=function(t){function FallenOrig(){var t;_classCallCheck(this,FallenOrig);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FallenOrig)).call.apply(t,[this,{cleavageCoverage:.11,neckTopCoverage:-1,neckBotCoverage:1,topInCoverage:0,topOutCoverage:.5,botInCoverage:0,botOutCoverage:.5,middle:5,bellyX:-15,bellyY:-8,waistCoverage:.42,beltWidth:3,beltCurve:-7,furWidth:4,highlight:"yellow",showStrap:!1,strapWidth:2,neckCoverage:.7,thickness:.5}].concat(r)))}return _inherits(FallenOrig,i["j"]),_createClass(FallenOrig,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:p}]}}]),FallenOrig}(),C=function(t){function CingulumPart(){var t;_classCallCheck(this,CingulumPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CingulumPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"+torso",reflect:!0,aboveParts:["parts leg","clothingParts groin","parts chest","clothingParts chest","decorativeParts chest"],aboveSameLayerParts:["clothingParts torso"]},{}].concat(r)))}return _inherits(CingulumPart,h["c"]),_createClass(CingulumPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,a){h.a.simpleStrokeFill(a,t,this);var e=b.t.call(this,t),r=e.inTop,n=e.outTop,o=e.outMid,i=e.outBot,s=e.inBot,c=this.pointy,l=Math.floor(this.number/2),u=(1-(this.margin/10+this.space/10*l))/(l+.5);!function drawFirstPlate(t,e,r){var n=Object(y.adjust)(e,0,-r),o=Object(y.adjust)(Object(d.d)(t,e),0,-(r+c)),i=(Object(y.adjust)(t,0,-r),Object(y.adjust)(Object(d.d)(t,e),0,0));a.beginPath(),Object(y.drawPoints)(a,e,n,o,i),a.fill(),a.beginPath(),Object(y.drawPoints)(a,e,n,o),a.stroke()}(Object(y.getPointOnCurve)(1+u/2,i,s),Object(y.getPointOnCurve)(1-u/2,i,s),this.length*(1+this.crest/10));for(var p=0;p<l;p++){var f=1-(p*u+.5*u+(1+p)*(this.space/10));drawPlate(Object(y.getPointOnCurve)(f,i,s),Object(y.getPointOnCurve)(f-u,i,s),this.length*(1-this.crest/10*(1+p)))}function drawPlate(t,e,r){var n=Object(y.adjust)(e,0,-r),o=Object(y.adjust)(Object(d.d)(t,e),0,-(r+c)),i=Object(y.adjust)(t,0,-r);a.beginPath(),Object(y.drawPoints)(a,e,n,o,i,t),a.fill(),a.stroke()}a.beginPath(),Object(y.drawPoints)(a,r,n,o,i,s),a.fill(),a.stroke()}}]),CingulumPart}(),O=function(t){function GreaveLeft(){var t;_classCallCheck(this,GreaveLeft);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GreaveLeft)).call.apply(t,[this,{legCoverage:.54}].concat(r)))}return _inherits(GreaveLeft,c["a"]),_createClass(GreaveLeft,[{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:c.e}]}}]),GreaveLeft}(),k=function(t){function GreaveRight(){var t;_classCallCheck(this,GreaveRight);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GreaveRight)).call.apply(t,[this,{legCoverage:.54}].concat(r)))}return _inherits(GreaveRight,c["a"]),_createClass(GreaveRight,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c.e}]}}]),GreaveRight}(),m=function(t){function Cingulum(){var t;_classCallCheck(this,Cingulum);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Cingulum)).call.apply(t,[this,{number:5,space:0,margin:0,length:30,pointy:5,crest:1,waistCoverage:.2,beltWidth:7,beltCurve:-6}].concat(r)))}return _inherits(Cingulum,c["a"]),_createClass(Cingulum,[{key:"partPrototypes",get:function get(){return[{side:null,Part:C}]}}]),Cingulum}(),w=function(t){function VambraceLeft(){var t;_classCallCheck(this,VambraceLeft);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(VambraceLeft)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(VambraceLeft,c["a"]),_createClass(VambraceLeft,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:c.g}]}}]),VambraceLeft}(),j=function(t){function VambraceRight(){var t;_classCallCheck(this,VambraceRight);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(VambraceRight)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(VambraceRight,c["a"]),_createClass(VambraceRight,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c.g}]}}]),VambraceRight}()},function(t,e,r){"use strict";r.d(e,"b",function(){return u}),r.d(e,"a",function(){return f});var o=r(2),n=r(3),a=r(0),i=r(24),s=r(11),c=r(9);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function Penis(){var t;_classCallCheck(this,Penis);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Penis)).call.apply(t,[this,{loc:"penis",layer:o.a.MALE_GENITALS,coverConceal:["groin","left leg"],aboveParts:["testicles"]}].concat(r)))}return _inherits(Penis,n["a"]),_createClass(Penis,[{key:"getLineWidth",value:function getLineWidth(t){return Object(a.clamp)(t.getDim("penisSize")/100,.8,1.5)}}]),Penis}(),u=function(t){function PenisHuman(){var t;_classCallCheck(this,PenisHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PenisHuman)).call.apply(t,[this].concat(r)))}return _inherits(PenisHuman,l),_createClass(PenisHuman,[{key:"stroke",value:function stroke(){return"inherit"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.penis={};n.center={x:0,y:t.groin.y+3},n.top={x:n.center.x+1+.01*e.penisThickness+.005*this.penisSize,y:n.center.y+.006*this.penisSize},n.bot={x:n.top.x-Object(a.clamp)(.5-.01*e.penisThickness-1e-4*this.penisSize,0,5),y:n.top.y-.1*this.penisSize},n.tip={x:n.center.x,y:n.bot.y-1-.01*this.penisSize},n.bot.cp1=Object(a.simpleQuadratic)(n.top,n.bot,.4,Object(a.clamp)(.5+.01*e.penisThickness-.002*this.penisSize,0,3)),n.tip.cp1={x:n.bot.x+.004*this.penisSize,y:n.bot.y-.005*this.penisSize},n.tip.cp2={x:n.tip.x+1,y:n.tip.y+.2}}var o=Object(a.reflect)(t.penis.bot),i=Object(a.reflect)(t.penis.top);return o.cp1=Object(a.reflect)(t.penis.tip.cp2),o.cp2=Object(a.reflect)(t.penis.tip.cp1),i.cp1=Object(a.reflect)(t.penis.bot.cp1),10<this.penisSize?[t.penis.top,t.penis.bot,t.penis.tip,o,i]:[]}}]),PenisHuman}(),p=function(t){function PenisHead(){var t;_classCallCheck(this,PenisHead);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PenisHead)).call.apply(t,[this,{loc:"penis",layer:o.a.MALE_GENITALS,coverConceal:["groin","left leg"]}].concat(r)))}return _inherits(PenisHead,i["a"]),_createClass(PenisHead,[{key:"getLineWidth",value:function getLineWidth(t){return Object(a.clamp)(t.getDim("penisSize")/100,.8,1.5)}}]),PenisHead}(),f=function(t){function PenisHeadHuman(){var t;_classCallCheck(this,PenisHeadHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PenisHeadHuman)).call.apply(t,[this].concat(r)))}return _inherits(PenisHeadHuman,p),_createClass(PenisHeadHuman,[{key:"fill",value:function fill(t,e){return Object(s.b)(e.baseStroke,{l:-5,s:-5})}},{key:"stroke",value:function stroke(t,e){return Object(s.b)(e.baseStroke,{l:-5,s:-3})}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(e.arousal<50)return[];Object(c.i)("penis",t),r&&(t.penis.tiptop={x:t.penis.center.x,y:t.penis.bot.y+.003*this.penisSize});var n=Object(a.extractPoint)(t.penis.bot);n.cp1=Object(a.simpleQuadratic)(t.penis.tiptop,n,.5,.5);var o=Object(a.reflect)(t.penis.bot);return o.cp1=Object(a.reflect)(t.penis.tip.cp2),o.cp2=Object(a.reflect)(t.penis.tip.cp1),t.penis.tiptop.cp1=Object(a.simpleQuadratic)(o,t.penis.tiptop,.5,.5),[t.penis.tiptop,n,t.penis.tip,o,t.penis.tiptop]}}]),PenisHeadHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return p});var n=r(10),o=r(2),i=r(3),P=r(0);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LeftArmShading(){var t;_classCallCheck(this,LeftArmShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftArmShading)).call.apply(t,[this,{loc:"left arm",layer:o.a.ARMS}].concat(r)))}return _inherits(LeftArmShading,n["a"]),_createClass(LeftArmShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e,r=[],n=_slicedToArray(Object(P.adjustPoints)(.07*this.armThickness,0,t.elbow.in,t.armpit),2),o=n[0],i=n[1];if(t.hand){var a=_slicedToArray(Object(P.adjustPoints)(.02*this.armThickness,0,t.wrist.in,t.thumb.out),2),s=a[0],c=a[1],l=Object(P.extractPoint)(t.thumb.tip);r.push(l,c,s)}else{var u=Object(P.extractPoint)(t.wrist.in);r.push(u)}t.breast?(e=Object(P.extractPoint)(t.breast.top)).cp1=Object(P.simpleQuadratic)(i,e,.5,-4):e=Object(P.extractPoint)(t.armpit);var p=Object(P.extractPoint)(t.armpit),f=Object(P.extractPoint)(t.elbow.in);f.cp1=Object(P.clone)(t.armpit.cp2),f.cp2=Object(P.clone)(t.armpit.cp1);var h=Object(P.extractPoint)(t.wrist.in);if(h.cp1=Object(P.clone)(t.elbow.in.cp2),h.cp2=Object(P.clone)(t.elbow.in.cp1),r.push(o,i,e,p,f,h),t.hand){var y=Object(P.extractPoint)(t.thumb.out);y.cp1=Object(P.clone)(t.wrist.in.cp2),y.cp2=Object(P.clone)(t.wrist.in.cp1);var b=Object(P.extractPoint)(t.thumb.tip);b.cp1=Object(P.clone)(t.thumb.out.cp2),b.cp2=Object(P.clone)(t.thumb.out.cp1),r.push(y,b);var d=Object(P.extractPoint)(t.hand.tip),g=Object(P.clone)(t.hand.palm);d.cp1=Object(P.adjust)(t.hand.palm.cp2,.01*this.handSize,0),d.cp2=Object(P.adjust)(t.hand.palm.cp1,.01*this.handSize,0),r.push(P.breakPoint,d,g,d,P.endPoint)}return r}}]),LeftArmShading}(),s=function(t){function LeftArmUnderShading(){var t;_classCallCheck(this,LeftArmUnderShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftArmUnderShading)).call.apply(t,[this,{loc:"+left arm",layer:o.a.FRONT}].concat(r)))}return _inherits(LeftArmUnderShading,n["a"]),_createClass(LeftArmUnderShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[];if(t.hand){var r=Object(P.adjust)(t.hand.palm,-.5,-2),n=Object(P.adjust)(t.thumb.tip,-.5,-1.5);e.push.apply(e,[t.hand.tip,r,n].concat(_toConsumableArray(Object(P.adjustPoints)(-2,-1,t.thumb.out,t.wrist.in))))}else e.push(t.wrist.in);var o=Object(P.adjust)(t.elbow.in,-2,-1),i=Object(P.extractPoint)(t.armpit);return i.cp1=Object(P.adjust)(t.armpit.cp1,-1,-.5),i.cp2=Object(P.adjust)(t.armpit.cp2,-2,-.5),e.push(o,i),e.push(Object(P.extractPoint)(t.elbow.out),t.wrist.out),t.hand?e.push(t.hand.knuckle,t.hand.tip):e.push(Object(P.extractPoint)(t.wrist.in)),e}}]),LeftArmUnderShading}(),c=function(t){function RightArmShading(){var t;_classCallCheck(this,RightArmShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightArmShading)).call.apply(t,[this,{loc:"right arm",layer:o.a.ARMS}].concat(r)))}return _inherits(RightArmShading,n["a"]),_createClass(RightArmShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[],r=Object(P.extractPoint)(t.collarbone),n=_slicedToArray(Object(P.adjustPoints)(.05*-this.armThickness,0,t.deltoids,t.shoulder,t.elbow.out),3),o=n[0],i=n[1],a=n[2];if(e.push(r,o,i,a),t.hand){var s=Object(P.adjust)(t.wrist.out,.03*-this.armThickness,0),c=Object(P.adjust)(t.hand.knuckle,.02*-this.armThickness,0),l=Object(P.clone)(t.hand.tip);l.cp1=Object(P.adjust)(t.hand.tip.cp1,.02*-this.armThickness,0),e.push(s,c),t.hand.fist&&e.push(Object(P.adjust)(t.hand.fist,.02*-this.armThickness,1)),e.push(l),t.hand.fist?(e.push(Object(P.reverseDrawPoint)(t.hand.fist,t.hand.tip)),e.push(Object(P.reverseDrawPoint)(t.hand.knuckle,t.hand.fist))):e.push(Object(P.reverseDrawPoint)(t.hand.knuckle,t.hand.tip)),e.push(Object(P.reverseDrawPoint)(t.wrist.out,t.hand.knuckle))}else{var u=Object(P.extractPoint)(t.wrist.out);u.cp1={x:a.x,y:a.y},u.cp2={x:u.x-2,y:u.y},e.push(u)}var p=[];return p.push(Object(P.reverseDrawPoint)(t.elbow.out,t.wrist.out),Object(P.reverseDrawPoint)(t.elbow.out,t.elbow.out),Object(P.reverseDrawPoint)(t.shoulder,t.elbow.out)),t.deltoids?p.push(Object(P.reverseDrawPoint)(t.deltoids,t.shoulder),Object(P.reverseDrawPoint)(t.collarbone,t.deltoids)):p.push(Object(P.reverseDrawPoint)(t.collarbone,t.shoulder)),e.extend(P.adjustPoints.apply(void 0,[3,0].concat(p))),e}}]),RightArmShading}(),l=function(t){function RightArmUnderShading(){var t;_classCallCheck(this,RightArmUnderShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightArmUnderShading)).call.apply(t,[this,{loc:"+right arm",layer:o.a.FRONT}].concat(r)))}return _inherits(RightArmUnderShading,n["a"]),_createClass(RightArmUnderShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[t.collarbone].concat(_toConsumableArray(Object(P.adjustPoints)(3,-1,t.deltoids,t.shoulder,t.elbow.out)));if(t.hand)e.push.apply(e,_toConsumableArray(Object(P.adjustPoints)(1.5,-.7,t.wrist.out,t.hand.knuckle,t.hand.tip))),e.push.apply(e,_toConsumableArray(Object(P.adjustPoints)(2.2,-.9,t.hand.palm,t.thumb.tip,t.thumb.out)).concat([Object(P.extractPoint)(t.wrist.out)]));else{var r=Object(P.extractPoint)(t.wrist.out);e.push(r)}return e.push(Object(P.extractPoint)(t.elbow.in),Object(P.extractPoint)(t.collarbone)),e}}]),RightArmUnderShading}(),u=function(t){function Arm(){var t;_classCallCheck(this,Arm);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Arm)).call.apply(t,[this,{loc:"arm",layer:o.a.ARMS,childParts:["hand"],aboveParts:["leg","torso"],shadingParts:[a,s,c,l]}].concat(r)))}return _inherits(Arm,i["a"]),_createClass(Arm,[{key:"clipStroke",value:function clipStroke(){}},{key:"clipFill",value:function clipFill(){}}]),Arm}(),p=function(t){function ArmHuman(){var t;_classCallCheck(this,ArmHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ArmHuman)).call.apply(t,[this].concat(r)))}return _inherits(ArmHuman,u),_createClass(ArmHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.wrist={},o=t.armpit={x:t.collarbone.x-.03*this.upperMuscle,y:t.collarbone.y-.27*this.torsoLength-.1*this.upperMuscle},i=t.shoulder={x:t.collarbone.x+.2*this.upperMuscle+.1*this.armThickness,y:t.collarbone.y-10-.1*this.upperMuscle};i.cp1={x:i.x,y:t.collarbone.y-3},i.cp2={x:i.x-.5+.02*this.upperMuscle,y:i.y+4};var a=t.elbow={};if(a.out={x:o.x+5+.17*this.upperMuscle+.05*this.armThickness,y:i.y-.45*this.armLength},n.out={x:o.x+10+.01*this.upperMuscle+.035*this.armThickness,y:a.out.y-.5*this.armLength,cp1:{x:a.out.x,y:a.out.y-2}},n.out.cp2={x:n.out.x-.5,y:n.out.y+3},n.in={x:o.x+9,y:n.out.y-1},a.in={x:a.out.x-3-.07*this.upperMuscle-.05*this.armThickness,y:a.out.y+2,cp1:{x:n.in.x-1,y:n.in.y+7}},a.in.cp2={x:a.in.x+.5,y:a.in.y-7},t.armpit.cp1={x:a.in.x-.5,y:a.in.y+2},t.armpit.cp2={x:t.armpit.x,y:t.armpit.y-2},10<this.upperMuscle){var s=this.upperMuscle-10,c=t.deltoids={x:i.x-.12*s,y:i.y-.2*s};c.cp1=Object(P.extractPoint)(i.cp1),c.cp2=Object(P.extractPoint)(i.cp2),c.cp1.x+=.03*s,c.cp2.x+=.05*s;var l=Object(P.splitCurve)(.85,t.collarbone,t.deltoids);(i=t.shoulder=l.right.p1).cp1=l.right.p2.cp2,i.cp2=l.right.p2.cp1,a.out.cp1={x:i.x+.08*s,y:i.y-.1*s},a.out.cp2={x:a.out.x,y:a.out.y+.07*s},o.cp1.x-=.15*s,o.cp1.y+=.1*s,o.cp2.x-=.02*s,o.cp2.y-=.1*s,a.in.cp2.x-=.15*s,a.in.cp2.y-=.05*s,a.in.cp1.y+=.1*s,n.out.cp1.x+=.1*s,n.out.cp1.y-=.1*s,n.out.cp2.x+=.1*s,n.out.cp2.y+=.1*s,n.in.x-=.03*s}if(Object(P.rotatePoints)(a.in,e.armRotation*Math.PI/180,a.in,a.out,n.in,n.out),a.in.x-=.02*Math.abs(e.armRotation),a.in.y-=.01*e.armRotation,e.armRotation<-20){var u=-20-e.armRotation;a.in.x-=.05*u,a.in.y-=.17*u}}return[t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,{child:"hand"},t.wrist.in,t.elbow.in,t.armpit]}}]),ArmHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var o=r(2),n=r(3),l=r(0),u=r(9),p=r(11);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Hand(){var t;_classCallCheck(this,Hand);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Hand)).call.apply(t,[this,{loc:"hand",layer:o.a.ARMS}].concat(r)))}return _inherits(Hand,n["a"]),Hand}(),a=function(t){function HandHuman(){var t;_classCallCheck(this,HandHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HandHuman)).call.apply(t,[this].concat(r)))}return _inherits(HandHuman,i),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(HandHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(Object(u.i)("wrist",t),r){var n=t.hand={},o=t.thumb={},i=t.wrist.out,a=.1*this.handSize+.04*this.upperMuscle;if(n.knuckle={x:i.x+.15*a,y:i.y-.6*a},n.tip={x:i.x+.1*a,y:n.knuckle.y-2-.6*a},n.tip.cp1=Object(u.a)(n.knuckle,n.tip,.7,1,-.2),n.palm={x:.65*i.x+.35*t.wrist.in.x,y:n.knuckle.y-.1*a,cp1:{x:n.tip.x-.5-.15*a,y:n.tip.y+.1*a}},n.palm.cp2={x:n.palm.x+1+.2*a,y:n.palm.y-1-.2*a},o.tip={x:n.palm.x-.03*a,y:n.palm.y-1-.25*a,cp1:{x:n.palm.x-.1*a,y:n.palm.y-.1*a}},o.tip.cp2={x:o.tip.x+.1*a,y:o.tip.y+.1*a},o.out={x:t.wrist.in.x+.1,y:t.wrist.in.y-.2*a,cp1:{x:o.tip.x-.15*a,y:o.tip.y+.2*a}},o.out.cp2={x:o.out.x-.05*a,y:o.out.y-.2*a},Object(l.rotatePoints)(i,(e.armRotation+e.handRotation)*Math.PI/180,n.knuckle,n.tip,n.palm,o.tip,o.out),12<this.upperMuscle){var s=this.upperMuscle-12;n.knuckle.y-=.05*s,o.tip=Object(l.adjust)(o.tip,.03*-s,.05*s),n.tip.y+=.05*s,o.out.cp1.x-=.05*s,o.out.cp2.x-=.02*s,Object(l.rotatePoints)(n.knuckle,.035*-s,n.tip,n.palm);var c=Object(l.splitCurve)(.6,n.knuckle,n.tip);n.fist=c.left.p2,n.tip.cp1=c.right.p2.cp1,Object(l.rotatePoints)(n.fist,.05*-s,n.tip,n.palm.cp1,n.palm.cp2),n.palm.x-=.07*s,25<this.upperMuscle&&(n.tip=Object(l.extractPoint)(o.tip),n.palm=Object(l.extractPoint)(n.palm),o.out=Object(l.extractPoint)(o.out),o.knuckle=Object(p.c)(o.tip,o.out),o.knuckle.x-=.06*s),Object(l.rotatePoints)(i,.01*-s,n.tip,n.first,n.palm,o.tip,o.knuckle)}}return[t.wrist.out,t.hand.knuckle,t.hand.fist,t.hand.tip,t.hand.palm,t.thumb.tip,t.thumb.knuckle,t.thumb.out,t.wrist.in]}}]),HandHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return u});var n=r(10),o=r(2),i=r(3),h=r(0),p=r(11),y=r(12);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function RightLegShading(){var t;_classCallCheck(this,RightLegShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightLegShading)).call.apply(t,[this,{loc:"right leg",layer:o.a.MIDRIFT}].concat(r)))}return _inherits(RightLegShading,n["a"]),_createClass(RightLegShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=.1*this.bellyProtrusion,r=Object(h.adjust)(t.hip,-3-.04*this.hipWidth+.5*e,-e),n=Object(h.adjust)(t.thigh.out,-7-.2*this.legFullness,0),o=Object(p.c)(t.knee.out,t.knee.in);o.cp1=Object(h.continueCurve)(r,n,1),o.cp2={x:o.x+5,y:o.y};var i=Object(h.splitCurve)(.5,n,o).left.p2;o.cp1={x:i.x,y:i.y-3};var a={x:.7*o.x+.3*t.knee.out.x,y:o.y-2};a.cp1={x:o.x-2,y:o.y-2};var s=Object(h.adjust)(t.calf.out,-6-.1*this.legFullness,0);s.cp1={x:a.x+1,y:a.y-5};var c=Object(h.adjust)(t.ankle.out,-2,3);c.cp1=Object(h.continueCurve)(a,s);var l={x:t.ankle.out.x+20,y:t.ankle.out.y},u={x:t.hip.x+20,y:t.hip.y};return[r,n,i,o,a,s,c,Object(h.extractPoint)(t.ankle.out),l,u,r]}}]),RightLegShading}(),s=function(t){function LeftLegShading(){var t;_classCallCheck(this,LeftLegShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftLegShading)).call.apply(t,[this,{loc:"left leg",layer:o.a.FRONT}].concat(r)))}return _inherits(LeftLegShading,n["a"]),_createClass(LeftLegShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(h.adjust)(t.ankle.in,3,2),r=Object(h.adjust)(t.calf.in,10-.15*this.legFem,0);r.cp1.x-=5;var n={x:.7*t.knee.in.x+.3*t.knee.out.x,y:t.knee.in.y-3};n.cp1=Object(h.continueCurve)(e,r),n.cp2={x:n.x+5,y:n.y-2};var o=Object(h.adjust)(t.knee.intop,3,2);o.cp1={x:n.x-3,y:n.y+3},o.cp2={x:o.x-1,y:o.y-2};var i=Object(h.splitCurve)(.8,t.thigh.top,t.thigh.fold).left.p2;i.cp1=Object(h.simpleQuadratic)(o,i,.5,2);var a={x:t.knee.in.x-2,y:t.knee.in.y};a.cp1=Object(h.simpleQuadratic)(i,a,.35,-8-.3*this.legFullness-.1*this.legFem);var s=Object(h.extractPoint)(t.ankle.in);return s.cp1={x:t.calf.in.x-3,y:t.calf.in.y},[s,e,r,n,o,i,a,s]}}]),LeftLegShading}(),c=function(t){function ThighShading(){var t;_classCallCheck(this,ThighShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThighShading)).call.apply(t,[this,{loc:"+left leg",layer:o.a.FRONT,reflect:!0}].concat(r)))}return _inherits(ThighShading,n["a"]),_createClass(ThighShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(h.clone)(t.thigh.fold),r=Object(h.splitCurve)(.85,t.thigh.in,t.thigh.top),n=r.left.p2,o=r.right.p2;return n.cp1=Object(h.clone)(e.cp1),e.cp1.x-=1,e.cp1.y+=1,n.cp1.x+=.5,n.cp1.y-=.5,[o,e,n,o]}}]),ThighShading}(),l=function(t){function Leg(){var t;_classCallCheck(this,Leg);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Leg)).call.apply(t,[this,{loc:"leg",layer:o.a.FRONT,childParts:["feet"],shadingParts:[a,s,c]}].concat(r)))}return _inherits(Leg,i["a"]),Leg}(),u=function(t){function LegHuman(){var t;_classCallCheck(this,LegHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LegHuman)).call.apply(t,[this].concat(r)))}return _inherits(LegHuman,l),_createClass(LegHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.01*this.legLength,o=t.knee={};o.out={x:12-Object(h.clamp)(.3*this.legFem,0,9)+.04*this.hipWidth+.03*this.legFullness,y:.5*this.legLength,cp1:{x:t.hip.x+.1*this.legFem+.15*this.buttFullness+.1*this.legFullness-.05*this.lowerMuscle,y:t.hip.y-7-.1*this.legFem-.1*this.buttFullness-.1*this.legFullness}},o.out.cp2={x:o.out.x+4+.1*this.legFem-.05*this.lowerMuscle,y:o.out.y+.25*this.legLength};var i=this.lowerMuscle-10,a=this.legFem<25&&0<i;a&&(o.out.cp1.x+=.05*i,o.out.cp1.y-=.05*i,o.out.cp2.x+=.2*i,o.out.cp2.y+=.5*i,t.hip.cp2.x+=.03*i);var s=Object(h.splitCurve)(.55,t.hip,o.out),c=t.thigh=t.thigh||{};c.out=s.left.p2,o.out=s.right.p2,t.ankle=t.ankle||{},t.ankle.out={x:o.out.x-.5-.05*this.legFullness,y:8};var l=t.calf=t.calf||{};l.out={x:o.out.x+(Object(h.clamp)(.1*this.legFem,0,3)+Object(h.clamp)(.005*this.legFullness,0,3))*n,y:o.out.y-.2*this.legLength+.1*this.lowerMuscle,cp1:{x:o.out.x,y:o.out.y-.1*this.legLength+Object(h.clamp)(.05*this.legFem,0,6)}},l.out.cp2={x:l.out.x,y:l.out.y+.1*this.legLength},t.ankle.out.cp1={x:l.out.x,y:l.out.y-.12*this.legLength},t.ankle.out.cp2={x:t.ankle.out.x-1,y:t.ankle.out.y+5},t.ankle.in={x:t.ankle.out.x-5+.02*this.legFem,y:t.ankle.out.y+.5},l.in={x:l.out.x-9+.015*this.legFem-.05*this.legFullness,y:l.out.y-.1*this.legFem};var u=15-this.legFem;0<u?l.in.x-=.02*u:l.in.x+=.02*this.legFem,l.in.cp1={x:t.ankle.in.x+.5,y:t.ankle.in.y+(1.3-.03*this.legFem)*this.legLength*.1},l.in.cp2={x:l.in.x+.02*this.legFem,y:l.in.y+(.01*this.legFem-1)*this.legLength*.1},0<u&&(l.in.cp2.x+=.01*u),o.in={x:o.out.x-8-.05*this.legFullness,y:o.out.y},o.in.cp1=Object(h.continueCurve)(t.ankle.in,l.in,.7),o.intop={x:o.in.x+.2-.01*this.legFem,y:o.in.y+3},a&&(o.in.x-=.04*i,o.intop.x-=.04*i),o.in.cp2={x:o.in.x,y:o.in.y-.09*this.legLength},c.top={x:1.6,y:t.hip.y-.15*this.legLength,cp1:{x:o.in.x,y:o.in.y+.07*this.legLength}},c.top.cp2={x:2-.03*this.buttFullness-.04*this.legFem,y:c.top.y-.12*this.legLength},a&&(o.in.cp2.x-=.01*i,o.in.cp2.y+=.05*i,o.in.cp1.x-=.1*i,l.in.x-=.1*i,l.in.y+=.1*i,l.in.cp2.x-=.1*i,l.out.x+=.05*i,l.out.cp2.x+=.05*i,l.out.cp1.x+=.02*i,l.out.cp1.y+=.1*i,c.top.cp2.x-=.08*i,c.top.cp2.y-=.08*i,c.top.cp1.y+=.2*i),s=Object(h.splitCurve)(.55,o.in,c.top),c.in=s.left.p2,c.top=s.right.p2;var p=Object(y.a)(c.top,t.hip),f=Object(h.clamp)(this.legFem/55-this.lowerMuscle/150-.1,0,1);s=Object(h.splitCurve)(f,c.top,p),c.fold=s.left.p2}return[Object(h.extractPoint)(t.hip),t.thigh.out,t.knee.out,t.calf.out,t.ankle.out,{child:"feet"},t.ankle.in,t.calf.in,t.knee.in,t.knee.intop,t.thigh.in,t.thigh.top]}}]),LegHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return f}),r.d(e,"b",function(){return h});var n=r(10),o=r(2),i=r(3),l=r(0),u=r(6);function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LeftBreastShading(){var t;_classCallCheck(this,LeftBreastShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBreastShading)).call.apply(t,[this,{loc:"chest",layer:o.a.GENITALS,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LeftBreastShading,n["a"]),_createClass(LeftBreastShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e={x:t.breast.cleavage.x+.5,y:t.breast.cleavage.y+.4*this.breastSize},r=Object(l.extractPoint)(t.breast.bot);return e.cp1=Object(l.continueCurve)(t.breast.in,t.breast.cleavage),r.cp1={x:e.x,y:.3*e.y+.7*r.y},r.cp2={x:r.x-6+.32*this.breastSize,y:r.y+7},[r,t.breast.in,t.breast.cleavage,e,r]}}]),LeftBreastShading}(),s=function(t){function LeftBreastUnderShading(){var t;_classCallCheck(this,LeftBreastUnderShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LeftBreastUnderShading)).call.apply(t,[this,{loc:"+chest",layer:o.a.FRONT,forcedSide:i.b.LEFT}].concat(r)))}return _inherits(LeftBreastUnderShading,n["a"]),_createClass(LeftBreastUnderShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e={x:t.breast.cleavage.x+.5,y:t.breast.cleavage.y+.4*this.breastSize},r=Object(l.extractPoint)(t.breast.bot);e.cp1=Object(l.continueCurve)(t.breast.in,t.breast.cleavage);var n=Object(l.extractPoint)(t.breast.cleavage);return n.x-=.05*this.breastSize,n.y-=.02*this.breastSize,n.cp1={x:1*e.x+0*n.x,y:e.y-.02*this.breastSize},n.cp2={x:n.x,y:.5*n.y+.5*e.y},r.cp1={x:n.x-.02*this.breastSize,y:n.y-.3*this.breastSize-5},r.cp2={x:r.x-2-.05*this.breastSize,y:r.y-2-.03*this.breastSize},[r,t.breast.in,t.breast.cleavage,e,n,r]}}]),LeftBreastUnderShading}(),c=function(t){function RightBreastShading(){var t;_classCallCheck(this,RightBreastShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RightBreastShading)).call.apply(t,[this,{loc:"chest",layer:o.a.GENITALS,forcedSide:i.b.RIGHT}].concat(r)))}return _inherits(RightBreastShading,n["a"]),_createClass(RightBreastShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){if(!1===t.hasOwnProperty("breast"))return[];var e=Object(l.extractPoint)(t.breast.bot),r=_slicedToArray(Object(l.adjustPoints)(.25*-this.breastSize,0,t.breast.tip,t.breast.bot.cp1,t.breast.bot.cp2),3),n=r[0],o=r[1],i=r[2];e.cp1=o,e.cp2=i;var a=_slicedToArray(Object(l.adjustPoints)(.1*this.breastSize,.12*-this.breastSize,Object(l.reverseDrawPoint)(t.breast.tip,t.breast.bot),Object(l.reverseDrawPoint)(t.breast.top,t.breast.tip)),2),s=a[0],c=a[1];return c.x=t.breast.top.x,c.y=t.breast.top.y,[t.breast.top,n,e,s,c]}}]),RightBreastShading}(),p=function(t){function Chest(){var t;_classCallCheck(this,Chest);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Chest)).call.apply(t,[this,{loc:"chest",reflect:!0,layer:o.a.GENITALS,aboveParts:["parts torso","decorativeParts torso","arm"]}].concat(r)))}return _inherits(Chest,i["a"]),Chest}(),f=function(t){function ChestHuman(){var t;_classCallCheck(this,ChestHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChestHuman)).call.apply(t,[this,{shadingParts:[a,s,c]}].concat(r)))}return _inherits(ChestHuman,p),_createClass(ChestHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.breastSize<0)return[];if(r){var n=t.breast={},o=this.breastSize-10;n.top={x:t.armpit.x-2.2+.02*this.breastSize,y:t.armpit.y+.5+.023*this.height-.05*this.breastSize},this.breastSize<10&&(n.top.x+=.1*o);var i=.0045*Math.pow(Object(l.clamp)(o-e.breastPerkiness,0,100),2);n.center={x:t.armpit.x-3+.02*o+.02*i,y:n.top.y-6-.03*o-i+.02*e.breastPerkiness},o=Math.max(0,o),n.tip={x:n.center.x+3.3+.07*o+.04*e.breastPerkiness,y:n.center.y+.07*e.breastPerkiness,cp1:{x:n.top.x+2+.07*o-.5*i,y:n.top.y-3+Object(l.clamp)(.15*e.breastPerkiness,-4,4)-.7*i}},n.tip.cp2={x:n.tip.x-.1*i,y:n.tip.y+2+.07*o},n.bot={x:n.center.x-1.5+.01*o,y:n.center.y-3.8-.08*o-.05*i+.08*e.breastPerkiness},n.bot.cp1=Object(l.continueCurve)(n.top,n.tip,Object(l.clamp)(.6+.05*i,0,1)),n.bot.cp2={x:n.bot.x+3.5+.05*o,y:n.bot.y},n.cleavage={x:.5,y:n.tip.y},n.cleavage.cp1=Object(l.continueCurve)(n.tip,n.bot),n.cleavage.cp2={x:n.cleavage.x,y:n.cleavage.y-2.5-.05*o};var a=Object(l.splitCurve)(Object(l.clamp)((o+5)/30,0,1),n.bot,n.cleavage);n.in=a.left.p2,n.cleavage=a.right.p2}var s=Object(l.splitCurve)(Object(l.clamp)(1-this.breastSize/10,0,1),t.breast.top,t.breast.tip),c=s.right.p1;return t.breast.tip=s.right.p2,t.breast.top=Object(u.connectEndPoints)(t.breast.cleavage,c),[l.breakPoint,c,t.breast.tip,t.breast.bot,t.breast.in,t.breast.cleavage,t.breast.top]}}]),ChestHuman}(),h=function(t){function NipplesHuman(){var t;_classCallCheck(this,NipplesHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NipplesHuman)).call.apply(t,[this,{fill:l.none,loc:"+chest",aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(NipplesHuman,p),_createClass(NipplesHuman,[{key:"strokeClip",value:function strokeClip(){}},{key:"stroke",value:function stroke(t,e){return e.baseLipColor}},{key:"getLineWidth",value:function getLineWidth(t){return.05*t.dim.breastSize+.1*t.dim.areolaSize}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return t.chest=t.chest||{},r&&(t.breast?t.chest.nipples={x:t.breast.center.x-1.5+.03*this.breastSize,y:t.breast.tip.y-.03*this.breastSize+.1*e.breastPerkiness}:t.chest.nipples={x:t.armpit.x-5-.08*this.upperMuscle,y:t.armpit.y-3},t.chest.center={x:0,y:t.armpit.y-3}),[l.breakPoint,t.chest.nipples]}}]),NipplesHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return c}),r.d(e,"b",function(){return l});var o=r(2),n=r(3),i=r(9),a=r(40);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function Feet(){var t;_classCallCheck(this,Feet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Feet)).call.apply(t,[this,{loc:"feet",layer:o.a.FRONT}].concat(r)))}return _inherits(Feet,n["a"]),Feet}(),c=function(t){function FeetHuman(){var t;_classCallCheck(this,FeetHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FeetHuman)).call.apply(t,[this].concat(r)))}return _inherits(FeetHuman,s),_createClass(FeetHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){t.ankle.outbot={x:t.ankle.out.x+.2,y:t.ankle.out.y-2.5},t.ankle.outbot.cp1=Object(i.a)(t.ankle.out,t.ankle.outbot,.5,.5,.5);var n=t.toe=t.toe||{};n.center={x:.5*t.ankle.out.x+.5*t.ankle.in.x,y:1+.02*this.legFem-.1*e.feetLength},n.out={x:n.center.x+4-.04*this.legFem+.1*e.feetWidth,y:n.center.y,cp1:{x:t.ankle.outbot.x,y:t.ankle.outbot.y}},n.out.cp2={x:n.out.x+.02*this.legFem,y:n.out.y+1},n.in={x:n.center.x-3.3-.02*this.legFem-.1*e.feetWidth,y:n.out.y-2-.1*e.feetLength},n.in.cp1={x:n.out.x+1,y:n.out.y-1-.1*e.feetBias*(n.out.y-n.in.y)},n.in.cp2={x:n.in.x+2.5,y:n.in.y-.5-.02*this.legFem},t.ankle.inbot={x:n.center.x-4+.03*this.legFem,y:t.ankle.outbot.y-.5+.03*this.legFem,cp1:{x:n.in.x-1.5,y:n.in.y+1.5}},t.ankle.inbot.cp2={x:t.ankle.inbot.x+1,y:t.ankle.inbot.y-2},t.ankle.in.cp1=Object(i.a)(t.ankle.inbot,t.ankle.in,.3,-.5,.5)}return[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot]}}]),FeetHuman}(),l=function(t){function HoofHorse(){var t;_classCallCheck(this,HoofHorse);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HoofHorse)).call.apply(t,[this,{uncoverable:!0}].concat(r)))}return _inherits(HoofHorse,s),_createClass(HoofHorse,[{key:"stroke",value:function stroke(){return a.a.brownFur.stroke}},{key:"fill",value:function fill(){return a.a.brownFur.fill}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return r&&(t.ankle.outbot={x:t.ankle.out.x+.2,y:t.ankle.out.y-2.5},t.ankle.outbot.cp1=Object(i.a)(t.ankle.out,t.ankle.outbot,.5,.5,.5),t.toe=t.toe||{},t.toe.out={x:t.ankle.outbot.x+3-.07*this.legFem,y:1+.02*this.legFem,cp1:{x:t.ankle.outbot.x,y:t.ankle.outbot.y}},t.toe.out.cp2={x:t.toe.out.x+.02*this.legFem,y:t.toe.out.y+1},t.toe.in={x:t.toe.out.x-7+.05*this.legFem,y:t.toe.out.y-2,cp1:{x:t.toe.out.x+1,y:t.toe.out.y-1}},t.toe.in.cp2={x:t.toe.in.x+2.5,y:t.toe.in.y-.5-.02*this.legFem},t.ankle.inbot={x:t.toe.in.x-.5+.02*this.legFem,y:t.ankle.outbot.y-.5+.03*this.legFem,cp1:{x:t.toe.in.x-1.5,y:t.toe.in.y+1.5}},t.ankle.inbot.cp2={x:t.ankle.inbot.x+1,y:t.ankle.inbot.y-2},t.ankle.in.cp1=Object(i.a)(t.ankle.inbot,t.ankle.in,.3,-.5,.5)),[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot]}}]),HoofHorse}()},function(t,e,r){"use strict";r.d(e,"d",function(){return l}),r.d(e,"b",function(){return u}),r.d(e,"c",function(){return p}),r.d(e,"a",function(){return f});var n=r(19),o=r(11),i=r(2),a=r(0),s=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function Ears(){var t;_classCallCheck(this,Ears);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Ears)).call.apply(t,[this,{loc:"ears",layer:i.a.BELOW_HAIR,belowParts:["parts head"]}].concat(r)))}return _inherits(Ears,n["a"]),_createClass(Ears,[{key:"clipFill",value:function clipFill(){}},{key:"clipStroke",value:function clipStroke(){}},{key:"fill",value:function fill(t,e){return Object(o.b)(e.baseFill,{s:-18,l:-2})}},{key:"getLineWidth",value:function getLineWidth(t){return Object(a.clamp)(1.7-.05*t.dim.faceFem,.7,1.5)}}]),Ears}(),l=function(t){function EarsHuman(){var t;_classCallCheck(this,EarsHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarsHuman)).call.apply(t,[this].concat(r)))}return _inherits(EarsHuman,c),_createClass(EarsHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.ear={};n.top=Object(a.extractPoint)(t.skull.side),n.bot=Object(a.extractPoint)(t.skull.bot),n.mid={x:n.top.x+.6,y:.4*n.top.y+.6*n.bot.y},n.mid.cp1={x:n.top.x+1.5,y:n.top.y+.5},n.mid.cp2={x:n.mid.x+.5,y:n.mid.y+.9},n.bot.cp1={x:n.mid.x,y:n.mid.y-.7},n.bot.cp2={x:n.bot.x+.6,y:n.bot.y-.1}}return[t.ear.top,t.ear.mid,t.ear.bot]}}]),EarsHuman}(),u=function(t){function EarsElf(){var t;_classCallCheck(this,EarsElf);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarsElf)).call.apply(t,[this].concat(r)))}return _inherits(EarsElf,c),_createClass(EarsElf,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.ear={};n.top=Object(a.extractPoint)(t.skull.side);var o=Object(a.splitCurve)(.3,t.skull.side,t.skull.bot);n.bot=o.left.p2,n.mid={x:n.top.x+6+e.earlobeLength,y:n.top.y+.5},n.mid.cp1=Object(a.simpleQuadratic)(n.top,n.mid,.3,1),n.bot.cp1={x:n.mid.x-2,y:n.mid.y-2},n.bot.cp2={x:n.bot.x+2,y:n.bot.y+4}}return[t.ear.top,t.ear.mid,t.ear.bot]}}]),EarsElf}(),p=function(t){function EarsElf2(){var t;_classCallCheck(this,EarsElf2);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarsElf2)).call.apply(t,[this].concat(r)))}return _inherits(EarsElf2,c),_createClass(EarsElf2,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.ear={};n.top=Object(a.extractPoint)(t.skull.side),n.bot=Object(a.extractPoint)(t.skull.bot),n.mid={x:n.top.x+.6,y:.4*n.top.y+.6*n.bot.y},n.mid.cp1={x:n.top.x+1.5+3*e.earlobeLength,y:n.top.y+.5+4*e.earlobeLength},n.mid.cp2={x:n.mid.x+.5-.5*e.earlobeLength,y:n.mid.y+.9},n.bot.cp1={x:n.mid.x,y:n.mid.y-.7},n.bot.cp2={x:n.bot.x+.6,y:n.bot.y-.1}}return[t.ear.top,t.ear.mid,t.ear.bot]}}]),EarsElf2}(),f=function(t){function CatEars(){var t;_classCallCheck(this,CatEars);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CatEars)).call.apply(t,[this].concat(r)))}return _inherits(CatEars,c),_createClass(CatEars,[{key:"fill",value:function fill(t,e){return Object(o.b)(e.baseLipColor,{l:-10,s:-10})}},{key:"stroke",value:function stroke(t,e){return Object(o.b)(e.hairFill,{l:-10,s:-10})}},{key:"getLineWidth",value:function getLineWidth(t){return 2.5}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.ear={};n.top=Object(s.d)(t.skull,t.skull.side,.66),n.bot=Object(a.extractPoint)(t.skull.bot),n.mid={x:n.top.x+10*e.earlobeLength/4,y:n.top.y+5*e.earlobeLength/3}}return[t.ear.top,t.ear.mid,t.ear.bot]}}]),CatEars}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var n=r(19),a=(r(3),r(0));function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function Eyes(){var t;_classCallCheck(this,Eyes);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Eyes)).call.apply(t,[this,{loc:"eyes",aboveParts:["parts head"]}].concat(r)))}return _inherits(Eyes,n["a"]),Eyes}(),i=function(t){function EyesHuman(){var t;_classCallCheck(this,EyesHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EyesHuman)).call.apply(t,[this].concat(r)))}return _inherits(EyesHuman,o),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(EyesHuman,[{key:"fill",value:function fill(){return"white"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.1*this.faceLength,o=t.eyes={};o.center={x:.04469*this.faceWidth-.01*e.eyeCloseness+.005*this.eyeSize+.04*e.eyeWidth,y:t.skull.y-.42*n+.1*e.eyeHeight},o.in={x:o.center.x-1.7-.005*this.eyeSize-.04*e.eyeWidth,y:o.center.y-.5},o.out={x:o.in.x+3.5+.015*this.eyeSize+.1*e.eyeWidth,y:o.in.y+.3};var i=o.out.x-o.in.x;o.top={x:o.in.x+.4*i+.008*this.faceFem,y:o.in.y+1+.015*this.eyeSize+.1*e.eyeTopSize,cp1:{x:o.in.x+.1*i,y:o.in.y+Object(a.clamp)(.9-.015*this.faceFem,.4,2)+.01*this.eyeSize}},o.top.cp2={x:o.top.x-.2*i-.05*e.eyeTopSize,y:o.top.y},o.top=Object(a.adjust)(o.top,.1*e.eyeBias,0),o.out.cp1={x:o.top.x+.2*i,y:o.top.y},o.out.cp2={x:o.out.x-.1*i+.01*this.eyeSize,y:o.out.y+.5+.01*this.eyeSize},o.in.cp1={x:o.out.x-i*Object(a.clamp)(.3-.03*e.eyeBotBias,0,1),y:o.out.y-.7-.02*this.eyeSize-.1*e.eyeBotSize},o.in.cp2={x:o.in.x+i*Object(a.clamp)(.2+.02*e.eyeBotBias,0,1),y:o.in.y},Object(a.rotatePoints)(o.center,e.eyeTilt*Math.PI/180,o.top,o.out,o.in)}return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}}]),EyesHuman}()},function(t,e,r){"use strict";r.d(e,"b",function(){return a}),r.d(e,"a",function(){return s});var n=r(19),o=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Pupil(){var t;_classCallCheck(this,Pupil);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Pupil)).call.apply(t,[this,{loc:"pupil",aboveParts:["iris"]}].concat(r)))}return _inherits(Pupil,n["a"]),Pupil}(),a=function(t){function PupilHuman(){var t;_classCallCheck(this,PupilHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PupilHuman)).call.apply(t,[this].concat(r)))}return _inherits(PupilHuman,i),_createClass(PupilHuman,[{key:"stroke",value:function stroke(){return"#000"}},{key:"clipStroke",value:function clipStroke(t){return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}},{key:"getLineWidth",value:function getLineWidth(t){return.1*t.Mods.pupilSize}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e){return[o.breakPoint,t.eyes.iris]}}]),PupilHuman}(),s=function(t){function PupilCat(){var t;_classCallCheck(this,PupilCat);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PupilCat)).call.apply(t,[this].concat(r)))}return _inherits(PupilCat,i),_createClass(PupilCat,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"#000"}},{key:"clipStroke",value:function clipStroke(t){return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}},{key:"clipFill",value:function clipFill(t){return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}},{key:"getLineWidth",value:function getLineWidth(t){return.05*t.Mods.pupilSize}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e){var r=Object(o.adjust)(t.eyes.iris,0,1),n=Object(o.adjust)(t.eyes.iris,0,-1);return n.cp1=Object(o.adjust)(t.eyes.iris,.2,0),r.cp1=Object(o.adjust)(t.eyes.iris,-.2,0),[o.breakPoint,r,n,r]}}]),PupilCat}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var n=r(19),o=r(0);function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Iris(){var t;_classCallCheck(this,Iris);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Iris)).call.apply(t,[this,{loc:"iris",aboveParts:["eyes"]}].concat(r)))}return _inherits(Iris,n["a"]),Iris}(),a=function(t){function IrisHuman(){var t;_classCallCheck(this,IrisHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(IrisHuman)).call.apply(t,[this].concat(r)))}return _inherits(IrisHuman,i),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(IrisHuman,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(t,e){var r=e.avatar.Mods.irisHue,n=e.avatar.Mods.irisSaturation,o=e.avatar.Mods.irisLightness;return"hsl(".concat(r,",").concat(n,"%,").concat(o,"%)")}},{key:"getLineWidth",value:function getLineWidth(t){return.01*t.Mods.limbalRingSize}},{key:"clipStroke",value:function clipStroke(t){return this.clipFill(t)}},{key:"clipFill",value:function clipFill(t){return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyes.in]}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return r&&(t.eyes.iris=Object(o.adjust)(t.eyes.center,0,.1*e.irisHeight)),[o.breakPoint].concat(_toConsumableArray(Object(o.drawCircle)(t.eyes.iris,.1*e.irisSize)))}}]),IrisHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var n=r(19),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function Eyelid(){var t;_classCallCheck(this,Eyelid);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Eyelid)).call.apply(t,[this,{loc:"eyelid",aboveParts:["eyes","iris","pupil"]}].concat(r)))}return _inherits(Eyelid,n["a"]),Eyelid}(),a=function(t){function EyelidHuman(){var t;_classCallCheck(this,EyelidHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EyelidHuman)).call.apply(t,[this].concat(r)))}return _inherits(EyelidHuman,o),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(EyelidHuman,[{key:"fill",value:function fill(t,e){return e.eyelidColor}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){t.eyelid={};var n=Object(i.adjust)(t.eyes.top,.1*e.eyelidBias,.1*e.eyelidHeight-.3),o=Object(i.adjust)(t.eyes.out,.1*e.eyelidBias,.1*e.eyelidHeight-.3);t.eyelid.top={x:n.x,y:n.y},t.eyelid.top.cp1=o.cp2,t.eyelid.top.cp2=o.cp1,t.eyelid.in=Object(i.extractPoint)(t.eyes.in),t.eyelid.in.cp1=n.cp2,t.eyelid.in.cp2=n.cp1,5<e.eyelidHeight&&(t.eyelid.in.cp1.x-=.02*e.eyelidHeight,t.eyelid.in.cp2.x-=.02*e.eyelidHeight)}return[t.eyes.in,t.eyes.top,t.eyes.out,t.eyelid.top,t.eyelid.in]}}]),EyelidHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var n=r(19),s=(r(11),r(0));function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function Eyelash(){var t;_classCallCheck(this,Eyelash);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Eyelash)).call.apply(t,[this,{loc:"eyelash",aboveParts:["eyelid"],parentPart:"eyelid"}].concat(r)))}return _inherits(Eyelash,n["a"]),Eyelash}(),i=function(t){function EyelashHuman(){var t;_classCallCheck(this,EyelashHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EyelashHuman)).call.apply(t,[this].concat(r)))}return _inherits(EyelashHuman,o),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(EyelashHuman,[{key:"fill",value:function fill(t,e){return e.lashFill}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.eyelash={},o=t.eyelid,i=e.eyelashAngle*this.eyelashLength*.1;n.top={x:t.eyes.top.x+.1*e.eyelashBias,y:o.top.y+i},n.top.cp1={x:.7*o.in.x+.3*n.top.x,y:.5*o.in.y+.5*n.top.y},n.top.cp2={x:.4*o.in.x+.6*n.top.x,y:n.top.y},n.out=Object(s.extractPoint)(t.eyes.out),n.out.cp1=Object(s.continueCurve)(t.eyes.out,n.top,1),n.outBot=Object(s.extractPoint)(t.eyes.out),n.outBot.cp1=Object(s.adjust)(t.eyes.in.cp2,e.eyelashBias*Object(s.clamp)(this.eyelashLength,0,4)*.01,.03*-this.eyelashLength),n.outBot.cp2=Object(s.adjust)(t.eyes.in.cp1,e.eyelashBias*Object(s.clamp)(this.eyelashLength,0,5)*.01,.03*-this.eyelashLength);var a=t.eyes;Object(s.rotatePoints)(a.center,e.eyeTilt*Math.PI/180,n.top,n.out)}return[t.eyes.out,t.eyelid.top,t.eyelid.in,t.eyelash.top,t.eyelash.out,s.breakPoint,t.eyes.out,t.eyes.in,t.eyelash.outBot,s.endPoint]}}]),EyelashHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return i});var n=r(19),a=(r(11),r(0));function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function Brow(){var t;_classCallCheck(this,Brow);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Brow)).call.apply(t,[this,{loc:"brow",aboveParts:["parts head","faceParts eyelid"]}].concat(r)))}return _inherits(Brow,n["a"]),Brow}(),i=function(t){function BrowHuman(){var t;_classCallCheck(this,BrowHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BrowHuman)).call.apply(t,[this].concat(r)))}return _inherits(BrowHuman,o),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(BrowHuman,[{key:"fill",value:function fill(t,e){return e.browFill}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.brow={},o=.7+.01*this.faceFem;n.inbot={x:t.eyes.center.x-2+.1*e.browCloseness,y:t.eyes.center.y+o-.5+.1*e.browHeight};var i=.1*e.browThickness-.005*this.faceFem;n.intop={x:n.inbot.x+.1*e.browSharpness,y:n.inbot.y+Object(a.clamp)(.95+i,0,5)},n.intop.cp1=Object(a.simpleQuadratic)(n.inbot,n.intop,.5,.5),n.outbot={x:t.eyes.center.x+2.5+.1*e.browLength,y:t.eyes.center.y+o+.1*e.browHeight},n.outtop={x:n.outbot.x+.1*e.browOutBias,y:n.outbot.y+Object(a.clamp)(.7+i+.05*e.browOutBias,0,5)},n.outtop.cp1=Object(a.simpleQuadratic)(n.intop,n.outtop,.4,.1*e.browTopCurl),-5<e.browOutBias&&(n.outbot.cp1=Object(a.simpleQuadratic)(n.outtop,n.outbot,.5,.5)),n.inbot.cp1=Object(a.simpleQuadratic)(n.outbot,n.intop,.6,.1*-e.browBotCurl),Object(a.rotatePoints)(n.inbot,e.browTilt*Math.PI/180,n.inbot,n.intop,n.outtop,n.outbot)}return[t.brow.inbot,t.brow.intop,t.brow.outtop,t.brow.outbot,t.brow.inbot]}}]),BrowHuman}()},function(t,e,r){"use strict";r.d(e,"c",function(){return n}),r.d(e,"b",function(){return s}),r.d(e,"f",function(){return calcCap}),r.d(e,"d",function(){return c}),r.d(e,"e",function(){return p}),r.d(e,"a",function(){return f});var a=r(1),o=r(2),l=r(9),u=r(0),i=r(6);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function CapBasePart(){var t;_classCallCheck(this,CapBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CapBasePart)).call.apply(t,[this,{layer:o.a.ABOVE_HAIR,loc:"head"},{height:4.5,sideBias:-.15,curvature:7,headCoverage:.2,sideOffset:2.3}].concat(r)))}return _inherits(CapBasePart,a["c"]),_createClass(CapBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcCap.call(this,t),n=r.rightBot,o=r.leftBot,i=r.top;a.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,n,o,i,n),e.fill(),e.stroke()}}]),CapBasePart}(),s=function(t){function CapBandPart(){var t;_classCallCheck(this,CapBandPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CapBandPart)).call.apply(t,[this,{layer:o.a.ABOVE_HAIR,loc:"+head",aboveParts:["clothingParts head"]},{bandWidth:1.6,bandPattern:"black"}].concat(r)))}return _inherits(CapBandPart,a["c"]),_createClass(CapBandPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcCap.call(this,t),n=r.rightBot,o=r.leftBot,i=r.top,a=Object(u.adjust)(Object(u.getPointOnCurve)(.1*this.bandWidth,o,i),-.5,0),s=Object(u.adjust)(Object(u.getPointOnCurve)(1-.1*this.bandWidth,i,n),.5,0);s.cp1=Object(u.adjust)(o.cp1,0,s.y-n.y),a.cp1=Object(u.simpleQuadratic)(o,a,.5,1);var c=Object(u.extractPoint)(n);c.cp1=Object(u.simpleQuadratic)(s,c,.5,1),Object(l.j)(e,{fill:this.bandPattern,stroke:this.stroke},t),e.beginPath(),Object(u.drawPoints)(e,n,o,a,s,c),e.fill(),e.stroke()}}]),CapBandPart}();function calcCap(t){var e=Object(u.adjust)(Object(u.getPointOnCurve)(this.headCoverage,t.skull.side,t.skull.bot),this.sideOffset,0),r={x:-e.x,y:e.y};r.cp1=Object(u.simpleQuadratic)(e,r,this.sideBias+.5,-this.curvature);var n={x:.5*this.sideBias*e.x,y:t.skull.y+this.height},o=Object(i.averagePoint)(r,n,.65).y;return n.cp1={x:r.x-2,y:o},n.cp2={x:Object(i.averagePoint)(r,n,.5).x,y:n.y},e.cp1={x:Object(i.averagePoint)(e,n,.5).x,y:n.y},e.cp2={x:e.x+2,y:o},{rightBot:e,leftBot:r,top:n}}var c=function(t){function Hat(){var t;_classCallCheck(this,Hat);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Hat)).call.apply(t,[this,{clothingLayer:a.a.Layer.OUTER}].concat(r)))}return _inherits(Hat,a["b"]),Hat}(),p=function(t){function SimpleCap(){var t;_classCallCheck(this,SimpleCap);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleCap)).call.apply(t,[this].concat(r)))}return _inherits(SimpleCap,c),_createClass(SimpleCap,[{key:"partPrototypes",get:function get(){return[{side:null,Part:n}]}}]),SimpleCap}(),f=function(t){function BandedCap(){var t;_classCallCheck(this,BandedCap);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BandedCap)).call.apply(t,[this].concat(r)))}return _inherits(BandedCap,c),_createClass(BandedCap,[{key:"partPrototypes",get:function get(){return[{side:null,Part:n},{side:null,Part:s}]}}]),BandedCap}()},function(t,e,r){"use strict";r.d(e,"f",function(){return s}),r.d(e,"e",function(){return c}),r.d(e,"i",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"g",function(){return p}),r.d(e,"h",function(){return f}),r.d(e,"b",function(){return b}),r.d(e,"a",function(){return d}),r.d(e,"c",function(){return g});var n=r(1),o=r(2),h=(r(9),r(0)),i=(r(5),r(17)),y=r(7),a=r(29);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function wSuperBraGenitalPart(){var t;_classCallCheck(this,wSuperBraGenitalPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperBraGenitalPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(wSuperBraGenitalPart,n["c"]),_createClass(wSuperBraGenitalPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(a.l)(t);if(null!==r){var n=a.m.call(this,t);this.showStrap&&y.c.call(this,t,e,[],[n.breastTop,n.breastOut],{lineWidth:this.strapWidth});Object(h.adjust)(t.breast.top,.1,.2),Object(h.adjust)(t.breast.tip,.1,0),Object(h.adjust)(t.breast.bot,0,-.1),Object(h.adjust)(t.breast.in,-.4,0);y.c.call(this,t,e,[r.top,r.out,r.tip,r.bot,r.inner,r.cleavage,r.top])}}}]),wSuperBraGenitalPart}(),c=function(t){function wSuperBraChestPart(){var t;_classCallCheck(this,wSuperBraChestPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperBraChestPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0,aboveParts:["parts torso"],belowParts:["parts chest"]}].concat(r)))}return _inherits(wSuperBraChestPart,n["c"]),_createClass(wSuperBraChestPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(null!==Object(a.l)(t)){var r=a.m.call(this,t);y.c.call(this,t,e,[r.out,r.outbot,r.bot,r.mid,r.out],[]),this.showStrap&&y.c.call(this,t,e,[],[r.strapTop,r.breastTop],{lineWidth:this.strapWidth})}}}]),wSuperBraChestPart}(),l=function(t){function wSuperPantiesPart(){var t;_classCallCheck(this,wSuperPantiesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperPantiesPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso","parts leg"],belowSameLayerParts:["clothingParts leg"]}].concat(r)))}return _inherits(wSuperPantiesPart,n["c"]),_createClass(wSuperPantiesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!1!==t.hasOwnProperty("groin")){var r,n={};if(this.waistCoverageLower>this.waistCoverage&&(this.waistCoverageLower=this.waistCoverage),0<this.waistCoverage&&0<this.waistCoverageLower){r=Object(h.splitCurve)(1-this.waistCoverage,t.waist,t.hip),n.sideTop=r.left.p2;var o=r.right.p2,i=(this.waistCoverage-this.waistCoverageLower)/this.waistCoverage;r=Object(h.splitCurve)(i,n.sideTop,o),n.sideBot=r.left.p2,n.sideTop=Object(h.extractPoint)(n.sideTop)}else if(this.waistCoverage<0&&this.waistCoverageLower<0){r=Object(h.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out),n.sideTop=r.left.p2;var a=r.right.p2,s=Math.abs((1+this.waistCoverage-(1+this.waistCoverageLower))/(1+this.waistCoverage));r=Object(h.splitCurve)(s,n.sideTop,a),n.sideBot=r.left.p2,n.sideTop=Object(h.extractPoint)(n.sideTop)}else r=Object(h.splitCurve)(1-this.waistCoverage,t.waist,t.hip),n.sideTop=Object(h.extractPoint)(r.left.p2),n.hip=r.right.p2,r=Object(h.splitCurve)(Math.abs(this.waistCoverageLower),t.hip,t.thigh.out),n.sideBot=r.left.p2;if(n.top={x:-.1,y:n.sideTop.y+this.topY-8},n.sideTop.cp1={x:.5*n.sideTop.x+.5*n.top.x,y:n.sideTop.y},n.sideTop.cp1.x+=this.curveTopX,n.sideTop.cp1.y+=this.curveTopY-9,n.bot=Object(h.adjust)(Object(h.clone)(t.groin),-.1,0),r=Object(h.splitCurve)(this.genCoverage,t.groin,Object(h.extractPoint)(t.thigh.top)),n.botOut=Object(h.extractPoint)(r.left.p2),r=Object(h.splitCurve)(.5,n.sideBot,n.botOut),n.botOut.cp1=Object(h.extractPoint)(r.left.p2),n.botOut.cp1.x+=this.curveBotX-9,n.botOut.cp1.y+=this.curveBotY+5,y.c.call(this,t,e,[n.top,n.sideTop,n.hip,n.sideBot,n.botOut,n.bot]),this.bow){var c=Object(h.adjust)(n.top,0,-2),l=Object(h.adjust)(c,0,1),u=Object(h.adjust)(c,0,-1),p=Object(h.adjust)(c,3,2),f=Object(h.adjust)(c,3,-2);y.c.call(this,t,e,[l,p,f,u],[],{fillWithHighlightedFill:!0})}}}}]),wSuperPantiesPart}(),u=function(t){function wSuperBra(){var t;_classCallCheck(this,wSuperBra);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperBra)).call.apply(t,[this,{showStrap:!1,strapWidth:2,neckCoverage:.7,thickness:.5,highlight:"hsl(346, 50%, 70%)",botStrapWidth:0,topStrapCurveX:0,topStrapCurveY:0,hue:319,satur:69,light:42,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1,invisible:0}].concat(r)))}return _inherits(wSuperBra,i["i"]),_createClass(wSuperBra,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:s}]}}]),wSuperBra}(),p=function(t){function wSuperPanties(){var t;_classCallCheck(this,wSuperPanties);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperPanties)).call.apply(t,[this,{waistCoverage:.11,waistCoverageLower:-.05,genCoverage:1,topY:0,curveTopX:0,curveTopY:0,curveBotX:0,curveBotY:0,hue:319,satur:69,light:42,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1,invisible:0,bow:!1}].concat(r)))}return _inherits(wSuperPanties,i["i"]),_createClass(wSuperPanties,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:l}]}}]),wSuperPanties}(),f=function(t){function wSuperPanties2Part(){var t;_classCallCheck(this,wSuperPanties2Part);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperPanties2Part)).call.apply(t,[this,{layer:o.a.FRONT,loc:"groin",reflect:!0,aboveParts:["parts groin","parts torso","parts leg"],belowSameLayerParts:["clothingParts leg"]}].concat(r)))}return _inherits(wSuperPanties2Part,n["c"]),_createClass(wSuperPanties2Part,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!1!==t.hasOwnProperty("groin")){var r=a.k.call(this,t);n.a.simpleStrokeFill(e,t,this),y.c.call(this,t,e,[r.center,r.top,r.sideTop,r.sideBot,r.botOut,r.bot])}}}]),wSuperPanties2Part}(),b=function(t){function wBikiniBottom(){var t;_classCallCheck(this,wBikiniBottom);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBikiniBottom)).call.apply(t,[this,{waistCoverage:.11,waistCoverageLower:-.05,genCoverage:1,topY:0,curveTopX:0,curveTopY:0,curveBotX:0,curveBotY:0,radius:2.8,thickness:.6}].concat(r)))}return _inherits(wBikiniBottom,i["i"]),_createClass(wBikiniBottom,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),wBikiniBottom}(),d=function(t){function LoaderPart(){var t;_classCallCheck(this,LoaderPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LoaderPart)).call.apply(t,[this,{layer:o.a.EFFECTS,loc:"+torso",reflect:!1}].concat(r)))}return _inherits(LoaderPart,n["c"]),_createClass(LoaderPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){y.c.call(this,t,e,[t.chest.center,t.waist,t.pelvis])}}]),LoaderPart}(),g=function(t){function wLoader(){var t;_classCallCheck(this,wLoader);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLoader)).call.apply(t,[this,{}].concat(r)))}return _inherits(wLoader,i["i"]),_createClass(wLoader,[{key:"fill",value:function fill(){return"hsl(346, 57%, 82%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:d}]}}]),wLoader}()},function(t,e,r){"use strict";r.d(e,"b",function(){return i}),r.d(e,"o",function(){return s}),r.d(e,"d",function(){return c}),r.d(e,"f",function(){return p}),r.d(e,"k",function(){return h}),r.d(e,"m",function(){return y}),r.d(e,"g",function(){return b}),r.d(e,"a",function(){return d}),r.d(e,"c",function(){return g}),r.d(e,"e",function(){return P}),r.d(e,"h",function(){return v}),r.d(e,"i",function(){return _}),r.d(e,"j",function(){return C}),r.d(e,"l",function(){return O}),r.d(e,"n",function(){return k}),r.d(e,"p",function(){return m});var l=r(1),o=r(2),u=(r(6),r(0)),n=r(38),a=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperty(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcNeck(t){var e=Object(u.splitCurve)(this.neckCoverage,t.neck.cusp,t.collarbone),r=e.left.p2;r.y-=.5*this.thickness;var n=(e=Object(u.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin)).left.p2;return n.x=0,r.cp1={x:.5*r.x+.5*n.x,y:n.y},r.cp1.x-=1,r.cp1.x+=this.curveX,r.cp1.y+=this.curveY,{top:r,bot:n}}var i=function(t){function BiChainPart(){var t;_classCallCheck(this,BiChainPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BiChainPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{curveX:0,curveY:0,thickness:1}].concat(r)))}return _inherits(BiChainPart,l["c"]),_createClass(BiChainPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcNeck.call(this,t),n=r.top,o=r.bot;e.beginPath(),e.lineWidth=this.thickness,Object(u.drawPoints)(e,o,n),e.stroke(),e.beginPath(),this.chain&&e.setLineDash([this.beadsSize,this.spaceSize]),e.strokeStyle=this.highlight,e.lineWidth=this.beadThickness,Object(u.drawPoints)(e,o,n),e.stroke()}}]),BiChainPart}(),s=function(t){function TearPart(){var t;_classCallCheck(this,TearPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TearPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{width:3.5,length:.5,size:1}].concat(r)))}return _inherits(TearPart,l["c"]),_createClass(TearPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this),this.highlight&&(e.fillStyle=this.highlight);var r=calcNeck.call(this,t),n=(r.top,r.bot),o=Object(u.adjust)(n,0,-6*this.size);o.cp1=Object(u.adjust)(o,this.width*this.size,this.length*this.size),e.beginPath(),Object(u.drawPoints)(e,n,o),e.fill()}}]),TearPart}(),c=function(t){function DoubleNecklacePart(){var t;_classCallCheck(this,DoubleNecklacePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DoubleNecklacePart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{neckCoverage:.14,cleavageCoverage:.13,cleavageCoverageTop:.05,curveX:0,curveY:0,thickness:.5}].concat(r)))}return _inherits(DoubleNecklacePart,l["c"]),_createClass(DoubleNecklacePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcNeck.call(this,t),n=r.top,o=r.bot;this.chain&&e.setLineDash([3,3]),e.lineWidth=this.thickness,e.beginPath(),Object(u.drawPoints)(e,o,n),e.stroke(),this.cleavageCoverageTop>this.cleavageCoverage-.03&&(this.cleavageCoverageTop=this.cleavageCoverage-.03);var i=Object(u.splitCurve)(this.cleavageCoverageTop,t.neck.cusp,t.groin).left.p2;i.x=0,i.cp1={x:.5*i.x+.5*n.x,y:i.y},e.beginPath(),Object(u.drawPoints)(e,n,i),e.stroke()}}]),DoubleNecklacePart}(),p=function(t){function MultiNecklacePart(){var t;_classCallCheck(this,MultiNecklacePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MultiNecklacePart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{cleavageCoverage:.13,neckCoverage:.05,curveX:0,curveY:0,thickness:.5,size:1.2,multiple:2,distance:5}].concat(r)))}return _inherits(MultiNecklacePart,l["c"]),_createClass(MultiNecklacePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcNeck.call(this,t),n=r.top,o=r.bot;this.chain&&e.setLineDash([3,3]),e.lineWidth=this.thickness,e.beginPath(),Object(u.drawPoints)(e,o,n),e.stroke();for(var i=-this.distance,a=0;a<this.multiple;a++){var s=Object(u.adjust)(o,0,i),c=Object(u.adjust)(n,.02,0);c.cp1={x:.5*c.x+.5*s.x+this.curveX+4*a,y:s.y+this.curveY+a},e.beginPath(),Object(u.drawPoints)(e,s,c),e.stroke(),i-=this.distance}}}]),MultiNecklacePart}(),f=function(t){function ChainPart(){var t;_classCallCheck(this,ChainPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{chain:!1,neckCoverage:.14,cleavageCoverage:.09,curveX:0,curveY:0,thickness:.5,dash:2}].concat(r)))}return _inherits(ChainPart,l["c"]),_createClass(ChainPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcNeck.call(this,t),n=r.top,o=r.bot;e.beginPath(),this.chain&&e.setLineDash([this.dash,this.dash]),e.lineWidth=this.thickness,Object(u.drawPoints)(e,o,n),e.stroke()}}]),ChainPart}(),h=function(t){function StarPart(){var t;_classCallCheck(this,StarPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StarPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{starThickness:.6,radius:4,spikes:5,upwards:!0,styleOuter:1,styleInner:-1}].concat(r)))}return _inherits(StarPart,l["c"]),_createClass(StarPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcNeck.call(this,t),n=(r.top,r.bot),o=Object(a.c)({x:0,y:n.y-this.radius},this.spikes,this.radius,.33*this.radius,this.upwards,this.styleOuter,this.styleInner);e.beginPath(),e.lineWidth=this.starThickness,e.strokeStyle=e.fillStyle,u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(o))),e.stroke()}}]),StarPart}(),y=function(t){function TNecklacePart(){var t;_classCallCheck(this,TNecklacePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TNecklacePart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{chain:!1,neckCoverage:.14,cleavageCoverage:.09,curveX:0,curveY:0,thickness:.5,size:1.2}].concat(r)))}return _inherits(TNecklacePart,l["c"]),_createClass(TNecklacePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,n){l.a.simpleStrokeFill(n,t,this);var e=calcNeck.call(this,t),r=e.top,o=e.bot,i=Object(u.adjust)(o,0,-12);function ball(t,e){var r=Object(u.drawCircle)(t,e);n.beginPath(),u.drawPoints.apply(void 0,[n].concat(_toConsumableArray(r))),n.fill()}n.lineWidth=this.thickness,n.beginPath(),Object(u.drawPoints)(n,i,o,r),n.stroke(),ball(Object(u.getPointOnCurve)(.4,o,r),this.size),ball(Object(u.getPointOnCurve)(.8,o,r),this.size),ball(Object(a.d)(o,i,.3),this.size),ball(Object(a.d)(o,i,.7),this.size)}}]),TNecklacePart}(),b=function(t){function Necklace(){var t;_classCallCheck(this,Necklace);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Necklace)).call.apply(t,[this,{clothingLayer:l.a.Layer.OUTER,stroke:"#5c5c5c",fill:"#5c5c5c"}].concat(r)))}return _inherits(Necklace,n["a"]),Necklace}(),d=function(t){function BiChain(){var t,e;_classCallCheck(this,BiChain);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BiChain)).call.apply(t,[this,(e={cleavageCoverage:.1,chain:!0,curveX:2},_defineProperty(e,"cleavageCoverage",.1),_defineProperty(e,"neckCoverage",.07),_defineProperty(e,"beadsSize",4),_defineProperty(e,"spaceSize",8),_defineProperty(e,"beadThickness",1),_defineProperty(e,"thickness",1),_defineProperty(e,"highlight","red"),e)].concat(n)))}return _inherits(BiChain,b),_createClass(BiChain,[{key:"stroke",value:function stroke(){return"blue"}},{key:"fill",value:function fill(){return"red"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i}]}}]),BiChain}(),g=function(t){function DoubleNecklace(){var t;_classCallCheck(this,DoubleNecklace);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DoubleNecklace)).call.apply(t,[this,{cleavageCoverage:.13,cleavageCoverageTop:.05,chain:!0,neckCoverage:.05,thickness:.7,highlight:""}].concat(r)))}return _inherits(DoubleNecklace,b),_createClass(DoubleNecklace,[{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:s}]}}]),DoubleNecklace}(),P=function(t){function MultiNecklace(){var t;_classCallCheck(this,MultiNecklace);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MultiNecklace)).call.apply(t,[this,{cleavageCoverage:.13,neckCoverage:.05,chain:!0,curveX:2,thickness:.7}].concat(r)))}return _inherits(MultiNecklace,b),_createClass(MultiNecklace,[{key:"partPrototypes",get:function get(){return[{side:null,Part:p}]}}]),MultiNecklace}(),v=function(t){function PearlNecklace(){var t,e;_classCallCheck(this,PearlNecklace);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return _possibleConstructorReturn(this,(t=_getPrototypeOf(PearlNecklace)).call.apply(t,[this,(e={cleavageCoverage:.1,chain:!0,curveX:2},_defineProperty(e,"cleavageCoverage",.1),_defineProperty(e,"neckCoverage",.07),_defineProperty(e,"beadsSize",.3),_defineProperty(e,"beadThickness",2),_defineProperty(e,"spaceSize",8.8),_defineProperty(e,"thickness",.2),_defineProperty(e,"highlight","white"),e)].concat(n)))}return _inherits(PearlNecklace,b),_createClass(PearlNecklace,[{key:"partPrototypes",get:function get(){return[{side:null,Part:i}]}}]),PearlNecklace}(),_=function(t){function SimpleChain(){var t,e;_classCallCheck(this,SimpleChain);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleChain)).call.apply(t,[this,(e={cleavageCoverage:.13,chain:!0,curveX:2},_defineProperty(e,"cleavageCoverage",.11),_defineProperty(e,"neckCoverage",.05),_defineProperty(e,"thickness",.6),_defineProperty(e,"dash",2.5),e)].concat(n)))}return _inherits(SimpleChain,b),_createClass(SimpleChain,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),SimpleChain}(),C=function(t){function StarNecklace(){var t;_classCallCheck(this,StarNecklace);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StarNecklace)).call.apply(t,[this,{curveX:-1,cleavageCoverage:.13}].concat(r)))}return _inherits(StarNecklace,b),_createClass(StarNecklace,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f},{side:null,Part:h}]}}]),StarNecklace}(),O=function(t){function TNecklace(){var t,e;_classCallCheck(this,TNecklace);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TNecklace)).call.apply(t,[this,(e={cleavageCoverage:.13,chain:!0,curveX:2},_defineProperty(e,"cleavageCoverage",.11),_defineProperty(e,"neckCoverage",.05),_defineProperty(e,"thickness",.7),e)].concat(n)))}return _inherits(TNecklace,b),_createClass(TNecklace,[{key:"partPrototypes",get:function get(){return[{side:null,Part:y}]}}]),TNecklace}(),k=function(t){function TearNecklace(){var t,e;_classCallCheck(this,TearNecklace);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TearNecklace)).call.apply(t,[this,(e={cleavageCoverage:.13,chain:!0,curveX:0},_defineProperty(e,"cleavageCoverage",.11),_defineProperty(e,"neckCoverage",.05),_defineProperty(e,"thickness",.7),e)].concat(n)))}return _inherits(TearNecklace,b),_createClass(TearNecklace,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f},{side:null,Part:s}]}}]),TearNecklace}(),m=function(t){function ThickChain(){var t,e;_classCallCheck(this,ThickChain);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThickChain)).call.apply(t,[this,(e={cleavageCoverage:.13,chain:!0,curveX:2},_defineProperty(e,"cleavageCoverage",.16),_defineProperty(e,"neckCoverage",.1),_defineProperty(e,"thickness",1.5),_defineProperty(e,"dash",5),e)].concat(n)))}return _inherits(ThickChain,b),_createClass(ThickChain,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),ThickChain}()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",function(){return serialize}),__webpack_require__.d(__webpack_exports__,"a",function(){return deserialize}),__webpack_require__.d(__webpack_exports__,"b",function(){return loadSerialization});var _pattern__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(13),_parts_part__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(3),_clothes_clothing__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1);function serialize(t,e){return JSON.stringify(t,function(t,e){if("_owner"!==t&&"shadingParts"!==t)return e},e)}function deserialize(text){return JSON.parse(text,function(key,val){var value=val;if(Array.isArray(value)&&2===value.length&&"(revive:eval)"===value[0]){var $ReviveData$=value[1][1];value=eval(value[1][0])}else if(Object(_pattern__WEBPACK_IMPORTED_MODULE_0__.i)(value)){var _value$=value[1],patternName=_value$.patternName,_value$$patternSize=_value$.patternSize,patternSize=void 0===_value$$patternSize?_pattern__WEBPACK_IMPORTED_MODULE_0__.a:_value$$patternSize;value=Object(_pattern__WEBPACK_IMPORTED_MODULE_0__.f)(Object(_pattern__WEBPACK_IMPORTED_MODULE_0__.g)(patternName),patternSize)}return value})}function extendSerializability(globalClassIdentifier){var classConstructor=eval(globalClassIdentifier);Object.defineProperties(classConstructor.prototype,{_getData:{value:function value(){var e={};return Object.keys(this).forEach(function(t){e[t]=this[t]},this),e}},_setData:{value:function value(t){return new this.constructor(t)}},clone:{value:function value(){return new classConstructor(this._getData)}},toJSON:{value:function value(){return JSON.reviveWrapper("(new "+globalClassIdentifier+"($ReviveData$))",this._getData())}}})}function loadSerialization(){var t=[],e=window.da;for(var r in e){if(!1!==e.hasOwnProperty(r))"function"==typeof e[r]&&1<r.length&&r.charAt(0)===r.charAt(0).toUpperCase()&&t.push(r)}t.forEach(function(t){extendSerializability("da."+t)})}JSON.reviveWrapper||Object.defineProperty(JSON,"reviveWrapper",{configurable:!0,writable:!0,value:function value(t,e){if("string"!=typeof t)throw new TypeError("JSON.reviveWrapper code parameter must be a string");return["(revive:eval)",[t,e]]}})},function(t,e,r){"use strict";r.d(e,"a",function(){return loadDefaultParts});var n=r(35),o=r(3),i=r(66),a=r(48),s=r(67),c=r(68),l=r(69),u=r(49),p=r(50),f=r(70),h=r(51),y=r(71),b=r(72),d=r(52),g=r(53),P=r(54),v=r(55),_=r(73),C=r(74),O=r(75),k=r(56),m=r(57),w=r(58),j=r(59),S=r(60),x=r(36);function loadDefaultParts(){n.a.human.maleParts=[{partGroup:"parts",side:null,part:i.a},{partGroup:"parts",side:null,part:a.b},{partGroup:"decorativeParts",side:null,part:a.a}],n.a.human.femaleParts=[{partGroup:"parts",side:null,part:s.a}],n.a.human.defaultParts=[{side:null,part:c.a},{side:null,part:l.a},{side:o.b.LEFT,part:u.a},{side:o.b.RIGHT,part:u.a},{side:o.b.LEFT,part:p.a},{side:o.b.RIGHT,part:p.a},{side:null,part:f.a},{side:o.b.LEFT,part:h.a},{side:o.b.RIGHT,part:h.a},{side:o.b.LEFT,part:g.a},{side:o.b.RIGHT,part:g.a},{side:null,part:y.a},{side:null,part:b.a},{side:null,part:d.a},{side:null,part:d.b}],n.a.human.defaultFaceParts=[{side:o.b.LEFT,part:P.d},{side:o.b.RIGHT,part:P.d},{side:null,part:O.a},{side:null,part:C.a},{side:null,part:_.a},{side:o.b.LEFT,part:v.a},{side:o.b.RIGHT,part:v.a},{side:o.b.LEFT,part:m.a},{side:o.b.RIGHT,part:m.a},{side:o.b.LEFT,part:k.b},{side:o.b.RIGHT,part:k.b},{side:o.b.LEFT,part:w.a},{side:o.b.RIGHT,part:w.a},{side:o.b.LEFT,part:j.a},{side:o.b.RIGHT,part:j.a},{side:o.b.LEFT,part:S.a},{side:o.b.RIGHT,part:S.a}],n.a.human.defaultDecorativeParts=[{side:null,part:x.b},{side:o.b.LEFT,part:x.d},{side:o.b.RIGHT,part:x.d},{side:null,part:x.c},{side:null,part:x.e},{side:null,part:x.a},{side:o.b.LEFT,part:x.f},{side:o.b.RIGHT,part:x.f}]}},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var o=r(2),n=r(3),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Testicles(){var t;_classCallCheck(this,Testicles);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Testicles)).call.apply(t,[this,{loc:"testicles",layer:o.a.MALE_GENITALS,coverConceal:["groin","left leg"]}].concat(r)))}return _inherits(Testicles,n["a"]),Testicles}(),s=function(t){function TesticlesHuman(){var t;_classCallCheck(this,TesticlesHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TesticlesHuman)).call.apply(t,[this,{reflect:!0}].concat(r)))}return _inherits(TesticlesHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(TesticlesHuman,[{key:"getLineWidth",value:function getLineWidth(t){return Object(i.clamp)(t.getDim("testicleSize")/60,.5,2)}},{key:"stroke",value:function stroke(){return"inherit"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.testicles={};n.center={x:0,y:t.groin.y+3},n.top={x:n.center.x+1.5+.003*this.testicleSize,y:n.center.y+.006*this.testicleSize},n.side={x:n.center.x+.06*this.testicleSize,y:n.center.y-.1*this.testicleSize},n.bot={x:n.center.x,y:n.side.y-.02*this.testicleSize},n.side.cp1={x:n.top.x,y:n.top.y-.04*this.testicleSize},n.side.cp2={x:n.side.x+.01*this.testicleSize,y:n.side.y+.05*this.testicleSize},n.bot.cp1=Object(i.simpleQuadratic)(n.side,n.bot,.5,.05*this.testicleSize),n.center.cp1=Object(i.simpleQuadratic)(n.bot,n.center,.3,.01*this.testicleSize)}return 20<this.testicleSize?[t.testicles.top,t.testicles.side,t.testicles.bot,Object(i.adjust)(t.testicles.center,0,-4)]:[]}}]),TesticlesHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var o=r(2),n=r(3),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Vagina(){var t;_classCallCheck(this,Vagina);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Vagina)).call.apply(t,[this,{loc:"vagina",forcedSide:null,layer:o.a.FRONT,aboveParts:["parts groin"],belowParts:["leg","clothingParts groin"]}].concat(r)))}return _inherits(Vagina,n["a"]),Vagina}(),s=function(t){function VaginaHuman(){var t;_classCallCheck(this,VaginaHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(VaginaHuman)).call.apply(t,[this,{reflect:!0}].concat(r)))}return _inherits(VaginaHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(VaginaHuman,[{key:"stroke",value:function stroke(){return"inherit"}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){return r&&(t.vagina={},t.coverGroin=!0,t.vagina.top={x:t.groin.x,y:t.groin.y+.022*this.vaginaSize+.005*e.labiaFullness},t.vagina.side=Object(i.extractPoint)(t.thigh.top),t.vagina.side.y+=.1*e.labiaFullness+.005*this.vaginaSize+.5,t.vagina.side.x+=.02*e.labiaFullness+.002*this.vaginaSize,t.vagina.top.cp1={x:t.vagina.side.x,y:t.vagina.side.y-.8-(.1*e.labiaFullness+.005*this.vaginaSize)},t.vagina.top.cp2={x:t.vagina.top.x,y:t.vagina.top.y-.032*this.vaginaSize}),[t.vagina.side,t.vagina.top]}}]),VaginaHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return l});var n=r(10),o=r(2),i=r(3),c=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Head(){var t;_classCallCheck(this,Head);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Head)).call.apply(t,[this,{loc:"head",forcedSide:null,parentPart:"neck",layer:o.a.BELOW_HAIR,reflect:!0}].concat(r)))}return _inherits(Head,i["a"]),Head}(),s=function(t){function HeadHumanShading(){var t;_classCallCheck(this,HeadHumanShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeadHumanShading)).call.apply(t,[this,{loc:"+head",layer:o.a.HAIR}].concat(r)))}return _inherits(HeadHumanShading,n["a"]),_createClass(HeadHumanShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=function calcHeadShading(t,e){var r=Object(c.splitCurve)(.4,t.skull,t.skull.side),n=Object(c.extractPoint)(r.left.p2),o=r.right.p2;o=Object(c.adjust)(o,.045*-e,0);var i=Object(c.adjust)(t.skull.bot,.03*-e,0);i.cp1=Object(c.simpleQuadratic)(o,i,.5,.5);var a=t.chin.out?Object(c.adjust)(Object(c.extractPoint)(t.chin.out),.026*-e,0):{},s=(r=Object(c.splitCurve)(.8,a,t.chin.bot)).left.p2;return s.cp1=Object(c.continueCurve)(i,a,.7),s.cp2=Object(c.adjust)(s.cp2,.02*-e,.1),{top:n,skullSide:o,skullBot:i,chinOut:a,chinBot:s}}(t,this.faceWidth),r=e.top,n=e.skullSide,o=e.skullBot,i=e.chinOut,a=e.chinBot;return r.cp1={x:a.x+.3*this.faceWidth,y:a.y},r.cp2={x:r.x+.4*this.faceWidth,y:r.y},[r,n,o,i,a,r]}}]),HeadHumanShading}();var l=function(t){function HeadHuman(){var t;_classCallCheck(this,HeadHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HeadHuman)).call.apply(t,[this,{shadingParts:[s]}].concat(r)))}return _inherits(HeadHuman,a),_createClass(HeadHuman,[{key:"getLineWidth",value:function getLineWidth(t){return Object(c.clamp)(1.7-.05*t.dim.faceFem,.7,1.5)}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=this.height,o=t.skull={x:0,y:n};t.ear={},o.side={x:.095*this.faceWidth-.01*this.faceFem,y:t.skull.y-.035*this.faceLength,cp1:{x:.045*this.faceWidth,y:n}},o.side.cp2={x:o.side.x,y:n-2},o.bot={x:o.side.x-.0135*this.faceFem,y:o.side.y-5*this.faceLength/220},t.jaw={x:o.bot.x-Object(c.clamp)(1.5-.05*this.faceFem-.1*e.jawJut,0,.2*this.faceWidth),y:o.bot.y-Object(c.clamp)(.025*this.faceLength-.2*this.faceFem,0,.03*this.faceLength)},t.chin={},t.chin.bot={x:0,y:t.skull.y-.1*this.faceLength+.035*this.faceFem-.1*e.chinLength,cp1:{x:t.jaw.x-Object(c.clamp)(1.5-.02*this.faceFem,.5,2),y:t.jaw.y-Object(c.clamp)(1+.05*this.faceFem+.1*e.cheekFullness,0,.025*this.faceLength)}},t.chin.bot.cp2={x:.1*this.chinWidth-Object(c.clamp)(.22*this.faceFem,0,3),y:t.chin.bot.y-1+Object(c.clamp)(.035*this.faceFem,0,2)};var i=Object(c.splitCurve)(1-.78,t.jaw,t.chin.bot);t.chin.out=i.right.p1,t.chin.out.cp1=i.left.p2.cp1,t.chin.bot=i.right.p2,this.faceFem<13&&(t.chin.out.cp1=Object(c.simpleQuadratic)(t.jaw,t.chin.out,.5,.02*this.faceFem))}return[t.skull,t.skull.side,t.skull.bot,t.jaw,t.chin.out,t.chin.bot]}}]),HeadHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return p});var n=r(10),o=r(2),i=r(3),l=r(0),a=r(9);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function ChinShading(){var t;_classCallCheck(this,ChinShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChinShading)).call.apply(t,[this,{loc:"+neck",layer:o.a.GENITALS}].concat(r)))}return _inherits(ChinShading,n["a"]),_createClass(ChinShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=_slicedToArray(Object(l.adjustPoints)(0,-2,t.skull.side,t.skull.bot,t.jaw,t.chin.out,t.chin.bot),5),r=e[0],n=e[1],o=e[2],i=e[3],a=e[4],s=Object(l.reflect)(i);s.cp1=Object(l.reflect)(a.cp2),s.cp2=Object(l.reflect)(a.cp1);var c=Object(l.reflect)(o);return c.cp1=Object(l.reflect)(i.cp2),c.cp2=Object(l.reflect)(i.cp1),l.adjustPoints.apply(void 0,[1.3,0].concat(_toConsumableArray(Object(l.adjustPoints)(1.8,0,r,n,o,i,a)),[s,c]))}}]),ChinShading}(),c=function(t){function NeckShading(){var t;_classCallCheck(this,NeckShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckShading)).call.apply(t,[this,{loc:"+neck",layer:o.a.GENITALS}].concat(r)))}return _inherits(NeckShading,n["a"]),_createClass(NeckShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e={x:0,y:t.neck.top.y},r={x:t.neck.cusp.x,y:t.neck.cusp.y-3};r.cp1=t.neck.cusp.cp1;var n={x:t.neck.top.x+1,y:t.neck.top.y};return n.cp1=t.neck.cusp.cp1,[e,r,n,e]}}]),NeckShading}(),u=function(t){function Neck(){var t;_classCallCheck(this,Neck);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Neck)).call.apply(t,[this,{loc:"neck",forcedSide:null,layer:o.a.FRONT,reflect:!0,shadingParts:[s,c]}].concat(r)))}return _inherits(Neck,i["a"]),Neck}(),p=function(t){function NeckHuman(){var t;_classCallCheck(this,NeckHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckHuman)).call.apply(t,[this].concat(r)))}return _inherits(NeckHuman,u),_createClass(NeckHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.neck={};if(n.nape={x:0,y:t.skull.y-.068*this.faceLength},n.top={x:.1*this.neckWidth+.05*this.upperMuscle-.01*this.faceFem,y:n.nape.y},n.cusp={x:n.top.x+.2,y:n.top.y-.1*this.neckLength},n.cusp.cp1=Object(l.simpleQuadratic)(n.top,n.cusp,.7,.1*e.neckCurve),12<this.upperMuscle){var o=Object(l.splitCurve)(Object(l.clamp)(1-(this.upperMuscle-12)/80,0,1),n.top,n.cusp);t.trapezius=o.right.p1}else t.trapezius=Object(l.clone)(n.cusp);t.collarbone={x:n.cusp.x+.1*this.shoulderWidth+.01*this.upperMuscle,y:n.cusp.y-.105*this.torsoLength+.05*this.upperMuscle},12<this.upperMuscle?(t.collarbone.x+=.1*(this.upperMuscle-12),t.collarbone.cp1=Object(a.a)(t.trapezius,t.collarbone,.7,.02*this.upperMuscle,.02*this.upperMuscle)):t.collarbone.cp1=Object(a.a)(n.cusp,t.collarbone,.3,-.05*(12-this.upperMuscle),-.05*(12-this.upperMuscle))}return[t.neck.nape,t.neck.top,t.neck.cusp,t.trapezius,t.collarbone]}}]),NeckHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return p});var n=r(10),o=r(2),i=r(3),l=r(0),s=r(6);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcTorsoShading(t){var e=t.armpit;t.breast&&(e=Object(l.splitCurve)(.1,t.armpit,t.waist).left.p2);var r=.1*this.bellyProtrusion,n=Object(l.adjust)(e,-2-.03*this.shoulderWidth,-5),o=Object(l.adjust)(t.waist,-1-.03*this.waistWidth+.3*r,-4);o.cp1.x-=.5*r;var i=Object(l.adjust)(t.hip,-3-.04*this.hipWidth-r,-r);i.cp1=Object(l.adjust)(i.cp1,.02*this.hipWidth+1.8*r,.2*-r),i.cp2=Object(l.adjust)(i.cp2,.3*r,.1*-r);var a={x:t.hip.x+5,y:t.hip.y+.1*r},s={x:t.waist.x+5,y:t.waist.y},c={x:t.armpit.x+5,y:e.y};return n.cp1=Object(l.simpleQuadratic)(c,n,.7,-4),[n,o,i,a,s,c,n]}var a=function(t){function BellyTopShading(){var t;_classCallCheck(this,BellyTopShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BellyTopShading)).call.apply(t,[this,{loc:"+torso",layer:o.a.FRONT}].concat(r)))}return _inherits(BellyTopShading,n["a"]),_createClass(BellyTopShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=.1*this.bellyProtrusion;if(0===e)return[];var r=_slicedToArray(calcTorsoShading.call(this,t),2),n=r[0],o=r[1],i=Object(l.splitCurve)(.5,n,o),a=Object(l.adjust)(i.left.p2,-e,0);return a.cp1=Object(l.simpleQuadratic)(n,a,.5,.2*Object(s.dist)(n,a)),a.cp2=null,o.cp1=Object(l.simpleQuadratic)(a,o,.3,2),o.cp2=null,[n,a,o,n]}}]),BellyTopShading}(),c=function(t){function TorsoShading(){var t;_classCallCheck(this,TorsoShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TorsoShading)).call.apply(t,[this,{loc:"+torso",layer:o.a.MIDRIFT}].concat(r)))}return _inherits(TorsoShading,n["a"]),_createClass(TorsoShading,[{key:"fill",value:function fill(){return n.b}},{key:"calcDrawPoints",value:function calcDrawPoints(t){return calcTorsoShading.call(this,t)}}]),TorsoShading}(),u=function(t){function Torso(){var t;_classCallCheck(this,Torso);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Torso)).call.apply(t,[this,{loc:"torso",forcedSide:null,reflect:!0,layer:o.a.FRONT,shadingParts:[c,a]}].concat(r)))}return _inherits(Torso,i["a"]),Torso}(),p=function(t){function TorsoHuman(){var t;_classCallCheck(this,TorsoHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TorsoHuman)).call.apply(t,[this].concat(r)))}return _inherits(TorsoHuman,u),_createClass(TorsoHuman,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){if(Object(l.fillerDefinition)(t,"armpit",{x:t.collarbone.x-.03*this.upperMuscle,y:t.collarbone.y-12-.1*this.upperMuscle}),t.hasOwnProperty("elbow")){var n=Object(l.splitCurve)(Object(l.clamp)(1.2-this.upperMuscle/40,.6,1),t.elbow.in,t.armpit);t.lat=n.right.p1,t.lat.cp1=n.right.p2.cp2,t.lat.cp2=n.right.p2.cp1}else Object(l.fillerDefinition)(t,"lat",{x:t.armpit.x+.5,y:t.armpit.y-3});var o=.1*this.bellyProtrusion,i=.1*(this.shoulderWidth-80);t.waist={x:.1*this.waistWidth+.7*i+.5*o,y:t.armpit.y-.33*this.torsoLength-.5*o,cp1:{x:t.armpit.x-.1*o,y:t.armpit.y-5-.5*o}},t.waist.cp2={x:t.waist.x-.5*o,y:t.waist.y+.01*this.waistWidth+.1*i+o},t.hip={x:.1*this.hipWidth+.5*i,y:t.waist.y-.32*this.torsoLength+.5*o,cp1:{x:t.waist.x+.5*o,y:t.waist.y-.2*this.torsoLength}},t.hip.cp2={x:t.hip.x-.03*this.buttFullness-.05*this.legFem+.1*o,y:t.hip.y+4+.015*this.buttFullness-.5*o},t.pelvis={x:0,y:t.hip.y-.05*this.torsoLength}}return t.hasOwnProperty("knee")?[t.armpit,t.lat,t.waist,t.hip,l.endPoint]:[t.armpit,t.lat,t.waist,t.hip,t.groin]}}]),TorsoHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return l});var n=r(10),o=r(2),i=r(3),a=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function GroinShading(){var t;_classCallCheck(this,GroinShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GroinShading)).call.apply(t,[this,{loc:"groin",layer:o.a.FRONT}].concat(r)))}return _inherits(GroinShading,n["a"]),_createClass(GroinShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(a.splitCurve)(.2,t.thigh.top,t.thigh.fold),r=e.left.p2,n=Object(a.extractPoint)(t.groin);n.cp1=Object(a.simpleQuadratic)(r,n,.5,2),e=Object(a.splitCurve)(.8,t.thigh.top,t.thigh.fold);var o=Object(a.reflect)(e.left.p2);o.cp1=Object(a.reflect)(e.left.p2.cp1),e.left.p2.cp2&&(o.cp2=Object(a.reflect)(e.left.p2.cp2));var i=Object(a.reflect)(t.thigh.top);return r.cp1=Object(a.simpleQuadratic)(o,r,.7,-4),[r,n,i,o,r]}}]),GroinShading}(),c=function(t){function Groin(){var t;_classCallCheck(this,Groin);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Groin)).call.apply(t,[this,{loc:"groin",forcedSide:null,reflect:!0,layer:o.a.FRONT,belowParts:["parts torso"],shadingParts:[s]}].concat(r)))}return _inherits(Groin,i["a"]),Groin}(),l=function(t){function GroinHuman(){var t;_classCallCheck(this,GroinHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GroinHuman)).call.apply(t,[this].concat(r)))}return _inherits(GroinHuman,c),_createClass(GroinHuman,[{key:"getLineWidth",value:function getLineWidth(){return 0}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.85*this.height-this.legLength;Object(a.fillerDefinition)(t,"thigh"),Object(a.fillerDefinition)(t.thigh,"top",{x:1.6,y:t.hip.y-.15*this.legLength}),t.groin={x:0,y:t.thigh.top.y-.015*n},t.groin.top={x:t.thigh.top.x+5,y:t.thigh.top.y+1.1}}return[t.groin.top,t.groin,{fillOnly:[t.neck.nape,t.groin.top]}]}}]),GroinHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var o=r(2),n=r(3),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Butt(){var t;_classCallCheck(this,Butt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Butt)).call.apply(t,[this,{loc:"butt",reflect:!0,layer:o.a.BACK}].concat(r)))}return _inherits(Butt,n["a"]),Butt}(),s=function(t){function ButtHuman(){var t;_classCallCheck(this,ButtHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ButtHuman)).call.apply(t,[this].concat(r)))}return _inherits(ButtHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(ButtHuman,[{key:"getLineWidth",value:function getLineWidth(t){return Object(i.clamp)(.5+.05*t.dim.buttFullness,.5,1.5)}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){if(t.butt={},t.butt.in={x:.5,y:t.groin.y-.01*this.buttFullness},!t.thigh.out)return[];t.butt.out={x:t.thigh.out.x-2,y:t.butt.in.y+1},t.butt.out.cp1={x:.7*t.butt.in.x+.3*t.butt.out.x-.1*this.buttFullness,y:t.butt.in.y-.35*this.buttFullness},t.butt.out.cp2={x:.3*t.butt.in.x+.7*t.butt.out.x+.12*this.buttFullness,y:t.butt.out.y-2-.2*this.buttFullness},t.butt.in.cp1={x:t.butt.out.cp2.x,y:t.butt.out.y+.2*this.buttFullness},t.butt.in.cp2={x:t.butt.in.x,y:t.butt.in.y+3+.2*this.buttFullness}}return[t.butt.in,t.butt.out,t.butt.in]}}]),ButtHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(19),o=r(11),i=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Mouth(){var t;_classCallCheck(this,Mouth);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Mouth)).call.apply(t,[this,{loc:"mouth",reflect:!0,aboveParts:["parts head"]}].concat(r)))}return _inherits(Mouth,n["a"]),Mouth}(),s=function(t){function MouthHuman(){var t;_classCallCheck(this,MouthHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MouthHuman)).call.apply(t,[this].concat(r)))}return _inherits(MouthHuman,a),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(MouthHuman,[{key:"fill",value:function fill(t,e){return Object(o.b)(e.baseLipColor,{s:-30,l:-20})}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t){return[i.breakPoint,t.lips.top,t.lips.out,t.lips.bot,t.lips.top,i.endPoint]}}]),MouthHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return c});var n=r(19),o=r(10),i=r(2),u=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function LipShading(){var t;_classCallCheck(this,LipShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LipShading)).call.apply(t,[this,{loc:"+lips",reflect:!0,layer:i.a.BELOW_HAIR,aboveParts:["faceParts lips"]}].concat(r)))}return _inherits(LipShading,o["a"]),_createClass(LipShading,[{key:"fill",value:function fill(){return"hsl(0,0%,85%)"}},{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=Object(u.clone)(t.lips.bot.top);return[u.breakPoint,e,t.lips.out.lower,t.lips.bot,e,u.endPoint]}}]),LipShading}(),s=function(t){function Lips(){var t;_classCallCheck(this,Lips);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Lips)).call.apply(t,[this,{loc:"lips",reflect:!0,aboveParts:["mouth"],shadingParts:[a]}].concat(r)))}return _inherits(Lips,n["a"]),Lips}(),c=function(t){function LipsHuman(){var t;_classCallCheck(this,LipsHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LipsHuman)).call.apply(t,[this].concat(r)))}return _inherits(LipsHuman,s),_createClass(LipsHuman,[{key:"fill",value:function fill(t,e){return e.baseLipColor}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=.1*this.faceLength,o=40-this.faceFem,i=.007*e.lipParting,a=.015*-e.lipParting,s=t.lips={};s.center={x:-.1,y:t.skull.y-.78*n+.1*e.lipHeight+.018*this.faceFem},s.top={x:s.center.x,y:s.center.y+Object(u.clamp)(.015*this.lipSize+.005*this.faceFem+.01*e.lipTopSize,0,3)+i},s.tip={x:Object(u.clamp)(.7-.003*this.faceFem+.01*e.lipCupidsBow,0,5)*this.lipSize/20,y:s.top.y+.005*e.lipTopSize+.003*this.faceFem+.01*this.lipSize},s.tip.cp1=Object(u.simpleQuadratic)(s.top,s.tip,.5,.1+.001*e.lipTopCurve),s.out={x:1+.08*this.lipSize+.005*e.lipWidth+.01*o,y:s.center.y+.02*e.lipCurl},s.out.cp1={x:.5*s.tip.x+.5*s.out.x+.002*e.lipTopCurve,y:s.tip.y},s.out.cp2={x:.3*s.tip.x+.7*s.out.x,y:.5*s.tip.y+.5*s.out.y+.01*e.lipTopCurve},s.bot={x:0,y:s.center.y-.3-.02*this.lipSize-.008*this.faceFem-.004*e.lipBotSize+a},s.bot.cp1=Object(u.simpleQuadratic)(s.out,s.bot,.5,.02*this.lipSize+.003*this.faceFem+.003*e.lipBotSize-.5*a),s.bot.cp1.y-=.01*e.lipCurl;var c=-.1-.006*e.lipBias;s.bot.top={x:s.center.x,y:s.center.y+a+c},s.top.bot={x:s.center.x,y:s.center.y+1.2*i+c},s.out.lower=Object(u.extractPoint)(s.out),s.out.lower.cp1=Object(u.simpleQuadratic)(s.bot.top,s.out.lower,.3,.02*e.lipBias-.005*e.lipParting);var l=Object(u.splitCurve)(.6+e.lipParting/400,s.bot.top,s.out.lower);s.out.in=l.left.p2,s.top.bot.cp1=Object(u.simpleQuadratic)(s.out.in,s.top.bot,.7,.005*-e.lipParting)}return[u.breakPoint,t.lips.top,t.lips.tip,t.lips.out,t.lips.bot,t.lips.bot.top,t.lips.out.in,t.lips.top.bot,t.lips.top,u.endPoint]}}]),LipsHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return l});var n=r(19),o=r(2),i=r(10),c=r(0);function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function Nose(){var t;_classCallCheck(this,Nose);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Nose)).call.apply(t,[this,{loc:"nose"}].concat(r)))}return _inherits(Nose,n["a"]),Nose}(),s=function(t){function NoseHumanShading(){var t;_classCallCheck(this,NoseHumanShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NoseHumanShading)).call.apply(t,[this,{loc:"+nose",layer:o.a.BELOW_HAIR}].concat(r)))}return _inherits(NoseHumanShading,i["a"]),_createClass(NoseHumanShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e){var r=t.nose,n=r.top,o=r.bot;o.cp1={x:n.x,y:n.y-.05*e.noseLength},o.cp2={x:o.x+.6+.1*e.noseRoundness,y:o.y+.02*e.noseLength};var i=Object(c.adjust)(r.out,0,0);i.cp1=Object(c.simpleQuadratic)(o,i,.5,.1*e.nostrilSize);var a=Object(c.clamp)(.01*e.nostrilSize-.02*e.noseRidgeHeight,0,.3),s={x:o.x*a+i.x*(1-a),y:o.y+1+.05*e.nostrilSize};return s.cp1={x:i.x+.02*e.nostrilSize,y:i.y+.05*e.nostrilSize},s.cp2={x:s.x+.6,y:s.y-.3},n.cp1=Object(c.continueCurve)(i,s,.1*e.nostrilSize),n.cp2={x:Object(c.clamp)(n.x+.1+.06*e.noseWidth+.1*e.noseRidgeHeight-.1*e.noseRoundness,0,100),y:n.y+.2},[n,o,i,s,n]}}]),NoseHumanShading}(),l=function(t){function NoseHuman(){var t;_classCallCheck(this,NoseHuman);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NoseHuman)).call.apply(t,[this,{shadingParts:[s]}].concat(r)))}return _inherits(NoseHuman,a),_createClass(NoseHuman,[{key:"fill",value:function fill(t,e){return e.baseStroke}},{key:"clipFill",value:function clipFill(){}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(r){var n=t.nose={},o=.1*this.faceLength;n.center={x:0,y:t.skull.y-.65*o+.1*e.noseHeight+.02*this.faceFem},n.in={x:n.center.x+.037*e.noseWidth-.007*this.faceFem+.01*e.nostrilSize,y:n.center.y-.3},n.out={x:n.center.x+.043*e.noseWidth-.017*this.faceFem+.25+.08*e.nostrilSize,y:n.center.y+.3};var i=Object(c.clamp)(.5-.005*this.faceFem,0,.4);n.out.cp1=Object(c.simpleQuadratic)(n.in,n.out,.5,i),n.in.cp1=Object(c.simpleQuadratic)(n.out,n.in,.5,i),n.left={},n.left.in=Object(c.reflect)(n.in),n.left.out=Object(c.reflect)(n.out),n.left.in.cp1=Object(c.reflect)(n.in.cp1),n.left.out.cp1=Object(c.reflect)(n.out.cp1),n.top={x:n.center.x+.01*e.noseWidth+Object(c.clamp)(.01*e.noseRoundness,0,5),y:n.center.y+(.1*e.noseLength-.1*e.noseRoundness)*o*.045},n.bot={x:n.top.x,y:n.center.y+.3}}return[c.breakPoint,t.nose.in,t.nose.out,t.nose.in,c.breakPoint,t.nose.left.in,t.nose.left.out,t.nose.left.in,c.endPoint]}}]),NoseHuman}()},function(t,e,r){"use strict";r.d(e,"a",function(){return n});var o=r(0),n={create:function create(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:1,r=Object(o.clone)(t);for(var n in r.Mods)r.Mods.hasOwnProperty(n)&&(r.Mods[n]*=e);return r},neutral:Object.freeze({Mods:{}}),suspicious:Object.freeze({Mods:{eyeBotSize:-7,browHeight:-2,lipBotSize:-20,lipTopSize:-8,lipWidth:-25}}),angry:Object.freeze({Mods:{browTilt:7,browCloseness:-3,browHeight:-4,eyeBotSize:1,eyeTopSize:1,lipCurl:-6}}),sad:Object.freeze({Mods:{browTilt:-7,eyeBotSize:2,eyeTopSize:-1,lipCurl:-5,eyeTilt:-1}}),surprised:Object.freeze({Mods:{browTilt:-5,eyeBotSize:2,eyeTopSize:1,lipParting:15,browHeight:5}}),mischievous:Object.freeze({Mods:{lipCurl:10,eyeBotSize:-4,eyeTopSize:-1}}),happy:Object.freeze({Mods:{lipCurl:12,eyeBotSize:-2}}),sleepy:Object.freeze({Mods:{eyeTopSize:-4,eyelidHeight:-1}}),aroused:Object.freeze({Mods:{eyelidHeight:-2.5,lipParting:13}}),bliss:Object.freeze({Mods:{irisHeight:2,lipParting:20,eyelidHeight:-2}})}},function(t,e,r){"use strict";r.d(e,"c",function(){return a}),r.d(e,"b",function(){return s}),r.d(e,"f",function(){return calcJacket}),r.d(e,"e",function(){return c}),r.d(e,"a",function(){return l}),r.d(e,"d",function(){return u});var f=r(1),o=r(3),n=r(10),i=r(2),h=r(9),v=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function JacketBaseShading(){var t;_classCallCheck(this,JacketBaseShading);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(JacketBaseShading)).call.apply(t,[this,{loc:"+torso",layer:i.a.GENITALS,forcedSide:o.b.LEFT}].concat(r)))}return _inherits(JacketBaseShading,n["a"]),_createClass(JacketBaseShading,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=calcJacket.call(this,t),r=e.top,n=e.mid,o=e.bot,i=1-this.chestCoverage,a=Object(v.extractPoint)(n);return a.cp1=o.cp1,a=Object(v.adjust)(a,3*-i,3*i),r.cp1=Object(v.adjust)(n.cp2,0*-i,-i),r.cp2=Object(v.adjust)(n.cp1,6*-i,2*-i),[r,n,o,a,a,r]}}]),JacketBaseShading}(),s=function(t){function JacketBasePart(){var t;_classCallCheck(this,JacketBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(JacketBasePart)).call.apply(t,[this,{layer:i.a.GENITALS,loc:"torso",reflect:!0,aboveParts:["parts neck","parts chest","decorativeParts chest"],belowParts:["head"],shadingParts:[a]}].concat(r)))}return _inherits(JacketBasePart,f["c"]),_createClass(JacketBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcJacket.call(this,t),n=r.collarbone,o=r.top,i=r.mid,a=r.bot,s=r.outBot,c=r.outMid,l=r.breastBot,u=r.breastTip,p=r.outTop;f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,n,o,i,a,s,c,l,u,p),e.fill(),e.stroke(),Object(h.j)(e,{stroke:this.liningPattern,fill:v.none},t),e.lineWidth=this.liningWidth,e.clip(),e.beginPath(),Object(v.drawPoints)(e,o,i,a,s),e.stroke()}}]),JacketBasePart}();function calcJacket(t){var e,r,n,o,i,a=Object(v.splitCurve)(.2,t.trapezius,t.collarbone),s=a.left.p2,c=Object(v.extractPoint)(t.collarbone),l=1-this.chestCoverage,u={x:(a=Object(v.splitCurve)(this.stomachCoverage,t.waist,t.hip)).left.p2.x*(.2+Object(v.clamp)(l,0,.8)),y:a.left.p2.y},p=Object(v.adjust)(a.left.p2,1,-1),f=t.breast;if(f){(e={x:t.waist.x*Object(v.clamp)(.8*l,0,1),y:.5*u.y+.5*f.bot.y}).cp1={x:f.center.x*Object(v.clamp)(.6-.7*this.chestCoverage,0,1)-2*l,y:f.top.y},e.cp2={x:f.tip.x*Object(v.clamp)(1.2-.85*this.chestCoverage,0,1),y:f.tip.y},u.cp1=Object(v.continueCurve)(s,e,Object(v.clamp)(.2+.5*l,0,1)),n=Object(v.extractPoint)(f.top),o=Object(v.adjust)(Object(v.extractPoint)(f.tip),.3,0);var h,y,b=f.tip.x-t.waist.x,d=r=(a=Object(v.splitCurve)(Object(v.clamp)(.06*b-.2,0,this.stomachCoverage),t.waist,p)).left.p2;d.x+=.1,r.cp1=a.right.p2.cp2,r.cp2=a.right.p2.cp1,r=Object(v.adjust)(r,1,0),2<b?(a=Object(v.splitCurve)(Object(v.clamp)(.065*b,0,1),f.tip,f.bot),(i=Object(v.adjust)(a.left.p2,.05*b,.05*-b-1)).cp1=Object(v.continueCurve)(p,r,1),o.cp1=a.left.p2.cp2,o.cp2=a.left.p2.cp1,o.cp2.y-=Object(v.clamp)(3-.2*b,0,5)):i=Object(v.extractPoint)(f.bot),n.cp1=f.tip.cp2,n.cp2=f.tip.cp1,r=Object(v.adjust)(r,(d.x-r.x)*this.cling,0),y=i.y>t.waist.y?(h=t.lat,t.waist):(h=t.waist,t.hip);var g=Object(v.interpolateCurve)(h,y,{x:null,y:i.y});a=Object(v.splitCurve)(g.t,h,y),g.cp1=a.right.p2.cp2,g.cp2=a.right.p2.cp1,i=Object(v.transformCurve)(d,i,d,g,this.cling),y=o.y>t.waist.y?(h=t.lat,t.waist):(h=t.waist,t.hip);var P=(Object(v.interpolateCurve)(h,y,{x:null,y:o.y}).x-o.x)*this.cling;o=Object(v.adjust)(o,P,0),n.cp1+=P,n.cp2+=P}else(e={x:.5*t.waist.x,y:t.waist.y}).cp1=Object(v.simpleQuadratic)(s,e,.5,3),u.cp1=Object(v.simpleQuadratic)(e,u,.5,-5),(r=Object(v.extractPoint)(t.waist)).cp1=t.hip.cp2,r.cp2=t.hip.cp1,r=Object(v.adjust)(r,.05*r.x,0),n=Object(v.extractPoint)(t.armpit);return p.cp1=null,p.cp2=null,{collarbone:c,top:s,mid:e,bot:u,outBot:p,outMid:r,breastBot:i,breastTip:o,outTop:n}}var c=function(t){function MediumLooseSleevePart(){var t;_classCallCheck(this,MediumLooseSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MediumLooseSleevePart)).call.apply(t,[this,{layer:i.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]}].concat(r)))}return _inherits(MediumLooseSleevePart,f["c"]),_createClass(MediumLooseSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r,n=Object(v.extractPoint)(t.collarbone);n.x-=.3,t.deltoids?(r=Object(v.adjust)(t.deltoids,1,0)).x+=2:r=Object(v.adjust)(t.shoulder,1,0),r.x+=1;var o={x:.5*t.armpit.x+.5*t.elbow.in.x,y:t.elbow.in.y},i={x:t.elbow.out.x+4,y:o.y+2};o.cp1={x:.7*i.x+.3*o.x,y:i.y},o.cp2={x:.3*i.x+.7*o.x,y:o.y-1};var a=calcJacket.call(this,t).outTop;a.x-=.3,f.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(v.drawPoints)(e,n,r,i,o,a),e.fill(),e.stroke(),Object(h.j)(e,{stroke:this.liningPattern,fill:v.none},t),e.lineWidth=this.liningWidth,e.clip(),e.beginPath(),Object(v.drawPoints)(e,i,o),e.stroke()}}]),MediumLooseSleevePart}(),l=function(t){function Jacket(){var t;_classCallCheck(this,Jacket);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Jacket)).call.apply(t,[this,{clothingLayer:f.a.Layer.MID,stomachCoverage:.8,chestCoverage:.5,sleeveLength:.8,liningWidth:1,liningPattern:"#000",thickness:.8,cling:.4}].concat(r)))}return _inherits(Jacket,f["b"]),Jacket}(),u=function(t){function LooseJacket(){var t;_classCallCheck(this,LooseJacket);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LooseJacket)).call.apply(t,[this,{stomachCoverage:.7,sleeveLength:1}].concat(r)))}return _inherits(LooseJacket,l),_createClass(LooseJacket,[{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:o.b.LEFT,Part:c},{side:o.b.RIGHT,Part:c}]}}]),LooseJacket}()},function(t,e,r){"use strict";r.d(e,"b",function(){return s}),r.d(e,"f",function(){return calcCorset}),r.d(e,"c",function(){return c}),r.d(e,"e",function(){return l}),r.d(e,"a",function(){return u}),r.d(e,"d",function(){return p});var y=r(1),n=(r(3),r(12)),o=r(2),b=r(0),d=r(5),i=r(16),a=r(17);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function CorsetBreastPart(){var t;_classCallCheck(this,CorsetBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CorsetBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(CorsetBreastPart,y["c"]),_createClass(CorsetBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(y.a.simpleStrokeFill(e,t,this),!Object(n.b)(t,e,this)){var r=Object(a.j)(t);r.out.cp1=Object(b.simpleQuadratic)(r.top,r.out,.4,1),r.top.cp1=Object(b.simpleQuadratic)(t.breast.cleavage,r.top,.6,2),r.bot=Object(b.adjust)(t.breast.bot,0,-.6),r.inner=Object(b.adjust)(t.breast.in,-.9,-.5),r.cleavage=Object(b.adjust)(t.breast.cleavage,-.6,0),e.beginPath(),Object(b.drawPoints)(e,r.top,r.out,r.tip,r.bot,r.inner,r.cleavage,r.top),e.fill(),e.stroke()}}}]),CorsetBreastPart}();function calcCorset(t){var e,r,n,o,i,a=t.waist;t.breast?(r=Object(d.h)(t.breast.cleavage,!1,t.armpit,t.waist)[0],e={x:-.1,y:t.breast.cleavage.y}):(e={x:-.2,y:(r=Object(b.clone)(t.armpit)).y-4},r.cp1={x:.5*r.x+.5*r.x,y:e.y});0<=this.waistCoverage?o=Object(b.splitCurve)(1-this.waistCoverage,t.waist,t.hip).left.p2:(n=t.hip,o=Object(b.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out).left.p2);return(i={x:-.2,y:o.y-7}).cp2={x:.5*i.x+.5*o.x,y:i.y},i.cp1={x:i.cp2.x+12,y:i.cp2.y+9},{topIn:e,topOut:r,waist:a,mid:n,botOut:o,botIn:i}}var c=function(t){function CorsetPart(){var t;_classCallCheck(this,CorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CorsetPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(CorsetPart,y["c"]),_createClass(CorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){y.a.simpleStrokeFill(e,t,this);var r=calcCorset.call(this,t),n=r.topIn,o=r.topOut,i=r.waist,a=r.mid,s=r.botOut,c=r.botIn;if(e.beginPath(),Object(b.drawPoints)(e,n,o,i,a,s,c),e.fill(),e.stroke(),this.lacing&&0<this.knots){var l=Object(b.adjust)(n,-3,-1),u=Object(b.adjust)(c,-3,1),p=Object(b.adjust)(n,3,-1),f=Object(b.adjust)(c,3,1),h=Object(d.e)(u,l,f,p,this.knots);e.strokeStyle=this.highlight,e.beginPath(),b.drawPoints.apply(void 0,[e].concat(_toConsumableArray(h.inner),[b.breakPoint],_toConsumableArray(h.outer))),e.stroke()}}}]),CorsetPart}(),l=function(t){function HalfCorsetPart(){var t;_classCallCheck(this,HalfCorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalfCorsetPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(HalfCorsetPart,y["c"]),_createClass(HalfCorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){y.a.simpleStrokeFill(e,t,this);var r=Object(b.splitCurve)(1-this.topCoverage,t.armpit,t.waist),n=Object(b.extractPoint)(r.left.p2),o=r.right.p1,i=this.waistCoverage<0?t.hip:void 0,a=(r=this.waistCoverage<0?Object(b.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out):Object(b.splitCurve)(1-this.waistCoverage,t.waist,t.hip)).left.p2,s={x:-.2,y:a.y-7};s.cp2={x:.5*s.x+.5*a.x,y:s.y},s.cp1={x:s.cp2.x+12,y:s.cp2.y+9};var c={x:-.2,y:n.y-5};if(n.cp1={x:.5*n.x+.5*c.x,y:c.y},e.beginPath(),Object(b.drawPoints)(e,c,n,o,i,a,s),e.fill(),e.stroke(),this.lacing&&0<this.knots){var l=Object(b.adjust)(c,-3,-1),u=Object(b.adjust)(s,-3,1),p=Object(b.adjust)(c,3,-1),f=Object(b.adjust)(s,3,1),h=Object(d.e)(u,l,f,p,this.knots);e.strokeStyle=this.highlight,e.beginPath(),b.drawPoints.apply(void 0,[e].concat(_toConsumableArray(h.inner),[b.breakPoint],_toConsumableArray(h.outer))),e.stroke()}}}]),HalfCorsetPart}(),u=function(t){function Corset(){var t;_classCallCheck(this,Corset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Corset)).call.apply(t,[this,{clothingLayer:y.a.Layer.OUTER,waistCoverage:.1,thickness:1,lacing:!0,knots:6,highlight:"hsla(0, 0%, 52%, 1)"}].concat(r)))}return _inherits(Corset,i["j"]),_createClass(Corset,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:null,Part:c}]}}]),Corset}(),p=function(t){function HalfCorset(){var t;_classCallCheck(this,HalfCorset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(HalfCorset)).call.apply(t,[this,{clothingLayer:y.a.Layer.OUTER,topCoverage:.6,waistCoverage:.1,thickness:1,knots:6,lacing:!0,highlight:"hsla(0, 0%, 52%, 1)"}].concat(r)))}return _inherits(HalfCorset,i["j"]),_createClass(HalfCorset,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:l}]}}]),HalfCorset}()},function(t,e,r){"use strict";r.d(e,"d",function(){return i}),r.d(e,"b",function(){return a}),r.d(e,"a",function(){return u}),r.d(e,"c",function(){return p});var s=r(1),o=r(2),c=r(0),n=(r(6),r(3)),l=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function ThumbPart(){var t;_classCallCheck(this,ThumbPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ThumbPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+hand",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{}].concat(r)))}return _inherits(ThumbPart,s["c"]),_createClass(ThumbPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){s.a.simpleStrokeFill(e,t,this);var r,n=t.thumb.tip,o=t.thumb.out;r=da.splitCurve(-.08,n,o);var i=Object(c.extractPoint)(r.left.p2);r=da.splitCurve(.15,n,o);var a=Object(c.extractPoint)(r.left.p2);a.x+=.2,i.cp1=Object(l.k)(a,i,.7,.8),a.cp1=Object(l.k)(a,i,.7,-1),e.beginPath(),Object(c.drawPoints)(e,a,i,a),e.fill()}}]),ThumbPart}(),a=function(t){function FingerPart(){var t;_classCallCheck(this,FingerPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FingerPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+hand",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{}].concat(r)))}return _inherits(FingerPart,s["c"]),_createClass(FingerPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){s.a.simpleStrokeFill(e,t,this);var r,n=t.hand.tip,o=t.hand.knuckle;r=Object(c.splitCurve)(-.08,n,o);var i=Object(c.extractPoint)(r.left.p2);r=Object(c.splitCurve)(.15,n,o);var a=Object(c.extractPoint)(r.left.p2);a.x-=.2,i.x-=.6,i.cp1=Object(l.k)(a,i,.7,.8),a.cp1=Object(l.k)(a,i,.7,-1),e.beginPath(),Object(c.drawPoints)(e,a,i,a),e.fill()}}]),FingerPart}(),u=function(t){function BodyMakeup(){var t;_classCallCheck(this,BodyMakeup);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BodyMakeup)).call.apply(t,[this,{clothingLayer:s.a.Layer.BASE}].concat(r)))}return _inherits(BodyMakeup,s["b"]),_createClass(BodyMakeup,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}}]),BodyMakeup}(),p=function(t){function Nails(){var t;_classCallCheck(this,Nails);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Nails)).call.apply(t,[this,{clothingLayer:s.a.Layer.BASE}].concat(r)))}return _inherits(Nails,u),_createClass(Nails,[{key:"fill",value:function fill(){return"#b91100"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.LEFT,Part:i},{side:n.b.RIGHT,Part:a},{side:n.b.RIGHT,Part:i}]}}]),Nails}()},function(t,e,r){t.exports=r(110)},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(24),o=r(2),i=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function FacialHair(){var t;_classCallCheck(this,FacialHair);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(FacialHair)).call.apply(t,[this,{loc:"+head",layer:o.a.BELOW_HAIR,aboveParts:["parts head"]}].concat(r)))}return _inherits(FacialHair,n["a"]),_createClass(FacialHair,[{key:"stroke",value:function stroke(){return i.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return console.log(this),Object(i.adjustColor)(e.hairFill,{l:-5,s:-5})}}]),FacialHair}(),s=function(t){function Mustache(){var t;_classCallCheck(this,Mustache);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Mustache)).call.apply(t,[this].concat(r)))}return _inherits(Mustache,a),_createClass(Mustache,[{key:"stroke",value:function stroke(){return i.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return console.log(this),Object(i.adjustColor)(e.hairFill,{l:-5,s:-5})}}]),Mustache}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(24),o=r(2),i=r(0),a=r(40);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function LegFur(){var t;!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,LegFur);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LegFur)).call.apply(t,[this,a.a.brownFur,{fill:i.none,loc:"+leg",layer:o.a.FRONT,aboveParts:["parts leg"]}].concat(r)))}return function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}(LegFur,n["a"]),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(LegFur,[{key:"calcDrawPoints",value:function calcDrawPoints(t){var e=[];return e.extend(Object(i.drawCurl)(Object(i.adjust)(t.ankle.in,-1.5,0),5,10,.3,.7)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.ankle.inbot,4,-1),6,8,.55,0,.7)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.knee.in,-1.3,1),4,9,.4,.6,.6)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.calf.out,.7,-1),5,12,.7,-.5,-.35)),e.extend(Object(i.drawCurl)(Object(i.adjust)(t.thigh.out,.2,-3),6,10,.7,-.5,-.35)),e}}]),LegFur}()},function(t,e,r){"use strict";r.d(e,"a",function(){return s});var n=r(24),o=r(2),i=r(0),a=r(11);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function BeautyMark(){var t;!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,BeautyMark);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BeautyMark)).call.apply(t,[this,{offsetX:-10,offsetY:10,radius:.3,loc:"head",layer:o.a.BELOW_HAIR,aboveParts:["parts head"]}].concat(r)))}return function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}(BeautyMark,n["a"]),function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(BeautyMark,[{key:"stroke",value:function stroke(){return i.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return Object(a.b)(e.baseStroke,{s:-30,l:-30})}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r,n){var o=Object(i.extractPoint)(t.lips.center);return o.x+=n.offsetX,o.y+=n.offsetY,[i.breakPoint].concat(_toConsumableArray(Object(i.drawCircle)(o,n.radius)))}}]),BeautyMark}()},function(t,e,r){"use strict";r.d(e,"b",function(){return c}),r.d(e,"a",function(){return l});var n=r(24),o=r(2),i=r(0),a=r(11);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function Horns(){var t;_classCallCheck(this,Horns);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Horns)).call.apply(t,[this,{loc:"horns",layer:o.a.EFFECTS,reflect:!0}].concat(r)))}return _inherits(Horns,n["a"]),_createClass(Horns,[{key:"stroke",value:function stroke(){return i.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return Object(a.b)(e.baseFill,{l:-30,s:-30})}}]),Horns}(),c=function(t){function StraightHorns(){var t;_classCallCheck(this,StraightHorns);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StraightHorns)).call.apply(t,[this].concat(r)))}return _inherits(StraightHorns,s),_createClass(StraightHorns,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.hornyness<.01)return[];var n=t.horns={},o=(t.skull.side.x-t.skull.x)/2+t.skull.x+.4,i=(t.skull.side.y-t.skull.y)/2+t.skull.y+.4;return n.out={x:o+2.5*this.hornyness*.4,y:i-1.5*this.hornyness*.4},n.in={x:o-2.5*this.hornyness*.4,y:i+2.5*this.hornyness*.4},n.top={x:o+4.2*this.hornyness,y:i+4.2*this.hornyness*2},[t.horns.in,t.horns.top,t.horns.out]}}]),StraightHorns}(),l=function(t){function CurvedHorns(){var t;_classCallCheck(this,CurvedHorns);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CurvedHorns)).call.apply(t,[this].concat(r)))}return _inherits(CurvedHorns,s),_createClass(CurvedHorns,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.hornyness<.01)return[];var n=t.horns={},o=(t.skull.side.x-t.skull.x)/2+t.skull.x+.4,i=(t.skull.side.y-t.skull.y)/2+t.skull.y+.4;return n.out={x:o+2*this.hornyness,y:i-1.6*this.hornyness},n.in={x:o-1,y:i+1},n.top={x:o+10*this.hornyness,y:i+9*this.hornyness},n.top.cp1={x:o+2*this.hornyness,y:i+9*this.hornyness},n.top.cp2={x:o+8*this.hornyness,y:i+2*this.hornyness},n.out.cp1={x:o+11*this.hornyness,y:i+0*this.hornyness},n.out.cp2={x:o+4*this.hornyness,y:i+7*this.hornyness},[t.horns.in,t.horns.top,t.horns.out,t.horns.in]}}]),CurvedHorns}()},function(t,e,r){"use strict";r.d(e,"b",function(){return a}),r.d(e,"a",function(){return l});var n=r(24),s=(r(2),r(0)),o=r(11),c=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Tail(){var t;_classCallCheck(this,Tail);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Tail)).call.apply(t,[this,{loc:"tail",layer:da.Layer.BASE,reflect:!1}].concat(r)))}return _inherits(Tail,n["a"]),_createClass(Tail,[{key:"stroke",value:function stroke(){return s.none}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(){}}]),Tail}(),a=function(t){function DemonicTail(){var t;_classCallCheck(this,DemonicTail);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DemonicTail)).call.apply(t,[this].concat(r)))}return _inherits(DemonicTail,i),_createClass(DemonicTail,[{key:"fill",value:function fill(t,e){return Object(o.b)(e.baseLipColor,{l:-10,s:-10})}},{key:"stroke",value:function stroke(t,e){return Object(o.b)(e.baseLipColor,{l:-10,s:-10})}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.tail<.01)return[];var n=t.tail={};n.topRoot=Object(s.adjust)(t.pelvis,0,5),n.botRoot=Object(s.adjust)(t.pelvis,0,-1),console.log(n.topRoot),console.log(n.botRoot);var o={x:60,y:n.topRoot.y+40},i=Object(s.splitCurve)(.5,o,n.topRoot);console.log(i),i=i.left.p2,console.log(i),o.cp1={x:i.x+40,y:i.y-70},o.cp2={x:i.x-15,y:i.y+45},console.log(o);var a=Object(s.splitCurve)(this.tail,n.topRoot,o);return console.log(a),n.tip=a.left.p2,n.botRoot.cp1={x:n.tip.cp2.x+1.99,y:n.tip.cp2.y-1.99},n.botRoot.cp2={x:n.tip.cp1.x+2.4,y:n.tip.cp1.y-2.4},console.log(t.tail.tip),[t.tail.topRoot,t.tail.tip,t.tail.botRoot]}}]),DemonicTail}(),l=function(t){function CatTail(){var t;_classCallCheck(this,CatTail);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CatTail)).call.apply(t,[this].concat(r)))}return _inherits(CatTail,i),_createClass(CatTail,[{key:"stroke",value:function stroke(t,e){return Object(o.b)(e.hairFill,{l:-10,s:-10})}},{key:"fill",value:function fill(t,e){return s.none}},{key:"getLineWidth",value:function getLineWidth(t){return 6}},{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.tail<.01)return[];var n=t.tail={};n.root=Object(s.adjust)(t.pelvis,0,2);var o={x:-38,y:n.root.y-80},i=Object(c.k)(n.root,o,1,-20);i.cp1=o,i.cp2=Object(c.k)(i,o,.5,-20);var a=Object(s.splitCurve)(this.tail,n.root,i);return n.tip=a.left.p2,console.log(t.tail.tip),[t.tail.root,t.tail.tip]}}]),CatTail}()},function(t,e,r){"use strict";r.d(e,"a",function(){return a});var n=r(24),o=(r(2),r(0),r(11));function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Wings(){var t;_classCallCheck(this,Wings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Wings)).call.apply(t,[this,{loc:"+torso",layer:da.Layer.BASE,reflect:!1}].concat(r)))}return _inherits(Wings,n["a"]),_createClass(Wings,[{key:"stroke",value:function stroke(t,e){return Object(o.b)(e.hairFill,{l:-25,s:-25})}},{key:"clipFill",value:function clipFill(){}},{key:"fill",value:function fill(t,e){return Object(o.b)(e.hairFill,{l:-10,s:-10})}}]),Wings}(),a=function(t){function DemonicWings(){var t;_classCallCheck(this,DemonicWings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DemonicWings)).call.apply(t,[this].concat(r)))}return _inherits(DemonicWings,i),_createClass(DemonicWings,[{key:"calcDrawPoints",value:function calcDrawPoints(t,e,r){if(this.wings<.01)return[];var n={x:0,y:t.collarbone.y},o={x:n.x+50*this.wings,y:n.y+60*this.wings};o.cp1={x:n.x+40*this.wings,y:n.y+5*this.wings},o.cp2={x:o.x-0*this.wings,y:o.y-30*this.wings};var i={x:0,y:t.pelvis.y+20*this.wings},a={x:i.x+60*this.wings,y:i.y-80*this.wings};return a.cp1={x:o.x+30*this.wings,y:o.y-40*this.wings},a.cp2={x:a.x+25*this.wings,y:a.y+44*this.wings},i.cp1={x:a.x+0*this.wings,y:a.y+45*this.wings},i.cp2={x:i.x+40*this.wings,y:i.y+20*this.wings},[n,o,a,i]}}]),DemonicWings}()},function(t,e,r){"use strict";r.d(e,"a",function(){return C});var a=r(30),n=r(32),c=r(35),l=r(3),o=r(27),i=r(37),s=r(45),u=r(14),p=r(10),f=r(0),h=r(8),y=r(42),b=r(76),d=r(1),g=r(17),P=r(44),v=r(43),_=r(6);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function defaultBaseDimensions(t){return Object(a.d)(n.a[t],n.b[t])()}function defaultParts(t,e){for(var r=[],n=c.a[e][t],o=0;o<n.length;++o){var i=n[o],a=i.side,s=i.part;r.push(l.b.create(s,{side:a}))}return r}var C=function(){function Player(t){var r=this;if(function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Player),!s.b)throw new Error("trying to create Player without having loaded first! (call load() before)");Object.assign(this,Player.defaultStats(),{skeleton:"human",parts:[],faceParts:[],decorativeParts:[],hairParts:[],clothingParts:[],inv:[],Mods:{},vitals:{},traits:[],_expression:b.a.neutral,hairFill:null,hairStroke:null,browFill:null,lashFill:null});var e=["number","string","function"];for(var n in t){var o=_typeof(t[n]);t.hasOwnProperty(n)&&(e.includes(o)||Object(_.isPattern)(t[n]))&&(this[n]=t[n])}this.parts=defaultParts("defaultParts",this.skeleton),function addSexParts(o){var t,e=c.a[o.skeleton];o.isFemale()&&(t=e.femaleParts),o.isMale()&&(t=e.maleParts),t.forEach(function(t){var e=t.partGroup,r=t.side,n=t.part;o.attachPart(l.b.create(n,{side:r}),o[e])})}(this),this.decorativeParts=defaultParts("defaultDecorativeParts",this.skeleton),this.faceParts=defaultParts("defaultFaceParts",this.skeleton),this.shadingParts=[],this.parts.forEach(function(t){t.shadingParts&&t.shadingParts.forEach(function(t){var e=Object(l.c)(t);r.getPartInLocation(e)&&r.attachPart(l.b.create(t),r.shadingParts)})}),this.faceParts.forEach(function(t){t.shadingParts&&t.shadingParts.forEach(function(t){var e=Object(l.c)(t);r.getPartInLocation(e,r.faceParts)&&r.attachPart(l.b.create(t),r.shadingParts)})}),this.clothingParts=[],this.clothes=[],this.items=[],this.tattoos=[],Player.defaultClothes().forEach(function(t){r.wearClothing(t)}),t?(this.basedim=Object.assign({},defaultBaseDimensions(this.skeleton),t.basedim),this.Mods=Object.assign({},Player.defaultMods(),t.Mods),this.vitals=Object.assign({},Player.defaultVitals(),t.vitals),t.parts&&t.parts.forEach(function(t){r.attachPart(t)}),t.decorativeParts&&t.decorativeParts.forEach(function(t){r.attachPart(t,r.decorativeParts)}),t.faceParts&&t.faceParts.forEach(function(t){r.attachPart(t,r.faceParts)}),t.clothes&&(this.removeAllClothing(),t.clothes.forEach(function(t){r.wearClothing(t)})),t.items&&t.items.forEach(function(t){r.wieldItem(t)}),t.tattoos&&t.tattoos.forEach(function(t){r.addTattoo(t)})):(this.basedim=defaultBaseDimensions(this.skeleton),this.Mods=Player.defaultMods(),this.vitals=Player.defaultVitals()),this.calcDimensions()}return _createClass(Player,null,[{key:"defaultStats",value:function defaultStats(){return Object(a.d)(o.b,o.a)()}},{key:"defaultMods",value:function defaultMods(){return Object(a.d)(i.c,i.b)()}},{key:"defaultVitals",value:function defaultVitals(){return{}}},{key:"defaultClothes",value:function defaultClothes(){return[d.a.create(g.a),d.a.create(g.g)]}}]),_createClass(Player,[{key:"toString",value:function toString(){return this.name}},{key:"clampStats",value:function clampStats(){for(var t in o.b)!1!==o.b.hasOwnProperty(t)&&(this[t]=Object(f.clamp)(this[t],o.b[t].low,o.b[t].high))}},{key:"get",value:function get(t){return this[t]+this._clampedMods[t]}},{key:"getDim",value:function getDim(t){return this.basedim[t]+this._clampedMods[t]}},{key:"getMod",value:function getMod(t){return this._clampedMods[t]}},{key:"getDimDesc",value:function getDimDesc(t){return n.a[this.skeleton][t]}},{key:"calcDimensions",value:function calcDimensions(){for(var t in this._clampedMods={},this.Mods)i.c.hasOwnProperty(t)&&(this._clampedMods[t]=Object(f.clamp)(this.Mods[t],i.c[t].low,i.c[t].high));this.dim={};var e=n.a[this.skeleton];for(var r in e)!1!==e.hasOwnProperty(r)&&(e[r].hasOwnProperty("calc")?this.dim[r]=e[r].calc.call(this):this.dim[r]=this.getDim(r),this.dim[r]=Object(f.clamp)(this.dim[r],e[r].low,e[r].high));this.dim.torsoLength=.85*this.dim.height-this.dim.legLength,this.replaceHair(P.a[Math.round(this.dim.hairStyle)])}},{key:"attachPart",value:function attachPart(t){var r=this,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts;t instanceof p.a&&(e=this.shadingParts);for(var n=null,o=0;o<e.length;++o)if(Object(l.g)(t,e[o])){var i=e[o];e[o]=t,n=i;break}return null===n&&e.push(t),t.shadingParts&&t.shadingParts.forEach(function(t){var e=Object(l.c)(t);(r.getPartInLocation(e)||r.getPartInLocation(e,r.faceParts)||r.getPartInLocation(e,r.hairParts))&&r.attachPart(l.b.create(t),r.shadingParts)}),n}},{key:"getPartInLocation",value:function getPartInLocation(t){for(var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=Object(h.e)(t),o=0;o<e.length;++o)if(Object(h.e)(e[o].loc)===n){if(0<r){--r;continue}return e[o]}return null}},{key:"removeSpecificPart",value:function removeSpecificPart(t){for(var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=0;n<e.length;++n)if(e[n]instanceof t){if(0<r){--r;continue}var o=e[n];return e.splice(n,1),this.doRemovePart(o,e),o}return null}},{key:"checkPartCoveredByClothing",value:function checkPartCoveredByClothing(e){var r=this,n=!1;return e.coverConceal.forEach(function(t){"this"===t&&(t=e.loc),r.getClothingInLocation(t).forEach(function(t){t.noCover||(n=!0)})}),n}},{key:"removePart",value:function removePart(t){for(var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.parts,r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,n=0;n<e.length;++n)if(Object(h.e)(e[n].loc)===t){if(0<r){--r;continue}var o=e[n];return e.splice(n,1),this.doRemovePart(o,e),o}return null}},{key:"doRemovePart",value:function doRemovePart(t,e){var r=this;if(t.shadingParts&&t.shadingParts.forEach(function(t){r.removeSpecificPart(t,r.shadingParts)}),t.hasOwnProperty("childParts"))for(var n=t.childParts,o=0;o<n.length;++o){var i=Object(l.d)(t.loc,n[o]).childLoc;this.removePart(i,e)}}},{key:"replaceHair",value:function replaceHair(t){var e=this;this.hairParts.forEach(function(t){t.shadingParts&&t.shadingParts.forEach(function(t){e.removeSpecificPart(t,e.shadingParts)})}),this.hairParts=[],t.forEach(function(t){e.attachPart(u.a.create(t),e.hairParts)})}},{key:"applyExpression",value:function applyExpression(t){if(!1===t.hasOwnProperty("Mods"))throw new Error("Invalid expression object since it has no Mods");for(var e in this.removeExpression(),t.Mods)t.Mods.hasOwnProperty(e)&&(this.Mods[e]+=t.Mods[e]);if(t.hasOwnProperty("specificModification")){if(t.hasOwnProperty("removeSpecificModification"))throw new Error("Expression has specific modifications but no way of removing them");t.specificModification(this)}this._expression=t}},{key:"removeExpression",value:function removeExpression(){for(var t in this._expression.Mods)this._expression.Mods.hasOwnProperty(t)&&(this.Mods[t]-=this._expression.Mods[t]);this._expression.hasOwnProperty("removeSpecificModification")&&this._expression.removeSpecificModification(this)}},{key:"getClothingInLocation",value:function getClothingInLocation(e){var r=[];return this.clothingParts.forEach(function(t){Object(h.e)(t.loc)===e&&r.indexOf(t._owner)<0&&r.push(t._owner)}),r}},{key:"getConflictingClothing",value:function getConflictingClothing(i){var e=this,a=[];return i.parts.forEach(function(t){var n=Object(h.e)(t.loc),o=Object(h.c)(t.loc);e.clothingParts.forEach(function(t){if(Object(h.e)(t.loc)===n){var e=!1;if(t._owner.clothingLayer!==i.clothingLayer)return;if(Object.getPrototypeOf(t._owner)===Object.getPrototypeOf(i))e=!0;else{var r=Object(h.c)(t.loc);"-"===o||"-"===r?e=!0:"+"!==o&&"+"!==r&&(e=!0)}e&&a.indexOf(t._owner)<0&&a.push(t._owner)}})}),a}},{key:"wearClothing",value:function wearClothing(e){for(var r=this,t=this.getConflictingClothing(e),n=0;n<t.length;++n)if(!1===this.removeClothing(t[n]))return null;var o=this[e.requiredParts]||this.parts,i=!1;return e.parts.forEach(function(t){r.getPartInLocation(Object(h.e)(t.loc),o)&&(r.clothingParts.push(t),i=!0,t.shadingParts&&t.shadingParts.forEach(function(t){r.attachPart(l.b.create(t,{_owner:e}),r.shadingParts)}))}),i?(Object(a.a)(this.Mods,e.Mods),this.clothes.push(e),t):(t.forEach(function(t){r.wearClothing(t)}),null)}},{key:"removeClothing",value:function removeClothing(e){var r=this,t=this.clothes.indexOf(e);if(-1===t)return!1;if(e.cursed)return!1;var n=[];return this.clothingParts.forEach(function(t){t._owner!==e?n.push(t):t.shadingParts&&t.shadingParts.forEach(function(t){r.removeSpecificPart(t,r.shadingParts)})}),this.clothingParts=n,Object(a.e)(this.Mods,e.Mods),-1!==t&&this.clothes.splice(t,1),!0}},{key:"removeAllClothing",value:function removeAllClothing(){for(var t=[],e=this.clothes.length-1;0<=e;--e){var r=this.clothes[e];this.removeClothing(r)&&t.push(r)}return t}},{key:"wieldItem",value:function wieldItem(t){y.b.loadItem(t),t.modifyPose.call(this),this.items.push(t)}},{key:"removeItem",value:function removeItem(t){t.restorePose.call(this),this.items.splice(this.items.indexOf(t),1)}},{key:"addTattoo",value:function addTattoo(t){v.b.loadTattoo(t),this.tattoos.push(t)}},{key:"removeTattoo",value:function removeTattoo(t){this.tattoos.splice(this.tattoos.indexOf(t),1)}},{key:"heightAdjust",value:function heightAdjust(){var e=0;return this.getClothingInLocation("left feet").forEach(getMaxHeight),this.getClothingInLocation("right feet").forEach(getMaxHeight),e;function getMaxHeight(t){t.shoeHeight&&t.shoeHeight>e&&(e=t.shoeHeight,t.hasOwnProperty("platformHeight")&&(e+=.2*t.platformHeight))}}},{key:"isFemale",value:function isFemale(){return 5<this.fem}},{key:"isMale",value:function isMale(){return!this.isFemale()}},{key:"fillMissingDrawpoints",value:function fillMissingDrawpoints(t){t.deltoids=t.deltoids||Object(f.extractPoint)(t.collarbone),t.shoulder=t.shoulder||Object(f.extractPoint)(t.collarbone),t.elbow=t.elbow||{out:Object(f.extractPoint)(t.shoulder),in:Object(f.extractPoint)(t.armpit)},t.wrist=t.wrist||{out:Object(f.extractPoint)(t.elbow.out),in:Object(f.extractPoint)(t.elbow.in)}}}]),Player}()},function(t,e,r){"use strict";r.d(e,"i",function(){return calcDressShirt}),r.d(e,"b",function(){return i}),r.d(e,"e",function(){return a}),r.d(e,"d",function(){return s}),r.d(e,"c",function(){return c}),r.d(e,"f",function(){return l}),r.d(e,"a",function(){return u}),r.d(e,"h",function(){return p}),r.d(e,"g",function(){return y});var b=r(1),n=r(3),d=r(12),o=r(2),g=r(9),f=r(39),h=r(77),P=r(0);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function calcDressShirt(t){var e=h.f.call(this,t),r=e.outBot,n=e.outMid,o=e.breastBot,i=e.breastTip,a=e.outTop,s=f.i.call(this,t),c=s.top,l=s.cusp,u=s.collarbone,p=s.bot;return c.x+=this.topParted,c.y-=.4*this.topParted,p.bot.x+=this.botParted,p.bot=Object(d.a)(c,p.bot,-.01*(this.topParted+this.botParted)),r.cp1=Object(P.simpleQuadratic)(p.bot,r,.5,-1),{collarbone:u,cusp:l=Object(P.reverseDrawPoint)(l,u),top:c,bot:p,outBot:r,outMid:n,breastBot:o,breastTip:i,outTop:a}}var i=function(t){function DressShirtBasePart(){var t;_classCallCheck(this,DressShirtBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtBasePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],aboveSameLayerParts:["groin"]}].concat(r)))}return _inherits(DressShirtBasePart,b["c"]),_createClass(DressShirtBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcDressShirt.call(this,t),n=r.collarbone,o=r.cusp,i=r.top,a=r.bot,s=r.outBot,c=r.outMid,l=r.breastBot,u=r.breastTip;b.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(P.drawPoints)(e,n,o,i,a.bot,s,c,l,u,Object(P.extractPoint)(t.armpit)),e.fill(),e.clip(),Object(g.j)(e,{stroke:this.liningPattern,fill:P.none},t),e.lineWidth=this.liningWidth,e.beginPath(),Object(P.drawPoints)(e,i,a.bot),e.stroke()}}]),DressShirtBasePart}(),a=function(t){function DressShirtCollarPart(){var t;_classCallCheck(this,DressShirtCollarPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtCollarPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"]}].concat(r)))}return _inherits(DressShirtCollarPart,b["c"]),_createClass(DressShirtCollarPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcDressShirt.call(this,t),n=r.collarbone,o=r.cusp,i=r.top,a=Object(P.splitCurve)(1-this.collarCoverage,n,o).left.p2,s=Object(P.adjust)(Object(P.extractPoint)(i),this.collarWidth+.25*this.topParted,-this.collarHeight+.3*this.topParted);Object(g.j)(e,{stroke:P.none,fill:this.collarPattern},t),e.beginPath(),Object(P.drawPoints)(e,a,o,i,s,a),e.fill()}}]),DressShirtCollarPart}(),s=function(t){function DressShirtButtonPart(){var t;_classCallCheck(this,DressShirtButtonPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtButtonPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!1,forcedNoSideString:!0,aboveParts:["parts torso","decorativeParts torso"],aboveSameLayerParts:["torso"]},{buttonStroke:"#fff",buttonFill:"#ccc",buttonRadius:1,buttonThickness:1,buttonCoverage:.77}].concat(r)))}return _inherits(DressShirtButtonPart,b["c"]),_createClass(DressShirtButtonPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){for(var r=calcDressShirt.call(this,t),n=r.top,o=r.bot,i=[],a=.1;a<1;a+=1.001-this.buttonCoverage){var s=Object(P.splitCurve)(a,n,o.bot),c=0;(.2<s.left.p2.x||s.left.p2.x<-.2)&&(c=Object(P.clamp)(Math.abs(s.left.p2.x),0,1.5*this.buttonRadius));var l=Object(P.adjust)(s.left.p2,c,0);i.push.apply(i,_toConsumableArray(Object(P.drawCircle)(l,this.buttonRadius)).concat([P.breakPoint]))}Object(g.j)(e,{stroke:this.buttonStroke,fill:this.buttonFill},t),e.lineWidth=this.buttonThickness,e.beginPath(),P.drawPoints.apply(void 0,[e].concat(i)),e.fill(),e.stroke()}}]),DressShirtButtonPart}(),c=function(t){function DressShirtBreastPart(){var t;_classCallCheck(this,DressShirtBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirtBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(DressShirtBreastPart,b["c"]),_createClass(DressShirtBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!Object(d.b)(t,e,this)){var r,n,o=calcDressShirt.call(this,t),i=o.collarbone,a=o.cusp,s=o.top,c=o.bot,l=o.outBot;n=c.bot,r=s,e.beginPath(),Object(P.drawPoints)(e,i,a,s,c.bot,l,{x:l.x+50,y:l.y},{x:i.x+50,y:i.y}),e.clip();var u=Object(P.adjust)(t.breast.top,0,0),p=Object(P.adjust)(t.breast.tip,.1,0),f=Object(P.adjust)(t.breast.bot,0,-.1),h=Object(P.adjust)(t.breast.cleavage,0,-.1),y=Object(P.adjust)(t.breast.in,0,-.1);b.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(P.drawPoints)(e,u,p,f,y,h,Object(d.a)(h,u)),e.fill(),e.clip(),Object(g.j)(e,{stroke:this.liningPattern,fill:P.none},t),e.lineWidth=this.liningWidth,e.beginPath(),Object(P.drawPoints)(e,r,n),e.stroke()}}}]),DressShirtBreastPart}(),l=function(t){function LongSleeveCuffPart(){var t;_classCallCheck(this,LongSleeveCuffPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LongSleeveCuffPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+arm",reflect:!1,aboveParts:["parts arm","decorativeParts arm"],aboveSameLayerParts:["arm"]},{cuffPattern:"#a4c3ca"}].concat(r)))}return _inherits(LongSleeveCuffPart,b["c"]),_createClass(LongSleeveCuffPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=f.h.call(this,t),n=r.elbowOut,o=r.out,i=r.bot,a=r.elbow,s=Object(P.splitCurve)(.7,n,o),c=Object(P.adjust)(s.right.p1,1.5,0);o.cp1=s.right.p2.cp1,o.cp2=s.right.p2.cp2;var l=(s=Object(P.splitCurve)(.3,i,a)).left.p2;Object(g.j)(e,{stroke:P.none,fill:this.cuffPattern},t),e.beginPath(),Object(P.drawPoints)(e,c,o,i,l,c),e.fill();var u=Object(P.drawCircle)(Object(P.adjust)(c,-2,-2),.5*this.buttonRadius);Object(g.j)(e,{stroke:this.buttonStroke,fill:this.buttonFill},t),e.lineWidth=.5*this.buttonThickness,e.beginPath(),P.drawPoints.apply(void 0,[e].concat(_toConsumableArray(u))),e.fill(),e.stroke()}}]),LongSleeveCuffPart}(),u=function(t){function DressShirt(){var t;_classCallCheck(this,DressShirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(DressShirt)).call.apply(t,[this,{clothingLayer:b.a.Layer.MID,stomachCoverage:.9,neckCoverage:0,liningWidth:3.5,liningPattern:"#98aaaf",collarCoverage:.25,collarHeight:7,collarWidth:3,collarPattern:"#a4c3ca",topParted:4,botParted:0,cling:.6}].concat(r)))}return _inherits(DressShirt,b["b"]),DressShirt}(),p=function(t){function WomenDressShirt(){var t;_classCallCheck(this,WomenDressShirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(WomenDressShirt)).call.apply(t,[this].concat(r)))}return _inherits(WomenDressShirt,u),_createClass(WomenDressShirt,[{key:"stroke",value:function stroke(){return P.none}},{key:"fill",value:function fill(){return"hsl(198.9,42.2%,82.4%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:null,Part:c},{side:n.b.LEFT,Part:f.c},{side:n.b.RIGHT,Part:f.c},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:s}]}}]),WomenDressShirt}(),y=function(t){function MenDressShirt(){var t;_classCallCheck(this,MenDressShirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MenDressShirt)).call.apply(t,[this].concat(r)))}return _inherits(MenDressShirt,u),_createClass(MenDressShirt,[{key:"stroke",value:function stroke(){return P.none}},{key:"fill",value:function fill(){return"hsl(198.9,42.2%,82.4%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a},{side:null,Part:c},{side:n.b.LEFT,Part:f.c},{side:n.b.RIGHT,Part:f.c},{side:n.b.RIGHT,Part:l},{side:n.b.LEFT,Part:l},{side:n.b.LEFT,Part:s}]}}]),MenDressShirt}()},function(t,e,r){"use strict";r.d(e,"d",function(){return s}),r.d(e,"b",function(){return c}),r.d(e,"h",function(){return p}),r.d(e,"j",function(){return f}),r.d(e,"r",function(){return h}),r.d(e,"k",function(){return y}),r.d(e,"g",function(){return b}),r.d(e,"i",function(){return d}),r.d(e,"c",function(){return g}),r.d(e,"a",function(){return P}),r.d(e,"l",function(){return v}),r.d(e,"m",function(){return _}),r.d(e,"n",function(){return C}),r.d(e,"p",function(){return O}),r.d(e,"o",function(){return k}),r.d(e,"q",function(){return m}),r.d(e,"s",function(){return w}),r.d(e,"e",function(){return j}),r.d(e,"f",function(){return S});var l=r(1),o=r(2),i=r(6),u=r(0),n=r(20),a=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function BellyPiercingSimplePart(){var t;_classCallCheck(this,BellyPiercingSimplePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BellyPiercingSimplePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!1,aboveParts:["parts torso","decorativeParts torso"]},{radius:1.3}].concat(r)))}return _inherits(BellyPiercingSimplePart,l["c"]),_createClass(BellyPiercingSimplePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,n){l.a.simpleStrokeFill(n,t,this);var e=t.bellybutton.bot,o=this.fill;!function circle(t,e){n.fillStyle=o;var r=Object(u.drawCircle)(t,e);n.beginPath(),u.drawPoints.apply(void 0,[n].concat(_toConsumableArray(r))),n.fill(),r=Object(u.drawCircle)(Object(u.adjust)(t,.3*e,.3*e),.3*e),n.fillStyle="white",n.beginPath(),u.drawPoints.apply(void 0,[n].concat(_toConsumableArray(r))),n.fill()}(e,this.radius)}}]),BellyPiercingSimplePart}(),c=function(t){function BellyPiercingAdvancedPart(){var t;_classCallCheck(this,BellyPiercingAdvancedPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BellyPiercingAdvancedPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!1,aboveParts:["parts torso","decorativeParts torso"]},{thickness:.5,radius:1.3,secondaryRadius:1,distance:1,above:!0,above2:!0,bellow:!1,bellow2:!1,chain:!0,belt:!1,link:!1}].concat(r)))}return _inherits(BellyPiercingAdvancedPart,l["c"]),_createClass(BellyPiercingAdvancedPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,a){l.a.simpleStrokeFill(a,t,this);var e=t.bellybutton.bot,n=this.fill;function circle(t,e){a.fillStyle=n;var r=Object(u.drawCircle)(t,e);a.beginPath(),u.drawPoints.apply(void 0,[a].concat(_toConsumableArray(r))),a.fill(),r=Object(u.drawCircle)(Object(u.adjust)(t,.3*e,.3*e),.3*e),a.fillStyle="white",a.beginPath(),u.drawPoints.apply(void 0,[a].concat(_toConsumableArray(r))),a.fill()}function chain(t,e,r,n){t=Object(u.extractPoint)(t),a.setLineDash([2,2]),a.lineWidth=n;var o=Object(u.adjust)(t,e,0),i=Object(u.adjust)(t,e,r);a.beginPath(),Object(u.drawPoints)(a,o,i),a.stroke()}if(this.belt){var r={x:t.bellybutton.bot.x,y:t.bellybutton.bot.y},o=Object(u.splitCurve)(.7,t.waist,t.hip),i=Object(u.extractPoint)(o.left.p2);i.cp1={x:.4*(i.x+r.x),y:t.hip.y};var s=Object(u.reflect)(i);s.cp1=Object(u.reflect)(i.cp1),a.setLineDash([2,2]),a.lineWidth=.6,a.beginPath(),Object(u.drawPoints)(a,r,i,u.breakPoint,r,s),a.stroke()}if(this.chain&&(chain(e,.6,-7,this.thickness),chain(e,-.6,-9,this.thickness)),this.link){var c=Object(u.extractPoint)(Object(u.adjust)(e,0,-6*this.distance));a.lineWidth=.6,a.setLineDash([2,2]),a.beginPath(),Object(u.drawPoints)(a,e,c),a.stroke()}this.above&&circle(Object(u.adjust)(e,0,3.5*this.distance),.7*this.secondaryRadius),this.above2&&circle(Object(u.adjust)(e,0,6*this.distance),.5*this.secondaryRadius),this.bellow&&circle(Object(u.adjust)(e,0,-3.5*this.distance),.7*this.secondaryRadius),this.bellow2&&circle(Object(u.adjust)(e,0,-6*this.distance),.5*this.secondaryRadius),circle(e,this.radius)}}]),BellyPiercingAdvancedPart}(),p=function(t){function NipplePiercingPart(){var t;_classCallCheck(this,NipplePiercingPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NipplePiercingPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+torso",reflect:!0,aboveParts:["parts chest"]},{bar:!0,ring:!0,radius:.6,ringRadius:1.4,thickness:.3}].concat(r)))}return _inherits(NipplePiercingPart,l["c"]),_createClass(NipplePiercingPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=Object(u.extractPoint)(t.chest.nipples);if(this.bar&&(circle(e,Object(u.adjust)(r,2,0),this.radius,this.fill),circle(e,Object(u.adjust)(r,-2,0),this.radius,this.fill)),this.ring){var n=Object(u.drawCircle)(Object(u.adjust)(r,0,-this.ringRadius),this.ringRadius);e.lineWidth=this.thickness,e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(n))),e.stroke()}}}]),NipplePiercingPart}(),f=function(t){function StudPart2(){var t;_classCallCheck(this,StudPart2);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPart2)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(i.Location.NOSE),reflect:!1,aboveParts:["faceParts ".concat(i.Location.NOSE)]},{radius:.51}].concat(r)))}return _inherits(StudPart2,l["c"]),_createClass(StudPart2,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this),circle(e,Object(i.locateRelativeToDrawpoint)(t,this.relativeLocation),this.radius,this.fill)}}]),StudPart2}(),h=function(t){function TonguePart(){var t;_classCallCheck(this,TonguePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TonguePart)).call.apply(t,[this,{layer:o.a.BACK,loc:"".concat(i.Location.NOSE),reflect:!1,aboveParts:["faceParts ".concat(i.Location.NOSE)]},{radius:.51}].concat(r)))}return _inherits(TonguePart,l["c"]),_createClass(TonguePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this),circle(e,Object(i.locateRelativeToDrawpoint)(t,this.relativeLocation),this.radius,this.fill)}}]),TonguePart}(),y=function(t){function StudPart3(){var t;_classCallCheck(this,StudPart3);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPart3)).call.apply(t,[this,{layer:o.a.FRONT,loc:"".concat(i.Location.NOSE),reflect:!1,aboveParts:["faceParts ".concat(i.Location.NOSE)]},{radius:.51}].concat(r)))}return _inherits(StudPart3,l["c"]),_createClass(StudPart3,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this),circle(e,Object(i.locateRelativeToDrawpoint)(t,this.relativeLocation),this.radius,this.fill)}}]),StudPart3}(),b=function(t){function BridgePart(){var t;_classCallCheck(this,BridgePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BridgePart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(i.Location.NOSE),reflect:!1,aboveParts:["faceParts ".concat(i.Location.NOSE)]},{radius:.4,distance:.9}].concat(r)))}return _inherits(BridgePart,l["c"]),_createClass(BridgePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=Object(i.locateRelativeToDrawpoint)(t,this.relativeLocation);this.fill;circle(e,Object(a.l)(this.distance,Object(u.rad)(this.rotation),r),this.radius,this.fill),circle(e,Object(a.l)(this.distance,Object(u.rad)(this.rotation+180),r),this.radius,this.fill)}}]),BridgePart}();function circle(t,e,r,n){n&&(t.fillStyle=n);var o=Object(u.drawCircle)(e,r);t.beginPath(),u.drawPoints.apply(void 0,[t].concat(_toConsumableArray(o))),t.fill(),o=Object(u.drawCircle)(Object(u.adjust)(e,.3*r,.3*r),.3*r),t.fillStyle="white",t.beginPath(),u.drawPoints.apply(void 0,[t].concat(_toConsumableArray(o))),t.fill()}var d=function(t){function NipplePiercings(){var t;_classCallCheck(this,NipplePiercings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NipplePiercings)).call.apply(t,[this,{clothingLayer:l.a.Layer.BASE}].concat(r)))}return _inherits(NipplePiercings,n["c"]),_createClass(NipplePiercings,[{key:"stroke",value:function stroke(){return"blue"}},{key:"fill",value:function fill(){return"red"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:p}]}}]),NipplePiercings}(),g=function(t){function BellyPiercingSimple(){var t;_classCallCheck(this,BellyPiercingSimple);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BellyPiercingSimple)).call.apply(t,[this,{}].concat(r)))}return _inherits(BellyPiercingSimple,n["c"]),_createClass(BellyPiercingSimple,[{key:"stroke",value:function stroke(){return"lime"}},{key:"fill",value:function fill(){return"red"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:s}]}}]),BellyPiercingSimple}(),P=function(t){function BellyPiercingAdvanced(){var t;_classCallCheck(this,BellyPiercingAdvanced);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BellyPiercingAdvanced)).call.apply(t,[this,{}].concat(r)))}return _inherits(BellyPiercingAdvanced,n["c"]),_createClass(BellyPiercingAdvanced,[{key:"stroke",value:function stroke(){return"lime"}},{key:"fill",value:function fill(){return"red"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:c}]}}]),BellyPiercingAdvanced}(),v=function(t){function StudPiercing2(){var t;_classCallCheck(this,StudPiercing2);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing2)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:-3,dy:1.15},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing2,n["d"]),_createClass(StudPiercing2,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),StudPiercing2}(),_=function(t){function StudPiercing3(){var t;_classCallCheck(this,StudPiercing3);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing3)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:-3,dy:1.15},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing3,n["d"]),_createClass(StudPiercing3,[{key:"partPrototypes",get:function get(){return[{side:null,Part:y}]}}]),StudPiercing3}(),C=function(t){function StudPiercing4(){var t;_classCallCheck(this,StudPiercing4);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing4)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:3,dy:-1.15},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing4,n["d"]),_createClass(StudPiercing4,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),StudPiercing4}(),O=function(t){function StudPiercing6(){var t;_classCallCheck(this,StudPiercing6);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing6)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing6,n["d"]),_createClass(StudPiercing6,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),StudPiercing6}(),k=function(t){function StudPiercing5(){var t;_classCallCheck(this,StudPiercing5);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing5)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing5,n["d"]),_createClass(StudPiercing5,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),StudPiercing5}(),m=function(t){function StudPiercing7(){var t;_classCallCheck(this,StudPiercing7);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(StudPiercing7)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(StudPiercing7,n["d"]),_createClass(StudPiercing7,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),StudPiercing7}(),w=function(t){function TonguePiercing(){var t;_classCallCheck(this,TonguePiercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TonguePiercing)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.out",dx:0,dy:0},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(TonguePiercing,n["d"]),_createClass(TonguePiercing,[{key:"partPrototypes",get:function get(){return[{side:null,Part:h}]}}]),TonguePiercing}(),j=function(t){function Bridge(){var t;_classCallCheck(this,Bridge);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bridge)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.top",dx:-.3,dy:-1.66},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(Bridge,n["d"]),_createClass(Bridge,[{key:"partPrototypes",get:function get(){return[{side:null,Part:b}]}}]),Bridge}(),S=function(t){function Bridge2(){var t;_classCallCheck(this,Bridge2);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bridge2)).call.apply(t,[this,{relativeLocation:{drawpoint:"nose.top",dx:-.3,dy:-1.66},loc:"+".concat(i.Location.NOSE),requiredParts:"faceParts"}].concat(r)))}return _inherits(Bridge2,n["d"]),_createClass(Bridge2,[{key:"partPrototypes",get:function get(){return[{side:null,Part:b}]}}]),Bridge2}()},function(t,e,r){"use strict";r.d(e,"c",function(){return i}),r.d(e,"b",function(){return a}),r.d(e,"f",function(){return calcMagicHat}),r.d(e,"e",function(){return s}),r.d(e,"a",function(){return c}),r.d(e,"d",function(){return p});var l=r(1),o=r(2),u=(r(9),r(0)),n=(r(6),r(61));function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function MagicHatFrontPart(){var t;_classCallCheck(this,MagicHatFrontPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MagicHatFrontPart)).call.apply(t,[this,{layer:o.a.ABOVE_HAIR,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(MagicHatFrontPart,l["c"]),_createClass(MagicHatFrontPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcMagicHat.call(this,t),n=(r.center,r.inBot),o=r.out,i=r.inTop,a=r.coneBase,s=r.coneTop,c=r.forhead;l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,a,s,Object(u.extractPoint)(i)),e.fill(),e.beginPath(),Object(u.drawPoints)(e,a,s),e.stroke(),e.beginPath(),Object(u.drawPoints)(e,o,i,c,a),e.fill(),n.y>i.y&&(e.beginPath(),Object(u.drawPoints)(e,c,a),e.stroke()),e.beginPath(),Object(u.drawPoints)(e,o,i),e.stroke()}}]),MagicHatFrontPart}(),a=function(t){function MagicHatBackPart(){var t;_classCallCheck(this,MagicHatBackPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MagicHatBackPart)).call.apply(t,[this,{layer:o.a.BACK,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(MagicHatBackPart,l["c"]),_createClass(MagicHatBackPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcMagicHat.call(this,t),n=(r.center,r.inBot),o=r.out,i=r.inTop;r.coneBase,r.coneTop,r.forhead;l.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(u.drawPoints)(e,n,o,i),e.fill(),e.stroke()}}]),MagicHatBackPart}();function calcMagicHat(t){var e={x:-.2,y:t.skull.side.y+3+this.centerOffset},r=Object(u.adjust)(e,0,6+this.brimAngle),n=Object(u.adjust)(e,0,-6-this.brimAngle),o=Object(u.adjust)(e,36+this.brimWidth,0),i=Object(u.adjust)(e,0,(6+this.brimAngle)/2);o.cp1={x:.5*(o.x+n.x),y:n.y},r.cp1={x:.5*(r.x+o.x),y:r.y};var a=Object(u.interpolateCurve)(t.skull,t.skull.side,{x:null,y:e.y})[0];return(a=Object(u.adjust)(a,this.coneWidth+2,0)).cp1={x:.5*(a.x+i.x),y:i.y},{center:e,inBot:n,out:o,inTop:r,coneBase:a,coneTop:Object(u.adjust)(e,0,45+this.coneHeight),forhead:i}}var s=function(t){function MaidHeadpiecePart(){var t;_classCallCheck(this,MaidHeadpiecePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MaidHeadpiecePart)).call.apply(t,[this,{layer:o.a.ABOVE_HAIR,loc:"head",reflect:!0},{}].concat(r)))}return _inherits(MaidHeadpiecePart,l["c"]),_createClass(MaidHeadpiecePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r={x:-.2,y:t.skull.y-5+this.centerOffset},n={x:-.2,y:r.y+this.height},o={x:n.x+this.width,y:n.y-this.drop};o.cp1={x:.5*(n.x+o.x),y:n.y};var i=Math.sqrt(Math.pow(this.height,2)/2),a={x:o.x-i,y:o.y-i};r.cp1={x:.5*(r.x+a.x),y:r.y},e.beginPath(),Object(u.drawPoints)(e,n,o,a,r),e.fill(),e.stroke()}}]),MaidHeadpiecePart}(),c=function(t){function MagicHat(){var t;_classCallCheck(this,MagicHat);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MagicHat)).call.apply(t,[this,{centerOffset:0,brimWidth:0,brimAngle:0,coneHeight:0,coneWidth:0}].concat(r)))}return _inherits(MagicHat,n["d"]),_createClass(MagicHat,[{key:"fill",value:function fill(){return"#343232"}},{key:"stroke",value:function stroke(){return"#201b1b"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i},{side:null,Part:a}]}}]),MagicHat}(),p=function(t){function MaidHeadpiece(){var t;_classCallCheck(this,MaidHeadpiece);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(MaidHeadpiece)).call.apply(t,[this,{centerOffset:2,height:9,width:12,drop:4}].concat(r)))}return _inherits(MaidHeadpiece,n["d"]),_createClass(MaidHeadpiece,[{key:"fill",value:function fill(){return"white"}},{key:"stroke",value:function stroke(){return"black"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:s}]}}]),MaidHeadpiece}()},function(t,e,r){"use strict";r.d(e,"c",function(){return i}),r.d(e,"h",function(){return a}),r.d(e,"e",function(){return s}),r.d(e,"i",function(){return p}),r.d(e,"b",function(){return f}),r.d(e,"a",function(){return h}),r.d(e,"g",function(){return y}),r.d(e,"d",function(){return b}),r.d(e,"j",function(){return d}),r.d(e,"f",function(){return g});var c=r(1),o=r(2),l=r(0),n=r(38),u=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function ChokerPart(){var t;_classCallCheck(this,ChokerPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChokerPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{}].concat(r)))}return _inherits(ChokerPart,c["c"]),_createClass(ChokerPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=calcCollar.call(this,t),n=r.topOut,o=r.botOut,i=r.topIn,a=r.botIn;if(this.center)return i.cp1={y:(i.y-a.y)/2+a.y,x:4},e.beginPath(),Object(l.drawPoints)(e,i,n,o,a,i),e.fill(),void e.stroke();e.beginPath(),Object(l.drawPoints)(e,i,n,o,a),e.fill(),e.stroke()}}]),ChokerPart}(),a=function(t){function NeckCorsetPart(){var t;_classCallCheck(this,NeckCorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckCorsetPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{}].concat(r)))}return _inherits(NeckCorsetPart,c["c"]),_createClass(NeckCorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=calcCollar.call(this,t),n=r.topOut,o=r.botOut,i=r.topIn,a=r.botIn;i={x:3,y:n.y},a={x:3,y:o.y},e.beginPath(),Object(l.drawPoints)(e,i,n,o,a),e.fill(),e.stroke();var s=Object(u.e)(a,i,Object(l.reflect)(a),Object(l.reflect)(i),this.crossings);e.beginPath(),e.strokeStyle=this.highlight,e.lineWidth=.4,l.drawPoints.apply(void 0,[e].concat(_toConsumableArray(s.outer))),e.stroke()}}]),NeckCorsetPart}(),s=function(t){function CollarPart(){var t;_classCallCheck(this,CollarPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CollarPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{}].concat(r)))}return _inherits(CollarPart,c["c"]),_createClass(CollarPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=Object(l.splitCurve)(this.neckCoverage,t.neck.cusp,t.neck.top),n=0,o=Object(u.d)(r.left.p2.y,t.neck.cusp.y,.5)-2,i=Object(l.drawCircle)({x:0,y:o-4},4);e.beginPath(),e.lineWidth=.9,e.strokeStyle=this.ring,l.drawPoints.apply(void 0,[e].concat(_toConsumableArray(i))),e.stroke();e.beginPath(),e.lineWidth=.5,e.fillStyle=this.highlight,Object(l.drawPoints)(e,{x:n+2,y:o+2},{x:n+2,y:o-2},{x:n-2,y:o-2},{x:n-2,y:o+2}),e.fill()}}]),CollarPart}(),p=function(t){function TagPart(){var t;_classCallCheck(this,TagPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TagPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!1,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{text:"SLUT",fontHeight:8,dx:0,dy:0}].concat(r)))}return _inherits(TagPart,c["c"]),_createClass(TagPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=calcCollar.call(this,t),n=(r.topOut,r.botOut,r.topIn,r.botIn),o=Object(l.reflect)(n);o.x-=3.5+this.dx/10,o.y+=1.2+this.dy/10,e.font=this.fontHeight+"px Comic Sans MS",e.fillStyle=this.highlight,e.fillText(this.text,o.x,o.y)}}]),TagPart}(),f=function(t){function ChokerCrossPart(){var t;_classCallCheck(this,ChokerCrossPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChokerCrossPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso"],belowSameLayerParts:["torso"]},{}].concat(r)))}return _inherits(ChokerCrossPart,c["c"]),_createClass(ChokerCrossPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){c.a.simpleStrokeFill(e,t,this);var r=calcCollar.call(this,t),n=r.topOut,o=r.botOut,i=r.topIn,a=r.botIn;o.cp1=a.cp1,o.cp2=a.cp2;var s=Object(u.e)(i,n,a,o,this.crossings);e.beginPath(),e.lineWidth=this.thickness,l.drawPoints.apply(void 0,[e].concat(_toConsumableArray(s.outer),[l.breakPoint],_toConsumableArray(s.inner))),e.stroke()}}]),ChokerCrossPart}();function calcCollar(t){var e=Object(l.splitCurve)(this.neckCoverage,t.neck.cusp,t.neck.top),r=Object(l.adjust)(e.left.p2,.5*-this.thickness,0);e=Object(l.splitCurve)(this.neckBotCoverage,t.neck.cusp,t.neck.top);var n=Object(l.adjust)(e.left.p2,.5*-this.thickness,0);n=Object(l.extractPoint)(n);var o={x:-.1,y:r.y},i={x:-.1,y:n.y};return i.y-=2.2,i.cp1={x:.5*(i.x+n.x),y:i.y},o.y-=2.2,r.cp1={x:.5*(r.x+o.x),y:o.y},{topOut:r,botOut:n,topIn:o,botIn:i}}var h=function(t){function Choker(){var t;_classCallCheck(this,Choker);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Choker)).call.apply(t,[this,{neckCoverage:.2,neckBotCoverage:0,center:!1,thickness:.5}].concat(r)))}return _inherits(Choker,n["a"]),_createClass(Choker,[{key:"stroke",value:function stroke(){return"#5c5c5c"}},{key:"fill",value:function fill(){return"#5c5c5c"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i}]}}]),Choker}(),y=function(t){function NeckCorset(){var t;_classCallCheck(this,NeckCorset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(NeckCorset)).call.apply(t,[this,{neckCoverage:.6,neckBotCoverage:0,crossings:3,highlight:"black"}].concat(r)))}return _inherits(NeckCorset,n["a"]),_createClass(NeckCorset,[{key:"stroke",value:function stroke(){return"#5c5c5c"}},{key:"fill",value:function fill(){return"#5c5c5c"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:a}]}}]),NeckCorset}(),b=function(t){function Collar(){var t;_classCallCheck(this,Collar);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Collar)).call.apply(t,[this,{neckCoverage:.3,neckBotCoverage:0,ring:"hsla(209, 33%, 70%, 1)",highlight:"hsla(209, 8%, 16%, 1)",thickness:.5}].concat(r)))}return _inherits(Collar,n["a"]),_createClass(Collar,[{key:"stroke",value:function stroke(){return"#5c5c5c"}},{key:"fill",value:function fill(){return"#5c5c5c"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:s},{side:null,Part:i}]}}]),Collar}(),d=function(t){function TaggedCollar(){var t;_classCallCheck(this,TaggedCollar);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TaggedCollar)).call.apply(t,[this,{neckCoverage:.27,neckBotCoverage:0,highlight:"white",thickness:.5}].concat(r)))}return _inherits(TaggedCollar,n["a"]),_createClass(TaggedCollar,[{key:"stroke",value:function stroke(){return"hsla(321.3,80.2%,50.4%,1.00)"}},{key:"fill",value:function fill(){return"hsla(321.3,80.2%,50.4%,1.00)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:p},{side:null,Part:i}]}}]),TaggedCollar}(),g=function(t){function CrossedChoker(){var t;_classCallCheck(this,CrossedChoker);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CrossedChoker)).call.apply(t,[this,{neckCoverage:.21,neckBotCoverage:.05,crossings:2,thickness:.5}].concat(r)))}return _inherits(CrossedChoker,n["a"]),_createClass(CrossedChoker,[{key:"stroke",value:function stroke(){return"#5c5c5c"}},{key:"fill",value:function fill(){return"#5c5c5c"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),CrossedChoker}()},function(t,e,r){"use strict";r.d(e,"e",function(){return P}),r.d(e,"h",function(){return v}),r.d(e,"c",function(){return _}),r.d(e,"f",function(){return C}),r.d(e,"b",function(){return O}),r.d(e,"a",function(){return k}),r.d(e,"g",function(){return m}),r.d(e,"d",function(){return w});var l=r(1),o=r(2),u=(r(6),r(0)),n=r(20),i=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function TriangleEarringsPart(){var t;_classCallCheck(this,TriangleEarringsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TriangleEarringsPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(TriangleEarringsPart,l["c"]),_createClass(TriangleEarringsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=Object(u.adjust)(t.skull.bot,1.2,2.2),n=Object(u.adjust)(r,0,-this.hanger),o=Object(u.adjust)(n,this.width,-this.length),i=Object(u.adjust)(n,-this.width,-this.length);e.beginPath(),e.lineWidth=.5,Object(u.drawPoints)(e,r,{x:n.x,y:n.y-2}),e.stroke();var a=Object(u.drawCircle)(r,.3);e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(a))),e.stroke(),e.beginPath(),Object(u.drawPoints)(e,n,o,i),e.fill()}}]),TriangleEarringsPart}(),s=function(t){function CrystalEarringsPart(){var t;_classCallCheck(this,CrystalEarringsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CrystalEarringsPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(CrystalEarringsPart,l["c"]),_createClass(CrystalEarringsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=Object(u.adjust)(t.skull.bot,1.2,2.2),n=Object(u.adjust)(r,0,-this.hanger),o=Object(u.adjust)(n,-this.width/2+.3,0),i=Object(u.adjust)(n,this.width/2,0),a=Object(u.adjust)(n,-this.width/2+.3,-this.length-this.alt),s=Object(u.adjust)(n,this.width/2,-this.length+this.alt);e.beginPath(),e.lineWidth=.5,Object(u.drawPoints)(e,r,n),e.stroke();var c=Object(u.drawCircle)(r,.3);e.beginPath(),u.drawPoints.apply(void 0,[e].concat(_toConsumableArray(c))),e.stroke(),e.beginPath(),Object(u.drawPoints)(e,o,i,s,a),e.fill()}}]),CrystalEarringsPart}(),c=function(t){function LoopEarringsFrontPart(){var t;_classCallCheck(this,LoopEarringsFrontPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LoopEarringsFrontPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(LoopEarringsFrontPart,l["c"]),_createClass(LoopEarringsFrontPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcLoop.call(this,t),n=r.a,o=r.b;e.beginPath(),Object(u.drawPoints)(e,o,n),e.stroke()}}]),LoopEarringsFrontPart}(),p=function(t){function LoopEarringsBackPart(){var t;_classCallCheck(this,LoopEarringsBackPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LoopEarringsBackPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(LoopEarringsBackPart,l["c"]),_createClass(LoopEarringsBackPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcLoop.call(this,t),n=r.a,o=r.b;e.beginPath(),Object(u.drawPoints)(e,n,o),e.stroke()}}]),LoopEarringsBackPart}();function calcLoop(t){var e=Object(u.adjust)(t.skull.bot,1.2,3),r={x:e.x,y:e.y},n={x:e.x,y:e.y-this.length};return r.cp1={x:e.x-this.width,y:e.y-this.length/2},n.cp1={x:e.x+this.width,y:e.y-this.length/2},{a:r,b:n}}var f=function(t){function ChainEarringsPart(){var t;_classCallCheck(this,ChainEarringsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainEarringsPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(ChainEarringsPart,l["c"]),_createClass(ChainEarringsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,i){l.a.simpleStrokeFill(i,t,this);var a=Object(u.adjust)(t.skull.bot,1.2,2.2);function chain(t,e,r){var n=Object(u.adjust)(a,t,e),o=Object(u.adjust)(a,t,-r);i.setLineDash([2,2]),i.lineWidth=.4,i.beginPath(),Object(u.drawPoints)(i,n,o),i.stroke()}chain(0,0,this.length),chain(.8,0,this.length),chain(-.8,0,this.length);var e;e=Object(u.drawCircle)(a,1.2),i.beginPath(),u.drawPoints.apply(void 0,[i].concat(_toConsumableArray(e))),i.fillStyle=i.strokeStyle,i.fill()}}]),ChainEarringsPart}(),h=function(t){function BallEarringsPart(){var t;_classCallCheck(this,BallEarringsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BallEarringsPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(BallEarringsPart,l["c"]),_createClass(BallEarringsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,o){l.a.simpleStrokeFill(o,t,this);var e=Object(u.adjust)(t.skull.bot,1.2,2.2),r=Object(u.adjust)(e,0,-this.length/2),n=Object(u.adjust)(e,0,-this.length);function ball(t,e,r){var n;n=Object(u.drawCircle)(t,e),o.beginPath(),u.drawPoints.apply(void 0,[o].concat(_toConsumableArray(n))),o.fillStyle=r,o.fill()}o.beginPath(),o.lineWidth=this.thickness,Object(u.drawPoints)(o,e,n),o.stroke(),ball(e,this.size,o.fillStyle),ball(r,this.size-this.alt,o.fillStyle),ball(n,this.size+this.alt,o.fillStyle)}}]),BallEarringsPart}(),y=function(t){function RhombEarringsFrontPart(){var t;_classCallCheck(this,RhombEarringsFrontPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RhombEarringsFrontPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(RhombEarringsFrontPart,l["c"]),_createClass(RhombEarringsFrontPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcRhomb.call(this,t),n=r.center,o=(r.inner,r.bottom),i=r.outer;e.beginPath(),e.lineWidth=this.thickness,Object(u.drawPoints)(e,n,i,o),e.stroke()}}]),RhombEarringsFrontPart}(),b=function(t){function RhombEarringsBackPart(){var t;_classCallCheck(this,RhombEarringsBackPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RhombEarringsBackPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+head",reflect:!0},{}].concat(r)))}return _inherits(RhombEarringsBackPart,l["c"]),_createClass(RhombEarringsBackPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcRhomb.call(this,t),n=r.center,o=r.inner,i=r.bottom;r.outer;e.beginPath(),e.lineWidth=this.thickness,Object(u.drawPoints)(e,n,o,i),e.stroke()}}]),RhombEarringsBackPart}();function calcRhomb(t){var e=Object(u.adjust)(t.skull.bot,1.2,2.2),r=Object(u.adjust)(e,0,-this.length),n=-this.length/2-this.length/2*this.alt;return{center:e,inner:Object(u.adjust)(e,-this.width/2,n),bottom:r,outer:Object(u.adjust)(e,this.width/2,n)}}var d=function(t){function EarPiercingFrontPart(){var t;_classCallCheck(this,EarPiercingFrontPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarPiercingFrontPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+head",reflect:!1},{}].concat(r)))}return _inherits(EarPiercingFrontPart,l["c"]),_createClass(EarPiercingFrontPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcEarPiercing.call(this,t),n=r.a,o=r.b;e.beginPath(),Object(u.drawPoints)(e,o,n),e.stroke()}}]),EarPiercingFrontPart}(),g=function(t){function EarPiercingBackPart(){var t;_classCallCheck(this,EarPiercingBackPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarPiercingBackPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"+head",reflect:!1},{}].concat(r)))}return _inherits(EarPiercingBackPart,l["c"]),_createClass(EarPiercingBackPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){l.a.simpleStrokeFill(e,t,this);var r=calcEarPiercing.call(this,t),n=r.a,o=r.b;e.beginPath(),Object(u.drawPoints)(e,n,o),e.stroke()}}]),EarPiercingBackPart}();function calcEarPiercing(t){var e=Object(u.adjust)(t.ear.mid,-.5+this.dx,3.5+this.dy),r={x:e.x,y:e.y},n=Object(i.l)(this.length,Object(u.rad)(this.rotation),r);return r.cp1=Object(i.k)(r,n,.5,this.width),n.cp1=Object(i.k)(r,n,.5,-this.width),{a:r,b:n}}var P=function(t){function Earrings(){var t;_classCallCheck(this,Earrings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Earrings)).call.apply(t,[this,{clothingLayer:l.a.Layer.INNER,stroke:"#ebbc11",fill:"red"}].concat(r)))}return _inherits(Earrings,n["c"]),Earrings}(),v=function(t){function TriangleEarrings(){var t;_classCallCheck(this,TriangleEarrings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(TriangleEarrings)).call.apply(t,[this,{length:7,width:2,hanger:2}].concat(r)))}return _inherits(TriangleEarrings,P),_createClass(TriangleEarrings,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a}]}}]),TriangleEarrings}(),_=function(t){function CrystalEarrings(){var t;_classCallCheck(this,CrystalEarrings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CrystalEarrings)).call.apply(t,[this,{length:9,width:2.6,hanger:3,alt:2}].concat(r)))}return _inherits(CrystalEarrings,P),_createClass(CrystalEarrings,[{key:"partPrototypes",get:function get(){return[{side:null,Part:s}]}}]),CrystalEarrings}(),C=function(t){function LoopEarrings(){var t;_classCallCheck(this,LoopEarrings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LoopEarrings)).call.apply(t,[this,{length:9,width:3}].concat(r)))}return _inherits(LoopEarrings,P),_createClass(LoopEarrings,[{key:"partPrototypes",get:function get(){return[{side:null,Part:c},{side:null,Part:p}]}}]),LoopEarrings}(),O=function(t){function ChainEarrings(){var t;_classCallCheck(this,ChainEarrings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainEarrings)).call.apply(t,[this,{length:9}].concat(r)))}return _inherits(ChainEarrings,P),_createClass(ChainEarrings,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),ChainEarrings}(),k=function(t){function BallEarrings(){var t;_classCallCheck(this,BallEarrings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BallEarrings)).call.apply(t,[this,{length:10,size:1,alt:-.2,thickness:.5}].concat(r)))}return _inherits(BallEarrings,P),_createClass(BallEarrings,[{key:"partPrototypes",get:function get(){return[{side:null,Part:h}]}}]),BallEarrings}(),m=function(t){function RhombEarrings(){var t;_classCallCheck(this,RhombEarrings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RhombEarrings)).call.apply(t,[this,{length:9,width:2.6,alt:.8,thickness:.8}].concat(r)))}return _inherits(RhombEarrings,P),_createClass(RhombEarrings,[{key:"stroke",value:function stroke(){return"#13a700"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:y},{side:null,Part:b}]}}]),RhombEarrings}(),w=function(t){function EarPiercing(){var t;_classCallCheck(this,EarPiercing);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(EarPiercing)).call.apply(t,[this,{length:2.8,width:2.2,thickness:.6,rotation:46,dx:0,dy:0}].concat(r)))}return _inherits(EarPiercing,P),_createClass(EarPiercing,[{key:"partPrototypes",get:function get(){return[{side:null,Part:d},{side:null,Part:g}]}}]),EarPiercing}()},function(t,e,r){"use strict";r.d(e,"a",function(){return c}),r.d(e,"b",function(){return l}),r.d(e,"c",function(){return u}),r.d(e,"d",function(){return p});var f=r(1),o=r(2),h=(r(6),r(0)),n=r(20),y=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function Bodychain1Part(){var t;_classCallCheck(this,Bodychain1Part);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bodychain1Part)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0},{cleavageCoverage:.2,cleavageCoverageBot:.6}].concat(r)))}return _inherits(Bodychain1Part,f["c"]),_createClass(Bodychain1Part,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r,n;f.a.simpleStrokeFill(e,t,this);var o={x:0,y:(n=Object(h.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin)).left.p2.y};r=Object(h.drawCircle)(o,3),e.beginPath(),h.drawPoints.apply(void 0,[e].concat(_toConsumableArray(r))),e.stroke();var i={x:0,y:(n=Object(h.splitCurve)(this.cleavageCoverageBot,t.neck.cusp,t.groin)).left.p2.y};r=Object(h.drawCircle)(i,3),e.beginPath(),h.drawPoints.apply(void 0,[e].concat(_toConsumableArray(r))),e.stroke(),e.setLineDash([3,3]);var a=(n=Object(h.splitCurve)(.1,t.neck.cusp,t.collarbone)).left.p2,s=Object(y.l)(3,Object(h.rad)(50),o);e.beginPath(),Object(h.drawPoints)(e,a,s),e.stroke(),e.beginPath(),Object(h.drawPoints)(e,{x:0,y:o.y-3},{x:0,y:i.y+3}),e.stroke();var c=Object(y.l)(3,Object(h.rad)(0),i);n=Object(h.splitCurve)(.2,t.waist,t.hip);var l=Object(h.extractPoint)(n.left.p2);l.cp1={x:t.chest.nipples.x,y:l.y};var u=Object(y.l)(3,Object(h.rad)(-45),i);n=Object(h.splitCurve)(.8,t.waist,t.hip);var p=Object(h.extractPoint)(n.left.p2);p.cp1={x:t.chest.nipples.x,y:p.y},e.beginPath(),Object(h.drawPoints)(e,c,l,h.breakPoint,u,p),e.stroke()}}]),Bodychain1Part}(),a=function(t){function Bodychain2Part(){var t;_classCallCheck(this,Bodychain2Part);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bodychain2Part)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0},{}].concat(r)))}return _inherits(Bodychain2Part,f["c"]),_createClass(Bodychain2Part,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r;f.a.simpleStrokeFill(e,t,this);var n={x:0,y:t.armpit.y+9};r=Object(h.drawCircle)(n,3),e.beginPath(),h.drawPoints.apply(void 0,[e].concat(_toConsumableArray(r))),e.stroke();var o={x:0,y:t.waist.y+12};e.setLineDash([3,3]);var i=Object(h.splitCurve)(.1,t.neck.cusp,t.collarbone).left.p2,a=Object(y.l)(3,Object(h.rad)(50),n);e.beginPath(),Object(h.drawPoints)(e,i,a),e.stroke();var s=Object(h.extractPoint)(t.hip);s.cp1={x:t.armpit.x-4,y:s.y},e.beginPath(),Object(h.drawPoints)(e,{x:0,y:n.y-3},o,s),e.stroke();var c=da.splitCurve(.1,o,s).left.p2,l={x:0,y:c.y-4};l.cp1={x:.5*l.x+.5*c.x,y:l.y},e.beginPath(),da.drawPoints(e,c,l),e.stroke();var u=da.splitCurve(.2,o,s).left.p2,p={x:0,y:u.y-4};Object(y.b)(c,l,u,p),e.beginPath(),da.drawPoints(e,u,p),e.stroke()}}]),Bodychain2Part}(),s=function(t){function Bodychain3Part(){var t;_classCallCheck(this,Bodychain3Part);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bodychain3Part)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+torso",reflect:!0},{}].concat(r)))}return _inherits(Bodychain3Part,f["c"]),_createClass(Bodychain3Part,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r;f.a.simpleStrokeFill(e,t,this);var n={x:0,y:t.armpit.y+10},o={x:0,y:t.waist.y+8},i=(r=Object(h.splitCurve)(.3,t.neck.cusp,t.collarbone)).left.p2;r=Object(h.splitCurve)(.2,t.waist,t.hip);var a=Object(h.extractPoint)(r.left.p2);a.cp1={x:t.chest.nipples.x,y:a.y};var s=Object(h.adjust)(o,0,-6);r=Object(h.splitCurve)(.4,t.waist,t.hip);var c=Object(h.extractPoint)(r.left.p2);Object(y.b)(o,a,s,c),e.setLineDash([3,3]),e.beginPath(),Object(h.drawPoints)(e,i,n,o,a,h.breakPoint,o,s,c),e.stroke()}}]),Bodychain3Part}(),c=function(t){function Bodychain(){var t;_classCallCheck(this,Bodychain);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bodychain)).call.apply(t,[this,{clothingLayer:f.a.Layer.BASE,stroke:"#9c8530",fill:"red",thickness:.7}].concat(r)))}return _inherits(Bodychain,n["c"]),Bodychain}(),l=function(t){function Bodychain1(){var t;_classCallCheck(this,Bodychain1);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bodychain1)).call.apply(t,[this,{}].concat(r)))}return _inherits(Bodychain1,c),_createClass(Bodychain1,[{key:"partPrototypes",get:function get(){return[{side:null,Part:i}]}}]),Bodychain1}(),u=function(t){function Bodychain2(){var t;_classCallCheck(this,Bodychain2);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bodychain2)).call.apply(t,[this,{}].concat(r)))}return _inherits(Bodychain2,c),_createClass(Bodychain2,[{key:"partPrototypes",get:function get(){return[{side:null,Part:a}]}}]),Bodychain2}(),p=function(t){function Bodychain3(){var t;_classCallCheck(this,Bodychain3);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bodychain3)).call.apply(t,[this,{}].concat(r)))}return _inherits(Bodychain3,c),_createClass(Bodychain3,[{key:"partPrototypes",get:function get(){return[{side:null,Part:s}]}}]),Bodychain3}()},function(t,e,r){"use strict";r.d(e,"a",function(){return p}),r.d(e,"d",function(){return f}),r.d(e,"c",function(){return h}),r.d(e,"b",function(){return y});var a=r(1),o=r(2),s=(r(6),r(0)),n=r(20),c=r(5);function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function calcArmSquare(t){this.armCoverage-this.armCoverageTop<.03&&(this.armCoverageTop=this.armCoverage-.03);var e={y:Object(c.d)(t.collarbone.y,t.hand.palm.y,this.armCoverageTop)},r=Object(c.h)(e,!0,t.armpit,t.elbow.in,t.wrist.in,t.thumb.out,t.thumb.tip),n=Object(c.h)(Object(s.adjust)(r[r.length-1],0,2),!1,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,t.hand.knuckle);return e={y:Object(c.d)(t.collarbone.y,t.hand.palm.y,this.armCoverage)},r.reverse(),r=c.g.apply(void 0,[e,!0].concat(_toConsumableArray(r))),(n=c.g.apply(void 0,[{y:e.y+2},!1].concat(_toConsumableArray(n))))[0]=Object(s.extractPoint)(n[0]),n[0].cp1={x:.5*(n[0].x+r[r.length-1].x),y:n[0].y-4+8*this.armCoverageTop},r[0]=Object(s.extractPoint)(r[0]),r[0].cp1={x:.5*(n[n.length-1].x+r[0].x),y:r[0].y-4+8*this.armCoverage},{inner:r,outer:n}}var i=function(t){function SimpleArmletPart(){var t;_classCallCheck(this,SimpleArmletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleArmletPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverageTop:.8,armCoverage:.9,thickness:1}].concat(r)))}return _inherits(SimpleArmletPart,a["c"]),_createClass(SimpleArmletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){a.a.simpleStrokeFill(e,t,this),e.lineWidth=this.thickness;var r=calcArmSquare.call(this,t),n=r.inner,o=r.outer;e.beginPath(),s.drawPoints.apply(void 0,[e].concat(_toConsumableArray(o),_toConsumableArray(n),[o[0]])),e.fill(),e.stroke()}}]),SimpleArmletPart}(),l=function(t){function CrossedArmletPart(){var t;_classCallCheck(this,CrossedArmletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CrossedArmletPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverageTop:.3,armCoverage:.3,crossings:3,thickness:.8,doubled:!0,fullArmlet:!1}].concat(r)))}return _inherits(CrossedArmletPart,a["c"]),_createClass(CrossedArmletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){a.a.simpleStrokeFill(e,t,this),e.lineWidth=this.thickness;var r=calcArmSquare.call(this,t),n=r.inner,o=r.outer;this.fullArmlet&&(e.beginPath(),s.drawPoints.apply(void 0,[e].concat(_toConsumableArray(o),_toConsumableArray(n),[o[0]])),e.fill(),e.stroke()),o[o.length-1].cp1=n[0].cp1;var i=Object(c.e)(n[n.length-1],o[0],n[0],o[o.length-1],this.crossings);e.beginPath(),this.doubled?s.drawPoints.apply(void 0,[e].concat(_toConsumableArray(i.outer),[s.breakPoint],_toConsumableArray(i.inner))):s.drawPoints.apply(void 0,[e].concat(_toConsumableArray(i.outer))),e.stroke()}}]),CrossedArmletPart}(),u=function(t){function SpiralArmletPart(){var t;_classCallCheck(this,SpiralArmletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SpiralArmletPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.3,coils:3,distance:5}].concat(r)))}return _inherits(SpiralArmletPart,a["c"]),_createClass(SpiralArmletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(i,t){a.a.simpleStrokeFill(t,i,this),t.lineWidth=this.thickness;for(var e=0,r={x:0,y:Object(c.d)(i.collarbone.y,i.hand.palm.y,this.armCoverage)},n=1;n<=this.coils;n++)coil(Object(s.adjust)(r,0,e),t),e-=this.distance;function coil(t,e){var r=function calcArm(t,e){void 0!==e&&"object"!==_typeof(e)&&(e={x:0,y:e});var r=Object(c.h)(e,!0,t.armpit,t.elbow.in,t.wrist.in,t.thumb.out,t.thumb.tip),n=Object(s.extractPoint)(r[r.length-1]);r=Object(c.h)(Object(s.adjust)(n,0,2),!1,t.collarbone,t.deltoids,t.shoulder,t.elbow.out,t.wrist.out,t.hand.knuckle);var o=Object(s.extractPoint)(r[0]);return o.cp1={x:.5*o.x+.5*n.x,y:o.y-3},{inner:n,outer:o}}.call(this,i,t),n=r.inner,o=r.outer;e.beginPath(),Object(s.drawPoints)(e,n,o),e.stroke()}}}]),SpiralArmletPart}(),p=function(t){function Armlet(){var t;_classCallCheck(this,Armlet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Armlet)).call.apply(t,[this,{clothingLayer:a.a.Layer.BASE,stroke:"#9c8530",fill:"red"}].concat(r)))}return _inherits(Armlet,n["c"]),Armlet}(),f=function(t){function SpiralArmlet(){var t;_classCallCheck(this,SpiralArmlet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SpiralArmlet)).call.apply(t,[this,{}].concat(r)))}return _inherits(SpiralArmlet,p),_createClass(SpiralArmlet,[{key:"partPrototypes",get:function get(){return[{side:null,Part:u}]}}]),SpiralArmlet}(),h=function(t){function SimpleArmlet(){var t;_classCallCheck(this,SimpleArmlet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SimpleArmlet)).call.apply(t,[this,{}].concat(r)))}return _inherits(SimpleArmlet,p),_createClass(SimpleArmlet,[{key:"partPrototypes",get:function get(){return[{side:null,Part:i}]}}]),SimpleArmlet}(),y=function(t){function CrossedArmlet(){var t;_classCallCheck(this,CrossedArmlet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(CrossedArmlet)).call.apply(t,[this,{}].concat(r)))}return _inherits(CrossedArmlet,p),_createClass(CrossedArmlet,[{key:"partPrototypes",get:function get(){return[{side:null,Part:l}]}}]),CrossedArmlet}()},function(t,e,r){"use strict";r.d(e,"i",function(){return s}),r.d(e,"d",function(){return c}),r.d(e,"f",function(){return l}),r.d(e,"l",function(){return f}),r.d(e,"h",function(){return h}),r.d(e,"m",function(){return y}),r.d(e,"a",function(){return b}),r.d(e,"j",function(){return d}),r.d(e,"c",function(){return g}),r.d(e,"n",function(){return P}),r.d(e,"b",function(){return v}),r.d(e,"e",function(){return _}),r.d(e,"g",function(){return C}),r.d(e,"k",function(){return O});var o=r(1),i=r(2),u=r(4),n=r(23),a=r(3),p=r(6);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function RestraintChainPart(){var t;_classCallCheck(this,RestraintChainPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(RestraintChainPart)).call.apply(t,[this,{chainWidth:2,chainStroke:"#6d6d6d",chainDash:[3,7]}].concat(r)))}return _inherits(RestraintChainPart,o["c"]),RestraintChainPart}(),c=function(t){function BondageRopePart(){var t;_classCallCheck(this,BondageRopePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BondageRopePart)).call.apply(t,[this,{chainWidth:2.5,chainStroke:"#d92f43",chainDash:[1,6]}].concat(r)))}return _inherits(BondageRopePart,s),BondageRopePart}(),l=function(t){function ChestBondagePart(){var t;_classCallCheck(this,ChestBondagePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChestBondagePart)).call.apply(t,[this,{layer:i.a.FRONT,loc:"+".concat(p.Location.CHEST),aboveParts:["parts ".concat(p.Location.CHEST),"decorativeParts ".concat(p.Location.CHEST)],reflect:!0,aboveSameLayerParts:["chest"]}].concat(r)))}return _inherits(ChestBondagePart,c),_createClass(ChestBondagePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcTopBondage.call(this,t),n=r.top,o=r.center,i=r.bot,a=r.sideTop,s=r.sideBot;e.lineWidth=this.chainWidth,e.strokeStyle=this.chainStroke,e.setLineDash(this.chainDash),e.beginPath(),Object(u.f)(e,n,o,i,u.b,o,a,u.b,i,s),e.stroke()}}]),ChestBondagePart}(),f=function(t){function WaistBondagePart(){var t;_classCallCheck(this,WaistBondagePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(WaistBondagePart)).call.apply(t,[this,{layer:i.a.FRONT,loc:"+".concat(p.Location.TORSO),aboveParts:["parts ".concat(p.Location.TORSO),"decorativeParts ".concat(p.Location.TORSO)],reflect:!0,belowSameLayerParts:["torso","groin"]}].concat(r)))}return _inherits(WaistBondagePart,c),_createClass(WaistBondagePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=calcTopBondage.call(this,t).bot,n={x:4,y:t.waist.y-2};n.cp1=Object(u.q)(r,n,.5,.1*-Object(p.dist)(r,n));var o=Object(u.h)(t.waist);o.cp1=Object(u.q)(n,o,.5,-1);var i={x:0,y:t.pelvis.y+10};i.cp1=Object(u.q)(n,i,.5,.1*-Object(p.dist)(n,i));var a=Object(u.a)(Object(u.h)(t.groin),0,2);e.lineWidth=this.chainWidth,e.strokeStyle=this.chainStroke,e.setLineDash(this.chainDash),e.beginPath(),Object(u.f)(e,r,n,i,u.b,n,o,u.b,i,a),e.stroke()}}]),WaistBondagePart}(),h=function(t){function ChestPentagramBondagePart(){var t;_classCallCheck(this,ChestPentagramBondagePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChestPentagramBondagePart)).call.apply(t,[this,{layer:i.a.FRONT,loc:"+".concat(p.Location.CHEST),aboveParts:["parts ".concat(p.Location.CHEST),"decorativeParts ".concat(p.Location.CHEST)],reflect:!0,aboveSameLayerParts:["chest"]}].concat(r)))}return _inherits(ChestPentagramBondagePart,c),_createClass(ChestPentagramBondagePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=function calcTopPentagramBondage(t){var e=Object(u.r)(.3,t.neck.cusp,t.collarbone),r=Object(u.a)(e.right.p1,0,-1.5),n={x:0,y:.7*t.armpit.y+.3*t.neck.cusp.y};n.cp1=Object(u.q)(r,n,.5,.15*Object(p.dist)(r,n));var o={x:0,y:t.armpit.y-11},i=Object(u.h)(t.armpit);t.breast&&(i=Object(u.a)(Object(u.h)(t.breast.top),1.5,.5));i.cp1=Object(u.q)(n,i,.5,.3);var a={x:null,y:o.y+1},s=_slicedToArray(Object(u.i)(t.armpit,t.waist,a),1)[0];s.x-=.5,s.cp1=Object(u.q)(o,s,.5,-1);var c=Object(u.a)(o,0,6.66),l=Object(u.a)(Object(u.h)(n),0,8);return{top:r,center:n,bot:o,sideTop:i,sideBot:s,upperCenter:l,upperBot:c}}.call(this,t),n=r.top,o=r.center,i=r.bot,a=r.sideTop,s=r.sideBot,c=r.upperCenter,l=r.upperBot;e.lineWidth=this.chainWidth,e.strokeStyle=this.chainStroke,e.setLineDash(this.chainDash),e.beginPath(),Object(u.f)(e,n,l,i,u.b,o,a,u.b,i,s,u.b,a,c,u.b,n,c),e.stroke()}}]),ChestPentagramBondagePart}();function calcTopBondage(t){var e=Object(u.r)(.4,t.neck.cusp,t.collarbone),r=Object(u.a)(e.right.p1,0,-1.5),n={x:0,y:.7*t.armpit.y+.3*t.neck.cusp.y};n.cp1=Object(u.q)(r,n,.5,.15*Object(p.dist)(r,n));var o={x:0,y:t.armpit.y-10},i=Object(u.h)(t.armpit);t.breast&&(i=Object(u.a)(Object(u.h)(t.breast.top),1.5,.5)),i.cp1=Object(u.q)(n,i,.5,2);var a={x:null,y:o.y+1},s=_slicedToArray(Object(u.i)(t.armpit,t.waist,a),1)[0];return s.x-=.5,s.cp1=Object(u.q)(o,s,.5,-1),{top:r,center:n,bot:o,sideTop:i,sideBot:s}}var y=function(t){function WristRestraintChainPart(){var t;_classCallCheck(this,WristRestraintChainPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(WristRestraintChainPart)).call.apply(t,[this,{layer:i.a.ARMS,loc:"+".concat(p.Location.ARM),aboveParts:["parts ".concat(p.Location.ARM),"decorativeParts ".concat(p.Location.ARM),"parts ".concat(p.Location.HAND)]}].concat(r)))}return _inherits(WristRestraintChainPart,s),_createClass(WristRestraintChainPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(u.r)(.15,t.wrist.in,t.elbow.in),n=Object(u.a)(Object(u.h)(r.right.p1),1,0),o={x:-n.x,y:n.y};o.cp1=Object(u.q)(n,o,.5,5),e.lineWidth=this.chainWidth,e.strokeStyle=this.chainStroke,e.setLineDash(this.chainDash),e.beginPath(),Object(u.f)(e,n,o),e.stroke()}}]),WristRestraintChainPart}(),b=function(t){function AnkleRestraintChainPart(){var t;_classCallCheck(this,AnkleRestraintChainPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AnkleRestraintChainPart)).call.apply(t,[this,{layer:i.a.FRONT,loc:"+".concat(p.Location.LEG),aboveParts:["parts ".concat(p.Location.LEG),"decorativeParts ".concat(p.Location.LEG)]}].concat(r)))}return _inherits(AnkleRestraintChainPart,s),_createClass(AnkleRestraintChainPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(u.r)(this.startAlongLeg+.5*this.legCoverage,t.ankle.in,t.calf.in),n=Object(u.a)(Object(u.h)(r.right.p1),1,0),o={x:-n.x,y:n.y};e.lineWidth=this.chainWidth,e.strokeStyle=this.chainStroke,e.setLineDash(this.chainDash),e.beginPath(),Object(u.f)(e,n,Object(p.connectEndPoints)(n,o)),e.stroke()}}]),AnkleRestraintChainPart}(),d=function(t){function Restraints(){var t;_classCallCheck(this,Restraints);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Restraints)).call.apply(t,[this,{clothingLayer:o.a.Layer.OUTER}].concat(r)))}return _inherits(Restraints,o["b"]),Restraints}(),g=function(t){function Bondage(){var t;_classCallCheck(this,Bondage);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Bondage)).call.apply(t,[this,{clothingLayer:o.a.Layer.BASE}].concat(r)))}return _inherits(Bondage,o["b"]),Bondage}(),P=function(t){function WristRestraints(){var t,e;_classCallCheck(this,WristRestraints);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(WristRestraints)).call.apply(t,[this,{armCoverage:.75}].concat(n)))).Mods=Object.assign({armRotation:-35,handRotation:12},e.Mods),e}return _inherits(WristRestraints,d),_createClass(WristRestraints,[{key:"fill",value:function fill(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:a.b.LEFT,Part:n.c},{side:a.b.RIGHT,Part:n.c},{side:a.b.RIGHT,Part:y}]}}]),WristRestraints}(),v=function(t){function AnkleRestraints(){var t;_classCallCheck(this,AnkleRestraints);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AnkleRestraints)).call.apply(t,[this,{startAlongLeg:.25,legCoverage:.4}].concat(r)))}return _inherits(AnkleRestraints,d),_createClass(AnkleRestraints,[{key:"fill",value:function fill(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:a.b.LEFT,Part:p.BandedAnkletPart},{side:a.b.RIGHT,Part:p.BandedAnkletPart},{side:a.b.RIGHT,Part:b}]}}]),AnkleRestraints}(),_=function(t){function ChestBondage(){var t;_classCallCheck(this,ChestBondage);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChestBondage)).call.apply(t,[this,{}].concat(r)))}return _inherits(ChestBondage,g),_createClass(ChestBondage,[{key:"partPrototypes",get:function get(){return[{side:null,Part:l}]}}]),ChestBondage}(),C=function(t){function ChestPentagramBondage(){var t;_classCallCheck(this,ChestPentagramBondage);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChestPentagramBondage)).call.apply(t,[this,{}].concat(r)))}return _inherits(ChestPentagramBondage,g),_createClass(ChestPentagramBondage,[{key:"partPrototypes",get:function get(){return[{side:null,Part:h}]}}]),ChestPentagramBondage}(),O=function(t){function WaistBondage(){var t;_classCallCheck(this,WaistBondage);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(WaistBondage)).call.apply(t,[this,{}].concat(r)))}return _inherits(WaistBondage,g),_createClass(WaistBondage,[{key:"partPrototypes",get:function get(){return[{side:null,Part:f}]}}]),WaistBondage}()},function(t,e,r){"use strict";r.d(e,"b",function(){return n}),r.d(e,"f",function(){return i}),r.d(e,"d",function(){return a}),r.d(e,"a",function(){return u}),r.d(e,"e",function(){return p}),r.d(e,"c",function(){return f});var s=r(1),o=r(2),c=r(4),l=(r(3),r(6));function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _slicedToArray(t,e){return function _arrayWithHoles(t){if(Array.isArray(t))return t}(t)||function _iterableToArrayLimit(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){o=!0,i=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw i}}return r}(t,e)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function AnkletPart(){var t;_classCallCheck(this,AnkletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(AnkletPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"+".concat(l.Location.LEG),startAlongLeg:0,aboveParts:["parts ".concat(l.Location.LEG)]}].concat(r)))}return _inherits(AnkletPart,s["c"]),AnkletPart}(),i=function(t){function ChainAnkletPart(){var t;_classCallCheck(this,ChainAnkletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainAnkletPart)).call.apply(t,[this,{startAlongLeg:.28,chainWidth:2,chainDash:[3,7]}].concat(r)))}return _inherits(ChainAnkletPart,n),_createClass(ChainAnkletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(c.r)(this.startAlongLeg,t.ankle.in,t.calf.in).right.p1,n={x:null,y:r.y},o=_slicedToArray(Object(c.i)(t.calf.out,t.ankle.out,n),1)[0];s.a.simpleStrokeFill(e,t,this),e.strokeStyle=this.chainStroke,e.setLineDash(this.chainDash),e.beginPath(),Object(c.f)(e,r,Object(l.connectEndPoints)(r,o,-.25)),e.stroke()}}]),ChainAnkletPart}(),a=function(t){function BandedAnkletPart(){var t;_classCallCheck(this,BandedAnkletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BandedAnkletPart)).call.apply(t,[this,{legCoverage:.6}].concat(r)))}return _inherits(BandedAnkletPart,n),_createClass(BandedAnkletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=Object(c.r)(.05+this.startAlongLeg,t.ankle.in,t.calf.in),n=r.right.p1,o=(r=Object(c.r)(this.legCoverage,n,r.right.p2)).left.p2,i=(r=Object(c.r)(1-.9*this.startAlongLeg,t.calf.out,t.ankle.out)).left.p2,a=(r=Object(c.r)(1-.9*this.legCoverage,t.calf.out,i)).right.p1;i.cp1=r.right.p2.cp1,i.cp2=r.right.p2.cp2,s.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(c.f)(e,n,o,Object(l.connectEndPoints)(o,a,-.25),i,Object(l.connectEndPoints)(i,n)),e.fill()}}]),BandedAnkletPart}(),u=function(t){function Anklet(){var t;_classCallCheck(this,Anklet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Anklet)).call.apply(t,[this,{clothingLayer:s.a.Layer.INNER}].concat(r)))}return _inherits(Anklet,s["b"]),Anklet}(),p=function(t){function ChainAnklet(){var t;_classCallCheck(this,ChainAnklet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(ChainAnklet)).call.apply(t,[this].concat(r)))}return _inherits(ChainAnklet,u),_createClass(ChainAnklet,[{key:"stroke",value:function stroke(){return"gold"}},{key:"fill",value:function fill(){return"gold"}},{key:"partPrototypes",get:function get(){return[{side:this.side,Part:i}]}}]),ChainAnklet}(),f=function(t){function BandedAnklet(){var t;_classCallCheck(this,BandedAnklet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(BandedAnklet)).call.apply(t,[this].concat(r)))}return _inherits(BandedAnklet,u),_createClass(BandedAnklet,[{key:"fill",value:function fill(){return"gold"}},{key:"partPrototypes",get:function get(){return[{side:this.side,Part:a}]}}]),BandedAnklet}()},function(t,e,r){"use strict";r.d(e,"b",function(){return l}),r.d(e,"a",function(){return u});var n=r(1),o=r(2),i=r(0),a=r(6),s=r(3),c=r(41);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function LipstickPart(){var t;_classCallCheck(this,LipstickPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(LipstickPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"".concat(a.Location.LIPS),reflect:!1,aboveParts:["faceParts lips"]},{fill:"#b91100"}].concat(r)))}return _inherits(LipstickPart,n["c"]),_createClass(LipstickPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){n.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(i.drawPoints)(e,t.lips.top,t.lips.tip,t.lips.out,t.lips.bot,t.lips.bot.top,t.lips.out.in,t.lips.top.bot,t.lips.top),e.fill()}}]),LipstickPart}(),u=function(t){function Lipstick(){var t;_classCallCheck(this,Lipstick);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Lipstick)).call.apply(t,[this,{}].concat(r)))}return _inherits(Lipstick,c["a"]),_createClass(Lipstick,[{key:"partPrototypes",get:function get(){return[{side:s.b.LEFT,Part:l},{side:s.b.RIGHT,Part:l}]}}]),Lipstick}()},function(t,e,r){"use strict";r.d(e,"t",function(){return p}),r.d(e,"n",function(){return y}),r.d(e,"r",function(){return b}),r.d(e,"j",function(){return d}),r.d(e,"l",function(){return g}),r.d(e,"q",function(){return P}),r.d(e,"a",function(){return v}),r.d(e,"k",function(){return _}),r.d(e,"i",function(){return C}),r.d(e,"c",function(){return O}),r.d(e,"h",function(){return x}),r.d(e,"g",function(){return T}),r.d(e,"e",function(){return A}),r.d(e,"m",function(){return R}),r.d(e,"o",function(){return L}),r.d(e,"p",function(){return B}),r.d(e,"b",function(){return E}),r.d(e,"f",function(){return H}),r.d(e,"d",function(){return F}),r.d(e,"v",function(){return I}),r.d(e,"s",function(){return M}),r.d(e,"u",function(){return D});var k=r(1),n=r(3),o=r(2),h=r(12),m=r(0),f=(r(31),r(16)),i=r(26),w=r(22),a=r(17),s=(r(29),r(62)),c=(r(63),r(23)),l=r(47),u=r(21),j=r(7),S=r(5);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function wVambracePart(){var t;_classCallCheck(this,wVambracePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wVambracePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"],armCoverage:.5}].concat(r)))}return _inherits(wVambracePart,k["c"]),_createClass(wVambracePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){k.a.simpleStrokeFill(e,t,this);var r=c.l.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;j.c.call(this,t,e,[].concat(_toConsumableArray(n),[Object(m.extractPoint)(t.wrist.out),t.wrist.in],_toConsumableArray(o),[Object(m.extractPoint)(n[0])]))}}]),wVambracePart}(),y=function(t){function wGreavePart(){var t;_classCallCheck(this,wGreavePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGreavePart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"feet",aboveParts:["parts feet","parts leg"],reflect:!1},{}].concat(r)))}return _inherits(wGreavePart,k["c"]),_createClass(wGreavePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){k.a.simpleStrokeFill(e,t,this);var r=[];void 0!==t.quads&&(r[0]=da.clone(t.quads.top),r[0].x=t.thigh.out.x,r[1]=da.clone(t.quads.out));var n=S.i.apply(void 0,[t.hip,t.ankle.out,this.legCoverage,t.hip,t.thigh.out].concat(r,[t.knee.out,t.calf.out,t.ankle.out])),o=Object(S.h)(n[0],!0,t.groin,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in);n[1]&&(n[1]=Object(m.extractPoint)(n[1])),n[0]=Object(m.extractPoint)(n[0]),n[0].cp1={x:Object(S.d)(o[o.length-1].x,n[0].x,.5),y:n[0].y+16},o[0]=da.extractPoint(o[0]),o[0].cp1={x:Object(S.d)(n[n.length-1].x,o[0].x,.5),y:o[0].y+6},j.c.call(this,t,e,[].concat(_toConsumableArray(n),_toConsumableArray(o),[n[0]]))}}]),wGreavePart}(),b=function(t){function wLoinclothPart(){var t;_classCallCheck(this,wLoinclothPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLoinclothPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"leg",aboveParts:["parts leg"]}].concat(r)))}return _inherits(wLoinclothPart,k["c"]),_createClass(wLoinclothPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r;k.a.simpleStrokeFill(e,t,this);var n=w.t.call(this,t),o={};o.inTop=Object(m.extractPoint)(n.inBot),r=Object(m.splitCurve)(this.topCoverage,n.inBot,n.outBot),o.outTop=Object(m.extractPoint)(r.left.p2),o.outTop.cp1=n.inBot.cp1;var i=Object(S.d)(t.ankle.out.y,t.hip.y,1-this.legCoverage);r=Object(m.splitCurve)(this.bottomCoverage,n.inBot,n.outBot),o.outBot={x:r.left.p2.x,y:i},r=Object(m.splitCurve)(.3,o.outTop,o.outBot),o.outBot.cp1=r.left.p2,o.outBot.cp1.x+=this.curveX,o.outBot.cp1.y+=this.curveY,o.inBot={x:-.1,y:i-4*this.bottomCoverage},o.inBot.cp1={x:Object(S.d)(o.outBot.x,o.inBot.x),y:o.inBot.y},j.c.call(this,t,e,[o.inTop,o.outTop,o.outBot,o.inBot]),e.fillStyle=this.highlight,e.beginPath(),Object(m.drawPoints)(e,n.inTop,n.outTop,n.outMid,n.outBot,n.inBot),e.stroke(),e.fill()}}]),wLoinclothPart}(),d=function(t){function wFallenTop(){var t;_classCallCheck(this,wFallenTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wFallenTop)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(wFallenTop,k["c"]),_createClass(wFallenTop,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){k.a.simpleStrokeFill(e,t,this);var r=l.o.call(this,t),n=r.belt,o=r.topIn,i=r.topNeck,a=r.topOut,s=r.botOut,c=r.botIn;j.c.call(this,t,e,[o,i,a,s,c,o]),e.fillStyle=this.strokeStyle,e.beginPath(),Object(m.drawPoints)(e,n.inTop,n.outTop,n.outMid,n.outBot,n.inBot),e.fill(),e.stroke()}}]),wFallenTop}(),g=function(t){function wGorgetPart(){var t;_classCallCheck(this,wGorgetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGorgetPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+neck",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(wGorgetPart,k["c"]),_createClass(wGorgetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){k.a.simpleStrokeFill(e,t,this);var r=l.p.call(this,t);if(j.c.call(this,t,e,[r.inTop,r.outTop,r.mid,r.outBot,r.outBot,r.inBot]),this.groove){var n=Object(m.splitCurve)(.4,r.outBot,r.inBot),o=Object(m.extractPoint)(n.left.p2);n=Object(m.splitCurve)(.5,r.inTop,r.outTop);var i=Object(m.extractPoint)(n.left.p2);e.beginPath(),Object(m.drawPoints)(e,o,i,m.breakPoint,r.inBot,r.inTop),e.stroke()}}}]),wGorgetPart}(),P=function(t){function wLoincloth(){var t;_classCallCheck(this,wLoincloth);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLoincloth)).call.apply(t,[this,{waistCoverage:.42,beltWidth:7,beltCurve:-7,thickness:1,topCoverage:.8,legCoverage:.5,bottomCoverage:.14,curveX:-16,curveY:14,highlight:"hsla(33, 80%, 10%, 1)"}].concat(r)))}return _inherits(wLoincloth,i["f"]),_createClass(wLoincloth,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:b},{side:n.b.RIGHT,Part:b}]}}]),wLoincloth}(),v=function(t){function wBarbaricBra(){var t;_classCallCheck(this,wBarbaricBra);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBarbaricBra)).call.apply(t,[this,{furWidth:4,highlight:"hsla(33, 80%, 10%, 1)",showStrap:!1,strapWidth:2,neckCoverage:.7,thickness:.5}].concat(r)))}return _inherits(wBarbaricBra,a["i"]),_createClass(wBarbaricBra,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:l.b},{side:null,Part:s.e},{side:null,Part:s.f}]}}]),wBarbaricBra}(),_=function(t){function wGorget(){var t;_classCallCheck(this,wGorget);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGorget)).call.apply(t,[this,{clothingLayer:k.a.Layer.OUTER_FAR,curveX:0,curveY:0,groove:!1,cleavageCoverage:.16,neckTopCoverage:-.1,neckBotCoverage:.81}].concat(r)))}return _inherits(wGorget,w["a"]),_createClass(wGorget,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:g}]}}]),wGorget}(),C=function(t){function wFallen(){var t;_classCallCheck(this,wFallen);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wFallen)).call.apply(t,[this,{topInCoverage:0,topOutCoverage:.22,botInCoverage:.02,botOutCoverage:.69,middle:3,bellyX:-15,bellyY:-8,waistCoverage:.3,beltWidth:2,beltCurve:-7,thickness:.5}].concat(r)))}return _inherits(wFallen,f["j"]),_createClass(wFallen,[{key:"fill",value:function fill(){return"hsla(33, 45%, 35%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(33, 45%, 25%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:d}]}}]),wFallen}(),O=function(t){function wBikiniTopBreastPart(){var t;_classCallCheck(this,wBikiniTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBikiniTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(wBikiniTopBreastPart,k["c"]),_createClass(wBikiniTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){k.a.simpleStrokeFill(e,t,this);this.outerNeckCoverage<this.innerNeckCoverage&&(this.outerNeckCoverage=this.innerNeckCoverage),this.innerNeckCoverage>this.outerNeckCoverage&&(this.innerNeckCoverage=this.outerNeckCoverage);var r=t.neck.cusp;t.trapezius&&(r=t.trapezius);var n=Object(m.splitCurve)(this.outerNeckCoverage,r,t.collarbone),o=n.left.p2;n=this.innerNeckCoverage<0?Object(m.splitCurve)(1+this.innerNeckCoverage,t.neck.top,r):Object(m.splitCurve)(this.innerNeckCoverage,r,t.collarbone);var i=Object(m.extractPoint)(n.left.p2);if(!1===t.hasOwnProperty("breast")){var a=Object(m.adjust)(t.armpit,0,0),s={x:-.1,y:a.y-1},c={x:-.1,y:s.y+7.2};return c.cp1={x:s.x+7.2,y:s.y+3.6},n=Object(m.splitCurve)(.5,c,i),i.cp1={x:n.left.p2.x+this.curveCleavageX,y:n.left.p2.y+this.curveCleavageY},e.beginPath(),Object(m.drawPoints)(e,c,i,o,Object(m.extractPoint)(a),s),e.fill(),e.beginPath(),Object(m.drawPoints)(e,c,i,o,Object(m.extractPoint)(a)),e.stroke(),void Object(h.b)(t,e,this)}var l=Object(m.adjust)(t.breast.tip,.1,0),u=Object(m.adjust)(t.breast.bot,0,-.1),p={x:-.1,y:u.y},f={x:-.1,y:p.y+7.2};f.cp1={x:p.x+7.2,y:p.y+3.6},n=Object(m.splitCurve)(.5,f,i),i.cp1={x:n.left.p2.x+this.curveCleavageX,y:n.left.p2.y+this.curveCleavageY},j.c.call(this,t,e,[f,i,o,l,u,p,f],[f,i,o,l,u,p,f])}}]),wBikiniTopBreastPart}(),x=function(t){function wCuirassPart(){var t;_classCallCheck(this,wCuirassPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCuirassPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0},{}].concat(r)))}return _inherits(wCuirassPart,k["c"]),_createClass(wCuirassPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=f.p.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=r.shoulder,s=r.armpit,c=r.waist,l=r.hip,u=r.out,p=r.bottom;k.a.simpleStrokeFill(e,t,this),a=Object(m.adjust)(a,-1,.5),s.cp1={x:a.x-5,y:.5*(a.y-s.y)+s.y},s.cp2=void 0,(p={y:u.y-6,x:-.1}).cp1={x:.5*p.x+.5*u.x,y:p.y},j.c.call(this,t,e,[n,o,i,a,s,c,l,u,p])}}]),wCuirassPart}(),T=function(t){function wCuirassBreastPart(){var t;_classCallCheck(this,wCuirassBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCuirassBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(wCuirassBreastPart,k["c"]),_createClass(wCuirassBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(k.a.simpleStrokeFill(e,t,this),!Object(h.b)(t,e,this)){var r=t.breast;j.c.call(this,t,e,[r.top,r.tip,r.bot,Object(m.adjust)(r.in,0,-1),Object(m.adjust)(r.cleavage,0,-2),Object(m.adjust)(r.cleavage,-.4,1),Object(m.adjust)(r.top,0,1)],[r.top,r.tip,r.bot])}}}]),wCuirassBreastPart}(),A=function(t){function wCingulumPart(){var t;_classCallCheck(this,wCingulumPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCingulumPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"+torso",reflect:!0,aboveParts:["parts leg","clothingParts groin","parts chest","clothingParts chest","decorativeParts chest"],aboveSameLayerParts:["clothingParts torso"]},{}].concat(r)))}return _inherits(wCingulumPart,k["c"]),_createClass(wCingulumPart,[{key:"renderClothingPoints",value:function renderClothingPoints(s,c){k.a.simpleStrokeFill(c,s,this);for(var t,e,r,n,o,i,a,l=w.t.call(this,s),u=l.inTop,p=l.outTop,f=l.outMid,h=l.outBot,y=l.inBot,b=this.pointy,d=Math.floor(this.number/2),g=(1-(this.margin/10+this.space/10*d))/(d+.5),P=0;P<d;P++){var v=0+this.margin/10+P*g+P*(this.space/10),_=Object(m.getPointOnCurve)(v+g,h,y),C=Object(m.getPointOnCurve)(v,h,y),O=this.length*(1-this.crest/10*((1+d-P)/10));t=this,e=_,r=C,n=O,void 0,o=Object(m.adjust)(r,0,-n),i=Object(m.adjust)(Object(S.d)(e,r),0,-(n+b)),a=Object(m.adjust)(e,0,-n),j.c.call(t,s,c,[r,o,i,a,e])}!function drawFirstPlate(t,e,r,n){var o=Object(m.adjust)(r,0,-n),i=Object(m.adjust)(Object(S.d)(e,r),0,-(n+b)),a=(Object(m.adjust)(e,0,-n),Object(m.adjust)(Object(S.d)(e,r),0,0));j.c.call(t,s,c,[r,o,i,a],[r,o,i])}(this,Object(m.getPointOnCurve)(1+g/2,h,y),Object(m.getPointOnCurve)(1-g/2,h,y),1*this.length),j.c.call(this,s,c,[u,p,f,h,y])}}]),wCingulumPart}(),R=function(t){function wGreaveLeft(){var t;_classCallCheck(this,wGreaveLeft);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGreaveLeft)).call.apply(t,[this,{legCoverage:.54}].concat(r)))}return _inherits(wGreaveLeft,u["a"]),_createClass(wGreaveLeft,[{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:y}]}}]),wGreaveLeft}(),L=function(t){function wGreaveRight(){var t;_classCallCheck(this,wGreaveRight);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGreaveRight)).call.apply(t,[this,{legCoverage:.54}].concat(r)))}return _inherits(wGreaveRight,u["a"]),_createClass(wGreaveRight,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:y}]}}]),wGreaveRight}(),B=function(t){function wGreaves(){var t;_classCallCheck(this,wGreaves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGreaves)).call.apply(t,[this,{legCoverage:.54}].concat(r)))}return _inherits(wGreaves,u["a"]),_createClass(wGreaves,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:y},{side:n.b.RIGHT,Part:y}]}}]),wGreaves}(),E=function(t){function wBikiniTop(){var t;_classCallCheck(this,wBikiniTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBikiniTop)).call.apply(t,[this,{outerNeckCoverage:.35,innerNeckCoverage:.03,curveCleavageX:14,curveCleavageY:-14,waistCoverage:.66,sideLoose:0}].concat(r)))}return _inherits(wBikiniTop,f["j"]),_createClass(wBikiniTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:O}]}}]),wBikiniTop}(),H=function(t){function wCuirass(){var t;_classCallCheck(this,wCuirass);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCuirass)).call.apply(t,[this,{clothingLayer:k.a.Layer.OUTER_FAR,cleavageOpeness:.055,cleavageCoverage:.1,sideLoose:.3,waistCoverage:.5,curveCleavageX:1,curveCleavageY:-4,legCoverage:1}].concat(r)))}return _inherits(wCuirass,u["a"]),_createClass(wCuirass,[{key:"partPrototypes",get:function get(){return[{side:null,Part:T},{side:null,Part:x}]}}]),wCuirass}(),F=function(t){function wCingulum(){var t;_classCallCheck(this,wCingulum);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCingulum)).call.apply(t,[this,{clothingLayer:k.a.Layer.OUTER_FAR,number:5,space:0,margin:0,length:30,pointy:5,crest:1,hue:0,satur:50,light:50,waistCoverage:.2,beltWidth:7,beltCurve:-6}].concat(r)))}return _inherits(wCingulum,u["a"]),_createClass(wCingulum,[{key:"partPrototypes",get:function get(){return[{side:null,Part:A}]}}]),wCingulum}(),I=function(t){function wVambraces(){var t;_classCallCheck(this,wVambraces);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wVambraces)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(wVambraces,u["a"]),_createClass(wVambraces,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p}]}}]),wVambraces}(),M=function(t){function wVambraceLeft(){var t;_classCallCheck(this,wVambraceLeft);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wVambraceLeft)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(wVambraceLeft,u["a"]),_createClass(wVambraceLeft,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:p}]}}]),wVambraceLeft}(),D=function(t){function wVambraceRight(){var t;_classCallCheck(this,wVambraceRight);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wVambraceRight)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(wVambraceRight,u["a"]),_createClass(wVambraceRight,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:p}]}}]),wVambraceRight}()},function(t,e,r){"use strict";r.d(e,"c",function(){return a}),r.d(e,"a",function(){return u}),r.d(e,"b",function(){return p});var s=r(1),n=r(3),o=(r(12),r(2)),c=r(0),l=r(5),i=r(79);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function wThumbPart(){var t;_classCallCheck(this,wThumbPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wThumbPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+hand",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{}].concat(r)))}return _inherits(wThumbPart,s["c"]),_createClass(wThumbPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){s.a.simpleStrokeFill(e,t,this);var r,n=t.thumb.tip,o=t.thumb.out;r=da.splitCurve(-.08,n,o);var i=Object(c.extractPoint)(r.left.p2);r=da.splitCurve(.15,n,o);var a=Object(c.extractPoint)(r.left.p2);a.x+=.2,i.cp1=Object(l.k)(a,i,.7,.8),a.cp1=Object(l.k)(a,i,.7,-1),this.invisible<1&&(e.globalAlpha=1-this.invisible,e.globalAlpha<0&&(e.globalAlpha=0),e.beginPath(),Object(c.drawPoints)(e,a,i,a),e.fill())}}]),wThumbPart}(),u=function(t){function wFingerPart(){var t;_classCallCheck(this,wFingerPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wFingerPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"+hand",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{}].concat(r)))}return _inherits(wFingerPart,s["c"]),_createClass(wFingerPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){s.a.simpleStrokeFill(e,t,this);var r,n=t.hand.tip,o=t.hand.knuckle;r=Object(c.splitCurve)(-.08,n,o);var i=Object(c.extractPoint)(r.left.p2);r=Object(c.splitCurve)(.15,n,o);var a=Object(c.extractPoint)(r.left.p2);a.x-=.2,i.x-=.6,i.cp1=Object(l.k)(a,i,.7,.8),a.cp1=Object(l.k)(a,i,.7,-1),this.invisible<1&&(e.globalAlpha=1-this.invisible,e.globalAlpha<0&&(e.globalAlpha=0),e.beginPath(),Object(c.drawPoints)(e,a,i,a),e.fill())}}]),wFingerPart}(),p=function(t){function wNails(){var t;_classCallCheck(this,wNails);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wNails)).call.apply(t,[this,{invisible:0}].concat(r)))}return _inherits(wNails,i["a"]),_createClass(wNails,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:u},{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:u},{side:n.b.RIGHT,Part:a}]}}]),wNails}()},function(t,e,r){"use strict";r.d(e,"g",function(){return i}),r.d(e,"e",function(){return p}),r.d(e,"c",function(){return f}),r.d(e,"f",function(){return h}),r.d(e,"h",function(){return y}),r.d(e,"a",function(){return b}),r.d(e,"b",function(){return d}),r.d(e,"d",function(){return g});var a=r(1),n=r(3),s=r(12),o=r(2),c=r(0),l=(r(5),r(23)),u=r(7);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var i=function(t){function wGloveSleevePart(){var t;_classCallCheck(this,wGloveSleevePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGloveSleevePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(wGloveSleevePart,a["c"]),_createClass(wGloveSleevePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=l.l.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;a.a.simpleStrokeFill(e,t,this),u.c.call(this,t,e,[].concat(_toConsumableArray(n),[Object(c.extractPoint)(t.hand.palm)],_toConsumableArray(o),[Object(c.extractPoint)(n[0])]))}}]),wGloveSleevePart}(),p=function(t){function wGlovePart(){var t;_classCallCheck(this,wGlovePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGlovePart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(wGlovePart,a["c"]),_createClass(wGlovePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){a.a.simpleStrokeFill(e,t,this);var r=l.l.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints,i=[t.hand.knuckle,t.hand.tip,t.hand.palm,t.thumb.tip,t.thumb.out];0<this.armCoverage?u.c.call(this,t,e,[].concat(_toConsumableArray(n),i,_toConsumableArray(o),[Object(c.extractPoint)(n[0])])):u.c.call(this,t,e,[].concat(_toConsumableArray(n),i,_toConsumableArray(o),[Object(s.a)(o[o.length-1],n[0])]))}}]),wGlovePart}(),f=function(t){function wBraceletPart(){var t;_classCallCheck(this,wBraceletPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBraceletPart)).call.apply(t,[this,{layer:o.a.ARMS,loc:"arm",aboveParts:["parts arm","decorativeParts arm","parts hand"]},{armCoverage:.5}].concat(r)))}return _inherits(wBraceletPart,a["c"]),_createClass(wBraceletPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){a.a.simpleStrokeFill(e,t,this);var r=l.l.call(this,t),n=r.outerArmPoints,o=r.innerArmPoints;0<this.armCoverage?u.c.call(this,t,e,[].concat(_toConsumableArray(n),[Object(c.extractPoint)(t.wrist.out),t.wrist.in],_toConsumableArray(o),[Object(c.extractPoint)(n[0])])):u.c.call(this,t,e,[].concat(_toConsumableArray(n),[t.wrist.out,t.wrist.in],_toConsumableArray(o),[Object(s.a)(o[o.length-1],n[0])]))}}]),wBraceletPart}(),h=function(t){function wGloveSleeve(){var t;_classCallCheck(this,wGloveSleeve);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGloveSleeve)).call.apply(t,[this,{armCoverage:.5,thickness:.6}].concat(r)))}return _inherits(wGloveSleeve,l["g"]),_createClass(wGloveSleeve,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:i},{side:n.b.RIGHT,Part:i}]}}]),wGloveSleeve}(),y=function(t){function wLongGloves(){var t;_classCallCheck(this,wLongGloves);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLongGloves)).call.apply(t,[this,{armCoverage:.5}].concat(r)))}return _inherits(wLongGloves,l["g"]),_createClass(wLongGloves,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:p},{side:n.b.RIGHT,Part:p}]}}]),wLongGloves}(),b=function(t){function wBracelet(){var t;_classCallCheck(this,wBracelet);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBracelet)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(wBracelet,l["g"]),_createClass(wBracelet,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:f},{side:n.b.RIGHT,Part:f}]}}]),wBracelet}(),d=function(t){function wBraceletLeft(){var t;_classCallCheck(this,wBraceletLeft);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBraceletLeft)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(wBraceletLeft,l["g"]),_createClass(wBraceletLeft,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:f}]}}]),wBraceletLeft}(),g=function(t){function wBraceletRight(){var t;_classCallCheck(this,wBraceletRight);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wBraceletRight)).call.apply(t,[this,{armCoverage:.75}].concat(r)))}return _inherits(wBraceletRight,l["g"]),_createClass(wBraceletRight,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:f}]}}]),wBraceletRight}()},function(t,e,r){"use strict";r.d(e,"b",function(){return a}),r.d(e,"c",function(){return s}),r.d(e,"e",function(){return c}),r.d(e,"a",function(){return l}),r.d(e,"d",function(){return u});var y=r(1),o=(r(3),r(2)),b=r(0),d=r(5),n=r(16),i=r(17),g=r(78),P=r(7);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function wCorsetBreastPart(){var t;_classCallCheck(this,wCorsetBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCorsetBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]}].concat(r)))}return _inherits(wCorsetBreastPart,y["c"]),_createClass(wCorsetBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(y.a.simpleStrokeFill(e,t,this),!Object(P.b)(t,e,this)){var r=Object(i.j)(t);r.out.cp1=Object(b.simpleQuadratic)(r.top,r.out,.4,1),r.top.cp1=Object(b.simpleQuadratic)(t.breast.cleavage,r.top,.6,2),r.bot=Object(b.adjust)(t.breast.bot,0,-.6),r.inner=Object(b.adjust)(t.breast.in,-.9,-.5),r.cleavage=Object(b.adjust)(t.breast.cleavage,-.6,0),P.c.call(this,t,e,[r.top,r.out,r.tip,r.bot,r.inner,r.cleavage,r.top],[t.breast.cleavage,r.top,r.out,r.tip,r.bot,r.inner,r.cleavage,r.top])}}}]),wCorsetBreastPart}(),s=function(t){function wCorsetPart(){var t;_classCallCheck(this,wCorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCorsetPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(wCorsetPart,y["c"]),_createClass(wCorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){y.a.simpleStrokeFill(e,t,this);var r=g.f.call(this,t),n=r.topIn,o=r.topOut,i=r.waist,a=r.mid,s=r.botOut,c=r.botIn;if(P.c.call(this,t,e,[n,o,i,a,s,c]),this.lacing&&0<this.knots&&this.invisible<1){var l=Object(b.adjust)(n,-3,-1),u=Object(b.adjust)(c,-3,1),p=Object(b.adjust)(n,3,-1),f=Object(b.adjust)(c,3,1),h=Object(d.e)(u,l,f,p,this.knots);e.strokeStyle=this.highlight,e.beginPath(),b.drawPoints.apply(void 0,[e].concat(_toConsumableArray(h.inner),[b.breakPoint],_toConsumableArray(h.outer))),e.stroke()}}}]),wCorsetPart}(),c=function(t){function wHalfCorsetPart(){var t;_classCallCheck(this,wHalfCorsetPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHalfCorsetPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(wHalfCorsetPart,y["c"]),_createClass(wHalfCorsetPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){y.a.simpleStrokeFill(e,t,this);var r=Object(b.splitCurve)(1-this.topCoverage,t.armpit,t.waist),n=Object(b.extractPoint)(r.left.p2),o=r.right.p1,i=this.waistCoverage<0?t.hip:void 0,a=(r=this.waistCoverage<0?Object(b.splitCurve)(Math.abs(this.waistCoverage),t.hip,t.thigh.out):Object(b.splitCurve)(1-this.waistCoverage,t.waist,t.hip)).left.p2,s={x:-.2,y:a.y-7};s.cp2={x:.5*s.x+.5*a.x,y:s.y},s.cp1={x:s.cp2.x+12,y:s.cp2.y+9};var c={x:-.2,y:n.y-5};if(n.cp1={x:.5*n.x+.5*c.x,y:c.y},P.c.call(this,t,e,[c,n,o,i,a,s]),this.lacing&&0<this.knots){var l=Object(b.adjust)(c,-3,-1),u=Object(b.adjust)(s,-3,1),p=Object(b.adjust)(c,3,-1),f=Object(b.adjust)(s,3,1),h=Object(d.e)(u,l,f,p,this.knots);e.strokeStyle=this.highlight,e.beginPath(),b.drawPoints.apply(void 0,[e].concat(_toConsumableArray(h.inner),[b.breakPoint],_toConsumableArray(h.outer))),e.stroke()}}}]),wHalfCorsetPart}(),l=function(t){function wCorset(){var t;_classCallCheck(this,wCorset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wCorset)).call.apply(t,[this,{clothingLayer:y.a.Layer.OUTER,waistCoverage:.1,thickness:1,lacing:!0,knots:6,invisible:0,highlight:"hsla(0, 0%, 52%, 1)"}].concat(r)))}return _inherits(wCorset,n["j"]),_createClass(wCorset,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:a},{side:null,Part:s}]}}]),wCorset}(),u=function(t){function wHalfCorset(){var t;_classCallCheck(this,wHalfCorset);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHalfCorset)).call.apply(t,[this,{clothingLayer:y.a.Layer.OUTER,topCoverage:.6,waistCoverage:.1,thickness:1,knots:6,lacing:!0,highlight:"hsla(0, 0%, 52%, 1)"}].concat(r)))}return _inherits(wHalfCorset,n["j"]),_createClass(wHalfCorset,[{key:"stroke",value:function stroke(){return"#000"}},{key:"fill",value:function fill(){return"hsl(0,10%,20%)"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:c}]}}]),wHalfCorset}()},function(t,e,r){"use strict";r.d(e,"o",function(){return o}),r.d(e,"f",function(){return i}),r.d(e,"s",function(){return a}),r.d(e,"q",function(){return s}),r.d(e,"n",function(){return c}),r.d(e,"r",function(){return l}),r.d(e,"p",function(){return u}),r.d(e,"t",function(){return p}),r.d(e,"a",function(){return h}),r.d(e,"d",function(){return y}),r.d(e,"b",function(){return d}),r.d(e,"c",function(){return g}),r.d(e,"e",function(){return P}),r.d(e,"m",function(){return v}),r.d(e,"h",function(){return _}),r.d(e,"l",function(){return C}),r.d(e,"g",function(){return O}),r.d(e,"k",function(){return k}),r.d(e,"i",function(){return T}),r.d(e,"j",function(){return A});var m=r(1),n=(r(10),r(3)),b=(r(2),r(9)),w=(r(28),r(4)),f=r(15),j=r(5),S=r(7),x=r(34);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var o=function(t){function wHighSneakersPart(){var t;_classCallCheck(this,wHighSneakersPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHighSneakersPart)).call.apply(t,[this,{},{tip:0,laceThickness:.8,tongue:6.6,highlight:"white",crosses:0,hue:10,satur:80,light:50,alpha:1}].concat(r)))}return _inherits(wHighSneakersPart,f["h"]),_createClass(wHighSneakersPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){m.a.simpleStrokeFill(e,t,this);var r=this.crosses?this.crosses:30*(1-this.legCoverage),n=x.i.call(this,t),o=n.outerPoints,i=n.innerPoints,a=Object(w.a)(t.ankle.outbot,this.tight,0),s=Object(w.a)(t.ankle.inbot,-this.tight,0);s.cp2.x-=1+this.tight;var c=Object(w.a)(t.toe.out,this.tight+1,0),l=Object(w.a)(t.toe.in,-this.tight,-this.tight);if(S.c.call(this,t,e,[].concat(_toConsumableArray(o),[a,c,l,s],_toConsumableArray(i),[Object(w.h)(o[0])])),-8<this.tip){var u=Object(w.r)(.4,l,s);u=u.left.p2;var p=Object(w.h)(c);p.cp1={x:Object(j.d)(p.x,u.x),y:p.y-(2+this.shoeHeight)+this.tip},S.c.call(this,t,e,[p,l,u,p],[],{fillWithHighlight:!0})}var f=Object(w.h)(Object(w.a)(t.ankle.out,-2,0)),h=Object(w.a)(f,-2,-9),y=Object(w.h)(Object(w.a)(t.ankle.in,2,0)),b=Object(w.a)(y,-.5,-9),d=h.x-b.x,g=Object(j.d)(o[0],i[i.length-1]),P=Object(w.a)(g,d,0),v=Object(w.a)(g,-d,0),_=Object(j.e)(h,f,b,y,2,0),C=Object(j.e)(f,P,y,v,r,0),O=Object(w.a)(P,-1,0),k=Object(w.a)(v,1,0);O.cp1=Object(j.k)(P,k,.5,-this.tongue),S.c.call(this,t,e,[O,P,f,h,b,y,v,k,O],[],{fillWithStroke:!0}),S.c.call(this,t,e,[],[].concat(_toConsumableArray(_.inner),[w.b],_toConsumableArray(_.outer),[w.b],_toConsumableArray(C.inner),[w.b],_toConsumableArray(C.outer)),{strokeWithHighlight:!0,lineWidth:this.laceThickness})}}]),wHighSneakersPart}(),i=function(t){function SneakersPart(){var t;_classCallCheck(this,SneakersPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SneakersPart)).call.apply(t,[this,{},{tongue:8}].concat(r)))}return _inherits(SneakersPart,f["h"]),_createClass(SneakersPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){m.a.simpleStrokeFill(e,t,this),Object(b.j)(e,{fill:this.fill,stroke:this.fill},t);var r=Object(w.a)(t.ankle.outbot,this.tight,0),n=Object(w.a)(t.ankle.inbot,-this.tight,0);n.cp2.x-=1+this.tight;var o=Object(w.a)(t.toe.out,this.tight+1,0),i=Object(w.a)(t.toe.in,-this.tight,-this.tight);S.c.call(this,t,e,[t.ankle.out,r,o,i,n,t.ankle.in]);var a=Object(w.r)(.4,i,n);a=a.left.p2;var s=Object(w.h)(o);s.cp1={x:Object(j.d)(s.x,a.x),y:s.y-(2+this.shoeHeight)},e.strokeStyle="lime",e.fillStyle="white",e.beginPath(),Object(w.f)(e,s,i,a,s),e.fill(),e.stroke();var c=Object(w.h)(t.ankle.out),l=Object(w.a)(c,-2,-9),u=Object(w.h)(t.ankle.in),p=Object(w.a)(u,-.5,-9),f=Object(j.e)(l,c,p,u,2,-1);e.beginPath(),w.f.apply(void 0,[e].concat(_toConsumableArray(f.inner),[w.b],_toConsumableArray(f.outer))),e.stroke();var h=Object(w.a)(c,-1,0),y=Object(w.a)(u,1,0);h.cp1=Object(j.k)(c,y,.5,-this.tongue),S.c.call(this,t,e,[y,h,y],[],{fillWithStroke:!0})}}]),SneakersPart}(),a=function(t){function wSimpleSneakersPart(){var t;_classCallCheck(this,wSimpleSneakersPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSimpleSneakersPart)).call.apply(t,[this,{},{tip:0,laceThickness:.8,tongue:6.6,highlight:"white",crosses:2,hue:10,satur:80,light:50,alpha:1}].concat(r)))}return _inherits(wSimpleSneakersPart,f["h"]),_createClass(wSimpleSneakersPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){m.a.simpleStrokeFill(e,t,this);var r=Object(w.a)(t.ankle.outbot,this.tight,0),n=Object(w.a)(t.ankle.inbot,-this.tight,0);n.cp2.x-=1+this.tight;var o=Object(w.a)(t.toe.out,this.tight+1,0),i=Object(w.a)(t.toe.in,-this.tight,-this.tight);S.c.call(this,t,e,[t.ankle.out,r,o,i,n,t.ankle.in]);var a=Object(w.r)(.4,i,n);a=a.left.p2;var s=Object(w.h)(o);s.cp1={x:Object(j.d)(s.x,a.x),y:s.y-(2+this.shoeHeight)+this.tip},S.c.call(this,t,e,[s,i,a,s],[],{fillWithHighlight:!0});var c=Object(w.h)(t.ankle.out),l=Object(w.a)(c,-2,-9),u=Object(w.h)(t.ankle.in),p=Object(w.a)(u,-.5,-9),f=Object(j.e)(l,c,p,u,this.crosses,-1);S.c.call(this,t,e,[],[].concat(_toConsumableArray(f.inner),[w.b],_toConsumableArray(f.outer)),{strokeWithHighlight:!0,lineWidth:this.laceThickness});var h=Object(w.a)(c,-1,0),y=Object(w.a)(u,1,0);h.cp1=Object(j.k)(c,y,.5,-this.tongue),S.c.call(this,t,e,[y,h,y],[],{fillWithStroke:!0})}}]),wSimpleSneakersPart}(),s=function(t){function wSimpleShoesPart(){var t;_classCallCheck(this,wSimpleShoesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSimpleShoesPart)).call.apply(t,[this].concat(r)))}return _inherits(wSimpleShoesPart,f["h"]),_createClass(wSimpleShoesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){m.a.simpleStrokeFill(e,t,this),Object(b.j)(e,{fill:this.fill,stroke:this.fill},t);var r=Object(w.a)(t.ankle.outbot,this.tight,0),n=Object(w.a)(t.ankle.inbot,-this.tight,0);n.cp2.x-=1+this.tight;var o=Object(w.a)(t.toe.out,this.tight+1,0),i=Object(w.a)(t.toe.in,-this.tight,-this.tight);S.c.call(this,t,e,[t.ankle.out,r,o,i,n,t.ankle.in])}}]),wSimpleShoesPart}(),c=function(t){function wHighSneakers(){var t;_classCallCheck(this,wHighSneakers);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHighSneakers)).call.apply(t,[this,{tight:.5,shoeHeight:0,legCoverage:1}].concat(r)))}return _inherits(wHighSneakers,f["m"]),_createClass(wHighSneakers,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:o},{side:n.b.RIGHT,Part:o}]}}]),wHighSneakers}(),l=function(t){function wSimpleSneakers(){var t;_classCallCheck(this,wSimpleSneakers);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSimpleSneakers)).call.apply(t,[this,{tight:.5,shoeHeight:0}].concat(r)))}return _inherits(wSimpleSneakers,f["m"]),_createClass(wSimpleSneakers,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),wSimpleSneakers}(),u=function(t){function wSimpleShoes(){var t;_classCallCheck(this,wSimpleShoes);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSimpleShoes)).call.apply(t,[this,{tight:.5,shoeHeight:0}].concat(r)))}return _inherits(wSimpleShoes,f["m"]),_createClass(wSimpleShoes,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:s},{side:n.b.RIGHT,Part:s}]}}]),wSimpleShoes}(),p=function(t){function wwSneakers(){var t;_classCallCheck(this,wwSneakers);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wwSneakers)).call.apply(t,[this,{tight:.5,shoeHeight:0}].concat(r)))}return _inherits(wwSneakers,f["m"]),_createClass(wwSneakers,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:i}]}}]),wwSneakers}();function calcStrap(t,e,r){var n=function calcLegPoints(t,e,r){var n,o,i=[];return void 0!==t.quads&&(i[0]=clone(t.quads.top),i[0].x=t.thigh.out.x,i[1]=clone(t.quads.out)),n=Object(j.h)(e,!0,t.groin,t.thigh.top,t.thigh.in,t.knee.intop,t.knee.in,t.calf.in,t.ankle.in,t.ankle.inbot),o=j.h.apply(void 0,[Object(w.a)(n[n.length-1],0,0),!1,t.hip,t.thigh.out].concat(i,[t.knee.out,t.calf.out,t.ankle.out,t.ankle.outbot])),n.reverse(),n=j.g.apply(void 0,[r,!0].concat(_toConsumableArray(n))),(o=j.g.apply(void 0,[r,!1].concat(_toConsumableArray(o))))[0]=Object(w.h)(o[0]),n[0]=Object(w.h)(n[0]),{inner:n,outer:o}}(t,{y:e.y+r},e),o=n.outer,i=n.inner;return o[0].cp1={x:Object(j.d)(i[i.length-1].x,o[0].x,.5),y:o[0].y-2},i[0].cp1={x:Object(j.d)(o[o.length-1].x,i[0].x,.5),y:i[0].y-2},{inner:i,outer:o}}var h=function(t){function GaiterPart(){var t;_classCallCheck(this,GaiterPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(GaiterPart)).call.apply(t,[this].concat(r)))}return _inherits(GaiterPart,f["h"]),_createClass(GaiterPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){m.a.simpleStrokeFill(e,t,this),e.beginPath(),Object(w.f)(e,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot),e.fill()}}]),GaiterPart}(),y=function(t){function SandalRightPart(){var t;_classCallCheck(this,SandalRightPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SandalRightPart)).call.apply(t,[this].concat(r)))}return _inherits(SandalRightPart,f["h"]),_createClass(SandalRightPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){Object(b.j)(e,{fill:this.fill,stroke:this.fill},t),e.beginPath(),Object(w.f)(e,t.toe.out,t.toe.in,t.ankle.inbot),e.stroke()}}]),SandalRightPart}(),d=function(t){function SandalLeftPart(){var t;_classCallCheck(this,SandalLeftPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SandalLeftPart)).call.apply(t,[this].concat(r)))}return _inherits(SandalLeftPart,f["h"]),_createClass(SandalLeftPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){Object(b.j)(e,{fill:this.fill,stroke:this.fill},t),e.beginPath(),Object(w.f)(e,t.ankle.outbot,t.toe.out,t.toe.in),e.stroke()}}]),SandalLeftPart}(),g=function(t){function SandalPart(){var t;_classCallCheck(this,SandalPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(SandalPart)).call.apply(t,[this].concat(r)))}return _inherits(SandalPart,f["h"]),_createClass(SandalPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){m.a.simpleStrokeFill(e,t,this),Object(b.j)(e,{fill:this.fill,stroke:this.fill},t);var r=Object(w.r)(.5,t.ankle.outbot,t.toe.out),n=r.right.p1,o=(r=Object(w.r)(.35,t.toe.in,t.ankle.inbot)).right.p1,i=(r=Object(w.r)(.65,t.toe.in,t.ankle.inbot)).right.p1;e.beginPath(),Object(w.f)(e,t.ankle.inbot,Object(w.h)(t.ankle.out),w.b,t.ankle.in,Object(w.h)(t.ankle.outbot),w.b,n,Object(w.h)(o),w.b,t.toe.out,Object(w.h)(i),w.b),e.stroke();var a=Object(w.h)(t.ankle.in),s=Object(w.r)(.6,t.toe.in,t.ankle.inbot).left.p2;s.cp1=Object(w.q)(a,s,.2,-3.3),a.cp1=Object(w.q)(s,a,.7,1.4),e.beginPath(),Object(w.f)(e,a,s,a),e.fill()}}]),SandalPart}(),P=function(t){function Sandals(){var t;_classCallCheck(this,Sandals);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(Sandals)).call.apply(t,[this,{strapWidth:2,space:4,crosses:!1,straps:2,toeCoverage:.5}].concat(r)))}return _inherits(Sandals,f["m"]),_createClass(Sandals,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:y},{side:n.b.RIGHT,Part:d},{side:n.b.LEFT,Part:g},{side:n.b.RIGHT,Part:g}]}}]),Sandals}(),v=function(t){function wHeelStrapPart(){var t;_classCallCheck(this,wHeelStrapPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHeelStrapPart)).call.apply(t,[this,{}].concat(r)))}return _inherits(wHeelStrapPart,f["h"]),_createClass(wHeelStrapPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=this.strapWidth,n=this.space,o=Object(w.a)(t.ankle.outbot,0,0),i=[],a=[],s=[],c=calcStrap(t,o,r);this.crosses?(a[a.length]=Object(w.h)(c.inner[0]),s[s.length]=Object(w.h)(c.outer[c.outer.length-1])):i=[].concat(_toConsumableArray(i),_toConsumableArray(c.outer),_toConsumableArray(c.inner),[c.outer[0]]);for(var l=1;l<this.straps;l++)c=calcStrap(t,Object(w.a)(o,0,(r+n)*l),r),this.crosses?s[s.length]=0<l%2?(a[a.length]=Object(w.h)(c.outer[c.outer.length-1]),Object(w.h)(c.inner[0])):(a[a.length]=Object(w.h)(c.inner[0]),Object(w.h)(c.outer[c.outer.length-1])):i=[].concat(_toConsumableArray(i),[w.b],_toConsumableArray(c.outer),_toConsumableArray(c.inner),[c.outer[0]]);this.crosses?S.c.call(this,t,e,[],[].concat(a,[w.b],s)):S.c.call(this,t,e,_toConsumableArray(i),[])}}]),wHeelStrapPart}(),_=function(t){function wClosedToeStrappedPumps(){var t;_classCallCheck(this,wClosedToeStrappedPumps);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wClosedToeStrappedPumps)).call.apply(t,[this,{strapWidth:2,straps:2,space:4,crosses:!0,basePointiness:3,shoeHeight:1,shoeTightness:9,toeCoverage:1}].concat(r)))}return _inherits(wClosedToeStrappedPumps,f["m"]),_createClass(wClosedToeStrappedPumps,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:C},{side:n.b.RIGHT,Part:C},{side:n.b.LEFT,Part:v},{side:n.b.RIGHT,Part:v},{side:n.b.LEFT,Part:f.g}]}}]),wClosedToeStrappedPumps}(),C=function(t){function wHeelBasePart(){var t;_classCallCheck(this,wHeelBasePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHeelBasePart)).call.apply(t,[this].concat(r)))}return _inherits(wHeelBasePart,f["h"]),_createClass(wHeelBasePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=t.toe;r.toebox={x:r.center.x,y:r.center.y};var n=f.v.call(this,t),o=n.out,i=n.outBot,a=n.bot,s=n.inBot,c=n.inTop,l=n.tongue;m.a.simpleStrokeFill(e,t,this);var u=Object(w.h)(t.ankle.in),p=Object(w.r)(.6,t.toe.in,t.ankle.inbot).left.p2;p.cp1=Object(w.q)(u,p,.2,-3.3),u.cp1=Object(w.q)(p,u,.7,1.4),S.c.call(this,t,e,[o,i,a,s,c,l,o,w.b,u,p,u])}}]),wHeelBasePart}(),O=function(t){function wClosedToePumps(){var t;_classCallCheck(this,wClosedToePumps);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wClosedToePumps)).call.apply(t,[this,{basePointiness:3,shoeHeight:1,shoeTightness:9,toeCoverage:1}].concat(r)))}return _inherits(wClosedToePumps,f["m"]),_createClass(wClosedToePumps,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:C},{side:n.b.RIGHT,Part:C},{side:n.b.LEFT,Part:f.g}]}}]),wClosedToePumps}(),k=function(t){function wDoubledSneakersPart(){var t;_classCallCheck(this,wDoubledSneakersPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wDoubledSneakersPart)).call.apply(t,[this,{},{tip:0,laceThickness:.8,tongue:6.6,highlight:"white",crosses:2,hue:10,satur:80,light:50,alpha:1,transformation:.5}].concat(r)))}return _inherits(wDoubledSneakersPart,f["h"]),_createClass(wDoubledSneakersPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){m.a.simpleStrokeFill(e,t,this);var r=Object(w.a)(t.ankle.outbot,this.tight,0),n=Object(w.a)(t.ankle.inbot,-this.tight,0);n.cp2.x-=1+this.tight;var o=Object(w.a)(t.toe.out,this.tight+1,0),i=Object(w.a)(t.toe.in,-this.tight,-this.tight);S.d.call(this,t,e,this.transformation,[t.ankle.out,r,o,i,n,t.ankle.in]);var a=Object(w.r)(.4,i,n);a=a.left.p2;var s=Object(w.h)(o);s.cp1={x:Object(j.d)(s.x,a.x),y:s.y-(2+this.shoeHeight)+this.tip},S.d.call(this,t,e,this.transformation,[s,i,a,s],[],{fillWithHighlight:!0});var c=Object(w.h)(t.ankle.out),l=Object(w.a)(c,-2,-9),u=Object(w.h)(t.ankle.in),p=Object(w.a)(u,-.5,-9),f=Object(j.e)(l,c,p,u,this.crosses,-1);S.d.call(this,t,e,this.transformation,[],[].concat(_toConsumableArray(f.inner),[w.b],_toConsumableArray(f.outer)),{strokeWithHighlight:!0,lineWidth:this.laceThickness});var h=Object(w.a)(c,-1,0),y=Object(w.a)(u,1,0);h.cp1=Object(j.k)(c,y,.5,-this.tongue),S.d.call(this,t,e,this.transformation,[y,h,y],[],{fillWithStroke:!0})}}]),wDoubledSneakersPart}(),T=function(t){function wDoubleHeelPart(){var t;_classCallCheck(this,wDoubleHeelPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wDoubleHeelPart)).call.apply(t,[this].concat(r)))}return _inherits(wDoubleHeelPart,f["h"]),_createClass(wDoubleHeelPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=t.toe;r.toebox={x:r.center.x,y:r.center.y};var n=f.v.call(this,t),o=n.out,i=n.outBot,a=n.bot,s=n.inBot,c=n.inTop,l=n.tongue;m.a.simpleStrokeFill(e,t,this);var u=Object(w.h)(t.ankle.in),p=Object(w.r)(.6,t.toe.in,t.ankle.inbot).left.p2;p.cp1=Object(w.q)(u,p,.2,-3.3),u.cp1=Object(w.q)(p,u,.7,1.4),S.d.call(this,t,e,1-this.transformation,[o,i,a,s,c,l,o,w.b,u,p,u])}}]),wDoubleHeelPart}(),A=function(t){function wDoubleShoes(){var t;_classCallCheck(this,wDoubleShoes);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wDoubleShoes)).call.apply(t,[this,{tight:.5,basePointiness:0,shoeHeight:0,transformation:0,tounge:6.6,laceThickness:.8,tip:0,toeCoverage:1}].concat(r)))}return _inherits(wDoubleShoes,f["m"]),_createClass(wDoubleShoes,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:k},{side:n.b.RIGHT,Part:k},{side:n.b.LEFT,Part:T},{side:n.b.RIGHT,Part:T},{side:n.b.LEFT,Part:f.g}]}}]),wDoubleShoes}()},function(t,e,r){"use strict";r.d(e,"e",function(){return a}),r.d(e,"f",function(){return s}),r.d(e,"c",function(){return c}),r.d(e,"d",function(){return l}),r.d(e,"b",function(){return u}),r.d(e,"a",function(){return b});var p=r(1),n=r(3),f=(r(2),r(0)),o=(r(5),r(25)),i=r(34),h=r(7),y=r(33);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function wSuperSockPart(){var t;_classCallCheck(this,wSuperSockPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperSockPart)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"]},{hue:100,satur:100,light:42,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1}].concat(r)))}return _inherits(wSuperSockPart,o["h"]),_createClass(wSuperSockPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=i.i.call(this,t),n=r.outerPoints,o=r.innerPoints;p.a.simpleStrokeFill(e,t,this),h.c.call(this,t,e,[].concat(_toConsumableArray(n),[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot],_toConsumableArray(o),[n[0]]),[].concat(_toConsumableArray(n),[t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot],_toConsumableArray(o),[n[0],!0]))}}]),wSuperSockPart}(),s=function(t){function wSuperSocks(){var t;_classCallCheck(this,wSuperSocks);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperSocks)).call.apply(t,[this,{legCoverage:.5,thickness:.5,lockGroin:!1}].concat(r)))}return _inherits(wSuperSocks,o["g"]),_createClass(wSuperSocks,[{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),wSuperSocks}(),c=function(t){function wStockings(){var t;_classCallCheck(this,wStockings);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wStockings)).call.apply(t,[this,{legCoverage:.2,thickness:.3,bandWidth:7,highlight:"hsla(0, 0%, 11%, 1)",lockGroin:!0}].concat(r)))}return _inherits(wStockings,o["g"]),_createClass(wStockings,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:i.f},{side:n.b.RIGHT,Part:i.f},{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),wStockings}(),l=function(t){function wStockingsGarter(){var t;_classCallCheck(this,wStockingsGarter);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wStockingsGarter)).call.apply(t,[this,{legCoverage:.2,thickness:.3,bandWidth:9,beltWidth:10,highlight:"hsla(0, 0%, 11%, 1)",waistCoverage:.5,lockGroin:!0}].concat(r)))}return _inherits(wStockingsGarter,o["g"]),_createClass(wStockingsGarter,[{key:"fill",value:function fill(){return"hsla(0, 0%, 28%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.RIGHT,Part:i.a},{side:n.b.LEFT,Part:i.f},{side:n.b.RIGHT,Part:i.f},{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),wStockingsGarter}(),u=function(t){function wPantyhosePart(){var t;_classCallCheck(this,wPantyhosePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wPantyhosePart)).call.apply(t,[this,{aboveSameLayerParts:["feet"],aboveParts:["parts feet","parts leg","clothingParts groin"]}].concat(r)))}return _inherits(wPantyhosePart,o["h"]),_createClass(wPantyhosePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=y.o.call(this,t),n=r.top,o=r.out,i=r.hip,a=r.thighOut;p.a.simpleStrokeFill(e,t,this);var s=[];void 0!==t.quads&&(s[0]=Object(f.clone)(t.quads.top),s[0].x=t.thigh.out.x,s[1]=Object(f.clone)(t.quads.out));var c=t.thigh.top,l=t.groin;if(.02<this.open){var u=.7*(n.y-l.y)*this.open;(l=Object(f.adjust)(t.groin,0,u)).cp2=Object(f.adjust)(t.groin,22*this.open,22*this.open),l.cp1=Object(f.adjust)(t.groin,12*this.open,-14*this.open),c=(u=da.splitCurve(1-.9*this.open,t.thigh.in,t.thigh.top)).left.p2}h.c.call(this,t,e,[n,o,i,a].concat(s,[t.knee.out,t.calf.out,t.ankle.out,t.ankle.outbot,t.toe.out,t.toe.in,t.ankle.inbot,t.ankle.in,t.calf.in,t.knee.in,t.knee.intop,t.thigh.in,c,l,n]))}}]),wPantyhosePart}(),b=function(t){function wPantyhose(){var t;_classCallCheck(this,wPantyhose);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wPantyhose)).call.apply(t,[this,{waistCoverage:.45,thickness:.3,open:0,fishness:0}].concat(r)))}return _inherits(wPantyhose,o["g"]),_createClass(wPantyhose,[{key:"fill",value:function fill(){return"hsla(0,20%,30%,0.5)"}},{key:"stroke",value:function stroke(){return"hsla(0.0,5%,30%,1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u}]}}]),wPantyhose}()},function(t,e,r){"use strict";r.d(e,"b",function(){return a}),r.d(e,"a",function(){return s}),r.d(e,"h",function(){return c}),r.d(e,"g",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"c",function(){return d}),r.d(e,"e",function(){return g}),r.d(e,"f",function(){return P});var p=r(1),n=r(3),o=r(2),f=r(0),h=r(5),y=r(7),i=r(26),b=r(33);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var a=function(t){function wLacedSuperLegginsPart(){var t;_classCallCheck(this,wLacedSuperLegginsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLacedSuperLegginsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(wLacedSuperLegginsPart,p["c"]),_createClass(wLacedSuperLegginsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=b.p.call(this,t),n=r.zip,o=(r.top,r.mid),i=r.out,a=(r.hip,r.thighOut,r.groin),s=r.outerPoints,c=r.innerPoints;p.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?y.c.call(this,t,e,[n,o].concat(_toConsumableArray(s),[c[0],n]),[].concat(_toConsumableArray(s),[c[0]])):y.c.call(this,t,e,[n,o].concat(_toConsumableArray(s),_toConsumableArray(c),[a,n]),[].concat(_toConsumableArray(s),_toConsumableArray(c),[a]));var l=0<this.crosses?this.crosses:3,u=Object(h.e)(n,o,n,Object(f.reflect)(o),l,1);e.lineWidth=1,e.beginPath(),f.drawPoints.apply(void 0,[e].concat(_toConsumableArray(u.inner),[f.breakPoint],_toConsumableArray(u.outer))),e.stroke(),this.bodysuit||(e.beginPath(),e.lineWidth=1.5,Object(f.drawPoints)(e,o,Object(f.adjust)(i,-.5,0)),e.stroke())}}]),wLacedSuperLegginsPart}(),s=function(t){function wLacedLeggins(){var t;_classCallCheck(this,wLacedLeggins);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLacedLeggins)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,zipOpen:.2,zipDeep:.2,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.5,opacity:1,thickness:1,bustle:!1,hue:200,satur:65,light:20,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1}].concat(r)))}return _inherits(wLacedLeggins,i["f"]),_createClass(wLacedLeggins,[{key:"fill",value:function fill(){return"hsla(200, 0%, 20%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(200, 0%, 10%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:a},{side:n.b.RIGHT,Part:a}]}}]),wLacedLeggins}(),c=function(t){function wSuperSkirtPart(){var t;_classCallCheck(this,wSuperSkirtPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperSkirtPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"leg",aboveParts:["parts leg"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(wSuperSkirtPart,p["c"]),_createClass(wSuperSkirtPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=b.m.call(this,t),n=r.top,o=r.out,i=(r.hip,r.thighOut,r.groin),a=r.outerPoints,s=r.innerPoints;p.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?y.c.call(this,t,e,[n].concat(_toConsumableArray(a),[s[0],n]),[].concat(_toConsumableArray(a),[s[0]])):y.c.call(this,t,e,[n].concat(_toConsumableArray(a),_toConsumableArray(s),[i,n]),[].concat(_toConsumableArray(a),_toConsumableArray(s),[i])),e.beginPath(),e.lineWidth=this.belt,Object(f.drawPoints)(e,n,Object(f.adjust)(o,-.5,0)),e.stroke()}}]),wSuperSkirtPart}(),l=function(t){function wSuperSkirtAbovePart(){var t;_classCallCheck(this,wSuperSkirtAbovePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperSkirtAbovePart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"leg",aboveParts:["parts leg","torso"]}].concat(r)))}return _inherits(wSuperSkirtAbovePart,p["c"]),_createClass(wSuperSkirtAbovePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=b.m.call(this,t),n=r.top,o=r.out,i=(r.hip,r.thighOut,r.groin),a=r.outerPoints,s=r.innerPoints;p.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?y.c.call(this,t,e,[n].concat(_toConsumableArray(a),[s[0],n]),[].concat(_toConsumableArray(a),[s[0]])):y.c.call(this,t,e,[n].concat(_toConsumableArray(a),_toConsumableArray(s),[i,n]),[].concat(_toConsumableArray(a),_toConsumableArray(s),[i])),e.beginPath(),e.lineWidth=this.belt,Object(f.drawPoints)(e,n,Object(f.adjust)(o,-.5,0)),e.stroke()}}]),wSuperSkirtAbovePart}(),u=function(t){function wSuperLegginsPart(){var t;_classCallCheck(this,wSuperLegginsPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperLegginsPart)).call.apply(t,[this,{layer:o.a.FRONT,loc:"leg",aboveParts:["parts leg"],belowSameLayerParts:["torso"]}].concat(r)))}return _inherits(wSuperLegginsPart,p["c"]),_createClass(wSuperLegginsPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=b.m.call(this,t),n=r.top,o=r.out,i=(r.hip,r.thighOut,r.groin),a=r.outerPoints,s=r.innerPoints;p.a.simpleStrokeFill(e,t,this),1<=this.innerLoose?y.c.call(this,t,e,[n].concat(_toConsumableArray(a),[s[0],n]),[].concat(_toConsumableArray(a),[s[0]])):y.c.call(this,t,e,[n].concat(_toConsumableArray(a),_toConsumableArray(s),[i,n]),[].concat(_toConsumableArray(a),_toConsumableArray(s),[i])),this.bodysuit||(e.beginPath(),e.lineWidth=2,Object(f.drawPoints)(e,n,Object(f.adjust)(o,-.5,0)),e.stroke())}}]),wSuperLegginsPart}(),d=function(t){function wSuperLeggins(){var t;_classCallCheck(this,wSuperLeggins);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperLeggins)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,innerLoose:0,outerLoose:0,legCoverage:.9,waistCoverage:.5,opacity:1,thickness:1,bustle:!1,hue:200,satur:65,light:20,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1}].concat(r)))}return _inherits(wSuperLeggins,i["f"]),_createClass(wSuperLeggins,[{key:"fill",value:function fill(){return"hsla(200, 0%, 20%, 1)"}},{key:"stroke",value:function stroke(){return"hsla(200, 0%, 10%, 1)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:u},{side:n.b.RIGHT,Part:u}]}}]),wSuperLeggins}(),g=function(t){function wSuperSkirt(){var t;_classCallCheck(this,wSuperSkirt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperSkirt)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,innerLoose:1,outerLoose:1.3,legCoverage:.4,waistCoverage:.1,opacity:1,thickness:1,bustle:!1,belt:2}].concat(r)))}return _inherits(wSuperSkirt,i["f"]),_createClass(wSuperSkirt,[{key:"fill",value:function fill(){return"hsl(0, 65%, 20%)"}},{key:"stroke",value:function stroke(){return"hsl(0, 50%, 10%)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:c},{side:n.b.RIGHT,Part:c}]}}]),wSuperSkirt}(),P=function(t){function wSuperSkirtAbove(){var t;_classCallCheck(this,wSuperSkirtAbove);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSuperSkirtAbove)).call.apply(t,[this,{clothingLayer:p.a.Layer.MID,innerLoose:1,outerLoose:1.3,legCoverage:.4,waistCoverage:.1,opacity:1,thickness:1,bustle:!1,belt:2}].concat(r)))}return _inherits(wSuperSkirtAbove,i["f"]),_createClass(wSuperSkirtAbove,[{key:"fill",value:function fill(){return"hsl(0, 65%, 20%)"}},{key:"stroke",value:function stroke(){return"hsl(0, 50%, 10%)"}},{key:"partPrototypes",get:function get(){return[{side:n.b.LEFT,Part:l},{side:n.b.RIGHT,Part:l}]}}]),wSuperSkirtAbove}()},function(t,e,r){"use strict";r.d(e,"d",function(){return c}),r.d(e,"b",function(){return l}),r.d(e,"g",function(){return u}),r.d(e,"e",function(){return p}),r.d(e,"c",function(){return d}),r.d(e,"a",function(){return g}),r.d(e,"f",function(){return P});var f=r(1),n=r(3),o=(r(12),r(2)),h=r(0),s=r(5),i=r(18),y=r(16),a=r(31),b=r(7);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var c=function(t){function wTeePart(){var t;_classCallCheck(this,wTeePart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wTeePart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(wTeePart,f["c"]),_createClass(wTeePart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){var r=y.p.call(this,t),n=r.cleavageBot,o=r.cleavageTop,i=r.neck,a=r.shoulder,s=r.armpit,c=r.waist,l=r.hip,u=r.out,p=r.bottom;f.a.simpleStrokeFill(e,t,this),b.c.call(this,t,e,[n,o,i,a,s,c,l,u,p],[n,o,i,a,s,c,l,u,p,!0])}}]),wTeePart}(),l=function(t){function wHalterTopBreastPart(){var t;_classCallCheck(this,wHalterTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHalterTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(wHalterTopBreastPart,f["c"]),_createClass(wHalterTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){function checkCleavage(t,e){n.y<e.y&&(n.y=e.y+3),r=Object(h.splitCurve)(.5,n,a),a.cp1={x:r.left.p2.x+t.curveCleavageX,y:r.left.p2.y+t.curveCleavageY}}f.a.simpleStrokeFill(e,t,this);var r=Object(h.splitCurve)(this.cleavageCoverage,t.neck.cusp,t.groin),n={x:-.1,y:r.left.p2.y};this.outerNeckCoverage<this.innerNeckCoverage&&(this.outerNeckCoverage=this.innerNeckCoverage),this.innerNeckCoverage>this.outerNeckCoverage&&(this.innerNeckCoverage=this.outerNeckCoverage);var o=t.neck.cusp;t.trapezius&&(o=t.trapezius);var i=(r=Object(h.splitCurve)(this.outerNeckCoverage,o,t.collarbone)).left.p2;r=this.innerNeckCoverage<0?Object(h.splitCurve)(1+this.innerNeckCoverage,t.neck.top,o):Object(h.splitCurve)(this.innerNeckCoverage,o,t.collarbone);var a=Object(h.extractPoint)(r.left.p2);if(!1===t.hasOwnProperty("breast")){var s=Object(h.adjust)(t.armpit,0,0),c={x:-.1,y:s.y-1};return checkCleavage(this,c),b.c.call(this,t,e,[n,a,i,Object(h.extractPoint)(s),c],[n,a,i,Object(h.extractPoint)(s)]),void Object(b.b)(t,e,this)}var l=Object(h.adjust)(t.breast.tip,.1,0),u=Object(h.adjust)(t.breast.bot,0,-.1),p={x:-.1,y:u.y};checkCleavage(this,p),b.c.call(this,t,e,[n,a,i,l,u,p],[n,a,i,l,u])}}]),wHalterTopBreastPart}(),u=function(t){function wTubeTopBreastPart(){var t;_classCallCheck(this,wTubeTopBreastPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wTubeTopBreastPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"chest",reflect:!0,aboveParts:["parts chest","decorativeParts chest"]},{}].concat(r)))}return _inherits(wTubeTopBreastPart,f["c"]),_createClass(wTubeTopBreastPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(!Object(b.b)(t,e,this)){f.a.simpleStrokeFill(e,t,this);var r=[];if(1<this.chestCoverage){2<this.chestCoverage&&(this.chestCoverage=1.9);this.chestCoverage;(r=Object(s.i)(t.neck.top,t.breast.top,1-(this.chestCoverage-1),t.neck.top,t.neck.cusp,t.collarbone,Object(h.extractPoint)(t.breast.top)))[0]=Object(h.extractPoint)(r[0]),r[r.length]=Object(h.adjust)(t.breast.tip,.1,0)}else{var n=Object(h.splitCurve)(1-this.chestCoverage,t.breast.top,t.breast.tip);r[0]=Object(h.extractPoint)(n.left.p2),r[1]=Object(h.adjust)(n.right.p2,.1,0)}var o={x:-.1,y:r[0].y},i=Object(h.adjust)(t.breast.bot,0,-.1),a={x:-.1,y:i.y};b.c.call(this,t,e,[o].concat(_toConsumableArray(r),[i,a]),[o].concat(_toConsumableArray(r),[i]))}}}]),wTubeTopBreastPart}(),p=function(t){function wTopChestPart(){var t;_classCallCheck(this,wTopChestPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wTopChestPart)).call.apply(t,[this,{layer:o.a.MIDRIFT,loc:"torso",reflect:!0,aboveParts:["parts neck","parts torso","decorativeParts torso","parts leg"]},{}].concat(r)))}return _inherits(wTopChestPart,f["c"]),_createClass(wTopChestPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){if(f.a.simpleStrokeFill(e,t,this),!(2<=this.waistCoverage)){var r,n=y.q.call(this,t),o=n.armpit,i=n.lat,a=n.waist,s=n.hip,c=n.out,l=n.bottom;r=t.breast?{x:-.1,y:t.breast.in.y}:{x:-.1,y:t.armpit.y},b.c.call(this,t,e,[o,i,a,s,c,l,r,Object(h.extractPoint)(o)],[o,i,a,s,c,l,!0])}}}]),wTopChestPart}(),d=function(t){function wTee(){var t;_classCallCheck(this,wTee);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wTee)).call.apply(t,[this,{cleavageOpeness:.3,cleavageCoverage:.16,sideLoose:0,waistCoverage:0,curveCleavageX:0,curveCleavageY:0,legCoverage:1,hue:100,satur:100,light:42,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1}].concat(r)))}return _inherits(wTee,y["j"]),_createClass(wTee,[{key:"partPrototypes",get:function get(){return[{side:null,Part:b.a},{side:null,Part:i.e},{side:null,Part:c},{side:null,Part:a.c},{side:n.b.LEFT,Part:a.e},{side:n.b.RIGHT,Part:a.e}]}}]),wTee}(),g=function(t){function wHalterTop(){var t;_classCallCheck(this,wHalterTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wHalterTop)).call.apply(t,[this,{cleavageCoverage:.3,outerNeckCoverage:.35,innerNeckCoverage:.15,curveCleavageX:9,curveCleavageY:-9,waistCoverage:.66,sideLoose:0,shoulderCoverage:0,armCoverage:0,armLoose:0,hue:100,satur:100,light:42,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1}].concat(r)))}return _inherits(wHalterTop,y["j"]),_createClass(wHalterTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:b.a},{side:null,Part:l},{side:null,Part:p},{side:n.b.LEFT,Part:a.a},{side:n.b.RIGHT,Part:a.a}]}}]),wHalterTop}(),P=function(t){function wTubeTop(){var t;_classCallCheck(this,wTubeTop);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wTubeTop)).call.apply(t,[this,{chestCoverage:.3,waistCoverage:.3,sideLoose:0,hue:100,satur:100,light:42,alpha:1,fishness:0,pat:"fishnet",pat_size:75,bodysuit:!1,shoulderCoverage:0,armCoverage:0,armLoose:0}].concat(r)))}return _inherits(wTubeTop,y["j"]),_createClass(wTubeTop,[{key:"partPrototypes",get:function get(){return[{side:null,Part:b.a},{side:null,Part:u},{side:null,Part:p},{side:n.b.LEFT,Part:a.a},{side:n.b.RIGHT,Part:a.a}]}}]),wTubeTop}()},function(t,e,r){"use strict";r.d(e,"d",function(){return n}),r.d(e,"b",function(){return i}),r.d(e,"a",function(){return a}),r.d(e,"c",function(){return s});var p=r(1),o=(r(3),r(2)),f=r(0),h=r(5),c=r(7),l=r(22);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var n=function(t){function wSimpleBeltPart(){var t;_classCallCheck(this,wSimpleBeltPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSimpleBeltPart)).call.apply(t,[this,{layer:o.a.GENITALS,loc:"+torso",reflect:!0,aboveParts:["parts leg","clothingParts groin","parts chest"],aboveSameLayerParts:["clothingParts torso"]},{waistCoverage:.2,beltWidth:4,beltCurve:-1,highlight:"#cdc331"}].concat(r)))}return _inherits(wSimpleBeltPart,p["c"]),_createClass(wSimpleBeltPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=l.t.call(this,t),n=r.inTop,o=r.outTop,i=r.outMid,a=r.outBot,s=r.inBot;c.c.call(this,t,e,[n,o,i,a,s])}}]),wSimpleBeltPart}(),i=function(t){function wGlassesPart(){var t;_classCallCheck(this,wGlassesPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGlassesPart)).call.apply(t,[this,{layer:o.a.BELOW_HAIR,loc:"head",reflect:!0,aboveParts:["eyelid","brow","eyelash"]},{eccentricity:5,height:3,thickness:.5,invisible:0}].concat(r)))}return _inherits(wGlassesPart,p["c"]),_createClass(wGlassesPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){p.a.simpleStrokeFill(e,t,this);var r=Object(f.extractPoint)(t.ear.mid);r.y+=1,r.x-=1;var n=Object(f.extractPoint)(t.eyes.out);n.x+=1;var o=Object(f.extractPoint)(t.ear.mid);o.x-=2,o.y+=2;var i=Object(f.extractPoint)(t.eyes.in);i.x-=1.8;var a=this.eccentricity,s=this.height,c={x:i.x,y:i.y};c.cp1=Object(h.k)(i,n,.5,s),c.cp1.x+=a,c.cp2=Object(h.k)(i,n,.5,s),c.cp2.x+=-a;var l={x:i.x,y:i.y};l.cp1=Object(h.k)(i,n,.5,-s),l.cp1.x+=a,l.cp2=Object(h.k)(i,n,.5,-s),l.cp2.x+=-a;var u=Object(f.reflect)(i);u.cp1={y:i.y+2,x:0},this.invisible<1&&(e.globalAlpha=1-this.invisible,e.globalAlpha<0&&(e.globalAlpha=0),e.beginPath(),Object(f.drawPoints)(e,n,c,f.breakPoint,n,l),e.fill(),e.beginPath(),Object(f.drawPoints)(e,o,n,c,f.breakPoint,n,l,u),e.stroke())}}]),wGlassesPart}(),a=function(t){function wGlasses(){var t;_classCallCheck(this,wGlasses);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wGlasses)).call.apply(t,[this].concat(r)))}return _inherits(wGlasses,l["a"]),_createClass(wGlasses,[{key:"fill",value:function fill(){return"#a2a2a2"}},{key:"stroke",value:function stroke(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:i}]}}]),wGlasses}(),s=function(t){function wSimpleBelt(){var t;_classCallCheck(this,wSimpleBelt);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wSimpleBelt)).call.apply(t,[this,{fishness:0,clothingLayer:p.a.Layer.OUTER}].concat(r)))}return _inherits(wSimpleBelt,l["a"]),_createClass(wSimpleBelt,[{key:"fill",value:function fill(){return"#464646"}},{key:"stroke",value:function stroke(){return"#1e1e1e"}},{key:"partPrototypes",get:function get(){return[{side:null,Part:n}]}}]),wSimpleBelt}()},function(t,e,r){"use strict";r.d(e,"b",function(){return l}),r.d(e,"d",function(){return u}),r.d(e,"a",function(){return p}),r.d(e,"c",function(){return f});var n=r(1),o=r(3),i=(r(12),r(2)),a=r(0),s=r(6),c=r(41);function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(t){return typeof t}:function _typeof(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?function _assertThisInitialized(t){if(void 0!==t)return t;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}(t):e}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function wLipstickPart(){var t;_classCallCheck(this,wLipstickPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLipstickPart)).call.apply(t,[this,{layer:i.a.BELOW_HAIR,loc:"".concat(s.Location.LIPS),reflect:!1,aboveParts:["faceParts lips"]},{fill:"hsla{350,100%,29%,1}"}].concat(r)))}return _inherits(wLipstickPart,n["c"]),_createClass(wLipstickPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){n.a.simpleStrokeFill(e,t,this),this.invisible<1&&(e.globalAlpha=1-this.invisible,e.globalAlpha<0&&(e.globalAlpha=0),e.beginPath(),Object(a.drawPoints)(e,t.lips.top,t.lips.tip,t.lips.out,t.lips.bot,t.lips.bot.top,t.lips.out.in,t.lips.top.bot,t.lips.top),e.fill())}}]),wLipstickPart}(),u=function(t){function wMascaraPart(){var t;_classCallCheck(this,wMascaraPart);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wMascaraPart)).call.apply(t,[this,{layer:i.a.BELOW_HAIR,loc:"+eyelash",reflect:!1,aboveParts:["faceParts eyelash"]},{topFill:"black",botFill:"black"}].concat(r)))}return _inherits(wMascaraPart,n["c"]),_createClass(wMascaraPart,[{key:"renderClothingPoints",value:function renderClothingPoints(t,e){this.invisible<1&&(Object(s.setStrokeAndFill)(e,{stroke:a.none,fill:this.topFill},t),e.globalAlpha=1-this.invisible,e.globalAlpha<0&&(e.globalAlpha=0),e.beginPath(),Object(a.drawPoints)(e,t.eyes.out,t.eyelid.top,t.eyelid.in,t.eyelash.top,t.eyelash.out),e.fill(),Object(s.setStrokeAndFill)(e,{stroke:a.none,fill:this.botFill},t),e.beginPath(),Object(a.drawPoints)(e,t.eyes.out,t.eyes.in,t.eyelash.outBot),e.fill())}}]),wMascaraPart}(),p=function(t){function wLipstick(){var t;_classCallCheck(this,wLipstick);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return _possibleConstructorReturn(this,(t=_getPrototypeOf(wLipstick)).call.apply(t,[this,{invisible:0}].concat(r)))}return _inherits(wLipstick,c["a"]),_createClass(wLipstick,[{key:"fill",value:function fill(){return"#b94337"}},{key:"partPrototypes",get:function get(){return[{side:o.b.LEFT,Part:l},{side:o.b.RIGHT,Part:l}]}}]),wLipstick}(),f=function(t){function wMascara(){var t,e;_classCallCheck(this,wMascara);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(e=_possibleConstructorReturn(this,(t=_getPrototypeOf(wMascara)).call.apply(t,[this,{extraLength:2,invisible:0}].concat(n)))).Mods=Object.assign({eyelashLength:e.extraLength},e.Mods),e}return _inherits(wMascara,c["a"]),_createClass(wMascara,[{key:"partPrototypes",get:function get(){return[{side:o.b.LEFT,Part:u},{side:o.b.RIGHT,Part:u}]}}]),wMascara}()},function(t,e,r){var n=r(109);t.exports=function(t,e){if("string"!=typeof e)throw new TypeError("path must be a string");if("object"!=typeof t)throw new TypeError("object must be passed");var r=n.get(e);if(!r.valid)throw new Error("path is not a valid object path");return r.getValueFrom(t)}},function(t,e){function noop(){}var n=function detectEval(){if("undefined"!=typeof chrome&&chrome.app&&chrome.app.runtime)return!1;if("undefined"!=typeof navigator&&navigator.getDeviceStorage)return!1;try{return new Function("","return true;")()}catch(t){return!1}}();function isIndex(t){return+t==t>>>0&&""!==t}function isObject(t){return t===Object(t)}var r="__proto__"in{}?function(t){return t}:function(e){var t=e.__proto__;if(!t)return e;var r=Object.create(t);return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(e,t))}),r};var o=new RegExp("^[$_a-zA-Z]+[$_a-zA-Z0-9]*$");function isIdent(t){return o.test(t)}var i={};function Path(t,e){if(e!==i)throw Error("Use Path.get to retrieve path objects");for(var r=0;r<t.length;r++)this.push(String(t[r]));n&&this.length&&(this.getValueFrom=this.compiledGetValueFromFn())}var a={};function formatAccessor(t){return isIndex(t)?"["+t+"]":'["'+t.replace(/"/g,'\\"')+'"]'}function getPathCharType(t){if(void 0===t)return"eof";var e=t.charCodeAt(0);switch(e){case 91:case 93:case 46:case 34:case 39:case 48:return t;case 95:case 36:return"ident";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return 97<=e&&e<=122||65<=e&&e<=90?"ident":49<=e&&e<=57?"number":"else"}Path.get=function getPath(t){if(t instanceof Path)return t;if(null!=t&&0!=t.length||(t=""),"string"!=typeof t){if(isIndex(t.length))return new Path(t,i);t=String(t)}if(r=a[t])return r;var e=function parsePath(e){var t,r,n,o,i,a,s,c=[],l=-1,u="beforePath",p={push:function(){void 0!==n&&(c.push(n),n=void 0)},append:function(){void 0===n?n=r:n+=r}};function maybeUnescapeQuote(){if(!(l>=e.length)){var t=e[l+1];return"inSingleQuote"==u&&"'"==t||"inDoubleQuote"==u&&'"'==t?(l++,r=t,p.append(),!0):void 0}}for(;u;)if("\\"!=(t=e[++l])||!maybeUnescapeQuote()){if(o=getPathCharType(t),"error"==(i=(s=f[u])[o]||s.else||"error"))return;if(u=i[0],a=p[i[1]]||noop,r=void 0===i[2]?t:i[2],a(),"afterPath"===u)return c}}(t);if(!e)return s;var r=new Path(e,i);return a[t]=r},Path.prototype=r({__proto__:[],valid:!0,toString:function(){for(var t="",e=0;e<this.length;e++){var r=this[e];isIdent(r)?t+=e?"."+r:r:t+=formatAccessor(r)}return t},getValueFrom:function(t,e){for(var r=0;r<this.length;r++){if(null==t)return;t=t[this[r]]}return t},iterateObjects:function(t,e){for(var r=0;r<this.length;r++){if(r&&(t=t[this[r-1]]),!isObject(t))return;e(t,this[r])}},compiledGetValueFromFn:function(){var t="",e="obj";t+="if (obj != null";for(var r,n=0;n<this.length-1;n++)t+=" &&\n     "+(e+=isIdent(r=this[n])?"."+r:formatAccessor(r))+" != null";return t+=")\n",t+="  return "+(e+=isIdent(r=this[n])?"."+r:formatAccessor(r))+";\nelse\n  return undefined;",new Function("obj",t)},setValueFrom:function(t,e){if(!this.length)return!1;for(var r=0;r<this.length-1;r++){if(!isObject(t))return!1;t=t[this[r]]}return!!isObject(t)&&(t[this[r]]=e,!0)}});var f={beforePath:{ws:["beforePath"],ident:["inIdent","append"],"[":["beforeElement"],eof:["afterPath"]},inPath:{ws:["inPath"],".":["beforeIdent"],"[":["beforeElement"],eof:["afterPath"]},beforeIdent:{ws:["beforeIdent"],ident:["inIdent","append"]},inIdent:{ident:["inIdent","append"],0:["inIdent","append"],number:["inIdent","append"],ws:["inPath","push"],".":["beforeIdent","push"],"[":["beforeElement","push"],eof:["afterPath","push"]},beforeElement:{ws:["beforeElement"],0:["afterZero","append"],number:["inIndex","append"],"'":["inSingleQuote","append",""],'"':["inDoubleQuote","append",""]},afterZero:{ws:["afterElement","push"],"]":["inPath","push"]},inIndex:{0:["inIndex","append"],number:["inIndex","append"],ws:["afterElement"],"]":["inPath","push"]},inSingleQuote:{"'":["afterElement"],eof:["error"],else:["inSingleQuote","append"]},inDoubleQuote:{'"':["afterElement"],eof:["error"],else:["inDoubleQuote","append"]},afterElement:{ws:["afterElement"],"]":["inPath","push"]}},s=new Path("",i);s.valid=!1,s.getValueFrom=s.setValueFrom=function(){},t.exports=Path},function(t,e,r){function _toConsumableArray(t){return function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=r(111).Matrix;function lastElement(t){return t[t.length-1]}function using(t,e,r){try{return t.call(this),r.call(this)}finally{e.call(this)}}t.exports=function(){function Context2DTracked(r){!function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,Context2DTracked),this.context=r,this.tf=[new i],this.penx=0,this.peny=0,this.justBegun=!1,this.bpenx=0,this.bpeny=0,this.ox=0,this.oy=0,this.showcontrol=!1;for(var t=["webkitImageSmoothingEnabled"],e=Object.getOwnPropertyNames(r.__proto__),n=0;n<e.length;n++){var o=e[n];0<=t.indexOf(o)||("function"==typeof r[o]?void 0===this[o]&&(this[o]=r[o].bind(r)):Object.defineProperty(this,o,{get:function(t){return r[t]}.bind(null,o),set:function(t,e){return r[t]=e}.bind(null,o)}))}}return function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),t}(Context2DTracked,[{key:"cf",value:function cf(){return lastElement(this.tf)}},{key:"usingScaledLineWidth",value:function usingScaledLineWidth(t){var e=this,r=this.context.lineWidth;return using.call(this,function start(){e.context.lineWidth*=Math.abs(e.cf().a)},function close(){e.context.lineWidth=r},t)}},{key:"usingScaledFontSize",value:function usingScaledFontSize(t){var e=this,r=this.context.font,n=r.split(" "),o=Math.round(parseInt(n[0])*Math.abs(this.cf().a));return using.call(this,function start(){e.context.font=o+"px "+n[n.length-1]},function close(){e.context.font=r},t)}},{key:"trace",value:function trace(){var t=this.penx,e=this.peny;return console.log(Math.round(10*t)/10+this.ox,Math.round(10*e)/10+this.oy),this.context.moveTo(t-5,e),this.context.lineTo(t+5,e),this.context.moveTo(t,e+5),this.context.lineTo(t,e-5),this.context.moveTo(t,e),{x:t,y:e}}},{key:"transformPoint",value:function transformPoint(t,e){return lastElement(this.tf).inverse().applyToPoint(t,e)}},{key:"transformCoordinate",value:function transformCoordinate(t,e){return lastElement(this.tf).applyToPoint(t,e)}},{key:"save",value:function save(){this.tf.push(lastElement(this.tf).clone()),this.context.save()}},{key:"restore",value:function restore(){this.tf.pop(),this.context.restore()}},{key:"scale",value:function scale(t,e){lastElement(this.tf).scale(t,e)}},{key:"translate",value:function translate(t,e){lastElement(this.tf).translate(t,e)}},{key:"setTransform",value:function setTransform(t,e,r,n,o,i){lastElement(this.tf).setTransform(t,e,r,n,o,i)}},{key:"rotate",value:function rotate(t){lastElement(this.tf).rotate(t)}},{key:"movePen",value:function movePen(t,e){var r=this.cf().applyToPoint(t,e);this.justBegun&&(this.justBegun=!1,this.bpenx=r.x,this.bpeny=r.y),this.penx=r.x,this.peny=r.y}},{key:"_rect",value:function _rect(t,e,r,n,o){var i=this.cf().applyToPoint(t,e),a=this.cf().applyToPoint(r,n);o.call(this.context,i.x,i.y,a.x,a.y)}},{key:"clearRect",value:function clearRect(t,e,r,n){this._rect.apply(this,Array.prototype.slice.call(arguments).concat([this.context.clearRect]))}},{key:"fillRect",value:function fillRect(t,e,r,n){this._rect.apply(this,Array.prototype.slice.call(arguments).concat([this.context.fillRect]))}},{key:"strokeRect",value:function strokeRect(t,e,r,n){var o=this,i=arguments;this.usingScaledLineWidth(function(){o._rect.apply(o,_toConsumableArray(i).concat([o.context.strokeRect]))})}},{key:"rect",value:function rect(t,e,r,n){this._rect.apply(this,Array.prototype.slice.call(arguments).concat([this.context.rect]))}},{key:"fillText",value:function fillText(t,e,r,n){var o=this,i=this.cf().applyToPoint(e,r);this.usingScaledFontSize(function(){o.context.fillText(t,i.x,i.y,n)})}},{key:"strokeText",value:function strokeText(t,e,r,n){var o=this,i=this.cf().applyToPoint(e,r);this.usingScaledLineWidth(function(){o.usingScaledFontSize(function(){o.context.strokeText(t,i.x,i.y,n)})})}},{key:"createLinearGradient",value:function createLinearGradient(t,e,r,n){var o=this.cf().applyToPoint(t,e),i=this.cf().applyToPoint(r,n);return this.context.createLinearGradient(o.x,o.y,i.x,i.y)}},{key:"createRadialGradient",value:function createRadialGradient(t,e,r,n,o,i){var a=this.cf().applyToPoint(t,e),s=this.cf().applyToPoint(n,o),c=this.cf().a*r,l=this.cf().a*i;return this.context.createRadialGradient(a.x,a.y,c,s.x,s.y,l)}},{key:"beginPath",value:function beginPath(){this.justBegun=!0,this.context.beginPath()}},{key:"moveTo",value:function moveTo(t,e){this.movePen(t,e);var r=this.cf().applyToPoint(t,e);this.context.moveTo(r.x,r.y)}},{key:"lineTo",value:function lineTo(t,e,r){var n=this.cf().applyToPoint(t,e);if(r||this.showcontrol){var o=Object.assign(this._getDefaultDebugOptions(),r);this._drawCurveControl(this._getDebugPoint(n.x,n.y),o)}this.context.lineTo(n.x,n.y),this.movePen(t,e)}},{key:"bezierCurveTo",value:function bezierCurveTo(t,e,r,n,o,i,a){var s=this.cf().applyToPoint(o,i),c=this.cf().applyToPoint(t,e),l=this.cf().applyToPoint(r,n);if(a||this.showcontrol){var u=Object.assign(this._getDefaultDebugOptions(),a);this._drawCurveControl(this._getDebugPoint(s.x,s.y,c.x,c.y,l.x,l.y),u)}this.context.bezierCurveTo(c.x,c.y,l.x,l.y,s.x,s.y),this.movePen(o,i)}},{key:"quadraticCurveTo",value:function quadraticCurveTo(t,e,r,n,o){var i=this.cf().applyToPoint(r,n),a=this.cf().applyToPoint(t,e);if(o||this.showcontrol){var s=Object.assign(this._getDefaultDebugOptions(),o);this._drawCurveControl(this._getDebugPoint(i.x,i.y,a.x,a.y),s)}this.context.quadraticCurveTo(a.x,a.y,i.x,i.y),this.movePen(r,n)}},{key:"arc",value:function arc(t,e,r,n,o,i){var a=this.cf().applyToPoint(t,e),s=this.cf().a*r,c=a.x+Math.cos(n)*s,l=a.y+Math.sin(n)*s;this.movePen(c,l),this.context.arc(a.x,a.y,s,n,o,i);var u=a.x+Math.cos(o)*s,p=a.y+Math.sin(o)*s;this.movePen(u,p),this.bpenx=u,this.bpeny=p}},{key:"drawImage",value:function drawImage(t,e,r,n,o,i,a,s,c){var l=this.cf().applyToPoint(e,r);if(void 0!==n){var u=this.cf().applyToPoint(n,o);if(void 0!==i){var p=this.cf().applyToPoint(i,a),f=this.cf().applyToPoint(s,c);this.context.drawImage(t,l.x,l.y,u.x,u.y,p.x,p.y,f.x,f.y)}else this.context.drawImage(t,l.x,l.y,u.x,u.y)}else this.context.drawImage(t,l.x,l.y)}},{key:"putImageData",value:function putImageData(t,e,r,n,o,i,a){var s=this.cf().applyToPoint(e,r);if(void 0!==n){var c=this.cf().applyToPoint(n,o),l=this.cf().applyToPoint(i,a);this.context.putImageData(t,s.x,s.y,c.x,c.y,l.x,l.y)}else this.context.putImageData(t,s.x,s.y)}},{key:"stroke",value:function stroke(){var t=this;"rgba(0, 0, 0, 0)"!==this.context.strokeStyle&&this.usingScaledLineWidth(function(){t.context.stroke()})}},{key:"fill",value:function fill(){this.movePen(this.bpenx,this.bpeny),this.context.fill.apply(this.context,arguments)}},{key:"clip",value:function clip(){this.movePen(this.bpenx,this.bpeny),this.context.clip.apply(this.context,arguments)}},{key:"_drawCurveControl",value:function _drawCurveControl(t,e){this.context.save();var r=[t.p1];this.context.strokeStyle=e.controlLine.color,this.context.lineWidth=e.controlLine.width,t.cp1&&(this.context.moveTo(t.p1.x,t.p1.y),this.context.lineTo(t.cp1.x,t.cp1.y),r.push(t.cp1),t.cp2?(this.context.lineTo(t.cp2.x,t.cp2.y),this.context.lineTo(t.p2.x,t.p2.y),r.push(t.cp2)):this.context.lineTo(t.p2.x,t.p2.y)),this.context.stroke(),r.push(t.p2);for(var n=0;n<r.length;++n){var o=r[n];r[n]="("+Math.round(10*r[n].x)/10+", "+Math.round(10*r[n].y)/10+")",this.context.lineWidth=e.point.width,o===t.p2?this.context.strokeStyle=e.point.destinationColor:this.context.strokeStyle=e.point.color,this.context.fillStyle=e.point.fill,this.context.beginPath(),this.context.arc(o.x,o.y,e.point.radius,0,2*Math.PI,!0),this.context.fill(),this.context.stroke()}console.log("from points",r.join(" to ")),this.context.restore(),this.context.beginPath(),this.context.moveTo(t.p1.x,t.p1.y)}},{key:"_getDebugPoint",value:function _getDebugPoint(t,e,r,n,o,i){var a={p1:{x:this.penx,y:this.peny},p2:{x:t,y:e}};return"number"==typeof r&&"number"==typeof n&&(a.cp1={x:r,y:n},"number"==typeof o&&"number"==typeof i&&(a.cp2={x:o,y:i})),a}},{key:"_getDefaultDebugOptions",value:function _getDefaultDebugOptions(){return{controlLine:{color:"rgb(200,100,100)",width:.5},point:{color:"rgb(200,50,50)",destinationColor:"#000",fill:"white",width:1,radius:1}}}}]),Context2DTracked}()},function(t,e,r){
/*!
  2D Transformation Matrix v2.7.5
  (c) Epistemex.com 2014-2018
  License: MIT
*/
/**
 * 2D transformation matrix object initialized with identity matrix.
 *
 * The matrix can synchronize a canvas 2D context by supplying the context
 * as an argument, or later apply current absolute transform to an
 * existing context.
 *
 * To synchronize a DOM element you can use [`toCSS()`]{@link Matrix#toCSS} or [`toCSS3D()`]{@link Matrix#toCSS3D}.
 * together with for example the `style.transform` property.
 *
 * @param {CanvasRenderingContext2D} [context] - Optional context to sync with Matrix
 * @param {HTMLElement} [element=null] - DOM Element to synchronize
 * @prop {number} a - scale x
 * @prop {number} b - shear y
 * @prop {number} c - shear x
 * @prop {number} d - scale y
 * @prop {number} e - translate x
 * @prop {number} f - translate y
 * @prop {CanvasRenderingContext2D} [context] - set or get current synchronized 2D context
 * @prop {HTMLElement} [element] - get current synchronized DOM element
 * @prop {boolean} [useCSS3D=false] - is a DOM element is defined for sync., choose whether to use 2D (false) or 3D (true) matrix to sync it.
 * @constructor
 * @license MIT license
 * @copyright Epistemex.com 2014-2018
 */
function Matrix(t,e){var r,n=this;n._t=n.transform,n.a=n.d=1,n.b=n.c=n.e=n.f=0,t&&(n.context=t).setTransform(1,0,0,1,0,0),Object.defineProperty(n,"element",{get:function(){return r},set:function(t){r||(n._px=n._getPX(),n.useCSS3D=!1),r=t,(n._st=r.style)[n._px]=n.toCSS()}}),e&&(n.element=e)}Matrix.fromTriangles=function(t,e,r){var n,o,i,a,s,c,l=new Matrix,u=new Matrix(r);return o=Array.isArray(t)?"number"==typeof t[0]?(i=t[4],a=t[5],s=e[4],c=e[5],n=[t[0]-i,t[1]-a,t[2]-i,t[3]-a,i,a],[e[0]-s,e[1]-c,e[2]-s,e[3]-c,s,c]):(i=t[2].x,a=t[2].y,s=e[2].x,c=e[2].y,n=[t[0].x-i,t[0].y-a,t[1].x-i,t[1].y-a,i,a],[e[0].x-s,e[0].y-c,e[1].x-s,e[1].y-c,s,c]):(n=[t.px-t.rx,t.py-t.ry,t.qx-t.rx,t.qy-t.ry,t.rx,t.ry],[e.px-e.rx,e.py-e.ry,e.qx-e.rx,e.qy-e.ry,e.rx,e.ry]),l.setTransform.apply(l,n),u.setTransform.apply(u,o),u.multiply(l.inverse())},Matrix.fromSVGTransformList=function(t,e,r){for(var n=new Matrix(e,r),o=0;o<t.length;)n.multiply(t[o++].matrix);return n},Matrix.from=function(t,e,r,n,o,i,a,s){var c,l,u,p=new Matrix(a,s);if("number"==typeof t)p.setTransform(t,e,r,n,o,i);else if("number"==typeof t.x)u=Math.sqrt(t.x*t.x+t.y*t.y),c=l=1,n?c=u:l=u,p.translate(e||0,r||0).rotateFromVector(t).scaleU(c).translate(l,0);else{if("boolean"==typeof t.is2D&&!t.is2D)throw"Cannot use 3D DOMMatrix.";e&&(p.context=e),r&&(p.element=r),p.multiply(t)}return p},Matrix.prototype={_getPX:function(){for(var t,e=["t","oT","msT","mozT","webkitT","khtmlT"],r=0,n=document.createElement("div").style;t=e[r++];)if(void 0!==n[t+"ransform"])return t+"ransform"},concat:function(t){return this.clone().multiply(t)},flipX:function(){return this._t(-1,0,0,1,0,0)},flipY:function(){return this._t(1,0,0,-1,0,0)},reflectVector:function(t,e){var r=this.applyToPoint(0,1),n=2*(r.x*t+r.y*e);return{x:t-=n*r.x,y:e-=n*r.y}},reset:function(){return this.setTransform(1,0,0,1,0,0)},rotate:function(t){var e=Math.cos(t),r=Math.sin(t);return this._t(e,r,-r,e,0,0)},rotateFromVector:function(t,e){return this.rotate("number"==typeof t?Math.atan2(e,t):Math.atan2(t.y,t.x))},rotateDeg:function(t){return this.rotate(t*Math.PI/180)},scaleU:function(t){return this._t(t,0,0,t,0,0)},scale:function(t,e){return this._t(t,0,0,e,0,0)},scaleX:function(t){return this._t(t,0,0,1,0,0)},scaleY:function(t){return this._t(1,0,0,t,0,0)},scaleFromVector:function(t,e){return this.scaleU(Math.sqrt(t*t+e*e))},shear:function(t,e){return this._t(1,e,t,1,0,0)},shearX:function(t){return this._t(1,0,t,1,0,0)},shearY:function(t){return this._t(1,t,0,1,0,0)},skew:function(t,e){return this.shear(Math.tan(t),Math.tan(e))},skewDeg:function(t,e){return this.shear(Math.tan(t/180*Math.PI),Math.tan(e/180*Math.PI))},skewX:function(t){return this.shearX(Math.tan(t))},skewY:function(t){return this.shearY(Math.tan(t))},setTransform:function(t,e,r,n,o,i){return this.a=t,this.b=e,this.c=r,this.d=n,this.e=o,this.f=i,this._x()},translate:function(t,e){return this._t(1,0,0,1,t,e)},translateX:function(t){return this._t(1,0,0,1,t,0)},translateY:function(t){return this._t(1,0,0,1,0,t)},transform:function(t,e,r,n,o,i){var a=this,s=a.a,c=a.b,l=a.c,u=a.d,p=a.e,f=a.f;return a.a=s*t+l*e,a.b=c*t+u*e,a.c=s*r+l*n,a.d=c*r+u*n,a.e=s*o+l*i+p,a.f=c*o+u*i+f,a._x()},multiply:function(t){return this._t(t.a,t.b,t.c,t.d,t.e,t.f)},divide:function(t){return this.multiply(t.inverse())},divideScalar:function(t){if(!t)throw"Division on zero";return this.a/=t,this.b/=t,this.c/=t,this.d/=t,this.e/=t,this.f/=t,this._x()},inverse:function(t,e){var r=this,n=new Matrix(t?r.context:null,e?r.element:null),o=r.determinant();if(!o)throw"Matrix not invertible.";return n.a=r.d/o,n.b=-r.b/o,n.c=-r.c/o,n.d=r.a/o,n.e=(r.c*r.f-r.d*r.e)/o,n.f=-(r.a*r.f-r.b*r.e)/o,n},interpolate:function(t,e,r,n){var o=this,i=new Matrix(r,n);return i.a=o.a+(t.a-o.a)*e,i.b=o.b+(t.b-o.b)*e,i.c=o.c+(t.c-o.c)*e,i.d=o.d+(t.d-o.d)*e,i.e=o.e+(t.e-o.e)*e,i.f=o.f+(t.f-o.f)*e,i._x()},interpolateAnim:function(t,e,r,n){var o=new Matrix(r,n),i=this.decompose(),a=t.decompose(),s=i.translate,c=a.translate,l=i.scale;return o.translate(s.x+(c.x-s.x)*e,s.y+(c.y-s.y)*e),o.rotate(i.rotation+(a.rotation-i.rotation)*e),o.scale(l.x+(a.scale.x-l.x)*e,l.y+(a.scale.y-l.y)*e),o._x()},decompose:function(t){var e,r,n=this.a,o=this.b,i=this.c,a=this.d,s=Math.acos,c=Math.atan,l=Math.sqrt,u=Math.PI,p={x:this.e,y:this.f},f=0,h={x:1,y:1},y={x:0,y:0},b=n*a-o*i;return t?n?(y={x:c(i/n),y:c(o/n)},h={x:n,y:b/n}):y.x=o?(f=.5*u,h={x:o,y:b/o},c(a/o)):(h={x:i,y:a},.25*u):n||o?(e=l(n*n+o*o),f=0<o?s(n/e):-s(n/e),h={x:e,y:b/e},y.x=c((n*i+o*a)/(e*e))):i||a?(r=l(i*i+a*a),f=.5*u-(0<a?s(-i/r):-s(i/r)),h={x:b/r,y:r},y.y=c((n*i+o*a)/(r*r))):h={x:0,y:0},{translate:p,rotation:f,scale:h,skew:y}},determinant:function(){return this.a*this.d-this.b*this.c},applyToPoint:function(t,e){return{x:t*this.a+e*this.c+this.e,y:t*this.b+e*this.d+this.f}},applyToArray:function(t){var e,r,n=0,o=[];if("number"==typeof t[0])for(r=t.length;n<r;)e=this.applyToPoint(t[n++],t[n++]),o.push(e.x,e.y);else for(;e=t[n++];)o.push(this.applyToPoint(e.x,e.y));return o},applyToTypedArray:function(t,e){for(var r,n=0,o=t.length,i=e?new Float64Array(o):new Float32Array(o);n<o;)r=this.applyToPoint(t[n],t[n+1]),i[n++]=r.x,i[n++]=r.y;return i},applyToContext:function(t){return t.setTransform(this.a,this.b,this.c,this.d,this.e,this.f),this},applyToElement:function(t,e){return this._px||(this._px=this._getPX()),t.style[this._px]=e?this.toCSS3D():this.toCSS(),this},applyToObject:function(t){return t.a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.e=this.e,t.f=this.f,this},isIdentity:function(){return!(1!==this.a||this.b||this.c||1!==this.d||this.e||this.f)},isInvertible:function(){return!this._q(this.determinant(),0)},isValid:function(){return!(this.a*this.d)},isEqual:function(t){var e=this._q;return e(this.a,t.a)&&e(this.b,t.b)&&e(this.c,t.c)&&e(this.d,t.d)&&e(this.e,t.e)&&e(this.f,t.f)},clone:function(t){return new Matrix(t?null:this.context).multiply(this)},toArray:function(){return[this.a,this.b,this.c,this.d,this.e,this.f]},toTypedArray:function(){return new Float32Array([this.a,this.b,this.c,this.d,this.e,this.f])},toCSS:function(){return"matrix("+this.toArray()+")"},toCSS3D:function(){return"matrix3d("+this.a+","+this.b+",0,0,"+this.c+","+this.d+",0,0,,0,0,,1,0,"+this.e+","+this.f+",0,1)"},toJSON:function(){return'{"a":'+this.a+',"b":'+this.b+',"c":'+this.c+',"d":'+this.d+',"e":'+this.e+',"f":'+this.f+"}"},toString:function(t){return t=t||4,"a="+this.a.toFixed(t)+" b="+this.b.toFixed(t)+" c="+this.c.toFixed(t)+" d="+this.d.toFixed(t)+" e="+this.e.toFixed(t)+" f="+this.f.toFixed(t)},toCSV:function(){return this.toArray().join()+"\r\n"},toDOMMatrix:function(){var t=null;return"DOMMatrix"in window&&((t=new DOMMatrix).a=this.a,t.b=this.b,t.c=this.c,t.d=this.d,t.e=this.e,t.f=this.f),t},toSVGMatrix:function(){var t=document.createElementNS("http://www.w3.org/2000/svg","svg"),e=null;return t&&((e=t.createSVGMatrix()).a=this.a,e.b=this.b,e.c=this.c,e.d=this.d,e.e=this.e,e.f=this.f),e},_q:function(t,e){return Math.abs(t-e)<1e-14},_x:function(){var t=this;return t.context&&t.context.setTransform(t.a,t.b,t.c,t.d,t.e,t.f),t._st&&(t._st[t._px]=t.useCSS3D?t.toCSS3D():t.toCSS()),t}},e.Matrix=Matrix}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kYS93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vZGEvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZGEvLi4vbm9kZV9tb2R1bGVzL2RyYXdwb2ludC9kaXN0L2RyYXdwb2ludC5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvY2xvdGhpbmcuanMiLCJ3ZWJwYWNrOi8vZGEvLi91dGlsL2NhbnZhcy5qcyIsIndlYnBhY2s6Ly9kYS8uL3BhcnRzL3BhcnQuanMiLCJ3ZWJwYWNrOi8vZGEvLi4vbm9kZV9tb2R1bGVzL2RyYXdwb2ludC9zcmMvdXRpbC5qcyIsIndlYnBhY2s6Ly9kYS8uLi9ub2RlX21vZHVsZXMvZHJhd3BvaW50L3NyYy9udW1lcmljLmpzIiwid2VicGFjazovL2RhLy4uL25vZGVfbW9kdWxlcy9kcmF3cG9pbnQvc3JjL3BvaW50LmpzIiwid2VicGFjazovL2RhLy4uL25vZGVfbW9kdWxlcy9kcmF3cG9pbnQvc3JjL2N1cnZlLmpzIiwid2VicGFjazovL2RhLy4uL25vZGVfbW9kdWxlcy9kcmF3cG9pbnQvc3JjL2RyYXcuanMiLCJ3ZWJwYWNrOi8vZGEvLi4vbm9kZV9tb2R1bGVzL2RyYXdwb2ludC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGEvLi91dGlsL2F1eGlsaWFyeS5qcyIsIndlYnBhY2s6Ly9kYS8uL2luZGV4LmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy93d2JiLmpzIiwid2VicGFjazovL2RhLy4vdXRpbC9wYXJ0LmpzIiwid2VicGFjazovL2RhLy4vdXRpbC9kcmF3LmpzIiwid2VicGFjazovL2RhLy4vZHJhdy9zaGFkaW5nX3BhcnQuanMiLCJ3ZWJwYWNrOi8vZGEvLi91dGlsL3V0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vZGEvLi9kcmF3L2RyYXcuanMiLCJ3ZWJwYWNrOi8vZGEvLi91dGlsL3BhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vZGEvLi9oYWlyX3BhcnRzL2hhaXJfcGFydC5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvaGVlbHMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3RvcHMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3VuZGVyd2Vhci5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvZHJlc3MuanMiLCJ3ZWJwYWNrOi8vZGEvLi9mYWNlX3BhcnRzL2ZhY2VfcGFydC5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvamV3ZWxyeS5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvYXJtb3IuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL2FjY2Vzc29yeS5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvZ2xvdmVzLmpzIiwid2VicGFjazovL2RhLy4vZGVjb3JhdGl2ZV9wYXJ0cy9kZWNvcmF0aXZlX3BhcnQuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3NvY2tzLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy9wYW50cy5qcyIsIndlYnBhY2s6Ly9kYS8uL3BsYXllci9zdGF0cy5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvc2hvZXMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3N1cGVyX3VuZGVyd2Vhci5qcyIsIndlYnBhY2s6Ly9kYS8uL3BsYXllci9iaWFzLmpzIiwid2VicGFjazovL2RhLy4vdXRpbC9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3dEcmVzcy5qcyIsIndlYnBhY2s6Ly9kYS8uL3BsYXllci9kaW1lbnNpb25zLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy9zdXBlcl9wYW50cy5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvc3VwZXJfc29ja3MuanMiLCJ3ZWJwYWNrOi8vZGEvLi9za2VsZXRvbnMvc2tlbGV0b24uanMiLCJ3ZWJwYWNrOi8vZGEvLi9kZWNvcmF0aXZlX3BhcnRzL291dGxpbmUuanMiLCJ3ZWJwYWNrOi8vZGEvLi9wbGF5ZXIvbW9kcy5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvbmVja19hY2Nlc3NvcnkuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3N3ZWF0ZXIuanMiLCJ3ZWJwYWNrOi8vZGEvLi9tYXRlcmlhbHMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL21ha2V1cC5qcyIsIndlYnBhY2s6Ly9kYS8uL2l0ZW1zL2l0ZW0uanMiLCJ3ZWJwYWNrOi8vZGEvLi9kZWNvcmF0aXZlX3BhcnRzL3RhdHRvby5qcyIsIndlYnBhY2s6Ly9kYS8uL2hhaXJfcGFydHMvYXNpYW5fYnVuLmpzIiwid2VicGFjazovL2RhLy4vaGFpcl9wYXJ0cy9jdXJseV90YWlsLmpzIiwid2VicGFjazovL2RhLy4vaGFpcl9wYXJ0cy9oaW1lX2N1dC5qcyIsIndlYnBhY2s6Ly9kYS8uL2hhaXJfcGFydHMvc3RyYWlnaHQuanMiLCJ3ZWJwYWNrOi8vZGEvLi9oYWlyX3BhcnRzL3NpZGVfaGlnaF90YWlsLmpzIiwid2VicGFjazovL2RhLy4vaGFpcl9wYXJ0cy9oaW1lX2N1cmwuanMiLCJ3ZWJwYWNrOi8vZGEvLi9oYWlyX3BhcnRzL3N0eWxlcy5qcyIsIndlYnBhY2s6Ly9kYS8uL2xvYWQvbG9hZC5qcyIsIndlYnBhY2s6Ly9kYS8uL2xvYWQvcGF0dGVybnMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9kcmF3L2luaXQuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL0ZBSS5qcyIsIndlYnBhY2s6Ly9kYS8uL3BhcnRzL3BlbmlzLmpzIiwid2VicGFjazovL2RhLy4vcGFydHMvYXJtLmpzIiwid2VicGFjazovL2RhLy4vcGFydHMvaGFuZC5qcyIsIndlYnBhY2s6Ly9kYS8uL3BhcnRzL2xlZy5qcyIsIndlYnBhY2s6Ly9kYS8uL3BhcnRzL2NoZXN0LmpzIiwid2VicGFjazovL2RhLy4vcGFydHMvZmVldC5qcyIsIndlYnBhY2s6Ly9kYS8uL2ZhY2VfcGFydHMvZWFycy5qcyIsIndlYnBhY2s6Ly9kYS8uL2ZhY2VfcGFydHMvZXllcy5qcyIsIndlYnBhY2s6Ly9kYS8uL2ZhY2VfcGFydHMvcHVwaWwuanMiLCJ3ZWJwYWNrOi8vZGEvLi9mYWNlX3BhcnRzL2lyaXMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9mYWNlX3BhcnRzL2V5ZWxpZC5qcyIsIndlYnBhY2s6Ly9kYS8uL2ZhY2VfcGFydHMvZXllbGFzaC5qcyIsIndlYnBhY2s6Ly9kYS8uL2ZhY2VfcGFydHMvZXllYnJvdy5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvaGF0cy5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvd1N1cGVyX3VuZGVyd2Vhci5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvbmVja2xhY2VzLmpzIiwid2VicGFjazovL2RhLy4vdXRpbC9zZXJpYWxpemF0aW9uLmpzIiwid2VicGFjazovL2RhLy4vc2tlbGV0b25zL2RlZmF1bHRfcGFydHMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9wYXJ0cy90ZXN0aWNsZXMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9wYXJ0cy92YWdpbmEuanMiLCJ3ZWJwYWNrOi8vZGEvLi9wYXJ0cy9oZWFkLmpzIiwid2VicGFjazovL2RhLy4vcGFydHMvbmVjay5qcyIsIndlYnBhY2s6Ly9kYS8uL3BhcnRzL3RvcnNvLmpzIiwid2VicGFjazovL2RhLy4vcGFydHMvZ3JvaW4uanMiLCJ3ZWJwYWNrOi8vZGEvLi9wYXJ0cy9idXR0LmpzIiwid2VicGFjazovL2RhLy4vZmFjZV9wYXJ0cy9tb3V0aC5qcyIsIndlYnBhY2s6Ly9kYS8uL2ZhY2VfcGFydHMvbGlwcy5qcyIsIndlYnBhY2s6Ly9kYS8uL2ZhY2VfcGFydHMvbm9zZS5qcyIsIndlYnBhY2s6Ly9kYS8uL3BsYXllci9leHByZXNzaW9uLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy9qYWNrZXQuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL2NvcnNldC5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvbmFpbHMuanMiLCJ3ZWJwYWNrOi8vZGEvLi4vbm9kZV9tb2R1bGVzL2NvbnRleHQtMmQtdHJhY2tlZC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGEvLi9kZWNvcmF0aXZlX3BhcnRzL2ZhY2lhbF9oYWlyLmpzIiwid2VicGFjazovL2RhLy4vZGVjb3JhdGl2ZV9wYXJ0cy9mdXIuanMiLCJ3ZWJwYWNrOi8vZGEvLi9kZWNvcmF0aXZlX3BhcnRzL21hcmtpbmdzLmpzIiwid2VicGFjazovL2RhLy4vZGVjb3JhdGl2ZV9wYXJ0cy9ob3Jucy5qcyIsIndlYnBhY2s6Ly9kYS8uL2RlY29yYXRpdmVfcGFydHMvdGFpbC5qcyIsIndlYnBhY2s6Ly9kYS8uL2RlY29yYXRpdmVfcGFydHMvd2luZ3MuanMiLCJ3ZWJwYWNrOi8vZGEvLi9wbGF5ZXIvcGxheWVyLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy9kcmVzc3NoaXJ0LmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy9qZXdlbHJ5Mi5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvaGF0czIuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL2Nob2tlci5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvZWFycmluZ3MuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL2JvZHljaGFpbi5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvYXJtbGV0LmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy9yZXN0cmFpbnRzLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy9hbmtsZXQuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL2xpcHN0aWNrLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy93RkFJLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy93TmFpbHMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3dHbG92ZXMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3dDb3JzZXQuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3dIZWVscy5qcyIsIndlYnBhY2s6Ly9kYS8uL2Nsb3RoZXMvd1N1cGVyX3NvY2tzLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy93U3VwZXJfcGFudHMuanMiLCJ3ZWJwYWNrOi8vZGEvLi9jbG90aGVzL3dUb3BzLmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy93QWNjZXNzb3J5LmpzIiwid2VicGFjazovL2RhLy4vY2xvdGhlcy93TWFrZXVwLmpzIiwid2VicGFjazovL2RhLy4uL25vZGVfbW9kdWxlcy9vYmplY3QtcmVzb2x2ZS1wYXRoL29iamVjdC1yZXNvbHZlLXBhdGguanMiLCJ3ZWJwYWNrOi8vZGEvLi4vbm9kZV9tb2R1bGVzL29iamVjdC1yZXNvbHZlLXBhdGgvcGF0aC5qcyIsIndlYnBhY2s6Ly9kYS8uLi9ub2RlX21vZHVsZXMvY29udGV4dC0yZC10cmFja2VkL3NyYy9Db250ZXh0MkRUcmFja2VkLmpzIiwid2VicGFjazovL2RhLy4uL25vZGVfbW9kdWxlcy90cmFuc2Zvcm1hdGlvbi1tYXRyaXgtanMvbWF0cml4LmpzIl0sIm5hbWVzIjpbIndlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsImdldERlZmF1bHQiLCJnZXRNb2R1bGVFeHBvcnRzIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZSIsImNvbmZpZ3VyYWJsZSIsImRlZmF1bHQiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJmcm9tIiwieCIsInkiLCJ1IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJtYXAiLCJhIiwiTWF0aCIsInNxcnQiLCJnIiwiY3AxIiwiY3AyIiwiYiIsInBvaW50IiwibWFrZVBvaW50IiwiYWRkIiwiZGlmZiIsIm5vcm0iLCJhbmdsZSIsImYiLCJhdGFuMiIsInNjYWxlIiwiZ2V0VW5pdFZlY3RvciIsImdldFBlcnBlbmRpY3VsYXJWZWN0b3IiLCJleHRyYWN0UG9pbnQiLCJyZWZsZWN0IiwidiIsImFkanVzdCIsImFkanVzdFBvaW50cyIsImZvckVhY2giLCJwdXNoIiwic2NhbGVQb2ludHMiLCJoIiwicm90YXRlUG9pbnRzIiwiUCIsImNvcyIsInNpbiIsIm9yaWdpbiIsImZyZWV6ZSIsImJyZWFrUG9pbnQiLCJicmVhayIsImVuZFBvaW50IiwiZW5kIiwibGluZWFyIiwicXVhZHJhdGljIiwiY3ViaWMiLCJrIiwiY29uY2F0IiwicDEiLCJwMiIsImxlZnQiLCJyaWdodCIsInBvdyIsIkMiLCJyb3VuZFRvRGVjIiwiYWNvcyIsIlBJIiwic3RhcnRzV2l0aCIsIk0iLCJ3IiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsInJldHVybiIsIlR5cGVFcnJvciIsImFwcGx5VG9DdXJ2ZSIsImdldFBvaW50T25DdXJ2ZSIsImdldFBvaW50T25MaW5lIiwic3BsaXRDdXJ2ZSIsImludGVycG9sYXRlQ3VydmUiLCJmaWx0ZXIiLCJzaW1wbGVRdWFkcmF0aWMiLCJPIiwiZWxldmF0ZURlZ3JlZSIsImdldEN1YmljQ29udHJvbFBvaW50cyIsInRyYW5zZm9ybUN1cnZlIiwiaiIsInJldmVyc2VEcmF3UG9pbnQiLCJfIiwicSIsImNsb25lIiwiY29udGludWVDdXJ2ZSIsIkEiLCJkZWciLCJyYWQiLCJ1bndyYXBSYWQiLCJjbGFtcCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiZmlsbGVyRGVmaW5pdGlvbiIsIm5vbmUiLCJkcmF3UG9pbnRzIiwibW92ZVRvIiwiYmV6aWVyQ3VydmVUbyIsInRyYWNlT3B0aW9ucyIsInF1YWRyYXRpY0N1cnZlVG8iLCJsaW5lVG8iLCJkcmF3Q2lyY2xlIiwiZHJhd1NwZWNpZmljQ3VybCIsImRlZmxlY3Rpb24iLCJ0cmFjZVBvaW50IiwicmFkaXVzIiwia2V5cyIsIkNsb3RoaW5nIiwiX3RoaXMiLCJ0aGlzIiwiX2xlbiIsImRhdGEiLCJfa2V5IiwiX2NsYXNzQ2FsbENoZWNrIiwiYXNzaWduIiwiY2xvdGhpbmdMYXllciIsIkNsb3RoZXMiLCJMYXllciIsIkJBU0UiLCJ0aGlja25lc3MiLCJub0NvdmVyIiwicGFydHMiLCJzaWRlIiwiZ2V0U2lkZVZhbHVlIiwicGFydFByb3RvdHlwZXMiLCJwYXJ0UGFpciIsIlBhcnQiLCJwYXJ0RGF0YSIsIl90b0NvbnN1bWFibGVBcnJheSIsInRoaXNQYXJ0IiwicHJvY2Vzc0Nsb3RoaW5nUGFydExvY2F0aW9uIiwiX293bmVyIiwiX2NyZWF0ZUNsYXNzIiwic3Ryb2tlIiwiZmlsbCIsInBhcnQiLCJ1bmRlZmluZWQiLCJmb3JjZWRTaWRlIiwic2lkZVN0cmluZyIsImdldFNpZGVMb2NhdGlvbiIsImZvcmNlZE5vU2lkZVN0cmluZyIsImJhc2VMb2NhdGlvbiIsImV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24iLCJsb2MiLCJsb2NhdGlvbklzU2lkZWxlc3MiLCJsb2NhdGlvbk1vZGlmaWVycyIsImV4dHJhY3RMb2NhdGlvbk1vZGlmaWVyIiwiSU5ORVIiLCJNSUQiLCJPVVRFUiIsIk9VVEVSX0ZBUiIsIkVWRU5fRkFSRVIiLCJOVU1fTEFZRVJTIiwiQ2xvdGhpbmdDbGFzcyIsIl9sZW4yIiwiX2tleTIiLCJfY29uc3RydWN0Iiwic2ltcGxlU3Ryb2tlRmlsbCIsImN0eCIsImV4IiwiY2xvdGhpbmciLCJzZXRTdHJva2VBbmRGaWxsIiwibGluZVdpZHRoIiwiQ2xvdGhpbmdQYXJ0IiwiX2xlbjMiLCJfa2V5MyIsImxheWVyIiwiRlJPTlQiLCJyZW5kZXJDbG90aGluZ1BvaW50cyIsIl9fd2VicGFja19leHBvcnRzX18iLCJTaGFkaW5nTGF5ZXJzIiwic2VhbVdpZHRoIiwiZ2V0Q2FudmFzR3JvdXAiLCJnZXRDYW52YXMiLCJoaWRlQ2FudmFzR3JvdXAiLCJzaG93Q2FudmFzR3JvdXAiLCJnZXRDYW52YXNIYW5kbGUiLCJCQUNLIiwiU0hBRElOR19GUk9OVCIsIk1BTEVfR0VOSVRBTFMiLCJNSURSSUZUIiwiU0hBRElOR19NSURSSUZUIiwiQVJNUyIsIlNIQURJTkdfQVJNUyIsIkdFTklUQUxTIiwiU0hBRElOR19HRU5JVEFMUyIsIkJFTE9XX0hBSVIiLCJTSEFESU5HX0JFTE9XX0hBSVIiLCJIQUlSIiwiU0hBRElOR19IQUlSIiwiQUJPVkVfSEFJUiIsIkVGRkVDVFMiLCJncm91cG5hbWUiLCJzdHlsZU92ZXJyaWRlIiwiZ3JvdXBPYmoiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJzdHlsZXMiLCJ3aWR0aCIsImhlaWdodCIsInBhcmVudCIsInN0eWxlIiwidGV4dEFsaWduIiwiZ3JvdXAiLCJjYW52YXNOYW1lIiwiaGlkZVdvcmtpbmdDYW52YXMiLCJ2aXNpYmlsaXR5Iiwiei1pbmRleCIsImNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJwb3NpdGlvbiIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJncm91cE5hbWUiLCJkaXNwbGF5IiwiQm9keVBhcnQiLCJwYXJlbnRQYXJ0IiwiY292ZXJDb25jZWFsIiwidW5jb3ZlcmFibGUiLCJhYm92ZVBhcnRzIiwiYmVsb3dQYXJ0cyIsImdldExpbmVXaWR0aCIsImNhbGNEcmF3UG9pbnRzIiwibW9kcyIsImNhbGN1bGF0ZSIsIlJJR0hUIiwiTEVGVCIsIlBhcnRQcm90b3R5cGUiLCJ1c2VyRGF0YSIsImV4dHJhY3RTaWRlTG9jYXRpb24iLCJleHRyYWN0QmFzZUxvY2F0aW9uIiwicGFydENvbmZsaWN0IiwicGFydEEiLCJwYXJ0QiIsImdldFByb3RvdHlwZU9mIiwiY2hhckF0IiwiZ2V0Q2hpbGRMb2NhdGlvbiIsInBhcmVudExvYyIsImNoaWxkIiwicGFyZW50U2lkZSIsImNoaWxkTG9jIiwiY2hpbGRTaWRlIiwiZ2V0QXR0YWNoZWRMb2NhdGlvbiIsInBhcnRQcm90b3R5cGUiLCJ0ZW1wIiwib2JqIiwibnVtIiwibnVtRGVjaW1hbHMiLCJmdW5jIiwiY3BzIiwiY3AiLCJzY2FsZUJ5IiwicHAxIiwicHAyIiwidmVjIiwicHQiLCJyZWZlcmVuY2VQdCIsIm1hZ25pdHVkZSIsImNtIiwiSW5maW5pdHkiLCJkeCIsImR5IiwibW92ZWRQb2ludCIsImNlbnRlciIsInBvaW50cyIsIl9zY2FsZSIsInBpdm90IiwiX2xlbjQiLCJfa2V5NCIsInJvdGF0ZURpZmYiLCJwb2ludERpZmYiLCJfcmVmIiwiZXAxIiwiZXAyIiwiZ2V0TGluZWFyVmFsdWUiLCJzcGxpdExpbmVhciIsInNwbGl0UXVhZHJhdGljIiwiRCIsIkUiLCJGIiwic3BsaXRCZXppZXIiLCJHIiwiSCIsIkoiLCJLIiwiaW50ZXJwb2xhdGVRdWFkcmF0aWMiLCJzb2x2ZVF1YWRyYXRpY0VxdWF0aW9uIiwiZGlzY3JpbWluYW50IiwiY3ViZVJvb3QiLCJpbnRlcnBvbGF0ZUN1YmljIiwic29sdmVDdWJpY0VxdWF0aW9uIiwiYTMiLCJwMyIsInEyIiwic3FydERpc2NyaW1pbmFudCIsImNvc3BoaSIsInBoaSIsImNvbW1vblByZWZpeCIsImJldHdlZW5Qb2ludCIsImtub3duRGltIiwiaW50ZXJwb2xhdGVMaW5lYXIiLCJjdXJ2ZV90b0NvbnN1bWFibGVBcnJheSIsIl9sZW41IiwiX2tleTUiLCJfbGVuNiIsIl9rZXk2IiwiZ2V0UXVhZHJhdGljVmFsdWUiLCJnZXRDdWJpY1ZhbHVlIiwibmV3RW5kUG9pbnQiLCJfbG9vcCIsIm5ld0RlZ3JlZSIsImNvZWZmaWNpZW50IiwiY3BzUHJldiIsInN0YXJ0Iiwic3RhcnRQb2ludCIsImxlbiIsInN0cmV0Y2giLCJ0b3AiLCJib3QiLCJnZXRMaW1iUG9pbnRzIiwiZmlyc3QiLCJzZWNvbmQiLCJ0b3RhbExlbmd0aCIsImRpc3RhbmNlIiwicGVyY2VudCIsImlucHV0X2FycmF5Iiwib3V0cHV0X2FycmF5IiwiaGlnaGVzdF9wb2ludCIsImxvd2VzdF9wb2ludCIsImNvdmVyYWdlIiwiaWkiLCJzcGxpY2UiLCJhYnMiLCJnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCIsInBvaW50X2JldHdlZW4iLCJlcXVhbGl6ZXJfcG9pbnQiLCJzcCIsImJvdHRvbSIsInJldmVydCIsInJldmVyc2UiLCJnZXRMaW1iUG9pbnRzTmVnYXRpdmUiLCJ1bnNoaWZ0IiwiZ2V0TGltYlBvaW50c0JlbGxvd1BvaW50IiwiY29udHJvbF9wb2ludCIsImZpbmRCZXR3ZWVuIiwibG93ZXIiLCJoaWdoZXIiLCJfdHlwZW9mIiwiY29uc29sZSIsImxvZyIsInN0cmFpZ2h0ZW5DdXJ2ZSIsInByZXZpb3VzX3BvaW50IiwiZXF1aWxpYnJpdW0iLCJsaW5lTGluZUludGVyc2VjdGlvbiIsIkIiLCJhMSIsImIxIiwiYzEiLCJhMiIsImIyIiwiYzIiLCJkZXRlcm1pbmFudCIsImdldExhY2luZ1BvaW50cyIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsIm91dGVyU3RhcnQiLCJvdXRlckVuZCIsImNvdW50IiwiYWRqdXN0bWVudCIsInJvdW5kIiwiaW5uZXIiLCJvdXRlciIsInN0ZXAiLCJwZXJwZW5kaWN1bGFyUG9pbnQiLCJUIiwicG9sYXIyY2FydGVzaWFuIiwiY2FydGVzaWFuMnBvbGFyIiwidGhldGEiLCJjb3B5Q3VydmUiLCJTVEFSVCIsIkVORCIsIlNUQVJURU5EIiwiX2NhcnRlc2lhbjJwb2xhciIsIl9jYXJ0ZXNpYW4ycG9sYXIyIiwiZHJhd1N0YXIiLCJzcGlrZXMiLCJvdXRlclJhZGl1cyIsImlubmVyUmFkaXVzIiwidXAiLCJzdGFycG9pbnRzIiwicm90IiwiZGlyZWN0aW9uIiwiZHJhd3BvaW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfX1dFQlBBQ0tfSU1QT1JUX0tFWV9fIiwiX21hdGVyaWFsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2xvYWRfbG9hZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX3V0aWxfdXRpbGl0eV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX3V0aWxfc2VyaWFsaXphdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX3V0aWxfcGFydF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX3V0aWxfcGF0dGVybl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiX3V0aWxfZHJhd19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX3V0aWxfY2FudmFzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJfdXRpbF9wbGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyIsIl9kcmF3X2luaXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX18iLCJfZHJhd19kcmF3X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fIiwiX2hhaXJfcGFydHNfc3R5bGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fIiwiX2RlY29yYXRpdmVfcGFydHNfZGVjb3JhdGl2ZV9wYXJ0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fIiwiX2RlY29yYXRpdmVfcGFydHNfZmFjaWFsX2hhaXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X18iLCJfZGVjb3JhdGl2ZV9wYXJ0c19mdXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18iLCJfZGVjb3JhdGl2ZV9wYXJ0c19tYXJraW5nc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXyIsIl9kZWNvcmF0aXZlX3BhcnRzX291dGxpbmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X18iLCJfZGVjb3JhdGl2ZV9wYXJ0c19ob3Juc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfXyIsIl9kZWNvcmF0aXZlX3BhcnRzX3RhaWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X18iLCJfZGVjb3JhdGl2ZV9wYXJ0c193aW5nc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfXyIsIl9mYWNlX3BhcnRzX2VhcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIxX18iLCJfZmFjZV9wYXJ0c19leWVicm93X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9fIiwiX2ZhY2VfcGFydHNfZXllbGFzaF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjNfXyIsIl9mYWNlX3BhcnRzX2V5ZWxpZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXyIsIl9mYWNlX3BhcnRzX2V5ZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI1X18iLCJfZmFjZV9wYXJ0c19mYWNlX3BhcnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI2X18iLCJfZmFjZV9wYXJ0c19pcmlzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yN19fIiwiX2ZhY2VfcGFydHNfbGlwc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjhfXyIsIl9mYWNlX3BhcnRzX21vdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yOV9fIiwiX2ZhY2VfcGFydHNfbm9zZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMzBfXyIsIl9mYWNlX3BhcnRzX3B1cGlsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zMV9fIiwiX3BsYXllcl9wbGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzMyX18iLCJfcGxheWVyX2RpbWVuc2lvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzMzX18iLCJfcGxheWVyX2V4cHJlc3Npb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzM0X18iLCJfcGxheWVyX21vZHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzM1X18iLCJfcGxheWVyX3N0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zNl9fIiwiX3BhcnRzX3BhcnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzM3X18iLCJfcGFydHNfYXJtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zOF9fIiwiX3BhcnRzX2J1dHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzM5X18iLCJfcGFydHNfY2hlc3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzQwX18iLCJfcGFydHNfZmVldF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNDFfXyIsIl9wYXJ0c19ncm9pbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNDJfXyIsIl9wYXJ0c19oYW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80M19fIiwiX3BhcnRzX2hlYWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzQ0X18iLCJfcGFydHNfbGVnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80NV9fIiwiX3BhcnRzX25lY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzQ2X18iLCJfcGFydHNfcGVuaXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzQ3X18iLCJfcGFydHNfdGVzdGljbGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80OF9fIiwiX3BhcnRzX3RvcnNvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80OV9fIiwiX3BhcnRzX3ZhZ2luYV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNTBfXyIsIl9jbG90aGVzX2Nsb3RoaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81MV9fIiwiX2Nsb3RoZXNfZHJlc3NzaGlydF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNTJfXyIsIl9jbG90aGVzX2hlZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81M19fIiwiX2Nsb3RoZXNfaGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNTRfXyIsIl9jbG90aGVzX2phY2tldF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNTVfXyIsIl9jbG90aGVzX25lY2tfYWNjZXNzb3J5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81Nl9fIiwiX2Nsb3RoZXNfcGFudHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzU3X18iLCJfY2xvdGhlc19zaG9lc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNThfXyIsIl9jbG90aGVzX3NvY2tzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81OV9fIiwiX2Nsb3RoZXNfc3dlYXRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNjBfXyIsIl9jbG90aGVzX3VuZGVyd2Vhcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNjFfXyIsIl9jbG90aGVzX2pld2VscnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzYyX18iLCJfY2xvdGhlc19qZXdlbHJ5Ml9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNjNfXyIsIl9jbG90aGVzX3N1cGVyX3VuZGVyd2Vhcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNjRfXyIsIl9jbG90aGVzX3N1cGVyX3BhbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82NV9fIiwiX2Nsb3RoZXNfc3VwZXJfc29ja3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzY2X18iLCJfY2xvdGhlc19oYXRzMl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNjdfXyIsIl9jbG90aGVzX2RyZXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82OF9fIiwiX2Nsb3RoZXNfdG9wc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNjlfXyIsIl9jbG90aGVzX2NvcnNldF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNzBfXyIsIl9jbG90aGVzX2dsb3Zlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNzFfXyIsIl9jbG90aGVzX2Nob2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNzJfXyIsIl9jbG90aGVzX25lY2tsYWNlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNzNfXyIsIl9jbG90aGVzX2VhcnJpbmdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83NF9fIiwiX2Nsb3RoZXNfYm9keWNoYWluX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83NV9fIiwiX2Nsb3RoZXNfYXJtbGV0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83Nl9fIiwiX2Nsb3RoZXNfYWNjZXNzb3J5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83N19fIiwiX2Nsb3RoZXNfbWFrZXVwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83OF9fIiwiX2Nsb3RoZXNfcmVzdHJhaW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNzlfXyIsIl9jbG90aGVzX2Fua2xldF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfODBfXyIsIl9jbG90aGVzX2xpcHN0aWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84MV9fIiwiX2Nsb3RoZXNfYXJtb3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzgyX18iLCJfY2xvdGhlc19uYWlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfODNfXyIsIl9jbG90aGVzX0ZBSV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfODRfXyIsIl9jbG90aGVzX3dGQUlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzg1X18iLCJfY2xvdGhlc193TmFpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzg2X18iLCJfY2xvdGhlc193R2xvdmVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84N19fIiwiX2Nsb3RoZXNfd0NvcnNldF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfODhfXyIsIl9jbG90aGVzX3dIZWVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfODlfXyIsIl9jbG90aGVzX3dEcmVzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOTBfXyIsIl9jbG90aGVzX3dTdXBlcl9zb2Nrc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOTFfXyIsIl9jbG90aGVzX3dTdXBlcl9wYW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOTJfXyIsIl9jbG90aGVzX3dUb3BzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85M19fIiwiX2Nsb3RoZXNfd1N1cGVyX3VuZGVyd2Vhcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOTRfXyIsIl9jbG90aGVzX3dBY2Nlc3NvcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzk1X18iLCJfY2xvdGhlc193TWFrZXVwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85Nl9fIiwiX2l0ZW1zX2l0ZW1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzk3X18iLCJfZGVjb3JhdGl2ZV9wYXJ0c190YXR0b29fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzk4X18iLCJfc2tlbGV0b25zX2RlZmF1bHRfcGFydHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzk5X18iLCJ3d2JiX2Z0dyIsImluc2lkZSIsIm91dGxpbmUiLCJhZGRpdGlvbmFsIiwic3Ryb2tlU3R5bGUiLCJodWUiLCJzYXR1ciIsImxpZ2h0IiwiZmlsbFN0eWxlIiwiYWxwaGEiLCJmaWxsV2l0aFN0cm9rZSIsImZpbGxXaXRoSGlnaGxpZ2h0ZWRGaWxsIiwiZmlsbFdpdGhIaWdobGlnaHQiLCJoaWdobGlnaHQiLCJzdHJva2VXaXRoSGlnaGxpZ2h0IiwiaW52aXNpYmxlIiwicGF0IiwicGF0X3NpemUiLCJmaXNobmVzcyIsInBhdF9zaG93IiwiZGEiLCJnZXRQYXR0ZXJuIiwiYmVnaW5QYXRoIiwiZ2xvYmFsQWxwaGEiLCJvcmlnaW5hbCIsImxpbmUiLCJ3d2JiX2Z0d19kIiwidHJhbnNwYXJlbmN5IiwiYWxmIiwid0NvdmVyTmlwcGxlcyIsImNoZXN0IiwibmlwcGxlcyIsIk5pcHBsZVBhcnQiLCJfQ2xvdGhpbmdQYXJ0IiwiX2dldFByb3RvdHlwZU9mMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2dldFByb3RvdHlwZU9mIiwibGFjdCIsInNob3dOaXBwbGVzIiwiX2luaGVyaXRzIiwiYWRqdXN0Q29sb3IiLCJMb2NhdGlvbiIsImxvY2F0ZVJlbGF0aXZlVG9EcmF3cG9pbnQiLCJvYmplY3RfcmVzb2x2ZV9wYXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJvYmplY3RfcmVzb2x2ZV9wYXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImRyYXdwb2ludF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicGFydExvYyIsImluZGV4T2YiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsIm1vZGlmaWVycyIsIkFSTSIsIkNIRVNUIiwiVE9SU08iLCJCVVRUIiwiRkVFVCIsIkdST0lOIiwiSEFORCIsIkhFQUQiLCJMRUciLCJORUNLIiwiUEVOSVMiLCJWQUdJTkEiLCJURVNUSUNMRVMiLCJFQVIiLCJFWUVCUk9XIiwiRVlFTEFTSCIsIkVZRUxJRCIsIkVZRVMiLCJJUklTIiwiTElQUyIsIk1PVVRIIiwiTk9TRSIsIlBVUElMIiwiZHJhd3BvaW50IiwiZHAiLCJyZXNvbHZlUGF0aCIsImluY3UiLCJpbmNoZXMiLCJjbWN1IiwiY3VjbSIsImN1IiwiY29udmVydFBvaW50c1RvQ2FudmFzVW5pdHMiLCJuYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRMb2FkZWRQYXR0ZXJuIiwiYmFzZVN0cm9rZSIsImJhc2VGaWxsIiwiaW5oZXJpdFN0cm9rZSIsIm15TG9jIiwiY292ZXJpbmdDbG90aGluZyIsImF2YXRhciIsImdldENsb3RoaW5nSW5Mb2NhdGlvbiIsInRvcENsb3RoaW5nIiwiZ2V0UGFydEluTG9jYXRpb24iLCJwYXJlbnRTdHJva2UiLCJpbmhlcml0RmlsbCIsInJlcXVpcmVQYXJ0IiwicGFydE5hbWUiLCJFcnJvciIsImRpc3QiLCJwb2ludEEiLCJwb2ludEIiLCJteURpZmYiLCJhdmVyYWdlUXVhZHJhdGljIiwic3QiLCJldCIsInBlbmQiLCJzaGluZSIsInNoYWRpbmdNZWRpdW0iLCJTaGFkaW5nUGFydCIsImV4dHJhY3RSR0IiLCJyZ2JTdHJpbmciLCJyZ2IiLCJleGVjIiwicGFyc2VJbnQiLCJleHRyYWN0SFNMIiwiaHNsU3RyaW5nIiwiaHNsIiwiZXh0cmFjdEhleCIsImhleFN0cmluZyIsIlJHQlRvSFNMIiwibWF4IiwibWluIiwiY29sb3IiLCJaaWdndXJhdCIsInNlZWQiLCJqc3IiLCJ3biIsImZuIiwia24iLCJSTk9SIiwiaHoiLCJTSFIzIiwiaXoiLCJuZml4IiwicjEiLCJVTkkiLCJleHAiLCJqenIiLCJuZXh0R2F1c3NpYW4iLCJ6aWdzZXQiLCJEYXRlIiwiZ2V0VGltZSIsIm0xIiwiZG4iLCJ0biIsInZuIiwiZmxvb3IiLCJyYW5kWmlnIiwicmFuZE5vcm1hbCIsIm1lYW4iLCJzdGRldiIsImluaXRpYXRlUmFuZE5vcm1hbCIsInRlc3RSYW5kR2VuZXJhdG9yIiwiaGlzdG9ncmFtIiwic3RyIiwiam9pbiIsImF2ZXJhZ2VQb2ludCIsImJpYXMiLCJ0b3BvbG9naWNhbFNvcnQiLCJub2RlcyIsImVkZ2VzIiwiY3Vyc29yIiwic29ydGVkIiwidmlzaXRlZCIsInZpc2l0Iiwibm9kZSIsInByZWRlY2Vzc29ycyIsIm91dGdvaW5nIiwiZWRnZSIsInByZWRzIiwic2ltcGxlVG9wb2xvZ2ljYWxTb3J0IiwidW5pcXVlTm9kZXMiLCJhcnIiLCJyZXMiLCJ0YXJnZXQiLCJvdXRwdXQiLCJpbmRleCIsInNvdXJjZSIsIm5leHRLZXkiLCJTdHJpbmciLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwibGFzdCIsImV4dGVuZCIsImNvbnRhaW5zIiwibmVlZGxlIiwiZmluZE5hTiIsIml0ZW0iLCJzZWFyY2hTdHJpbmciLCJkcmF3IiwiY2FudmFzR3JvdXBPYmoiLCJ1c2VyQ29uZmlnIiwibG9hZGVkIiwicGF0dGVybkxvYWRpbmdRdWV1ZSIsIlByb21pc2UiLCJhbGwiLCJ0aGVuIiwiY29uZmlnIiwibmFtZUNvbG9yIiwiZ2VuZGVyQ29sb3IiLCJoZWlnaHRDb2xvciIsImhlaWdodEJhckNvbG9yIiwicHJpbnRBZGRpdGlvbmFsSW5mbyIsInByaW50SGVpZ2h0IiwicmVuZGVyU2hvZVNpZGVWaWV3Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJNb2RzIiwic2hvZUhlaWdodCIsImhlaWdodEFkanVzdCIsInBhc3NUaHJvdWdoIiwiY2FsY0RpbWVuc2lvbnMiLCJTa2VsZXRvbiIsInNrZWxldG9uIiwiY3giLCJjeSIsImNhbGNQYXJ0IiwiZmFjZVBhcnRzIiwiZGVjb3JhdGl2ZVBhcnRzIiwiZGVjb3JhdGl2ZUxvY2F0aW9uIiwiZmlsbE1pc3NpbmdEcmF3cG9pbnRzIiwiY29uZmlndXJlQmFzZUNvbG9ycyIsImNhbnZhc0dyb3VwIiwiY2hpbGRyZW4iLCJjdHhHcm91cCIsIkNvbnRleHQyRFRyYWNrZWQiLCJnZXRDb250ZXh0IiwiaW5pdENhbnZhcyIsImNsaXAiLCJyZXNvbHZlIiwicmVuZGVyQmFzZSIsInJlbmRlclBhcnRzIiwiYXBwbHlNb2RzIiwiZGltIiwiX2NsYW1wZWRNb2RzIiwicmVtb3ZlTW9kcyIsInNhdmUiLCJkcmF3UGFydHNMYXllciIsInJlc3RvcmUiLCJzdHJva2VQYXJ0IiwiZHBzIiwib3JkZXJQYXJ0cyIsInBhcnRHcm91cHMiLCJwYXJ0TWFwIiwicGFydE1hcEludmVyc2UiLCJNYXAiLCJwYXJ0VHlwZXMiLCJwYXJ0RGVwZW5kZW5jeSIsInNldCIsImZpbmREZXBlbmRlbmNpZXMiLCJwYXJ0SW5kZXgiLCJjaGlsZFBhcnRzIiwiY2hpbGRCYXNlTG9jYXRpb24iLCJfZ2V0Q2hpbGRMb2NhdGlvbiIsImNoaWxkUGFydCIsImJlbG93UGFydExvYyIsImdyb3VwQ29uc3RyYWludCIsIndvcmRzIiwic3BsaXQiLCJiZWxvd1BhcnQiLCJhYm92ZVBhcnRMb2MiLCJhYm92ZVBhcnQiLCJmaW5kQ2xvdGhpbmdMYXllckRlcGVuZGVuY2llcyIsImNsb3RoaW5nTGF5ZXJzIiwiY2xvdGhpbmdQYXJ0Iiwib3V0ZXJMYXllciIsImlubmVyUGFydCIsIm91dGVyUGFydCIsImZpbmRDbG90aGluZ1NhbWVMYXllck9yZGVyaW5nIiwiY2xvdGhpbmdQYXJ0TGF5ZXJzIiwiX2xvb3AyIiwicGFydHNJbkxheWVyIiwiYWJvdmVTYW1lTGF5ZXJQYXJ0cyIsImJlbG93U2FtZUxheWVyUGFydHMiLCJvdGhlckNsb3RoaW5nUGFydCIsIm90aGVyUGFydExvYyIsIm11dHVhbFNhbWVMYXllck9yZGVyaW5nIiwic2FtZUxheWVyT3JkZXJpbmciLCJvdGhlclNhbWVMYXllck9yZGVyaW5nIiwic2FtZVByZWNlZGVuY2UiLCJpbmRpY2VzIiwicGFydE9yZGVyIiwib3JkZXJlZFBhcnRzIiwib3JkZXJlZFBhcnRUeXBlcyIsIl9vcmRlclBhcnRzIiwic2hvZVNpZGVQYXJ0cyIsImRyYXduUGFydHMiLCJjaGVja1BhcnRDb3ZlcmVkQnlDbG90aGluZyIsImRyYXduUGFydHNGb3JUeXBlIiwicmVuZGVyUGFydCIsInJlbmRlclNoYWRpbmciLCJyZW5kZXJIYWlyUGFydCIsInJlbmRlckNsb3RoaW5nUGFydCIsInJlbmRlclRhdHRvbyIsInRhdHRvbyIsImltYWdlIiwiVGF0dG9vcyIsImdldFJlbmRlciIsInJlbmRlclBvc2l0aW9uIiwicmVuZGVyVGF0dG9vTG9jYXRpb24iLCJpZ25vcmVDbGlwIiwiY2xpcFBhcnQiLCJkcmF3VGF0dG9vUGF0dGVybiIsImNsaXBGaWxsIiwiZHJhd1BhcnQiLCJmaWxsUGFydCIsImNsaXBGaWxsUGF0aCIsInRvU3Ryb2tlIiwiY2xpcFN0cm9rZSIsImNsaXBTdHJva2VQYXRoIiwicmVuZGVySGFpclBvaW50cyIsIlNob2VTaWRlUGFydCIsInJlbmRlckl0ZW1zIiwib3giLCJpdGVtcyIsIkl0ZW1zIiwiZ2V0SXRlbVJlbmRlciIsInJlbmRlckl0ZW1Mb2NhdGlvbiIsImRyYXdJbWFnZSIsInN5bnRoZXNpemVMYXllcnMiLCJkaXNwbGF5Q2FudmFzIiwiZGlzcGxheUN0eCIsInNldFRyYW5zZm9ybSIsImNsZWFyUmVjdCIsInNoYWRpbmdDYW52YXMiLCJzaGFkaW5nQ3R4IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwic2hvZVNpZGVDdHgiLCJ0cmFuc2xhdGUiLCJzY2FsaW5nIiwic2hvZUJveFdpZHRoIiwic2hvZUJveEhlaWdodCIsInJlY3QiLCJyZW5kZXJTaG9lU2lkZVBhcnQiLCJvd25lciIsImRyYXduUG9pbnRzIiwiX2dldENoaWxkTG9jYXRpb24yIiwiY2hpbGRJbmRleCIsInN5bnRoZXNpemVEcmF3UG9pbnRzIiwicGFydE5hbWVzIiwiY2xpcFBhdGgiLCJjbG9zZVBhdGgiLCJmaWxsUG9pbnRzIiwiZmlsbE9ubHkiLCJmaXJzdFBvaW50IiwibGFzdFBvaW50IiwiY29ubmVjdEVuZFBvaW50cyIsImNvdmVyTmlwcGxlc0lmSGF2ZU5vQnJlYXN0cyIsImRyYXdGb2N1c2VkV2luZG93IiwiZm9jdXNlZENhbnZhcyIsInN4Iiwic3kiLCJzcHQiLCJ0ZiIsImFwcGx5VG9Qb2ludCIsImRlc3RXaWR0aCIsIklNQUdFX01BWFNJWkUiLCJsaXN0QXZhaWxhYmxlUGF0dGVybnMiLCJnZXRQYXR0ZXJuRnVsbE5hbWUiLCJnZXRQYXR0ZXJuQmFzZU5hbWUiLCJhZGRQYXR0ZXJuIiwiYWRkRGVidWdQYXR0ZXJuIiwibG9hZFBhdHRlcm4iLCJpc1BhdHRlcm4iLCJSRUxFQVNFX01PREUiLCJwYXR0ZXJuQ2FudmFzIiwicGF0dGVybkN0eCIsImltYWdlQ2FudmFzIiwiY2FjaGVkUGF0dGVybnMiLCJwcm9kdWNlUGF0dGVybiIsInBhdHRlcm5zIiwicGF0dGVybk5hbWUiLCJwYXR0ZXJuU2l6ZSIsInNwbGl0UG9pbnQiLCJmdWxsTmFtZSIsInBhdHRlcm4iLCJwYXR0ZXJuU291cmNlIiwiZGVidWdTcmMiLCJyZWxlYXNlU3JjIiwic3JjIiwicmVqZWN0IiwiSW1hZ2UiLCJvbmxvYWQiLCJpbWFnZUN0eCIsImNyZWF0ZVBhdHRlcm4iLCJvbmVycm9yIiwiYWxlcnQiLCJ0b1JvdGF0ZSIsInJvdGF0aW9uIiwicm90YXRlIiwibWlycm9yIiwidGVtcFBvcyIsInRyYW5zZm9ybVBvaW50IiwiYmFzZVBvcyIsInJlbGF0aXZlUG9zIiwiY29sb3VyIiwiSGFpclBhcnQiLCJpZ25vcmUiLCJoYWlyU3Ryb2tlIiwiaGFpckZpbGwiLCJIYWlyIiwiaGFpckJhY2siLCJoYWlyQWJvdmVFYXJzIiwiaGFpck1lZGl1bSIsImhhaXJGcm9udCIsIkhlZWxQYXJ0IiwiSGVlbEJhc2VTaGluZSIsIl9IZWVsUGFydCIsIl9nZXRQcm90b3R5cGVPZjMiLCJfY2FsY0hlZWxzJGNhbGwiLCJjYWxjSGVlbHMiLCJvdXRCb3QiLCJvdXQiLCJIZWVsQmFzZVBhcnQiLCJfSGVlbFBhcnQyIiwiX2dldFByb3RvdHlwZU9mNCIsInRvZSIsInRvZWJveCIsIl9jYWxjSGVlbHMkY2FsbDIiLCJpbkJvdCIsImluVG9wIiwidG9uZ3VlIiwiYmFja1RvcCIsImFua2xlIiwiaW4iLCJiYWNrQm90IiwiaW5ib3QiLCJDb3ZlcmVkSGVlbEJhc2VQYXJ0IiwiX0hlZWxQYXJ0MyIsIl9nZXRQcm90b3R5cGVPZjUiLCJfY2FsY0hlZWxzJGNhbGwzIiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiSGVlbFN0cmFwUGFydCIsIl9IZWVsUGFydDQiLCJfZ2V0UHJvdG90eXBlT2Y2Iiwic3RyYXBXaWR0aCIsImNhbGYiLCJvdXRib3QiLCJoZWVsUG9pbnRpbmVzcyIsInRvZUNvdmVyYWdlIiwiSGVlbFNpZGVCYXNlQ2xvc2VkUGFydCIsIl9TaG9lU2lkZVBhcnQiLCJDb3ZlcmVkSGVlbFNpZGVCYXNlUGFydCIsIl9TaG9lU2lkZVBhcnQyIiwiX2dldFByb3RvdHlwZU9mNyIsInNvbGVXaWR0aCIsInRvbmd1ZVNwbGl0UmF0aW8iLCJfY2FsY0NvdmVyZWRIZWVsQmFzZVMiLCJjYWxjQ292ZXJlZEhlZWxCYXNlU2lkZSIsInZhbXAiLCJ0b2VUaXAiLCJzb2xlQm90IiwiaGVlbEJhY2siLCJoZWVsQmFja1RvcCIsInRvbmd1ZVN0YXJ0IiwidG9uZ3VlU2lkZSIsIl9jYWxjSGVlbEJhc2VTaWRlJGNhbCIsImNhbGNIZWVsQmFzZVNpZGUiLCJjb3VudGVyVGlwIiwicmV2IiwiU3RpbGV0dG9QYXJ0IiwiX1Nob2VTaWRlUGFydDMiLCJfZ2V0UHJvdG90eXBlT2Y4IiwiX2xlbjciLCJfa2V5NyIsInNlcGFyYXRpb25BbG9uZ0FyY2giLCJoZWVsVGlwV2lkdGgiLCJiYWNrSGVlbERlZmxlY3Rpb24iLCJzdGlsZXR0b0ZpbGwiLCJfY2FsY1N0aWxldHRvJGNhbGwiLCJjYWxjU3RpbGV0dG8iLCJhcmNoVGlwIiwiaGVlbFRpcCIsImhlZWxUaXBCYWNrIiwic3RpbGV0dG9IZWVsQmFjayIsIlBsYXRmb3JtU2lkZVBhcnQiLCJfU2hvZVNpZGVQYXJ0NCIsIl9nZXRQcm90b3R5cGVPZjkiLCJfbGVuOCIsIl9rZXk4IiwicGxhdGZvcm1IZWlnaHQiLCJwbGF0Zm9ybUZpbGwiLCJfY2FsY0hlZWxQbGF0Zm9ybVNpZGUiLCJjYWxjSGVlbFBsYXRmb3JtU2lkZSIsIkhlZWxTaWRlU2ltcGxlU3RyYXBQYXJ0IiwiX1Nob2VTaWRlUGFydDUiLCJfZ2V0UHJvdG90eXBlT2YxMCIsIl9sZW45IiwiX2tleTkiLCJlbGxpcHNlIiwiSGVlbFNpZGVXaWRlU3RyYXBQYXJ0IiwiX1Nob2VTaWRlUGFydDYiLCJfZ2V0UHJvdG90eXBlT2YxMSIsIl9sZW4xMCIsIl9rZXkxMCIsInN0cmFwIiwiY2FsY1dpZGVTdHJhcFNpZGUiLCJfY2FsY0NvdmVyZWRIZWVsQmFzZVMyIiwiYm90dG9tWSIsImZlZXRMZW5ndGgiLCJfY2FsY0hlZWxCYXNlU2lkZSRjYWwzIiwiX2NhbGNIZWVsQmFzZVNpZGUkY2FsNCIsInJlbmRlckxvY2siLCJ0b3BQb2ludCIsInNpemUiLCJoYWxmV2lkdGgiLCJoZWFkU3Ryb2tlIiwiYm9keUZpbGwiLCJsaW5lQ2FwIiwiU3RyYXBMb2NrU2lkZVBhcnQiLCJfU2hvZVNpZGVQYXJ0NyIsIl9nZXRQcm90b3R5cGVPZjEyIiwiX2xlbjExIiwiX2tleTExIiwibG9ja1NpemUiLCJTdHJhcExvY2tQYXJ0IiwiX0hlZWxQYXJ0NSIsIl9nZXRQcm90b3R5cGVPZjEzIiwiX2xlbjEyIiwiX2tleTEyIiwiSGVlbHMiLCJfQ2xvdGhpbmciLCJfZ2V0UHJvdG90eXBlT2YxNCIsIl9sZW4xMyIsIl9rZXkxMyIsImJhc2VQb2ludGluZXNzIiwic2hvZVRpZ2h0bmVzcyIsImZlZXRXaWR0aCIsIkNsb3NlZFRvZVB1bXBzIiwiX0hlZWxzIiwiX2dldFByb3RvdHlwZU9mMTUiLCJfbGVuMTQiLCJfa2V5MTQiLCJDbG9zZWRUb2VTdHJhcHBlZFB1bXBzIiwiX0hlZWxzMiIsIl9nZXRQcm90b3R5cGVPZjE2IiwiX2xlbjE1IiwiX2tleTE1IiwiQ292ZXJlZEZhbmN5U3RpbGV0dG9zIiwiX0hlZWxzMyIsIl9nZXRQcm90b3R5cGVPZjE3IiwiX2xlbjE2IiwiX2tleTE2IiwibG9ja2VkU3RyYXBweUhlZWxQYXJ0UHJvdG90eXBlcyIsIkxvY2tlZENvdmVyZWRGYW5jeVN0aWxldHRvcyIsIl9Db3ZlcmVkRmFuY3lTdGlsZXR0byIsIl9nZXRQcm90b3R5cGVPZjE4IiwiX2xlbjE3IiwiX2tleTE3IiwiX2dldCIsImNhbGNUZWUiLCJzaG91bGRlciIsImNvbGxhcmJvbmUiLCJfY2FsY1RvcEJvZHkkY2FsbCIsImNhbGNUb3BCb2R5IiwiYXJtcGl0IiwibGF0Iiwid2Fpc3QiLCJoaXAiLCJfY2FsY0RyZXNzQ2xlYXZhZ2UkY2EiLCJjYWxjRHJlc3NDbGVhdmFnZSIsImNsZWF2YWdlQm90IiwiY2xlYXZhZ2VUb3AiLCJuZWNrIiwiVGVlUGFydCIsIl9jYWxjVGVlJGNhbGwiLCJMZW90YXJkUGFydCIsIl9DbG90aGluZ1BhcnQyIiwiX2NhbGNUZWUkY2FsbDIiLCJncm9pbiIsImdlbkNvdmVyYWdlIiwidGhpZ2giLCJib3RPdXQiLCJjdXJ2ZUJvdFgiLCJjdXJ2ZUJvdFkiLCJIYWx0ZXJUb3BCcmVhc3RQYXJ0IiwiX0Nsb3RoaW5nUGFydDMiLCJjaGVja0NsZWF2YWdlIiwiY29udGV4dCIsImNsZWF2YWdlIiwidG9wSW4iLCJjdXJ2ZUNsZWF2YWdlWCIsImN1cnZlQ2xlYXZhZ2VZIiwiY2xlYXZhZ2VDb3ZlcmFnZSIsImN1c3AiLCJvdXRlck5lY2tDb3ZlcmFnZSIsImlubmVyTmVja0NvdmVyYWdlIiwidHJhcGV6aXVzIiwidG9wT3V0IiwidG9wTWlkIiwidGlwIiwiYnJlYXN0IiwiVHViZVRvcEJyZWFzdFBhcnQiLCJfQ2xvdGhpbmdQYXJ0NCIsImNoZXN0Q292ZXJhZ2UiLCJUb3BDaGVzdFBhcnQiLCJfQ2xvdGhpbmdQYXJ0NSIsIndhaXN0Q292ZXJhZ2UiLCJfY2FsY1RvcEJvZHkkY2FsbDIiLCJUb3BHcm9pblBhcnQiLCJfQ2xvdGhpbmdQYXJ0NiIsIl9jYWxjVG9wQm9keSRjYWxsMyIsIm1pZCIsInNpZGVMb29zZSIsIkJpa2luaVRvcEJyZWFzdFBhcnQiLCJfQ2xvdGhpbmdQYXJ0NyIsIlRvcCIsIlRlZSIsIl9Ub3AiLCJjbGVhdmFnZU9wZW5lc3MiLCJsZWdDb3ZlcmFnZSIsIkxhY2luZ1BhcnQiLCJEcmVzc0JyZWFzdFBhcnQiLCJTdXBlclNsZWV2ZVBhcnQiLCJMZW90YXJkIiwiX1RvcDIiLCJhcm1Db3ZlcmFnZSIsIkhhbHRlclRvcCIsIl9Ub3AzIiwiVHViZVRvcCIsIl9Ub3A0IiwiVHViZVRvcFNsZWV2ZXMiLCJfVG9wNSIsInNob3VsZGVyQ292ZXJhZ2UiLCJhcm1Mb29zZSIsIkRldGFjaGVkU2xlZXZlUGFydCIsIkJpa2luaVRvcCIsIl9Ub3A2IiwiU3dpbXN1aXQiLCJfVG9wNyIsIkJyYVRvcFN0cmFwUGFydCIsImJyYSIsImNhbGNCcmEiLCJCcmFCb3RTdHJhcFBhcnQiLCJCcmFQYXJ0IiwiQnJlYXN0V3JhcFBhcnQiLCJnZXREaW0iLCJ0b3BTdHJva2UiLCJ0aXBTdHJva2UiLCJjaGVzdERlY29yYXRpdmVJbmRleCIsIkJyZWFzdFdyYXBTdHJhcFBhcnQiLCJvdXRUb3AiLCJQYW50aWVzUGFydCIsInBhbnRpZXMiLCJwZWx2aXMiLCJVbmRlcndlYXIiLCJCcmEiLCJfVW5kZXJ3ZWFyIiwiQnJlYXN0V3JhcCIsIl9VbmRlcndlYXIyIiwid3JhcFNpemUiLCJQYW50aWVzIiwiX1VuZGVyd2VhcjMiLCJfY2FsY0RyZXNzQmFzZSRjYWxsIiwiY2FsY0RyZXNzQmFzZSIsInRvcEFnYWluIiwiRHJlc3NCYXNlUGFydCIsImxlZ0xvb3NlIiwiYnVzdGxlIiwiX2NhbGNEcmVzc0Jhc2UkY2FsbDIiLCJvdXRlclBvaW50cyIsInBpdCIsImxhY2luZyIsImxlZ1BvaW50cyIsIndhaXN0UG9pbnRzIiwidG90YWxMZWdMZW5ndGgiLCJrbmVlIiwiX2NhbGNTdXBlclNsZWV2ZSRjYWxsIiwiY2FsY1N1cGVyU2xlZXZlIiwib3V0ZXJBcm1Qb2ludHMiLCJpbm5lckFybVBvaW50cyIsImNvbl9jb2xsYXJib25lIiwiY29uX2FybXBpdCIsImRlbHRvaWRzIiwiZWxib3ciLCJfY2FsY1N1cGVyU2xlZXZlJGNhbGwyIiwiaW5uZXJFbmRQb2ludCIsIndyaXN0IiwiaGFuZCIsImRlbHRvaWQiLCJrbnVja2xlIiwicGFsbSIsImZpc3QiLCJ0aHVtYiIsImNyb3NzZXMiLCJfY2FsY0RyZXNzQ2xlYXZhZ2UkY2EyIiwiRHJlc3MiLCJTdXBlckRyZXNzIiwiX0RyZXNzIiwiRmFjZVBhcnQiLCJSaW5nQm90UGFydCIsInJlbGF0aXZlTG9jYXRpb24iLCJhcmMiLCJSaW5nVG9wUGFydCIsIlN0dWRQYXJ0IiwiQ2hhaW5QYXJ0Iiwic2xhY2siLCJlbmRSZWxhdGl2ZUxvY2F0aW9uIiwic2V0TGluZURhc2giLCJKZXdlbHJ5IiwiUGllcmNpbmciLCJfSmV3ZWxyeSIsIlJpbmdQaWVyY2luZyIsIl9QaWVyY2luZyIsInJlcXVpcmVkUGFydHMiLCJTdHVkUGllcmNpbmciLCJfUGllcmNpbmcyIiwiQ2hhaW5KZXdlbHJ5IiwiX0pld2VscnkyIiwiQ3VpcmFzc1BhcnQiLCJDdWlyYXNzQnJlYXN0UGFydCIsIkdyZWF2ZVBhcnQiLCJhZGRQb2ludHNNaWQiLCJxdWFkcyIsImlubmVyUG9pbnRzIiwiaW50b3AiLCJWYW1icmFjZVBhcnQiLCJfY2FsY0dsb3ZlJGNhbGwiLCJjYWxjR2xvdmUiLCJBcm1vciIsIkN1aXJhc3MiLCJfQXJtb3IiLCJHcmVhdmVzIiwiX0FybW9yMiIsIlZhbWJyYWNlcyIsIl9Bcm1vcjMiLCJGYWNlQWNjZXNzb3J5UGFydCIsIkdhZ1N0cmFwUGFydCIsIl9GYWNlQWNjZXNzb3J5UGFydCIsImNoaW4iLCJfc2xpY2VkVG9BcnJheSIsImNhbGNHYWciLCJUb3BUcmlhbmd1bGFyU3RyYXAiLCJfRmFjZUFjY2Vzc29yeVBhcnQyIiwiYnJhbmNoT3V0RGlzdGFuY2UiLCJza3VsbCIsIlJpbmdHYWdQYXJ0IiwiX0ZhY2VBY2Nlc3NvcnlQYXJ0MyIsInJpbmdTdHJva2UiLCJyaW5nVGhpY2tuZXNzIiwic3BpZGVyTGVncyIsInB0cyIsInNwaWRlclB0cyIsIkJhbGxHYWdQYXJ0IiwiX0ZhY2VBY2Nlc3NvcnlQYXJ0NCIsImJhbGxGaWxsIiwiX2NhbGNHYWc0IiwibGlwcyIsIkJsaW5kRm9sZFBhcnQiLCJfRmFjZUFjY2Vzc29yeVBhcnQ1Iiwic3BsaXRBbG9uZ1NrdWxsIiwiZnJvbVNrdWxsRGlzdGFuY2UiLCJib3RMZWZ0IiwiYm90UmlnaHQiLCJHbGFzc2VzUGFydCIsIl9GYWNlQWNjZXNzb3J5UGFydDYiLCJlY2NlbnRyaWNpdHkiLCJlYXIiLCJvdXRlckNvbnRyb2xQb2ludCIsImV5ZXMiLCJ0b0VhciIsImlubmVyQ29udHJvbFBvaW50IiwiaW5uZXJDb250cm9sUG9pbnRUb3AiLCJpbm5lckNvbnRyb2xQb2ludEJvdCIsInRvTm9zZSIsIlNpbXBsZUJlbHRQYXJ0IiwiYmVsdFdpZHRoIiwiYmVsdEN1cnZlIiwiX2NhbGNCZWx0JGNhbGwiLCJjYWxjQmVsdCIsIm91dE1pZCIsIndhaXN0Q3VydmUiLCJBcHJvblBhcnQiLCJjdXJ2ZVgiLCJjdXJ2ZVkiLCJfY2FsY0JlbHQkY2FsbDIiLCJBY2Nlc3NvcnkiLCJHbGFzc2VzIiwiX0FjY2Vzc29yeSIsIkdhZyIsIl9BY2Nlc3NvcnkyIiwibGlwUGFydGluZyIsIlNpbXBsZVJpbmdHYWciLCJfR2FnIiwiU2ltcGxlQmFsbEdhZyIsIl9HYWcyIiwiTWVkaXVtUmluZ0dhZyIsIl9HYWczIiwiTWVkaXVtQmFsbEdhZyIsIl9HYWc0IiwiQmxpbmRGb2xkIiwiX0FjY2Vzc29yeTMiLCJTaW1wbGVCZWx0IiwiX0FjY2Vzc29yeTQiLCJfZ2V0UHJvdG90eXBlT2YxOSIsIl9sZW4xOCIsIl9rZXkxOCIsIkFwcm9uIiwiX0FjY2Vzc29yeTUiLCJfZ2V0UHJvdG90eXBlT2YyMCIsIl9sZW4xOSIsIl9rZXkxOSIsIkdsb3ZlU2xlZXZlUGFydCIsIkdsb3ZlUGFydCIsIl9jYWxjR2xvdmUkY2FsbDIiLCJtaWRBcm1Qb2ludHMiLCJGaW5nZXJsZXNzR2xvdmVQYXJ0Iiwib3V0SW5kZXgiLCJpbkluZGV4Iiwib3V0VGh1bWIiLCJCcmFjZWxldFBhcnQiLCJfY2FsY0dsb3ZlJGNhbGwzIiwiR2xvdmUiLCJHbG92ZVNsZWV2ZSIsIl9HbG92ZSIsIkxvbmdHbG92ZXMiLCJfR2xvdmUyIiwiRmluZ2VybGVzc0dsb3ZlcyIsIl9HbG92ZTMiLCJCcmFjZWxldCIsIl9HbG92ZTQiLCJCcmFjZWxldExlZnQiLCJfR2xvdmU1IiwiQnJhY2VsZXRSaWdodCIsIl9HbG92ZTYiLCJEZWNvcmF0aXZlUGFydCIsIlNvY2tQYXJ0IiwiU2hvcnRTb2NrUGFydCIsIl9Tb2NrUGFydCIsIk1lZGl1bVNvY2tQYXJ0IiwiX1NvY2tQYXJ0MiIsIm91dFQiLCJMb25nU29ja1BhcnQiLCJfU29ja1BhcnQzIiwiaW5UIiwiVGhpZ2hIaWdoUGFydCIsIl9Tb2NrUGFydDQiLCJUaGlnaEhpZ2hCYW5kUGFydCIsIl9Tb2NrUGFydDUiLCJiYW5kV2lkdGgiLCJiYW5kUGF0dGVybiIsIlNvY2siLCJTaG9ydFNvY2tzIiwiX1NvY2siLCJNZWRpdW1Tb2NrcyIsIl9Tb2NrMiIsIkxvbmdTb2NrcyIsIl9Tb2NrMyIsIlRoaWdoSGlnaHMiLCJfU29jazQiLCJDb3ZlcmVkQnV0dFBhcnQiLCJidXR0IiwiTG9uZ1BhbnRzUGFydCIsIm91dEluIiwiY2FsZkluIiwia25lZU91dCIsImtuZWVJbiIsImtuZWVJblRvcCIsImNhbGZPdXQiLCJ0aGlnaFRvcCIsInRoaWdoSW4iLCJfY2FsY1BhbnRzVG9wIiwiY2FsY1BhbnRzVG9wIiwidGhpZ2hPdXQiLCJNZWRpdW1QYW50c1BhcnQiLCJfY2FsY1BhbnRzVG9wMiIsIlNob3J0UGFudHNQYXJ0IiwiX2NhbGNQYW50c1RvcDMiLCJTaG9ydHNQYXJ0IiwiX2NhbGNQYW50c1RvcDQiLCJQYW50cyIsIkxvbmdUaWdodFBhbnRzIiwiX1BhbnRzIiwiTWVkaXVtVGlnaHRQYW50cyIsIl9QYW50czIiLCJTaG9ydFRpZ2h0UGFudHMiLCJfUGFudHMzIiwiVGlnaHRTaG9ydHMiLCJfUGFudHM0Iiwic3RhdExpbWl0cyIsInN0YXREaXNjcmV0ZVBvb2wiLCJhZ2UiLCJsb3ciLCJoaWdoIiwiYXZnIiwiZmVtIiwic3ViIiwicHJlZ25hbmN5IiwiTGVmdEJhc2VTaG9lU2hhZGluZyIsIl9TaGFkaW5nUGFydCIsInRvZUJveCIsImFua2xlSW5Cb3QiLCJSaWdodEJhc2VTaG9lU2hhZGluZyIsIl9TaGFkaW5nUGFydDIiLCJhbmtsZU91dEJvdCIsIlNob2VQYXJ0IiwiU2hvZUJhc2VQYXJ0IiwiX1Nob2VQYXJ0Iiwic2hhZGluZ1BhcnRzIiwidG9lSGVpZ2h0IiwidG9uZ3VlRGVmbGVjdGlvbiIsIlNob2UiLCJGbGF0U2hvZXMiLCJfU2hvZSIsImNhbGNTdXBlckJyYSIsImNhbGNTdXBlckJyYVN0cmFwIiwiYm90U3RyYXBXaWR0aCIsIm5lY2tDb3ZlcmFnZSIsInN0cmFwVG9wIiwiYnJlYXN0VG9wIiwidG9wU3RyYXBDdXJ2ZVgiLCJ0b3BTdHJhcEN1cnZlWSIsImJyZWFzdE91dCIsIlN1cGVyQnJhR2VuaXRhbFBhcnQiLCJzaG93U3RyYXAiLCJTdXBlckJyYUNoZXN0UGFydCIsImNhbGNQYW50aWVzIiwid2Fpc3RDb3ZlcmFnZUxvd2VyIiwic2lkZVRvcCIsIndhQ28iLCJzaWRlQm90IiwidG9wWSIsImN1cnZlVG9wWCIsImN1cnZlVG9wWSIsImNhbGNQYW50aWVzMiIsIlN1cGVyUGFudGllc1BhcnQiLCJib3ciLCJib3RJbiIsIkNoYXN0aXR5QmVsdFBhcnQiLCJ2YWdpbmEiLCJTdXBlclBhbnRpZXMyUGFydCIsIlN1cGVyQnJhIiwiU3VwZXJQYW50aWVzIiwiQmlraW5pQm90dG9tIiwiQ2hhc3RpdHlCZWx0IiwiX1VuZGVyd2VhcjQiLCJmZW1CaWFzIiwiZGV4IiwiY29uIiwid2lsIiwic2tpbiIsImhhaXJjIiwiZ2VuaXRhbHMiLCJmYWNlIiwiaGFpcmxlbmd0aCIsInNob3VsZGVycyIsImJyZWFzdHMiLCJ0ZXN0ZXMiLCJwZW5pcyIsImxlZ3MiLCJza2luYyIsImxpcHciLCJsaXB0IiwibGlwaCIsImxpcGMiLCJsaXBhIiwibGVnbCIsImV5ZWMiLCJub3Nlc2tldyIsInBlbmlzdCIsImJyb3doIiwibGltaXRzIiwiZGlzY3JldGVQb29sIiwicnVuIiwiZGVmYXVsdHMiLCJzb3VyY2VNb2RzIiwiYWRkTW9kcyIsIm1vZCIsImdldEJpYXNNb2QiLCJwcm9wZXJ0eURlc2NyaXB0b3IiLCJwcm9wZXJ0eU5hbWUiLCJjcmVhdGVUcmFuc2Zvcm1hdGlvbiIsInNob3dUcmFuc2Zvcm1hdGlvbiIsInRyYW5zZm9ybUJ5IiwiY29tcGxldGlvblBlcmNlbnQiLCJ0cmFuc2Zvcm0iLCJzdGVwUGVyY2VudCIsInBlcmZvcm1UcmFuc2Zvcm1hdGlvbiIsImVudGl0eSIsIm1vZGlmaWNhdGlvbnMiLCJwcm9wIiwidHJhbnNmb3JtQW5kU2hvdyIsInRyYW5zZm9ybWF0aW9uIiwiZHVyYXRpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkb1RyYW5zZm9ybSIsInRpbWVzdGFtcCIsImRlbHRhIiwidHJhbnNmb3JtYXRpb25Db21wbGV0aW9uIiwid0RldGFjaGVkU2xlZXZlUGFydCIsIndTdXBlclNsZWV2ZVBhcnQiLCJ3RHJlc3NCcmVhc3RQYXJ0Iiwid0RyZXNzQmFzZVBhcnQiLCJ3U3VwZXJEcmVzcyIsImJvZHlzdWl0IiwiYmFzZURpbURlc2MiLCJodW1hbiIsImhvcm55bmVzcyIsImxpbmtlZFBhcnQiLCJkZXNjIiwidW5pdHMiLCJ0YWlsIiwid2luZ3MiLCJhcmVvbGFTaXplIiwiY2FsYyIsImFybVRoaWNrbmVzcyIsImFkanVzdExlbmd0aEJ5SGVpZ2h0IiwiYXJtTGVuZ3RoIiwiYmVsbHlQcm90cnVzaW9uIiwiYnJlYXN0U2l6ZSIsImJ1dHRGdWxsbmVzcyIsImNoaW5XaWR0aCIsImV5ZWxhc2hMZW5ndGgiLCJleWVTaXplIiwiZmFjZUZlbSIsImZhY2VMZW5ndGgiLCJmYWNlV2lkdGgiLCJoYWlyTGVuZ3RoIiwiaGFpclN0eWxlIiwiaGFpckh1ZSIsImhhaXJTYXR1cmF0aW9uIiwiaGFpckxpZ2h0bmVzcyIsImhhbmRTaXplIiwiaGlwV2lkdGgiLCJsZWdGZW0iLCJsZWdGdWxsbmVzcyIsImxlZ0xlbmd0aCIsImxpcFNpemUiLCJsb3dlck11c2NsZSIsIm5lY2tMZW5ndGgiLCJuZWNrV2lkdGgiLCJwZW5pc1NpemUiLCJnZXRNb2QiLCJzaG91bGRlcldpZHRoIiwidGVzdGljbGVTaXplIiwidXBwZXJNdXNjbGUiLCJ2YWdpbmFTaXplIiwibGFiaWFGdWxsbmVzcyIsImFyb3VzYWwiLCJ3YWlzdFdpZHRoIiwiYmFzZSIsIndlaWdodCIsImJhc2VkaW1EaXNjcmV0ZVBvb2wiLCJleWVjb2xvciIsImV4dGVuZERpbWVuc2lvbkNhbGMiLCJkaW1EZXNjIiwibmV3Q2FsYyIsIl9kaW1EZXNjJHNwbGl0MiIsIm9sZENhbGMiLCJhcmdzIiwibG9hZERpbWVuc2lvbkRlc2NyaXB0aW9ucyIsImRlc2NyaXB0aW9uIiwiY2FsY1N1cGVyUGFudHNUb3AiLCJjYWxjU3VwZXJQYW50cyIsIl9jYWxjU3VwZXJQYW50c1RvcCRjYSIsImlubmVyTG9vc2UiLCJhZGRQb2ludHNTdGFydCIsIm91dGVyTG9vc2UiLCJza2lwcGVkX3BvaW50cyIsImNhbGNTdXBlclBhbnRzWmlwIiwiX2NhbGNTdXBlclBhbnRzJGNhbGwiLCJ6aXBPcGVuIiwiemlwIiwiemlwRGVlcCIsImNhbGNTdXBlclBhbnRzMiIsIm9wZW4iLCJkZWVwIiwiU3VwZXJQYW50c1BhcnQiLCJfY2FsY1N1cGVyUGFudHMkY2FsbDIiLCJiZWx0IiwiU3VwZXJMZWdnaW5zUGFydCIsIl9jYWxjU3VwZXJQYW50cyRjYWxsMyIsImhpZ2hPdXQiLCJTdXBlclNraXJ0UGFydCIsIl9jYWxjU3VwZXJQYW50cyRjYWxsNCIsIkxhY2VkTGVnZ2luc1BhcnQiLCJfY2FsY1N1cGVyUGFudHNaaXAkY2EiLCJKZWFuc1BhcnQiLCJfY2FsY1N1cGVyUGFudHNaaXAkY2EyIiwiYXRhbiIsImZpbiIsIkxvaW5jbG90aFBhcnQiLCJjbG90aCIsInRvcENvdmVyYWdlIiwibG93ZXN0WSIsImJvdHRvbUNvdmVyYWdlIiwiU3VwZXJQYW50cyIsIm9wYWNpdHkiLCJTdXBlckxlZ2dpbnMiLCJTdXBlclNraXJ0IiwiTGFjZWRMZWdnaW5zIiwiSmVhbnMiLCJfUGFudHM1IiwiTG9pbmNsb3RoIiwiX1BhbnRzNiIsImNhbGNTdXBlclNvY2tzIiwibG9ja0dyb2luIiwidG9yc29Qb2ludHMiLCJwb3AiLCJHYXJ0ZXIiLCJvdXRCb3RzIiwiX2NhbGNTdXBlclNvY2tzJGNhbGwiLCJzb2NrSW4iLCJzb2NrT3V0IiwiY29ubmVjdE91dCIsImNvbm5lY3RJbiIsIlN1cGVyU29ja0JhbmRQYXJ0IiwiX2NhbGNTdXBlclNvY2tzJGNhbGwyIiwidGVtcFBvaW50IiwiYm90SW5zIiwiYm90T3V0cyIsIlN1cGVyU29ja1BhcnQiLCJfY2FsY1N1cGVyU29ja3MkY2FsbDMiLCJQYW50eWhvc2VQYXJ0IiwiU3VwZXJTb2NrcyIsIlN0b2NraW5ncyIsIlN0b2NraW5nc0dhcnRlciIsIlBhbnR5aG9zZSIsIk91dGxpbmUiLCJNdXNjbGVPdXRsaW5lIiwibXVzY2xlR3JvdXAiLCJCZWxseUJ1dHRvbk91dGxpbmUiLCJfT3V0bGluZTIiLCJiZWxseSIsImJlbGx5YnV0dG9uIiwiRGVsdG9pZHNPdXRsaW5lIiwiX011c2NsZU91dGxpbmUiLCJidWxrIiwiQ29sbGFyYm9uZU91dGxpbmUiLCJfTXVzY2xlT3V0bGluZTIiLCJQZWN0b3JhbE91dGxpbmUiLCJfTXVzY2xlT3V0bGluZTMiLCJwZWNzIiwib3V0dG9wIiwiQWJkb21pbmFsT3V0bGluZSIsIl9NdXNjbGVPdXRsaW5lNCIsImFiTGVuZ3RoIiwiYWJCdWxnZSIsIlF1YWRyaWNlcHNPdXRsaW5lIiwiX011c2NsZU91dGxpbmU1IiwibW9kTGltaXRzIiwibW9kRGlzY3JldGVQb29sIiwibG9hZE1vZHMiLCJfc3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9kaW1lbnNpb25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJhcm1Sb3RhdGlvbiIsImJyZWFzdFBlcmtpbmVzcyIsImJyb3dCb3RDdXJsIiwiYnJvd1RvcEN1cmwiLCJicm93Q2xvc2VuZXNzIiwiYnJvd0hlaWdodCIsImJyb3dMZW5ndGgiLCJicm93U2hhcnBuZXNzIiwiYnJvd1RoaWNrbmVzcyIsImJyb3dPdXRCaWFzIiwiYnJvd1RpbHQiLCJjaGVla0Z1bGxuZXNzIiwiY2hpbkxlbmd0aCIsImVhcmxvYmVMZW5ndGgiLCJleWVCaWFzIiwiZXllQ2xvc2VuZXNzIiwiZXllQm90QmlhcyIsImV5ZUJvdFNpemUiLCJleWVIZWlnaHQiLCJleWVUaWx0IiwiZXllVG9wU2l6ZSIsImV5ZVdpZHRoIiwiZXllbGFzaEJpYXMiLCJleWVsYXNoQW5nbGUiLCJleWVsaWRCaWFzIiwiZXllbGlkSGVpZ2h0IiwiZmVldEJpYXMiLCJoYWlyQWNjZXNzb3J5SHVlIiwiaGFpckFjY2Vzc29yeVNhdHVyYXRpb24iLCJoYWlyQWNjZXNzb3J5TGlnaHRuZXNzIiwiaGFuZFJvdGF0aW9uIiwiaXJpc0hlaWdodCIsImlyaXNIdWUiLCJpcmlzU2F0dXJhdGlvbiIsImlyaXNMaWdodG5lc3MiLCJpcmlzU2l6ZSIsImphd0p1dCIsImxpbWJhbFJpbmdTaXplIiwibGlwQmlhcyIsImxpcEN1cGlkc0JvdyIsImxpcEN1cmwiLCJsaXBIZWlnaHQiLCJsaXBUb3BDdXJ2ZSIsImxpcFRvcFNpemUiLCJsaXBCb3RTaXplIiwibGlwV2lkdGgiLCJsaXBIdWUiLCJsaXBTYXR1cmF0aW9uIiwibGlwTGlnaHRuZXNzIiwibmVja0N1cnZlIiwibm9zZUhlaWdodCIsIm5vc2VMZW5ndGgiLCJub3NlUmlkZ2VIZWlnaHQiLCJub3NlUm91bmRuZXNzIiwibm9zZVdpZHRoIiwibm9zdHJpbFNpemUiLCJwdXBpbFNpemUiLCJwZW5pc1RoaWNrbmVzcyIsInNraW5IdWUiLCJza2luU2F0dXJhdGlvbiIsInNraW5MaWdodG5lc3MiLCJyYW5nZSIsImRpbWVuc2lvbnMiLCJOZWNrdGllUGFydCIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0Iiwia25vdFdpZHRoIiwia25vdEhlaWdodCIsImxvb3BXaWR0aCIsInRvbmd1ZVRvcFdpZHRoIiwidG9uZ3VlQm90V2lkdGgiLCJ0b25ndWVIZWlnaHQiLCJ0b25ndWVCb3RIZWlnaHQiLCJ0b25ndWVSb3RhdGlvbiIsImtub3QiLCJOZWNrQWNjZXNzb3J5IiwiTmVja1RpZSIsIl9OZWNrQWNjZXNzb3J5IiwiU3dlYXRlckJhc2VQYXJ0IiwiX2NhbGNTd2VhdGVyQmFzZSRjYWxsIiwiY2FsY1N3ZWF0ZXJCYXNlIiwic3RvbWFjaENvdmVyYWdlIiwiQ292ZXJlZEJyZWFzdFBhcnQiLCJMb25nU2xlZXZlUGFydCIsInNsZWV2ZUxlbmd0aCIsIl9jYWxjTG9uZ1NsZWV2ZSRjYWxsIiwiY2FsY0xvbmdTbGVldmUiLCJlbGJvd091dCIsIlNob3J0U2xlZXZlUGFydCIsIlN3ZWF0ZXIiLCJMb25nU2xlZXZlZFN3ZWF0ZXIiLCJfU3dlYXRlciIsIkFzeW1tZXRyaWNTbGVldmVkU3dlYXRlciIsIl9Td2VhdGVyMiIsIk1hdGVyaWFscyIsImJyb3duRnVyIiwic2hlZXJGYWJyaWMiLCJNYXNjYXJhUGFydCIsInRvcEZpbGwiLCJib3RGaWxsIiwiZXllbGlkIiwiZXllbGFzaCIsIk1ha2V1cCIsIk1hc2NhcmEiLCJfTWFrZXVwIiwiZXh0cmFMZW5ndGgiLCJJdGVtIiwibW9kaWZ5UG9zZSIsInJlc3RvcmVQb3NlIiwiY2FjaGVkSXRlbXMiLCJsb2FkSXRlbSIsIlRhdHRvbyIsImNhY2hlZFRhdHRvb3MiLCJsb2FkVGF0dG9vIiwiQXNpYW5CdW5CYWNrIiwiX0hhaXJQYXJ0IiwiZXh0cmFDb2xvcnMiLCJobCIsImRyYXdCYWNrQnVucyIsImJhY2siLCJmcm9udCIsImhhaXJBY2Nlc3NvcnlDb2xvciIsIkxhcmdlU2lkZUJhbmdTaGFkaW5nIiwiaWdub3JlMSIsImlnbm9yZTIiLCJfY2FsY0xhcmdlU2lkZUJhbmckY2EiLCJjYWxjTGFyZ2VTaWRlQmFuZyIsIl9hZGp1c3RQb2ludHMyIiwiX2FkanVzdFBvaW50czQiLCJBc2lhbkJ1bkZyb250IiwiX0hhaXJQYXJ0MiIsIl9jYWxjTGFyZ2VTaWRlQmFuZyRjYTIiLCJQT1NJVElWRV9JTkZJTklUWSIsIkN1cmx5VGFpbEZyb250IiwiY3VybHlfdGFpbF9jbGFzc0NhbGxDaGVjayIsImN1cmx5X3RhaWxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImN1cmx5X3RhaWxfZ2V0UHJvdG90eXBlT2YiLCJjdXJseV90YWlsX2luaGVyaXRzIiwiY3VybHlfdGFpbF9jcmVhdGVDbGFzcyIsIl9jYWxjQ3VybHlUb3AiLCJjYWxjQ3VybHlUb3AiLCJfZHJhd1NwZWNpZmljQ3VybDIiLCJjdXJseV90YWlsX3NsaWNlZFRvQXJyYXkiLCJjdXJsTGVmdCIsImN1cmxCb3QiLCJjdXJsVG9wIiwiQ3VybHlUYWlsTWVkaXVtIiwiX2NhbGNDdXJseVRvcDIiLCJIaW1lQ3V0RnJvbnRTaGFkaW5nIiwiaGltZV9jdXRfY2xhc3NDYWxsQ2hlY2siLCJoaW1lX2N1dF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiaGltZV9jdXRfZ2V0UHJvdG90eXBlT2YiLCJfY2FsY0hpbWVDdXQiLCJjYWxjSGltZUN1dCIsIkhpbWVDdXRCYWNrIiwiaGltZV9jdXRfaW5oZXJpdHMiLCJoaW1lX2N1dF9jcmVhdGVDbGFzcyIsIl9jYWxjSGltZUN1dDIiLCJyaWdodEJvdCIsIkhpbWVDdXRGcm9udCIsIl9jYWxjSGltZUN1dDMiLCJnYXBSaWdodCIsImhpbWVfY3V0X3NsaWNlZFRvQXJyYXkiLCJnYXBUb3AiLCJnYXBMZWZ0IiwiX2RyYXdTcGVjaWZpY0N1cmw0IiwiX2RyYXdTcGVjaWZpY0N1cmw2IiwiSGltZUN1dFNpZGUiLCJfSGFpclBhcnQzIiwiX2NhbGNIaW1lQ3V0NCIsImlubmVyQm90IiwiU3RyYWlnaHRGcm9udFNoYWRpbmciLCJzdHJhaWdodF9jbGFzc0NhbGxDaGVjayIsInN0cmFpZ2h0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzdHJhaWdodF9nZXRQcm90b3R5cGVPZiIsIl9jYWxjU3RyYWlnaHQkY2FsbCIsImNhbGNTdHJhaWdodCIsInRvcEJvdCIsIlN0cmFpZ2h0RnJvbnRTaWRlU2hhZGluZyIsIl9jYWxjU3RyYWlnaHQkY2FsbDIiLCJwRW5kIiwiU3RyYWlnaHRGcm9udFNoaW5lIiwic3RyYWlnaHRfaW5oZXJpdHMiLCJzdHJhaWdodF9jcmVhdGVDbGFzcyIsIl9jYWxjU3RyYWlnaHQkY2FsbDMiLCJTdHJhaWdodEZyb250IiwiX2NhbGNTdHJhaWdodCRjYWxsNCIsIlN0cmFpZ2h0U2lkZUJhbmdTaGFkaW5nIiwiX2NhbGNTdHJhaWdodFNpZGUkY2FsIiwiY2FsY1N0cmFpZ2h0U2lkZSIsIlN0cmFpZ2h0U2lkZUJhbmciLCJfY2FsY1N0cmFpZ2h0U2lkZSRjYWwyIiwiaW5uZXJUb3AiLCJfY2FsY1N0cmFpZ2h0JGNhbGw1IiwiU3RyYWlnaHRCYWNrIiwiX0hhaXJQYXJ0NCIsIl9jYWxjU3RyYWlnaHQkY2FsbDYiLCJTaWRlSGlnaFRhaWxGcm9udCIsInNpZGVfaGlnaF90YWlsX2NsYXNzQ2FsbENoZWNrIiwic2lkZV9oaWdoX3RhaWxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNpZGVfaGlnaF90YWlsX2dldFByb3RvdHlwZU9mIiwic2lkZV9oaWdoX3RhaWxfaW5oZXJpdHMiLCJzaWRlX2hpZ2hfdGFpbF9jcmVhdGVDbGFzcyIsIl9jYWxjU2lkZUhpZ2hUYWlsVG9wIiwiY2FsY1NpZGVIaWdoVGFpbFRvcCIsIlNpZGVIaWdoVGFpbFRhaWwiLCJsZWZ0VGFpbCIsImxlZnRCYW5kIiwicmlnaHRCYW5kIiwiSGltZUN1cmxTaGFkaW5nIiwiaGltZV9jdXJsX2NsYXNzQ2FsbENoZWNrIiwiaGltZV9jdXJsX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJoaW1lX2N1cmxfZ2V0UHJvdG90eXBlT2YiLCJfY2FsY0hpbWVDdXJsIiwiY2FsY0hpbWVDdXJsIiwiZm9yayIsImZvcmtJbiIsImhpbWVfY3VybF9zbGljZWRUb0FycmF5Iiwic2hhZGluZ0ZvcmsiLCJIaW1lQ3VybE1lZGl1bSIsImhpbWVfY3VybF9pbmhlcml0cyIsImhpbWVfY3VybF9jcmVhdGVDbGFzcyIsIl9jYWxjSGltZUN1cmwyIiwiZm9ya1RvcCIsImhhaXIiLCJIaW1lQ3VybFNpZGUiLCJjdXJsIiwiamF3IiwibG9hZCIsImxvYWREZWZhdWx0UGFydHMiLCJsb2FkU2VyaWFsaXphdGlvbiIsImxvYWRQYXR0ZXJucyIsIl91dGlsX3V0aWxpdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl91dGlsX2NhbnZhc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3V0aWxfZHJhd19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiZHJhd3BvaW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJpc05hTiIsImJhc2VMaXBDb2xvciIsIm5pcHBsZUNvbG9yIiwibGlwUHJvbWluYW5jZSIsImdldERpbURlc2MiLCJlbGVtIiwiZmluYWxpemVDb2xvciIsImV5ZUhpZ2hsaWdodCIsImV5ZWxpZENvbG9yIiwiZGVmYXVsdEhhaXJGaWxsIiwiYnJvd0ZpbGwiLCJsYXNoRmlsbCIsIm1vZE5hbWUiLCJjbGVhciIsIm95IiwiZm9udCIsImZvbnRTaXplIiwiZmlsbFRleHQiLCJnZW5kZXIiLCJmcm9tQ2hhckNvZGUiLCJwcmludFRva2VucyIsInRva2VucyIsInNwYWNlIiwidG9rZW4iLCJ0eXAiLCJ0eXBlIiwiYXNkZiIsImZpbGxSZWN0IiwiYXJjVG8iLCJzZXh1YWxpdHkiLCJzaG9laGVpZ2h0IiwiaGVpZ2h0cmVhZCIsImhlaWdodGZ0IiwiaGVpZ2h0aW4iLCJudW1kYXNoZXMiLCJsaW5lSm9pbiIsIkJyYUZ1ck91dGxpbmUiLCJmdXJXaWR0aCIsIkZhbGxlblRvcE9yaWciLCJjYWxjR29yZ2V0IiwidG9wSW5Db3ZlcmFnZSIsInRvcE5lY2siLCJ0b3BPdXRDb3ZlcmFnZSIsImJvdEluQ292ZXJhZ2UiLCJib3RPdXRDb3ZlcmFnZSIsImNoZXN0SW4iLCJtaWRkbGUiLCJjaGVzdE91dCIsImJlbGx5SW4iLCJiZWxseVgiLCJiZWxseVkiLCJiZWxseU91dCIsImNhbGNGYWxsZW5Ub3AiLCJGYWxsZW5Ub3AiLCJfY2FsY0ZhbGxlblRvcCRjYWxsIiwiR29yZ2V0UGFydCIsImdyb292ZSIsImdyb292ZUJvdCIsImdyb292ZVRvcCIsIm5lY2tUb3BDb3ZlcmFnZSIsIm5lY2tCb3RDb3ZlcmFnZSIsIkJhcmJhcmljQnJhIiwiR29yZ2V0IiwiRmFsbGVuIiwiRmFsbGVuT3JpZyIsIkNpbmd1bHVtUGFydCIsInBvaW50eSIsImhvd01hbnkiLCJudW1iZXIiLCJtYXJnaW4iLCJkcmF3Rmlyc3RQbGF0ZSIsImNyZXN0IiwiYVBvc2l0aW9uIiwiZHJhd1BsYXRlIiwiR3JlYXZlTGVmdCIsIkdyZWF2ZVJpZ2h0IiwiQ2luZ3VsdW0iLCJWYW1icmFjZUxlZnQiLCJfQXJtb3I0IiwiVmFtYnJhY2VSaWdodCIsIl9Bcm1vcjUiLCJQZW5pcyIsIlBlbmlzSHVtYW4iLCJfUGVuaXMiLCJyZWZsZWN0ZWRCb3QiLCJyZWZsZWN0ZWRUb3AiLCJQZW5pc0hlYWQiLCJQZW5pc0hlYWRIdW1hbiIsIl9QZW5pc0hlYWQiLCJ0aXB0b3AiLCJMZWZ0QXJtU2hhZGluZyIsInRodW1iT3V0IiwidGh1bWJUaXAiLCJhcm1waXRPdXQiLCJlbGJvd0luIiwid3Jpc3RJbiIsImhhbmRUaXAiLCJoYW5kUGFsbSIsIkxlZnRBcm1VbmRlclNoYWRpbmciLCJSaWdodEFybVNoYWRpbmciLCJfYWRqdXN0UG9pbnRzNiIsImhhbmRLbnVja2xlIiwib3V0UG9pbnRzIiwiUmlnaHRBcm1VbmRlclNoYWRpbmciLCJ3cmlzdE91dCIsIkFybSIsIkFybUh1bWFuIiwiX0FybSIsInRvcnNvTGVuZ3RoIiwiaW53YXJkUm90YXRpb24iLCJIYW5kIiwiSGFuZEh1bWFuIiwiX0hhbmQiLCJhbmNob3IiLCJSaWdodExlZ1NoYWRpbmciLCJrbmVlQ2FwIiwia25lZUJvdCIsImFua2xlT3V0IiwiTGVmdExlZ1NoYWRpbmciLCJhbmtsZUluIiwia25lZVRvcCIsImZvbGQiLCJpbk1pZCIsImFua2xlQm90IiwiVGhpZ2hTaGFkaW5nIiwic2hpZnRlZEJvdCIsIkxlZyIsIkxlZ0h1bWFuIiwiX0xlZyIsInN0YW5jZU11c2N1bGF0dXJlIiwic3RhbmNlTWFzY3VsaW5pdHkiLCJmb2xkRGVwdGgiLCJMZWZ0QnJlYXN0U2hhZGluZyIsIkxlZnRCcmVhc3RVbmRlclNoYWRpbmciLCJSaWdodEJyZWFzdFNoYWRpbmciLCJvdXRUaXAiLCJDaGVzdCIsIkNoZXN0SHVtYW4iLCJfQ2hlc3QiLCJicmVhc3RGdWxsbmVzcyIsImJyZWFzdERyb29waW5lc3MiLCJOaXBwbGVzSHVtYW4iLCJfQ2hlc3QyIiwic3Ryb2tlQ2xpcCIsIkZlZXQiLCJGZWV0SHVtYW4iLCJfRmVldCIsIkhvb2ZIb3JzZSIsIl9GZWV0MiIsIkVhcnMiLCJFYXJzSHVtYW4iLCJfRWFycyIsIkVhcnNFbGYiLCJfRWFyczIiLCJFYXJzRWxmMiIsIl9FYXJzMyIsIkNhdEVhcnMiLCJfRWFyczQiLCJFeWVzIiwiRXllc0h1bWFuIiwiX0V5ZXMiLCJQdXBpbCIsIlB1cGlsSHVtYW4iLCJfUHVwaWwiLCJpcmlzIiwiUHVwaWxDYXQiLCJfUHVwaWwyIiwiSXJpcyIsIklyaXNIdW1hbiIsIl9JcmlzIiwiRXllbGlkIiwiRXllbGlkSHVtYW4iLCJfRXllbGlkIiwiRXllbGFzaCIsIkV5ZWxhc2hIdW1hbiIsIl9FeWVsYXNoIiwibGFzaFZpc2liaWxpdHkiLCJCcm93IiwiQnJvd0h1bWFuIiwiX0Jyb3ciLCJicm93IiwibmF0dXJhbEhlaWdodCIsIkNhcEJhc2VQYXJ0Iiwic2lkZUJpYXMiLCJjdXJ2YXR1cmUiLCJoZWFkQ292ZXJhZ2UiLCJzaWRlT2Zmc2V0IiwiX2NhbGNDYXAkY2FsbCIsImNhbGNDYXAiLCJsZWZ0Qm90IiwiQ2FwQmFuZFBhcnQiLCJfY2FsY0NhcCRjYWxsMiIsImxlZnRUb3AiLCJyaWdodFRvcCIsInJpZ2h0Qm90QWdhaW4iLCJzaWRlQ3B5IiwiSGF0IiwiU2ltcGxlQ2FwIiwiX0hhdCIsIkJhbmRlZENhcCIsIl9IYXQyIiwid1N1cGVyQnJhR2VuaXRhbFBhcnQiLCJ3U3VwZXJCcmFDaGVzdFBhcnQiLCJ3U3VwZXJQYW50aWVzUGFydCIsIndTdXBlckJyYSIsIndTdXBlclBhbnRpZXMiLCJ3U3VwZXJQYW50aWVzMlBhcnQiLCJ3QmlraW5pQm90dG9tIiwiTG9hZGVyUGFydCIsIndMb2FkZXIiLCJjYWxjTmVjayIsIkJpQ2hhaW5QYXJ0IiwiX2NhbGNOZWNrJGNhbGwiLCJjaGFpbiIsImJlYWRzU2l6ZSIsInNwYWNlU2l6ZSIsImJlYWRUaGlja25lc3MiLCJUZWFyUGFydCIsIl9jYWxjTmVjayRjYWxsMiIsIkRvdWJsZU5lY2tsYWNlUGFydCIsImNsZWF2YWdlQ292ZXJhZ2VUb3AiLCJfY2FsY05lY2skY2FsbDMiLCJib3QyIiwiTXVsdGlOZWNrbGFjZVBhcnQiLCJtdWx0aXBsZSIsIl9jYWxjTmVjayRjYWxsNCIsImRhc2giLCJfY2FsY05lY2skY2FsbDUiLCJTdGFyUGFydCIsInN0YXJUaGlja25lc3MiLCJ1cHdhcmRzIiwic3R5bGVPdXRlciIsInN0eWxlSW5uZXIiLCJfY2FsY05lY2skY2FsbDYiLCJUTmVja2xhY2VQYXJ0IiwiX2NhbGNOZWNrJGNhbGw3IiwiYmFsbCIsIk5lY2tsYWNlIiwiQmlDaGFpbiIsIl9OZWNrbGFjZSIsIl9kZWZpbmVQcm9wZXJ0eSIsIkRvdWJsZU5lY2tsYWNlIiwiX05lY2tsYWNlMiIsIk11bHRpTmVja2xhY2UiLCJfTmVja2xhY2UzIiwiUGVhcmxOZWNrbGFjZSIsIl9OZWNrbGFjZTQiLCJfcmVmMiIsIlNpbXBsZUNoYWluIiwiX05lY2tsYWNlNSIsIl9yZWYzIiwiU3Rhck5lY2tsYWNlIiwiX05lY2tsYWNlNiIsIlROZWNrbGFjZSIsIl9OZWNrbGFjZTciLCJfcmVmNCIsIlRlYXJOZWNrbGFjZSIsIl9OZWNrbGFjZTgiLCJfcmVmNSIsIlRoaWNrQ2hhaW4iLCJfTmVja2xhY2U5IiwiX3JlZjYiLCJzZXJpYWxpemUiLCJkZXNlcmlhbGl6ZSIsIl9wYXR0ZXJuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfcGFydHNfcGFydF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2Nsb3RoZXNfY2xvdGhpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInRleHQiLCJ2YWwiLCIkUmV2aXZlRGF0YSQiLCJldmFsIiwiX3ZhbHVlJCIsIl92YWx1ZSQkcGF0dGVyblNpemUiLCJleHRlbmRTZXJpYWxpemFiaWxpdHkiLCJnbG9iYWxDbGFzc0lkZW50aWZpZXIiLCJjbGFzc0NvbnN0cnVjdG9yIiwiZGVmaW5lUHJvcGVydGllcyIsIl9nZXREYXRhIiwiX3NldERhdGEiLCJjb25zdHJ1Y3RvciIsInRvSlNPTiIsInJldml2ZVdyYXBwZXIiLCJnbG9iYWxDbGFzc05hbWVzIiwibmFtZXNwYWNlIiwiY2xhc3NOYW1lIiwid3JpdGFibGUiLCJjb2RlIiwiX3NrZWxldG9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfcGFydHNfdGVzdGljbGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfcGFydHNfcGVuaXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9wYXJ0c192YWdpbmFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9wYXJ0c19oZWFkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfcGFydHNfbmVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiX3BhcnRzX2FybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX3BhcnRzX2hhbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIl9wYXJ0c190b3Jzb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fIiwiX3BhcnRzX2xlZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXyIsIl9wYXJ0c19ncm9pbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXyIsIl9wYXJ0c19idXR0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fIiwiX3BhcnRzX2NoZXN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fIiwiX3BhcnRzX2ZlZXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X18iLCJfZmFjZV9wYXJ0c19lYXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fIiwiX2ZhY2VfcGFydHNfZXllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXyIsIl9mYWNlX3BhcnRzX21vdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fIiwiX2ZhY2VfcGFydHNfbGlwc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfXyIsIl9mYWNlX3BhcnRzX25vc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X18iLCJfZmFjZV9wYXJ0c19wdXBpbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfXyIsIl9mYWNlX3BhcnRzX2lyaXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIxX18iLCJfZmFjZV9wYXJ0c19leWVsaWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIyX18iLCJfZmFjZV9wYXJ0c19leWVicm93X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fIiwiX2RlY29yYXRpdmVfcGFydHNfb3V0bGluZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjVfXyIsIm1hbGVQYXJ0cyIsInBhcnRHcm91cCIsIlRlc3RpY2xlc0h1bWFuIiwiZmVtYWxlUGFydHMiLCJWYWdpbmFIdW1hbiIsImRlZmF1bHRQYXJ0cyIsIkhlYWRIdW1hbiIsIk5lY2tIdW1hbiIsIlRvcnNvSHVtYW4iLCJHcm9pbkh1bWFuIiwiQnV0dEh1bWFuIiwiZGVmYXVsdEZhY2VQYXJ0cyIsIk5vc2VIdW1hbiIsIkxpcHNIdW1hbiIsIk1vdXRoSHVtYW4iLCJkZWZhdWx0RGVjb3JhdGl2ZVBhcnRzIiwiVGVzdGljbGVzIiwiX1Rlc3RpY2xlcyIsInRlc3RpY2xlcyIsIlZhZ2luYSIsIl9WYWdpbmEiLCJjb3Zlckdyb2luIiwiSGVhZCIsIkhlYWRIdW1hblNoYWRpbmciLCJfY2FsY0hlYWRTaGFkaW5nIiwiY2FsY0hlYWRTaGFkaW5nIiwic2t1bGxTaWRlIiwic2t1bGxCb3QiLCJjaGluT3V0IiwiY2hpbkJvdCIsIl9IZWFkIiwiQ2hpblNoYWRpbmciLCJsZWZ0Q2hpbk91dCIsImxlZnRKYXciLCJOZWNrU2hhZGluZyIsIk5lY2siLCJfTmVjayIsIm5hcGUiLCJjYWxjVG9yc29TaGFkaW5nIiwiYXJtcGl0QmFzZSIsIkJlbGx5VG9wU2hhZGluZyIsIl9jYWxjVG9yc29TaGFkaW5nJGNhbDIiLCJUb3Jzb1NoYWRpbmciLCJUb3JzbyIsIl9Ub3JzbyIsInNob3VsZGVyQ2F1c2VkVG9yc29XaWR0aCIsIkdyb2luU2hhZGluZyIsIkdyb2luIiwiX0dyb2luIiwiQnV0dCIsIl9CdXR0IiwiTW91dGgiLCJfTW91dGgiLCJMaXBTaGFkaW5nIiwiTGlwcyIsIl9MaXBzIiwiZmFjZU1hc2N1bGluaXR5IiwidG9wUGFydGluZ0hlaWdodCIsImJvdFBhcnRpbmdIZWlnaHQiLCJiaWFzSGVpZ2h0T2Zmc2V0IiwiTm9zZSIsIk5vc2VIdW1hblNoYWRpbmciLCJub3NlIiwibm9zdHJpbFJhdGlvIiwiX05vc2UiLCJub3N0cmlsVmlzaWJpbGl0eSIsIkV4cHJlc3Npb24iLCJleHByZXNzaW9uIiwiZGVncmVlIiwibmV3RXhwcmVzc2lvbiIsIm5ldXRyYWwiLCJzdXNwaWNpb3VzIiwiYW5ncnkiLCJzYWQiLCJzdXJwcmlzZWQiLCJtaXNjaGlldm91cyIsImhhcHB5Iiwic2xlZXB5IiwiYXJvdXNlZCIsImJsaXNzIiwiSmFja2V0QmFzZVNoYWRpbmciLCJfY2FsY0phY2tldCRjYWxsIiwiY2FsY0phY2tldCIsImNoZXN0RGlzcGxheSIsIkphY2tldEJhc2VQYXJ0IiwiX2NhbGNKYWNrZXQkY2FsbDIiLCJicmVhc3RCb3QiLCJicmVhc3RUaXAiLCJsaW5pbmdQYXR0ZXJuIiwibGluaW5nV2lkdGgiLCJicmVhc3RQcm9taW5hbmNlIiwib3V0TWlkVGlnaHQiLCJjbGluZyIsImJyZWFzdEJvdFRpZ2h0IiwidGlwQWRqdXN0IiwiTWVkaXVtTG9vc2VTbGVldmVQYXJ0IiwiSmFja2V0IiwiTG9vc2VKYWNrZXQiLCJfSmFja2V0IiwiQ29yc2V0QnJlYXN0UGFydCIsImNhbGNDb3JzZXQiLCJDb3JzZXRQYXJ0IiwiX2NhbGNDb3JzZXQkY2FsbCIsImtub3RzIiwiSGFsZkNvcnNldFBhcnQiLCJDb3JzZXQiLCJIYWxmQ29yc2V0IiwiVGh1bWJQYXJ0IiwiRmluZ2VyUGFydCIsIkJvZHlNYWtldXAiLCJOYWlscyIsIl9Cb2R5TWFrZXVwIiwicmVxdWlyZSIsIkZhY2lhbEhhaXIiLCJNdXN0YWNoZSIsIl9GYWNpYWxIYWlyIiwiTGVnRnVyIiwiX0RlY29yYXRpdmVQYXJ0IiwiZHJhd0N1cmwiLCJCZWF1dHlNYXJrIiwiSG9ybnMiLCJTdHJhaWdodEhvcm5zIiwiX0hvcm5zIiwiaG9ybnMiLCJjb250cm9sIiwiQ3VydmVkSG9ybnMiLCJfSG9ybnMyIiwiVGFpbCIsIkRlbW9uaWNUYWlsIiwiX1RhaWwiLCJ0b3BSb290IiwiYm90Um9vdCIsIm1heF90aXAiLCJDYXRUYWlsIiwiX1RhaWwyIiwiV2luZ3MiLCJEZW1vbmljV2luZ3MiLCJfV2luZ3MiLCJkZWZhdWx0QmFzZURpbWVuc2lvbnMiLCJwYXJ0c05hbWUiLCJkZWZQYXJ0cyIsIl9kZWZQYXJ0cyRpIiwiUGxheWVyIiwiZGVmYXVsdFN0YXRzIiwiaGFpclBhcnRzIiwiY2xvdGhpbmdQYXJ0cyIsImludiIsInZpdGFscyIsInRyYWl0cyIsIl9leHByZXNzaW9uIiwiYWxsb3dlZFR5cGVzIiwicHJvcFR5cGUiLCJpbmNsdWRlcyIsImFkZFNleFBhcnRzIiwic2V4UGFydHMiLCJpc0ZlbWFsZSIsImlzTWFsZSIsImF0dGFjaFBhcnQiLCJzaGFkaW5nUGFydFByb3RvdHlwZSIsImF0dGFjaGVkTG9jYXRpb24iLCJjbG90aGVzIiwidGF0dG9vcyIsImRlZmF1bHRDbG90aGVzIiwid2VhckNsb3RoaW5nIiwiYmFzZWRpbSIsImRlZmF1bHRNb2RzIiwiZGVmYXVsdFZpdGFscyIsInJlbW92ZUFsbENsb3RoaW5nIiwid2llbGRJdGVtIiwiYWRkVGF0dG9vIiwidG9TdHJpbmciLCJjbGFtcFN0YXRzIiwicGFyYW0iLCJkaW1lbnNpb24iLCJyZXBsYWNlSGFpciIsIm5ld1BhcnQiLCJfdGhpczIiLCJyZXBsYWNlZFBhcnQiLCJvbGRQYXJ0IiwibG9jYXRpb24iLCJzaWJsaW5nSW5kZXgiLCJ0ZXN0TG9jYXRpb24iLCJyZW1vdmVTcGVjaWZpY1BhcnQiLCJkb1JlbW92ZVBhcnQiLCJfdGhpczMiLCJwYXJ0Q292ZXJlZCIsImNvdmVyaW5nTG9jYXRpb24iLCJyZW1vdmVQYXJ0IiwiX3RoaXM0Iiwic2hhZGluZ1BhcnQiLCJuZXdIYWlyIiwiX3RoaXM1IiwiYXBwbHlFeHByZXNzaW9uIiwicmVtb3ZlRXhwcmVzc2lvbiIsInNwZWNpZmljTW9kaWZpY2F0aW9uIiwicmVtb3ZlU3BlY2lmaWNNb2RpZmljYXRpb24iLCJnZXRDb25mbGljdGluZ0Nsb3RoaW5nIiwiX3RoaXM2IiwiYmFzZUxvYyIsIm1vZGlmaWVyIiwid29yblBhcnQiLCJyZW1vdmUiLCJ3b3JuTW9kaWZpZXIiLCJfdGhpczciLCJyZW1vdmVkQ2xvdGhpbmciLCJyZW1vdmVDbG90aGluZyIsInNvbWVQYXJ0V2FzQXR0YWNoZWQiLCJyZW1vdmVkIiwiX3RoaXM4IiwicmVtb3ZlZENsb3RoaW5nSW5kZXgiLCJjdXJzZWQiLCJuZXdQYXJ0cyIsImNsb3RoaW5nSW5kZXgiLCJyZW1vdmVJdGVtIiwicmVtb3ZlVGF0dG9vIiwiZXh0cmFIZWlnaHQiLCJnZXRNYXhIZWlnaHQiLCJjYWxjRHJlc3NTaGlydCIsInRvcFBhcnRlZCIsImJvdFBhcnRlZCIsIkRyZXNzU2hpcnRCYXNlUGFydCIsIl9jYWxjRHJlc3NTaGlydCRjYWxsIiwiRHJlc3NTaGlydENvbGxhclBhcnQiLCJfY2FsY0RyZXNzU2hpcnQkY2FsbDIiLCJjb2xsYXJDb3ZlcmFnZSIsImNvbGxhcldpZHRoIiwiY29sbGFySGVpZ2h0IiwiY29sbGFyUGF0dGVybiIsIkRyZXNzU2hpcnRCdXR0b25QYXJ0IiwiYnV0dG9uU3Ryb2tlIiwiYnV0dG9uRmlsbCIsImJ1dHRvblJhZGl1cyIsImJ1dHRvblRoaWNrbmVzcyIsImJ1dHRvbkNvdmVyYWdlIiwiX2NhbGNEcmVzc1NoaXJ0JGNhbGwzIiwic2hpZnRlZFgiLCJEcmVzc1NoaXJ0QnJlYXN0UGFydCIsInRvcFRvcCIsImJvdEJvdCIsIl9jYWxjRHJlc3NTaGlydCRjYWxsNCIsIkxvbmdTbGVldmVDdWZmUGFydCIsImN1ZmZQYXR0ZXJuIiwiRHJlc3NTaGlydCIsIldvbWVuRHJlc3NTaGlydCIsIl9EcmVzc1NoaXJ0IiwiTWVuRHJlc3NTaGlydCIsIl9EcmVzc1NoaXJ0MiIsIkJlbGx5UGllcmNpbmdTaW1wbGVQYXJ0Iiwib3JpZ2luYWxGaWxsIiwiY2lyY2xlIiwiQmVsbHlQaWVyY2luZ0FkdmFuY2VkUGFydCIsInNlY29uZGFyeVJhZGl1cyIsImFib3ZlIiwiYWJvdmUyIiwiYmVsbG93IiwiYmVsbG93MiIsImxpbmsiLCJOaXBwbGVQaWVyY2luZ1BhcnQiLCJiYXIiLCJyaW5nIiwicmluZ1JhZGl1cyIsIlN0dWRQYXJ0MiIsIlRvbmd1ZVBhcnQiLCJTdHVkUGFydDMiLCJCcmlkZ2VQYXJ0IiwiTmlwcGxlUGllcmNpbmdzIiwiQmVsbHlQaWVyY2luZ1NpbXBsZSIsIkJlbGx5UGllcmNpbmdBZHZhbmNlZCIsIl9KZXdlbHJ5MyIsIlN0dWRQaWVyY2luZzIiLCJTdHVkUGllcmNpbmczIiwiU3R1ZFBpZXJjaW5nNCIsIl9QaWVyY2luZzMiLCJTdHVkUGllcmNpbmc2IiwiX1BpZXJjaW5nNCIsIlN0dWRQaWVyY2luZzUiLCJfUGllcmNpbmc1IiwiU3R1ZFBpZXJjaW5nNyIsIl9QaWVyY2luZzYiLCJUb25ndWVQaWVyY2luZyIsIl9QaWVyY2luZzciLCJCcmlkZ2UiLCJfUGllcmNpbmc4IiwiQnJpZGdlMiIsIl9QaWVyY2luZzkiLCJNYWdpY0hhdEZyb250UGFydCIsIl9jYWxjTWFnaWNIYXQkY2FsbCIsImNhbGNNYWdpY0hhdCIsImNvbmVCYXNlIiwiY29uZVRvcCIsImZvcmhlYWQiLCJNYWdpY0hhdEJhY2tQYXJ0IiwiX2NhbGNNYWdpY0hhdCRjYWxsMiIsImNlbnRlck9mZnNldCIsImJyaW1BbmdsZSIsImJyaW1XaWR0aCIsImNvbmVXaWR0aCIsImNvbmVIZWlnaHQiLCJNYWlkSGVhZHBpZWNlUGFydCIsImRyb3AiLCJNYWdpY0hhdCIsIk1haWRIZWFkcGllY2UiLCJDaG9rZXJQYXJ0IiwiX2NhbGNDb2xsYXIkY2FsbCIsImNhbGNDb2xsYXIiLCJOZWNrQ29yc2V0UGFydCIsIl9jYWxjQ29sbGFyJGNhbGwyIiwiY3Jvc3NpbmdzIiwiQ29sbGFyUGFydCIsIlRhZ1BhcnQiLCJmb250SGVpZ2h0IiwiX2NhbGNDb2xsYXIkY2FsbDMiLCJDaG9rZXJDcm9zc1BhcnQiLCJfY2FsY0NvbGxhciRjYWxsNCIsIkNob2tlciIsIk5lY2tDb3JzZXQiLCJfTmVja0FjY2Vzc29yeTIiLCJDb2xsYXIiLCJfTmVja0FjY2Vzc29yeTMiLCJUYWdnZWRDb2xsYXIiLCJfTmVja0FjY2Vzc29yeTQiLCJDcm9zc2VkQ2hva2VyIiwiX05lY2tBY2Nlc3Nvcnk1IiwiVHJpYW5nbGVFYXJyaW5nc1BhcnQiLCJoYW5nZXIiLCJDcnlzdGFsRWFycmluZ3NQYXJ0IiwidG9wQ2VudGVyIiwiYWx0IiwiTG9vcEVhcnJpbmdzRnJvbnRQYXJ0IiwiX2NhbGNMb29wJGNhbGwiLCJjYWxjTG9vcCIsIkxvb3BFYXJyaW5nc0JhY2tQYXJ0IiwiX2NhbGNMb29wJGNhbGwyIiwiQ2hhaW5FYXJyaW5nc1BhcnQiLCJCYWxsRWFycmluZ3NQYXJ0IiwiUmhvbWJFYXJyaW5nc0Zyb250UGFydCIsIl9jYWxjUmhvbWIkY2FsbCIsImNhbGNSaG9tYiIsIlJob21iRWFycmluZ3NCYWNrUGFydCIsIl9jYWxjUmhvbWIkY2FsbDIiLCJhY3R1YWxMZW5ndGgiLCJFYXJQaWVyY2luZ0Zyb250UGFydCIsIl9jYWxjRWFyUGllcmNpbmckY2FsbCIsImNhbGNFYXJQaWVyY2luZyIsIkVhclBpZXJjaW5nQmFja1BhcnQiLCJfY2FsY0VhclBpZXJjaW5nJGNhbGwyIiwiRWFycmluZ3MiLCJUcmlhbmdsZUVhcnJpbmdzIiwiX0VhcnJpbmdzIiwiQ3J5c3RhbEVhcnJpbmdzIiwiX0VhcnJpbmdzMiIsIkxvb3BFYXJyaW5ncyIsIl9FYXJyaW5nczMiLCJDaGFpbkVhcnJpbmdzIiwiX0VhcnJpbmdzNCIsIkJhbGxFYXJyaW5ncyIsIl9FYXJyaW5nczUiLCJSaG9tYkVhcnJpbmdzIiwiX0VhcnJpbmdzNiIsIkVhclBpZXJjaW5nIiwiX0VhcnJpbmdzNyIsIkJvZHljaGFpbjFQYXJ0IiwiY2xlYXZhZ2VDb3ZlcmFnZUJvdCIsInBlY3RvcmFsIiwidW5kZXIiLCJyaW5nVG9wIiwidXBSaW5nQm90IiwidXBXYWlzdCIsImxvd1JpbmdCb3QiLCJsb3dXYWlzdCIsIkJvZHljaGFpbjJQYXJ0IiwidXBNaWQiLCJ1cEJvdCIsImxvd01pZCIsImxvd0JvdCIsIkJvZHljaGFpbjNQYXJ0Iiwid2Fpc3QyIiwiQm9keWNoYWluIiwiQm9keWNoYWluMSIsIl9Cb2R5Y2hhaW4iLCJCb2R5Y2hhaW4yIiwiX0JvZHljaGFpbjIiLCJCb2R5Y2hhaW4zIiwiX0JvZHljaGFpbjMiLCJjYWxjQXJtU3F1YXJlIiwiYXJtQ292ZXJhZ2VUb3AiLCJjb250cm9sUG9pbnQiLCJTaW1wbGVBcm1sZXRQYXJ0IiwiX2NhbGNBcm1TcXVhcmUkY2FsbCIsIkNyb3NzZWRBcm1sZXRQYXJ0IiwiZG91YmxlZCIsImZ1bGxBcm1sZXQiLCJfY2FsY0FybVNxdWFyZSRjYWxsMiIsIlNwaXJhbEFybWxldFBhcnQiLCJjb2lscyIsImFkanVzdFkiLCJjb2lsIiwiX2NhbGNBcm0kY2FsbCIsImNhbGNBcm0iLCJBcm1sZXQiLCJTcGlyYWxBcm1sZXQiLCJfQXJtbGV0IiwiU2ltcGxlQXJtbGV0IiwiX0FybWxldDIiLCJDcm9zc2VkQXJtbGV0IiwiX0FybWxldDMiLCJSZXN0cmFpbnRDaGFpblBhcnQiLCJjaGFpbldpZHRoIiwiY2hhaW5TdHJva2UiLCJjaGFpbkRhc2giLCJCb25kYWdlUm9wZVBhcnQiLCJfUmVzdHJhaW50Q2hhaW5QYXJ0IiwiQ2hlc3RCb25kYWdlUGFydCIsIl9Cb25kYWdlUm9wZVBhcnQiLCJfY2FsY1RvcEJvbmRhZ2UkY2FsbCIsImNhbGNUb3BCb25kYWdlIiwiV2Fpc3RCb25kYWdlUGFydCIsIl9Cb25kYWdlUm9wZVBhcnQyIiwibWlkQm90IiwiQ2hlc3RQZW50YWdyYW1Cb25kYWdlUGFydCIsIl9Cb25kYWdlUm9wZVBhcnQzIiwiX2NhbGNUb3BQZW50YWdyYW1Cb25kIiwiY2FsY1RvcFBlbnRhZ3JhbUJvbmRhZ2UiLCJ1cHBlckJvdCIsInVwcGVyQ2VudGVyIiwiV3Jpc3RSZXN0cmFpbnRDaGFpblBhcnQiLCJfUmVzdHJhaW50Q2hhaW5QYXJ0MiIsIkFua2xlUmVzdHJhaW50Q2hhaW5QYXJ0IiwiX1Jlc3RyYWludENoYWluUGFydDMiLCJzdGFydEFsb25nTGVnIiwiUmVzdHJhaW50cyIsIkJvbmRhZ2UiLCJfQ2xvdGhpbmcyIiwiV3Jpc3RSZXN0cmFpbnRzIiwiX1Jlc3RyYWludHMiLCJBbmtsZVJlc3RyYWludHMiLCJfUmVzdHJhaW50czIiLCJCYW5kZWRBbmtsZXRQYXJ0IiwiQ2hlc3RCb25kYWdlIiwiX0JvbmRhZ2UiLCJDaGVzdFBlbnRhZ3JhbUJvbmRhZ2UiLCJfQm9uZGFnZTIiLCJXYWlzdEJvbmRhZ2UiLCJfQm9uZGFnZTMiLCJBbmtsZXRQYXJ0IiwiQ2hhaW5BbmtsZXRQYXJ0IiwiX0Fua2xldFBhcnQiLCJxdWVyeSIsIl9BbmtsZXRQYXJ0MiIsIkFua2xldCIsIkNoYWluQW5rbGV0IiwiX0Fua2xldCIsIkJhbmRlZEFua2xldCIsIl9BbmtsZXQyIiwiTGlwc3RpY2tQYXJ0IiwiTGlwc3RpY2siLCJ3VmFtYnJhY2VQYXJ0Iiwid0dyZWF2ZVBhcnQiLCJ3TG9pbmNsb3RoUGFydCIsIndGYWxsZW5Ub3AiLCJ3R29yZ2V0UGFydCIsIndMb2luY2xvdGgiLCJ3QmFyYmFyaWNCcmEiLCJ3R29yZ2V0Iiwid0ZhbGxlbiIsIndCaWtpbmlUb3BCcmVhc3RQYXJ0Iiwid0N1aXJhc3NQYXJ0Iiwid0N1aXJhc3NCcmVhc3RQYXJ0IiwiX0Nsb3RoaW5nUGFydDgiLCJ3Q2luZ3VsdW1QYXJ0IiwiX0Nsb3RoaW5nUGFydDkiLCJ3aGF0IiwiYlBvc2l0aW9uIiwid0dyZWF2ZUxlZnQiLCJ3R3JlYXZlUmlnaHQiLCJ3R3JlYXZlcyIsIndCaWtpbmlUb3AiLCJ3Q3VpcmFzcyIsIndDaW5ndWx1bSIsIndWYW1icmFjZXMiLCJfQXJtb3I2IiwiX2dldFByb3RvdHlwZU9mMjEiLCJfbGVuMjAiLCJfa2V5MjAiLCJ3VmFtYnJhY2VMZWZ0IiwiX0FybW9yNyIsIl9nZXRQcm90b3R5cGVPZjIyIiwiX2xlbjIxIiwiX2tleTIxIiwid1ZhbWJyYWNlUmlnaHQiLCJfQXJtb3I4IiwiX2dldFByb3RvdHlwZU9mMjMiLCJfbGVuMjIiLCJfa2V5MjIiLCJ3VGh1bWJQYXJ0Iiwid0ZpbmdlclBhcnQiLCJ3TmFpbHMiLCJ3R2xvdmVTbGVldmVQYXJ0Iiwid0dsb3ZlUGFydCIsIndCcmFjZWxldFBhcnQiLCJ3R2xvdmVTbGVldmUiLCJ3TG9uZ0dsb3ZlcyIsIndCcmFjZWxldCIsIndCcmFjZWxldExlZnQiLCJ3QnJhY2VsZXRSaWdodCIsIndDb3JzZXRCcmVhc3RQYXJ0Iiwid0NvcnNldFBhcnQiLCJ3SGFsZkNvcnNldFBhcnQiLCJ3Q29yc2V0Iiwid0hhbGZDb3JzZXQiLCJ3SGlnaFNuZWFrZXJzUGFydCIsImxhY2VUaGlja25lc3MiLCJ0aWdodCIsInRvZU91dCIsInRvZUluIiwicG9pbnRzXzIiLCJ0b25ndWVPdXQiLCJ0b25ndWVJbiIsIlNuZWFrZXJzUGFydCIsIndTaW1wbGVTbmVha2Vyc1BhcnQiLCJ3U2ltcGxlU2hvZXNQYXJ0Iiwid0hpZ2hTbmVha2VycyIsIndTaW1wbGVTbmVha2VycyIsIndTaW1wbGVTaG9lcyIsInd3U25lYWtlcnMiLCJfSGVlbHM0IiwiY2FsY1N0cmFwIiwiX2NhbGNMZWdQb2ludHMiLCJjYWxjTGVnUG9pbnRzIiwiR2FpdGVyUGFydCIsIlNhbmRhbFJpZ2h0UGFydCIsIl9IZWVsUGFydDYiLCJTYW5kYWxMZWZ0UGFydCIsIl9IZWVsUGFydDciLCJTYW5kYWxQYXJ0IiwiX0hlZWxQYXJ0OCIsImFudG9rZSIsImluQW50b2VCb3QiLCJpbkFudG9lVG9wIiwiU2FuZGFscyIsIl9IZWVsczUiLCJzdHJhcHMiLCJ3SGVlbFN0cmFwUGFydCIsIl9IZWVsUGFydDkiLCJ0b3RhbCIsIndDbG9zZWRUb2VTdHJhcHBlZFB1bXBzIiwiX0hlZWxzNiIsIndIZWVsQmFzZVBhcnQiLCJfSGVlbFBhcnQxMCIsIndDbG9zZWRUb2VQdW1wcyIsIl9IZWVsczciLCJ3RG91YmxlZFNuZWFrZXJzUGFydCIsIl9IZWVsUGFydDExIiwid0RvdWJsZUhlZWxQYXJ0IiwiX0hlZWxQYXJ0MTIiLCJ3RG91YmxlU2hvZXMiLCJfSGVlbHM4IiwidG91bmdlIiwid1N1cGVyU29ja1BhcnQiLCJ3U3VwZXJTb2NrcyIsIndTdG9ja2luZ3MiLCJ3U3RvY2tpbmdzR2FydGVyIiwid1BhbnR5aG9zZVBhcnQiLCJ3UGFudHlob3NlIiwid0xhY2VkU3VwZXJMZWdnaW5zUGFydCIsIndMYWNlZExlZ2dpbnMiLCJ3U3VwZXJTa2lydFBhcnQiLCJ3U3VwZXJTa2lydEFib3ZlUGFydCIsIndTdXBlckxlZ2dpbnNQYXJ0Iiwid1N1cGVyTGVnZ2lucyIsIndTdXBlclNraXJ0Iiwid1N1cGVyU2tpcnRBYm92ZSIsIndUZWVQYXJ0Iiwid0hhbHRlclRvcEJyZWFzdFBhcnQiLCJ3VHViZVRvcEJyZWFzdFBhcnQiLCJ3VG9wQ2hlc3RQYXJ0Iiwid1RlZSIsIndIYWx0ZXJUb3AiLCJ3VHViZVRvcCIsIndTaW1wbGVCZWx0UGFydCIsIndHbGFzc2VzUGFydCIsIndHbGFzc2VzIiwid1NpbXBsZUJlbHQiLCJ3TGlwc3RpY2tQYXJ0Iiwid01hc2NhcmFQYXJ0Iiwid0xpcHN0aWNrIiwid01hc2NhcmEiLCJfTWFrZXVwMiIsIlBhdGgiLCJwYXRoIiwicGF0aE9iaiIsInZhbGlkIiwiZ2V0VmFsdWVGcm9tIiwibm9vcCIsImhhc0V2YWwiLCJkZXRlY3RFdmFsIiwiY2hyb21lIiwiYXBwIiwicnVudGltZSIsIm5hdmlnYXRvciIsImdldERldmljZVN0b3JhZ2UiLCJGdW5jdGlvbiIsImlzSW5kZXgiLCJpc09iamVjdCIsImNyZWF0ZU9iamVjdCIsInByb3RvIiwiX19wcm90b19fIiwibmV3T2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaWRlbnRSZWdFeHAiLCJSZWdFeHAiLCJpc0lkZW50IiwidGVzdCIsImNvbnN0cnVjdG9ySXNQcml2YXRlIiwicHJpdmF0ZVRva2VuIiwiY29tcGlsZWRHZXRWYWx1ZUZyb21GbiIsInBhdGhDYWNoZSIsImZvcm1hdEFjY2Vzc29yIiwicmVwbGFjZSIsImdldFBhdGhDaGFyVHlwZSIsImNoYXIiLCJjaGFyQ29kZUF0IiwiZ2V0UGF0aCIsInBhdGhTdHJpbmciLCJwYXJzZVBhdGgiLCJuZXdDaGFyIiwidHJhbnNpdGlvbiIsImFjdGlvbiIsInR5cGVNYXAiLCJhY3Rpb25zIiwiYXBwZW5kIiwibWF5YmVVbmVzY2FwZVF1b3RlIiwibmV4dENoYXIiLCJwYXRoU3RhdGVNYWNoaW5lIiwiaW52YWxpZFBhdGgiLCJkaXJlY3RPYnNlcnZlciIsIml0ZXJhdGVPYmplY3RzIiwib2JzZXJ2ZSIsInNldFZhbHVlRnJvbSIsImJlZm9yZVBhdGgiLCJ3cyIsImlkZW50IiwiWyIsImVvZiIsImluUGF0aCIsIi4iLCJiZWZvcmVJZGVudCIsImluSWRlbnQiLCIwIiwiYmVmb3JlRWxlbWVudCIsIiciLCJcIiIsImFmdGVyWmVybyIsIl0iLCJpblNpbmdsZVF1b3RlIiwiZWxzZSIsImluRG91YmxlUXVvdGUiLCJhZnRlckVsZW1lbnQiLCJNYXRyaXgiLCJsYXN0RWxlbWVudCIsImFycmF5IiwidXNpbmciLCJjbG9zZSIsImV4ZWN1dGUiLCJwZW54IiwicGVueSIsImp1c3RCZWd1biIsImJwZW54IiwiYnBlbnkiLCJzaG93Y29udHJvbCIsImRlcHJlY2F0ZWRQcm9wZXJ0aWVzIiwib3JpZ1Byb3BzIiwiY2YiLCJ1c2luZ1NjYWxlZExpbmVXaWR0aCIsInRtcCIsInVzaW5nU2NhbGVkRm9udFNpemUiLCJpbmZvIiwibmV3U2l6ZSIsInRyYWNlIiwiaW52ZXJzZSIsInRyYW5zZm9ybUNvb3JkaW5hdGUiLCJtb3ZlUGVuIiwiX3JlY3QiLCJvcCIsInN0cm9rZVJlY3QiLCJfYXJndW1lbnRzIiwibWF4V2lkdGgiLCJzdHJva2VUZXh0IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJ4MCIsInkwIiwieDEiLCJ5MSIsInQwIiwidDEiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsInIwIiwidHIwIiwidHIxIiwiZGVidWdPcHRpb25zIiwib3B0aW9ucyIsIl9nZXREZWZhdWx0RGVidWdPcHRpb25zIiwiX2RyYXdDdXJ2ZUNvbnRyb2wiLCJfZ2V0RGVidWdQb2ludCIsImNweDEiLCJjcHkxIiwiY3B4MiIsImNweTIiLCJ0Y3AxIiwidGNwMiIsImNweCIsImNweSIsInRjcCIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImFudGljbG9ja3dpc2UiLCJleSIsInNXaWR0aCIsInNIZWlnaHQiLCJkV2lkdGgiLCJkSGVpZ2h0Iiwic2RpbSIsImRkaW0iLCJwdXRJbWFnZURhdGEiLCJpbWFnZURhdGEiLCJkaXJ0eVgiLCJkaXJ0eVkiLCJkaXJ0eVdpZHRoIiwiZGlydHlIZWlnaHQiLCJkaXJ0eSIsInB0cHJpbnQiLCJjb250cm9sTGluZSIsImRlc3RpbmF0aW9uQ29sb3IiLCJlbGVtZW50IiwiX2VsIiwibWUiLCJfdCIsImVsIiwiX3B4IiwiX2dldFBYIiwidXNlQ1NTM0QiLCJfc3QiLCJ0b0NTUyIsImZyb21UcmlhbmdsZXMiLCJ0MiIsInIyIiwicngxIiwicnkxIiwicngyIiwicnkyIiwibTIiLCJweCIsInJ4IiwicHkiLCJyeSIsInF4IiwicXkiLCJtdWx0aXBseSIsImZyb21TVkdUcmFuc2Zvcm1MaXN0IiwidExpc3QiLCJkb20iLCJtYXRyaXgiLCJyb3RhdGVGcm9tVmVjdG9yIiwic2NhbGVVIiwiaXMyRCIsImxzdCIsImZsaXBYIiwiZmxpcFkiLCJyZWZsZWN0VmVjdG9yIiwicmVzZXQiLCJyb3RhdGVEZWciLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZUZyb21WZWN0b3IiLCJzaGVhciIsInNoZWFyWCIsInNoZWFyWSIsInNrZXciLCJheCIsImF5IiwidGFuIiwic2tld0RlZyIsInNrZXdYIiwic2tld1kiLCJfeCIsInR4IiwidHkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImQyIiwiZTIiLCJmMiIsImQxIiwiZTEiLCJmMSIsImRpdmlkZSIsImRpdmlkZVNjYWxhciIsImNsb25lQ29udGV4dCIsImNsb25lRE9NIiwiZHQiLCJpbnRlcnBvbGF0ZSIsImludGVycG9sYXRlQW5pbSIsImRlY29tcG9zZSIsInMxIiwidXNlTFUiLCJwaSIsImRldGVybSIsImFwcGx5VG9BcnJheSIsIm14UG9pbnRzIiwiYXBwbHlUb1R5cGVkQXJyYXkiLCJ1c2U2NCIsIkZsb2F0NjRBcnJheSIsIkZsb2F0MzJBcnJheSIsImFwcGx5VG9Db250ZXh0IiwiYXBwbHlUb0VsZW1lbnQiLCJ1c2UzRCIsInRvQ1NTM0QiLCJhcHBseVRvT2JqZWN0IiwiaXNJZGVudGl0eSIsImlzSW52ZXJ0aWJsZSIsIl9xIiwiaXNWYWxpZCIsImlzRXF1YWwiLCJub0NvbnRleHQiLCJ0b0FycmF5IiwidG9UeXBlZEFycmF5IiwiZml4TGVuIiwidG9DU1YiLCJ0b0RPTU1hdHJpeCIsIkRPTU1hdHJpeCIsInRvU1ZHTWF0cml4Iiwic3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwic3ZnTWF0cml4IiwiY3JlYXRlU1ZHTWF0cml4Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxpQ0FBQUMsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsSUFDQSxtQkFBQUcsZUFBQUMsSUFDQUQsT0FBQSxHQUFBSCxHQUNBLGlCQUFBQyxRQUNBQSxRQUFBLEdBQUFELElBRUFELEVBQUEsR0FBQUMsSUFSQSxDQVNDSyxPQUFBLFdBQ0QsbUJDVEEsSUFBQUMsRUFBQSxHQUdBLFNBQUFDLG9CQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQVAsUUFHQSxJQUFBQyxFQUFBSSxFQUFBRSxHQUFBLENBQ0FDLEVBQUFELEVBQ0FFLEdBQUEsRUFDQVQsUUFBQSxJQVVBLE9BTkFVLEVBQUFILEdBQUFJLEtBQUFWLEVBQUFELFFBQUFDLElBQUFELFFBQUFNLHFCQUdBTCxFQUFBUSxHQUFBLEVBR0FSLEVBQUFELFFBMERBLE9BckRBTSxvQkFBQU0sRUFBQUYsRUFHQUosb0JBQUFPLEVBQUFSLEVBR0FDLG9CQUFBUSxFQUFBLFNBQUFkLEVBQUFlLEVBQUFDLEdBQ0FWLG9CQUFBVyxFQUFBakIsRUFBQWUsSUFDQUcsT0FBQUMsZUFBQW5CLEVBQUFlLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNWLG9CQUFBZ0IsRUFBQSxTQUFBdEIsR0FDQSxvQkFBQXVCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFuQixFQUFBdUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQW5CLEVBQUEsY0FBaUR5QixPQUFBLEtBUWpEbkIsb0JBQUFvQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBbkIsb0JBQUFtQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkF4QixvQkFBQWdCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBbkIsb0JBQUFRLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXZCLG9CQUFBMkIsRUFBQSxTQUFBaEMsR0FDQSxJQUFBZSxFQUFBZixLQUFBMkIsV0FDQSxTQUFBTSxhQUEyQixPQUFBakMsRUFBQSxTQUMzQixTQUFBa0MsbUJBQWlDLE9BQUFsQyxHQUVqQyxPQURBSyxvQkFBQVEsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBVixvQkFBQVcsRUFBQSxTQUFBbUIsRUFBQUMsR0FBc0QsT0FBQW5CLE9BQUFvQixVQUFBQyxlQUFBNUIsS0FBQXlCLEVBQUFDLElBR3REL0Isb0JBQUFrQyxFQUFBLElBSUFsQyx3Q0FBQW1DLEVBQUEscUJDbEZnRXhDLEVBQUFELFFBQXVKLFNBQUFzQixHQUFtQixTQUFBVyxFQUFBUyxHQUFjLEdBQUFoQixFQUFBZ0IsR0FBQSxPQUFBaEIsRUFBQWdCLEdBQUExQyxRQUE0QixJQUFBaUIsRUFBQVMsRUFBQWdCLEdBQUEsQ0FBWWxDLEVBQUFrQyxFQUFBakMsR0FBQSxFQUFBVCxRQUFBLElBQXFCLE9BQUFzQixFQUFBb0IsR0FBQS9CLEtBQUFNLEVBQUFqQixRQUFBaUIsSUFBQWpCLFFBQUFpQyxHQUFBaEIsRUFBQVIsR0FBQSxFQUFBUSxFQUFBakIsUUFBMkQsSUFBQTBCLEVBQUEsR0FBUyxPQUFBTyxFQUFBckIsRUFBQVUsRUFBQVcsRUFBQXBCLEVBQUFhLEVBQUFPLEVBQUF6QixFQUFBLFNBQUFjLEdBQW1DLE9BQUFBLEdBQVNXLEVBQUFuQixFQUFBLFNBQUFRLEVBQUFJLEVBQUFnQixHQUFxQlQsRUFBQWhCLEVBQUFLLEVBQUFJLElBQUFSLE9BQUFDLGVBQUFHLEVBQUFJLEVBQUEsQ0FBcUNpQixjQUFBLEVBQUF2QixZQUFBLEVBQUFDLElBQUFxQixLQUFzQ1QsSUFBQSxTQUFBWCxHQUFpQixJQUFBSSxFQUFBSixLQUFBTSxXQUFBLFdBQWlDLE9BQUFOLEVBQUFzQixTQUFpQixXQUFZLE9BQUF0QixHQUFVLE9BQUFXLEVBQUFuQixFQUFBWSxFQUFBLElBQUFBLE1BQXNCTyxFQUFBaEIsRUFBQSxTQUFBSyxFQUFBVyxHQUFtQixPQUFBZixPQUFBb0IsVUFBQUMsZUFBQTVCLEtBQUFXLEVBQUFXLElBQWlEQSxFQUFBTyxFQUFBLElBQUFQLElBQUFRLEVBQUEsR0FBamUsQ0FBbWYsVUFBQW5CLEVBQUFXLEVBQUFQLEdBQWtCLGFBQWEsU0FBQWdCLEVBQUFwQixHQUFjLEdBQUF1QixNQUFBQyxRQUFBeEIsR0FBQSxDQUFxQixRQUFBVyxFQUFBLEVBQUFQLEVBQUFtQixNQUFBdkIsRUFBQXlCLFFBQThCZCxFQUFBWCxFQUFBeUIsT0FBV2QsSUFBQVAsRUFBQU8sR0FBQVgsRUFBQVcsR0FBYyxPQUFBUCxFQUFTLE9BQUFtQixNQUFBRyxLQUFBMUIsR0FBcUIsU0FBQUwsRUFBQUssRUFBQVcsR0FBZ0IsT0FBT2dCLEVBQUEzQixFQUFBNEIsRUFBQWpCLEdBQVMsU0FBQWtCLEVBQUE3QixHQUFjLFFBQUFXLEVBQUFtQixVQUFBTCxPQUFBckIsRUFBQW1CLE1BQUEsRUFBQVosSUFBQSxLQUFBa0IsRUFBQSxFQUFrREEsRUFBQWxCLEVBQUlrQixJQUFBekIsRUFBQXlCLEVBQUEsR0FBQUMsVUFBQUQsR0FBd0IsT0FBQWxDLEVBQUFLLEVBQUErQixXQUFBLEVBQUFYLEVBQUFoQixFQUFBNEIsSUFBQSxTQUFBaEMsR0FBNEMsT0FBQUEsRUFBQTJCLE1BQVczQixFQUFBK0IsV0FBQSxFQUFBWCxFQUFBaEIsRUFBQTRCLElBQUEsU0FBQWhDLEdBQXVDLE9BQUFBLEVBQUE0QixPQUFnQixTQUFBckMsRUFBQVMsRUFBQVcsR0FBZ0IsSUFBQVAsRUFBQSxFQUFBMEIsVUFBQUwsYUFBQSxJQUFBSyxVQUFBLEdBQUFBLFVBQUEsS0FBK0QsT0FBQUQsRUFBQSxTQUFBN0IsRUFBQVcsR0FBdUIsT0FBQVgsRUFBQVcsRUFBQVAsR0FBYUosRUFBQVcsR0FBTSxTQUFBekIsRUFBQWMsRUFBQVcsR0FBZ0IsT0FBQWtCLEVBQUEsU0FBQTdCLEVBQUFXLEdBQXVCLE9BQUFBLEVBQUFYLEdBQVdBLEVBQUFXLEdBQU0sU0FBQXNCLEVBQUFqQyxHQUFjLE9BQUFrQyxLQUFBQyxLQUFBbkMsRUFBQTJCLEVBQUEzQixFQUFBMkIsRUFBQTNCLEVBQUE0QixFQUFBNUIsRUFBQTRCLEdBQTJFLFNBQUFWLEVBQUFsQixFQUFBVyxHQUFnQixJQUFBUCxFQUFBLEVBQUEwQixVQUFBTCxhQUFBLElBQUFLLFVBQUEsR0FBQUEsVUFBQSxHQUFBTSxFQUErRCxPQUFBN0MsRUFBQWEsRUFBQWxCLEVBQUFrQixFQUFBSixHQUFBVyxHQUFxQixTQUFBeEIsRUFBQWEsR0FBYyxJQUFBVyxFQUFBc0IsRUFBQWpDLEdBQVcsT0FBQTZCLEVBQUEsU0FBQTdCLEdBQXFCLE9BQUFBLEVBQUFXLEdBQVdYLEdBQStVLFNBQUFtQixFQUFBbkIsRUFBQVcsRUFBQVAsR0FBa0IsSUFBQUosRUFBQSxPQUFBQSxFQUFlLElBQUFvQixFQUFBekIsRUFBQUssRUFBQTJCLEVBQUFoQixFQUFBWCxFQUFBNEIsRUFBQXhCLEdBQXFCLE9BQUFKLEVBQUFxQyxNQUFBakIsRUFBQWlCLElBQUExQyxFQUFBSyxFQUFBcUMsSUFBQVYsRUFBQWhCLEVBQUFYLEVBQUFxQyxJQUFBVCxFQUFBeEIsSUFBQUosRUFBQXNDLE1BQUFsQixFQUFBa0IsSUFBQTNDLEVBQUFLLEVBQUFzQyxJQUFBWCxFQUFBaEIsRUFBQVgsRUFBQXNDLElBQUFWLEVBQUF4QixJQUFBZ0IsRUFBNHNCLFNBQUFtQixFQUFBdkMsRUFBQVcsRUFBQVAsRUFBQWdCLEdBQW9CLElBQUF6QixFQUFBVCxFQUFBYyxFQUFBVyxHQUFBa0IsRUFBQWxDLEVBQUFnQyxFQUFBUCxFQUFBekIsRUFBQWlDLEVBQUF4QixFQUFBYixFQUFBSSxFQUFBZ0MsRUFBQXZCLEVBQUFULEVBQUFpQyxFQUFBUixFQUF5Q1QsRUFBQWdCLEVBQUEzQixFQUFBMkIsRUFBQUUsRUFBQWxCLEVBQUFpQixFQUFBNUIsRUFBQTRCLEVBQUFyQyxFQUFvQkssT0FBQUMsZUFBQWMsRUFBQSxjQUFzQ1IsT0FBQSxJQUFTUSxFQUFBNkIsTUFBQTdDLEVBQUFnQixFQUFBOEIsVUFBQVosRUFBQWxCLEVBQUErQixJQUFBbkQsRUFBQW9CLEVBQUFnQyxLQUFBekQsRUFBQXlCLEVBQUFpQyxLQUFBWCxFQUFBdEIsRUFBQWtDLE1BQXY1QyxTQUFBQyxFQUFBOUMsR0FBYyxPQUFBa0MsS0FBQWEsTUFBQS9DLEVBQUE0QixFQUFBNUIsRUFBQTJCLElBQXk0Q2hCLEVBQUFxQyxNQUFBOUIsRUFBQVAsRUFBQXNDLGNBQUE5RCxFQUFBd0IsRUFBQXVDLHVCQUE3c0MsU0FBQXRCLEVBQUE1QixHQUFjLE9BQUFiLEVBQUFRLEdBQUFLLEVBQUE0QixFQUFBNUIsRUFBQTJCLEtBQStyQ2hCLEVBQUF3QyxhQUF6cUMsU0FBQTNELEVBQUFRLEdBQWMsT0FBQUwsRUFBQUssRUFBQTJCLEVBQUEzQixFQUFBNEIsSUFBMnBDakIsRUFBQXlDLFFBQXpvQyxTQUFBQyxFQUFBckQsR0FBYyxJQUFBVyxFQUFBLEVBQUFtQixVQUFBTCxhQUFBLElBQUFLLFVBQUEsR0FBQUEsVUFBQSxPQUFBMUIsRUFBQSxFQUFBMEIsVUFBQUwsYUFBQSxJQUFBSyxVQUFBLEdBQUFBLFVBQUEsS0FBNEgsSUFBQTlCLEVBQUEsT0FBQUEsRUFBZSxJQUFBb0IsT0FBQSxFQUFBUyxPQUFBLEVBQXNCLE9BQUFsQixJQUFBLEtBQUFrQixFQUFBVCxFQUFBLEVBQUFoQixFQUFBSixFQUFBNEIsSUFBQVIsR0FBQXBCLEVBQUEyQixHQUFBM0IsRUFBQTRCLEVBQUF4QixHQUFBTyxJQUFBLEVBQUFBLEtBQUFrQixFQUFBVCxFQUFBVCxHQUFBaEIsRUFBQSxFQUFBeUIsRUFBQXBCLEVBQUEyQixFQUFBLEVBQUFFLEVBQUE3QixFQUFBNEIsRUFBQSxFQUFBeEIsSUFBMDlCTyxFQUFBMkMsT0FBQW5DLEVBQUFSLEVBQUE0QyxhQUF2dkIsU0FBQTVCLEVBQUEzQixFQUFBVyxHQUFnQixRQUFBUCxFQUFBLEdBQUFnQixFQUFBVSxVQUFBTCxPQUFBOUIsRUFBQTRCLE1BQUEsRUFBQUgsSUFBQSxLQUFBUyxFQUFBLEVBQXVEQSxFQUFBVCxFQUFJUyxJQUFBbEMsRUFBQWtDLEVBQUEsR0FBQUMsVUFBQUQsR0FBd0IsT0FBQWxDLEVBQUE2RCxRQUFBLFNBQUFwQyxHQUE2QmhCLEVBQUFxRCxLQUFBdEMsRUFBQUMsRUFBQXBCLEVBQUFXLE1BQWlCUCxHQUFzbUJPLEVBQUErQyxZQUFsbUIsU0FBQUMsRUFBQTNELEVBQUFXLEdBQWdCLFFBQUFQLEVBQUEwQixVQUFBTCxPQUFBTCxFQUFBRyxNQUFBLEVBQUFuQixJQUFBLEtBQUFULEVBQUEsRUFBa0RBLEVBQUFTLEVBQUlULElBQUF5QixFQUFBekIsRUFBQSxHQUFBbUMsVUFBQW5DLEdBQXdCeUIsRUFBQW9DLFFBQUEsU0FBQXBELEdBQXNCLEdBQUFBLElBQUEsSUFBQUEsRUFBQWEsZUFBQSxNQUFrQyxJQUFBRyxFQUFBRixFQUFBZCxFQUFBTyxFQUFBWCxHQUFBTCxFQUFBeUIsRUFBQU8sRUFBQUUsRUFBQVQsRUFBQVEsRUFBMkJ4QixFQUFBdUIsRUFBQWhDLEVBQUFTLEVBQUF3QixFQUFBQyxFQUFBekIsRUFBQWlDLE1BQUFqQyxFQUFBaUMsSUFBQW5CLEVBQUFkLEVBQUFpQyxJQUFBMUIsRUFBQVgsSUFBQUksRUFBQWtDLE1BQUFsQyxFQUFBa0MsSUFBQXBCLEVBQUFkLEVBQUFrQyxJQUFBM0IsRUFBQVgsUUFBaWJXLEVBQUFpRCxhQUExVyxTQUFBQyxFQUFBN0QsRUFBQVcsR0FBZ0IsUUFBQVAsRUFBQThCLEtBQUE0QixJQUFBbkQsR0FBQVMsRUFBQWMsS0FBQTZCLElBQUFwRCxHQUFBaEIsRUFBQW1DLFVBQUFMLE9BQUFJLEVBQUFOLE1BQUEsRUFBQTVCLElBQUEsS0FBQUosRUFBQSxFQUE4RUEsRUFBQUksRUFBSUosSUFBQXNDLEVBQUF0QyxFQUFBLEdBQUF1QyxVQUFBdkMsR0FBd0JzQyxFQUFBMkIsUUFBQSxTQUFBN0MsR0FBc0JBLElBQUEsSUFBQUEsRUFBQU0sZUFBQSxPQUFBc0IsRUFBQXZDLEVBQUFXLEVBQUFTLEVBQUFoQixHQUFBTyxFQUFBMEIsS0FBQUUsRUFBQXZDLEVBQUFXLEVBQUEwQixJQUFBakIsRUFBQWhCLEdBQUFPLEVBQUEyQixLQUFBQyxFQUFBdkMsRUFBQVcsRUFBQTJCLElBQUFsQixFQUFBaEIsT0FBeWEsSUFBQWdDLEVBQUF6QixFQUFBcUQsT0FBQXBFLE9BQUFxRSxPQUFBdEUsRUFBQSxNQUFxQ2dCLEVBQUF1RCxXQUFBdEUsT0FBQXFFLE9BQUEsQ0FBNEJFLE9BQUEsSUFBU3hELEVBQUF5RCxTQUFBeEUsT0FBQXFFLE9BQUEsQ0FBNEJJLEtBQUEsS0FBUyxTQUFBckUsRUFBQVcsRUFBQVAsR0FBaUIsYUFBYSxTQUFBZ0IsRUFBQXBCLEdBQWMsR0FBQXVCLE1BQUFDLFFBQUF4QixHQUFBLENBQXFCLFFBQUFXLEVBQUEsRUFBQVAsRUFBQW1CLE1BQUF2QixFQUFBeUIsUUFBOEJkLEVBQUFYLEVBQUF5QixPQUFXZCxJQUFBUCxFQUFBTyxHQUFBWCxFQUFBVyxHQUFjLE9BQUFQLEVBQVMsT0FBQW1CLE1BQUFHLEtBQUExQixHQUFxQixTQUFBTCxFQUFBSyxFQUFBVyxFQUFBUCxHQUFrQixJQUFBZ0IsRUFBQWhCLEVBQUFrRSxPQUFBM0UsRUFBQVMsRUFBQW1FLFVBQUExQyxFQUFBekIsRUFBQW9FLE1BQUFqRixHQUFBLEVBQUFrRixFQUFBdEIsY0FBQW5ELEdBQUFkLEdBQUEsRUFBQXVGLEVBQUF0QixjQUFBeEMsR0FBdUYsR0FBQUEsRUFBQTBCLEtBQUExQixFQUFBMkIsSUFBQSxPQUFBVCxFQUFBdEMsRUFBQW9CLEVBQUEwQixJQUFBMUIsRUFBQTJCLElBQUFwRCxHQUEwQyxJQUFBK0MsRUFBQXRCLEVBQUEwQixLQUFBMUIsRUFBQTJCLElBQW1CLE9BQUFMLEVBQUF0QyxFQUFBSixFQUFBMEMsRUFBQS9DLEdBQUFrQyxFQUFBN0IsRUFBQUwsR0FBeUIsU0FBQTJDLEVBQUE3QixFQUFBVyxFQUFBUCxHQUFrQixPQUFBVCxFQUFBZ0IsRUFBQVAsRUFBQSxDQUFja0UsT0FBQSxXQUFrQixRQUFBM0QsRUFBQW1CLFVBQUFMLE9BQUFyQixFQUFBbUIsTUFBQVosR0FBQVMsRUFBQSxFQUEwQ0EsRUFBQVQsRUFBSVMsSUFBQWhCLEVBQUFnQixHQUFBVSxVQUFBVixHQUFzQixPQUFBN0IsRUFBQXdDLFdBQUEsR0FBQS9CLEdBQUEwRSxPQUFBdEUsS0FBcUNtRSxVQUFBLFdBQXNCLFFBQUE1RCxFQUFBbUIsVUFBQUwsT0FBQXJCLEVBQUFtQixNQUFBWixHQUFBUyxFQUFBLEVBQTBDQSxFQUFBVCxFQUFJUyxJQUFBaEIsRUFBQWdCLEdBQUFVLFVBQUFWLEdBQXNCLE9BQUFxRCxFQUFBaEMsVUFBQVYsV0FBQSxHQUFnVCxTQUFBRSxFQUFBakMsRUFBQVcsRUFBQVAsRUFBQWdCLEdBQW9CLE9BQUFULEVBQUFTLEVBQUEsRUFBQWhCLEdBQUFKLElBQUEsR0FBQUksRUFBQU8sR0FBQVgsRUFBQVcsR0FBcFVELEtBQUEsS0FBQVYsSUFBQTBFLE9BQUF0RSxLQUE0RG9FLE1BQUEsV0FBa0IsUUFBQTdELEVBQUFtQixVQUFBTCxPQUFBckIsRUFBQW1CLE1BQUFaLEdBQUFTLEVBQUEsRUFBMENBLEVBQUFULEVBQUlTLElBQUFoQixFQUFBZ0IsR0FBQVUsVUFBQVYsR0FBc0IsT0FBQXFELEVBQUFoQyxVQUFBVixXQUFBLEdBQWtOLFNBQUFlLEVBQUE5QyxFQUFBVyxFQUFBUCxFQUFBZ0IsRUFBQXpCLEdBQXNCLE9BQUFnQixHQUFBLEVBQUFYLElBQUEsRUFBQUEsSUFBQSxFQUFBQSxHQUFBLEVBQUFJLEdBQUEsRUFBQUosSUFBQSxFQUFBQSxLQUFBLEVBQUFvQixHQUFBLEVBQUFwQixPQUFBTCxFQUFBSyxPQUF4T1UsS0FBQSxLQUFBVixJQUFBMEUsT0FBQXRFLE9BQStELFNBQUFiLEVBQUFTLEVBQUFXLEVBQUFQLEdBQWtCLFNBQUFxRSxFQUFBaEMsV0FBMEMsU0FBQXZELEVBQUFjLEVBQUFXLEVBQUFQLEdBQWtCLE9BQUFKLEdBQUFJLEVBQUFPLE1BQTVERCxLQUFBLEtBQUFWLEdBQUFXLEVBQUFQLEdBQTBOLFNBQUFjLEVBQUFsQixFQUFBVyxFQUFBUCxFQUFBZ0IsRUFBQXpCLEdBQXNCLElBQUFrQyxFQUFBdEMsRUFBQVMsRUFBQVcsRUFBQVAsR0FBQWxCLEVBQUFLLEVBQUFTLEVBQUFJLEVBQUFnQixHQUFBYSxFQUFBMUMsRUFBQVMsRUFBQW9CLEVBQUF6QixHQUFBbUQsRUFBQXZELEVBQUFTLEVBQUE2QixFQUFBM0MsR0FBQWdDLEVBQUEzQixFQUFBUyxFQUFBZCxFQUFBK0MsR0FBQTlDLEVBQUFJLEVBQUFTLEVBQUE4QyxFQUFBNUIsR0FBQVUsRUFBQSxDQUF5RStDLEdBQUFoRSxFQUFBaUUsR0FBQXpGLEdBQVd5QyxFQUFBZ0QsR0FBQXZDLElBQUFSLEVBQUFELEVBQUFnRCxHQUFBdEMsSUFBQVEsRUFBc0IsSUFBQXRELEVBQUEsQ0FBT21GLElBQUEsRUFBQUYsRUFBQXRCLGNBQUFoRSxHQUFBeUYsR0FBQWpGLEdBQStCLE9BQUFILEVBQUFvRixHQUFBdkMsSUFBQW5CLEVBQUExQixFQUFBb0YsR0FBQXRDLElBQUFMLEVBQUEsQ0FBOEI0QyxLQUFBakQsRUFBQWtELE1BQUF0RixHQUFnQixTQUFBTCxFQUFBYSxFQUFBVyxFQUFBUCxFQUFBZ0IsR0FBb0IsSUFBQXpCLEVBQUFKLEVBQUFTLEVBQUFXLEVBQUFQLEdBQUF5QixFQUFBdEMsRUFBQVMsRUFBQUksRUFBQWdCLEdBQUFsQyxFQUFBSyxFQUFBUyxFQUFBTCxFQUFBa0MsR0FBQUksRUFBQSxDQUF3QzBDLEdBQUFoRSxFQUFBaUUsR0FBQTFGLEdBQVcrQyxFQUFBMkMsR0FBQXZDLElBQUExQyxFQUFXLElBQUFtRCxFQUFBLENBQU82QixJQUFBLEVBQUFGLEVBQUF0QixjQUFBakUsR0FBQTBGLEdBQUF4RCxHQUErQixPQUFBMEIsRUFBQThCLEdBQUF2QyxJQUFBUixFQUFBLENBQW1CZ0QsS0FBQTVDLEVBQUE2QyxNQUFBaEMsR0FBZ0IsU0FBQWxCLEVBQUE1QixFQUFBVyxFQUFBUCxHQUFrQixJQUFBZ0IsRUFBQTdCLEVBQUFTLEVBQUFXLEVBQUFQLEdBQWUsT0FBT3lFLEtBQUEsQ0FBTUYsR0FBQWhFLEVBQUFpRSxHQUFBeEQsR0FBVTBELE1BQUEsQ0FBUUgsR0FBQXZELEVBQUF3RCxHQUFBeEUsSUFBa0gsU0FBQWlELEVBQUFyRCxFQUFBVyxFQUFBUCxHQUFrQixPQUFBTyxJQUFBWCxFQUFBLEtBQUFJLEVBQUFKLElBQUFXLEVBQUFYLElBQWdJLFNBQUEyQixFQUFBM0IsRUFBQVcsRUFBQVAsRUFBQWdCLEdBQW9CLE9BQXRILFNBQUFELEVBQUFuQixFQUFBVyxFQUFBUCxHQUFrQixJQUFBZ0IsRUFBQVQsSUFBQSxFQUFBWCxFQUFBSSxFQUFnQixPQUFBZ0IsRUFBQSxRQUFBVCxFQUFBdUIsS0FBQUMsS0FBQWYsS0FBQSxFQUFBcEIsS0FBQVcsRUFBQXVCLEtBQUFDLEtBQUFmLEtBQUEsRUFBQXBCLElBQW9GbUIsQ0FBQW5CLEVBQUEsRUFBQVcsRUFBQVAsRUFBQSxHQUFBTyxFQUFBWCxLQUFBb0IsR0FBOEIsU0FBQXVDLEVBQUEzRCxHQUFjLE9BQUFBLEVBQUEsR0FBQWtDLEtBQUE2QyxLQUFBL0UsRUFBQSxLQUFBa0MsS0FBQTZDLElBQUEvRSxFQUFBLEtBQWdhLFNBQUF1QyxFQUFBdkMsRUFBQVcsRUFBQVAsRUFBQWdCLEVBQUF6QixHQUEwQyxJQUFBa0MsRUFBQSxHQUFwQmxCLEdBQUFoQixJQUFBSyxHQUFBTCxHQUFvQixHQUFwQlMsR0FBQVQsSUFBQXlCLEdBQUF6QixHQUFzQyxPQUEvYSxTQUFBa0UsRUFBQTdELEVBQUFXLEVBQUFQLEdBQWtCLElBQUFnQixFQUFBcEIsRUFBQSxFQUFBNkIsR0FBQSxFQUFBbEIsRUFBQVgsS0FBQSxJQUFBZCxHQUFBLEVBQUFjLE1BQUEsRUFBQUEsRUFBQVcsRUFBQSxHQUFBUCxHQUFBLEtBQUE2QixHQUFBLEVBQUErQyxFQUFBQyxZQUFBL0YsSUFBQTJDLE1BQUEsR0FBOEYsS0FBQUksRUFBQSxDQUFRLElBQUFhLEVBQUFaLEtBQUFDLEtBQUFGLEdBQW1CLE9BQUEwQixHQUFBekUsRUFBQTRELEdBQUFhLEVBQUF6RSxFQUFBNEQsR0FBQTFCLEdBQXlCLE9BQUFhLEVBQUEsQ0FBVSxJQUFBZixFQUFBeUMsR0FBQXpFLEdBQVksU0FBQWdDLEVBQUFFLEdBQUFGLEVBQUFFLEdBQW1CLElBQUFqQyxFQUFBK0MsS0FBQUMsTUFBQU4sT0FBQUQsR0FBQTFDLEVBQUFDLEVBQStCeUMsR0FBQSxFQUFBQSxHQUFBLElBQUFBLE1BQUEsR0FBcUIsSUFBQXBDLEVBQUEwQyxLQUFBZ0QsS0FBQXRELEdBQUF5QixFQUFBLEVBQUFNLEVBQUF4RSxHQUE0QixPQUFBa0UsRUFBQW5CLEtBQUE0QixJQUFBdEUsRUFBQSxHQUFBNEIsRUFBQWlDLEVBQUFuQixLQUFBNEIsS0FBQXRFLEVBQUEsRUFBQTBDLEtBQUFpRCxJQUFBLEdBQUEvRCxFQUFBaUMsRUFBQW5CLEtBQUE0QixLQUFBdEUsRUFBQSxFQUFBMEMsS0FBQWlELElBQUEsR0FBQS9ELEdBQWtKeUMsRUFBQSxFQUFBN0QsRUFBQSxFQUFBVyxFQUFBLEVBQUFQLEdBQUF5QixJQUFBLEVBQUE3QixFQUFBLEVBQUFXLEdBQUFrQixFQUFBN0IsRUFBQTZCLEdBQUFHLElBQUEsU0FBQWhDLEdBQTJELFNBQUFnRixFQUFBQyxZQUFBakYsRUFBQSxLQUE0NkIsU0FBQVYsRUFBQVUsRUFBQVcsR0FBZ0IsSUFBQVAsRUFBQSxDQUFBSixHQUFVLFFBQUFvQixLQUFBVCxFQUFBUyxFQUFBZ0UsV0FBQSxPQUFBekUsRUFBQU0sZUFBQUcsSUFBQWhCLEVBQUFxRCxLQUFBOUMsRUFBQVMsSUFBcUVoQixFQUFBcUQsTUFBQSxFQUFBZ0IsRUFBQXRCLGNBQUF4QyxJQUE4QixRQUFBaEIsR0FBQSxFQUFBOEUsRUFBQXRCLGNBQUF4QyxHQUFBa0IsRUFBQSxFQUFBdEMsRUFBQWEsRUFBQXFCLE9BQStDSSxFQUFBdEMsSUFBSXNDLEdBQUEsU0FBQTdCLEVBQUFXLEdBQW1CLElBQUFTLEVBQUFwQixFQUFBVyxFQUFVaEIsRUFBQSxLQUFBSyxJQUFBLEVBQUF5RSxFQUFBaEMsV0FBQSxTQUFBekMsRUFBQVcsR0FBd0MsT0FBQVMsRUFBQXBCLEdBQUEsRUFBQW9CLEdBQUFULEdBQW1CUCxFQUFBSixFQUFBLEdBQUFJLEVBQUFKLElBQXhGLENBQXNHNkIsRUFBQXRDLEdBQU0sT0FBQUksRUFBUyxTQUFBMEYsRUFBQXJGLEVBQUFXLEdBQWdCLE9BQUFoQixFQUFBSyxFQUFBVyxFQUFBLENBQWMyRCxPQUFBLFdBQWtCLElBQUFsRSxFQUFBZCxFQUFBVSxFQUFBVixFQUFBVSxFQUFBVyxJQUFrQixPQUFBUCxFQUFBaUMsSUFBQWpDLEVBQUFrQyxNQUFvQmlDLFVBQUEsV0FBc0IsSUFBQW5FLEVBQUFkLEVBQUFVLEVBQUFXLEdBQWEsT0FBQVAsRUFBQWlDLElBQUFqQyxFQUFBa0MsTUFBb0JrQyxNQUFBLFdBQWtCLE9BQUE3RCxFQUFBMEIsSUFBQTFCLEVBQUEyQixRQUFpaUIxQyxPQUFBQyxlQUFBYyxFQUFBLGNBQXNDUixPQUFBLElBQVcsSUFBQW1GLEVBQTBQLFNBQUEzRSxFQUFBUCxHQUFxQixHQUFBbUIsTUFBQUMsUUFBQWIsR0FBQSxPQUFBQSxFQUE2QixHQUFBVixPQUFBc0YsWUFBQTNGLE9BQUFlLEdBQUEsT0FBM1IsU0FBQVgsSUFBQVcsR0FBZ0IsSUFBQVAsRUFBQSxHQUFBZ0IsR0FBQSxFQUFBekIsR0FBQSxFQUFBa0MsT0FBQSxFQUE0QixJQUFJLFFBQUF0QyxFQUFBTCxFQUFBYyxFQUFBQyxPQUFBc0YsY0FBaUNuRSxHQUFBN0IsRUFBQUwsRUFBQXNHLFFBQUFDLFFBQUFyRixFQUFBcUQsS0FBQWxFLEVBQUFZLFFBQUFRLEdBQUFQLEVBQUFxQixTQUFBZCxHQUEyRFMsR0FBQSxJQUFPLE1BQUFwQixHQUFTTCxHQUFBLEVBQUFrQyxFQUFBN0IsRUFBUyxRQUFRLEtBQUlvQixHQUFBbEMsRUFBQXdHLFFBQUF4RyxFQUFBd0csU0FBeUIsUUFBUSxHQUFBL0YsRUFBQSxNQUFBa0MsR0FBYyxPQUFBekIsRUFBMkRKLENBQUFXLEVBQUFQLEdBQThDLFVBQUF1RixVQUFBLHlEQUFnRmhGLEVBQUFpRixhQUFBakcsRUFBQWdCLEVBQUFrRixnQkFBQWhFLEVBQUFsQixFQUFBbUYsZUFBQXZHLEVBQUFvQixFQUFBb0YsV0FBM3JHLFNBQUF2RyxFQUFBUSxFQUFBVyxFQUFBUCxHQUFrQixPQUFBVCxFQUFBZ0IsRUFBQVAsRUFBQSxDQUFja0UsT0FBQTFDLEVBQUFsQixLQUFBLEtBQUFWLEdBQUF1RSxVQUFBcEYsRUFBQXVCLEtBQUEsS0FBQVYsR0FBQXdFLE1BQUF0RCxFQUFBUixLQUFBLEtBQUFWLE1BQTJwR1csRUFBQXFGLGlCQUE5MEUsU0FBQTVELEVBQUFwQyxFQUFBVyxFQUFBUCxHQUFrQixJQUFBYixPQUFBLEVBQWEsVUFBQWEsRUFBQXVCLEVBQUFwQyxFQUFBLFFBQW9CLENBQUssVUFBQWEsRUFBQXdCLEVBQUEsU0FBdUJyQyxFQUFBLElBQU0sT0FBQUksRUFBQUssRUFBQVcsRUFBQSxDQUFjMkQsT0FBQSxXQUFrQixRQUFBdEUsRUFBQThCLFVBQUFMLE9BQUFkLEVBQUFZLE1BQUF2QixHQUFBTCxFQUFBLEVBQTBDQSxFQUFBSyxFQUFJTCxJQUFBZ0IsRUFBQWhCLEdBQUFtQyxVQUFBbkMsR0FBc0IsT0FBQTBELEVBQUF0QixXQUFBLEVBQUFYLEVBQUFULEVBQUFxQixJQUFBLFNBQUFoQyxHQUEwQyxPQUFBQSxFQUFBVCxNQUFZbUYsT0FBQSxDQUFBdEUsRUFBQWIsT0FBbUJnRixVQUFBLFdBQXNCLFFBQUF2RSxFQUFBOEIsVUFBQUwsT0FBQWQsRUFBQVksTUFBQXZCLEdBQUFMLEVBQUEsRUFBMENBLEVBQUFLLEVBQUlMLElBQUFnQixFQUFBaEIsR0FBQW1DLFVBQUFuQyxHQUFzQixPQUFBZ0MsRUFBQUksV0FBQSxFQUFBWCxFQUFBVCxFQUFBcUIsSUFBQSxTQUFBaEMsR0FBMEMsT0FBQUEsRUFBQVQsTUFBWW1GLE9BQUEsQ0FBQXRFLEVBQUFiLE9BQW1CaUYsTUFBQSxXQUFrQixRQUFBeEUsRUFBQThCLFVBQUFMLE9BQUFkLEVBQUFZLE1BQUF2QixHQUFBTCxFQUFBLEVBQTBDQSxFQUFBSyxFQUFJTCxJQUFBZ0IsRUFBQWhCLEdBQUFtQyxVQUFBbkMsR0FBc0IsT0FBQTRDLEVBQUFSLFdBQUEsRUFBQVgsRUFBQVQsRUFBQXFCLElBQUEsU0FBQWhDLEdBQTBDLE9BQUFBLEVBQUFULE1BQVltRixPQUFBLENBQUF0RSxFQUFBYixTQUFvQjBHLE9BQUEsU0FBQWpHLEdBQXFCLFdBQUFBLEdBQUEsRUFBQWdGLEVBQUFDLFlBQUFqRixFQUFBLEtBQUFBLEdBQUEsSUFBeUNnQyxJQUFBLFNBQUE1QixHQUFrQixJQUFBZ0IsRUFBQVMsRUFBQXpCLEVBQUFKLEVBQUFXLEdBQWUsT0FBQVMsRUFBQWhCLElBQUFnQixLQUEwcURULEVBQUF1RixnQkFBenBELFNBQUFDLEVBQUFuRyxFQUFBVyxHQUFnQixJQUFBUCxFQUFBLEVBQUEwQixVQUFBTCxhQUFBLElBQUFLLFVBQUEsR0FBQUEsVUFBQSxNQUFBVixFQUFBLEVBQUFVLFVBQUFMLGFBQUEsSUFBQUssVUFBQSxHQUFBQSxVQUFBLEtBQUFuQyxFQUFBSixFQUFBYSxFQUFBSixFQUFBVyxHQUFzSSxTQUFBOEQsRUFBQS9CLEtBQUEvQyxHQUFBLEVBQUE4RSxFQUFBdkIseUJBQUEsRUFBQXVCLEVBQUE5QixNQUFBM0MsRUFBQVcsSUFBQVMsSUFBbWdEVCxFQUFBeUYsY0FBQTlHLEVBQUFxQixFQUFBMEYsc0JBQUFoQixFQUFBMUUsRUFBQTJGLGVBQXIrQixTQUFBQyxFQUFBdkcsRUFBQVcsRUFBQVAsRUFBQWdCLEdBQW9CLElBQUFoQixFQUFBLE9BQUFnQixFQUFlLElBQUFBLEVBQUEsT0FBQWhCLEVBQWUsSUFBQVQsRUFBQTBGLEVBQUExRSxFQUFBUCxHQUFBeUIsRUFBQXlELEVBQUEzRixFQUFBLEdBQUFULEVBQUEyQyxFQUFBLEdBQUFJLEVBQUFKLEVBQUEsR0FBQWlCLEVBQUF1QyxFQUFBMUUsRUFBQVMsR0FBQUYsRUFBQW9FLEVBQUF4QyxFQUFBLEdBQUEzRCxFQUFBK0IsRUFBQSxHQUFBVSxFQUFBVixFQUFBLEdBQUExQixFQUFBRCxFQUFBUyxFQUFBSSxFQUFBZ0IsR0FBK0UsT0FBQTVCLEVBQUE2QyxJQUFBOUMsRUFBQVMsRUFBQWQsRUFBQUMsR0FBQUssRUFBQThDLElBQUEvQyxFQUFBUyxFQUFBaUMsRUFBQUwsR0FBQXBDLEdBQW8yQm1CLEVBQUE2RixpQkFBN3pCLFNBQUFDLEVBQUF6RyxFQUFBVyxHQUFnQixPQUFBWCxHQUFBVyxFQUFBLENBQWFnQixFQUFBM0IsRUFBQTJCLEVBQUFDLEVBQUE1QixFQUFBNEIsRUFBQVMsS0FBQSxFQUFBcUUsRUFBQUMsT0FBQWhHLEVBQUEyQixVQUFBLEVBQUFvRSxFQUFBQyxPQUFBaEcsRUFBQTBCLE1BQTBEckMsR0FBc3VCVyxFQUFBaUcsY0FBbnVCLFNBQUFDLEVBQUE3RyxFQUFBVyxHQUFnQixJQUFBUCxFQUFBLEVBQUEwQixVQUFBTCxhQUFBLElBQUFLLFVBQUEsR0FBQUEsVUFBQSxLQUErRCxPQUFBbkMsRUFBQUssRUFBQVcsRUFBQSxDQUFjMkQsT0FBQSxXQUFrQixTQUFBRyxFQUFBL0IsS0FBQS9CLEdBQUEsRUFBQThELEVBQUE5QixNQUFBM0MsRUFBQVcsR0FBQVAsSUFBcUNtRSxVQUFBLFdBQXNCLElBQUFuRCxFQUFBOUIsRUFBQVUsRUFBQVcsR0FBYSxTQUFBOEQsRUFBQXpCLE9BQUE1QixFQUFBa0IsS0FBQWxDLEVBQUFPLElBQThCNkQsTUFBQSxXQUFrQixTQUFBQyxFQUFBekIsT0FBQXJDLEVBQUEyQixLQUFBbEMsRUFBQU8sT0FBa3RCLElBQUE4RCxFQUFBckUsRUFBQSxHQUFBc0csRUFBQXRHLEVBQUEsR0FBQTRFLEVBQUE1RSxFQUFBLElBQXlCLFNBQUFKLEVBQUFXLEVBQUFQLEdBQWlCLGFBQTRQUixPQUFBQyxlQUFBYyxFQUFBLGNBQXNDUixPQUFBLElBQVNRLEVBQUFtRyxJQUE5UixTQUFBMUYsRUFBQXBCLEdBQWMsV0FBQUEsRUFBQWtDLEtBQUFpRCxJQUFnUnhFLEVBQUFvRyxJQUEzUCxTQUFBcEgsRUFBQUssR0FBYyxPQUFBQSxFQUFBa0MsS0FBQWlELEdBQUEsS0FBNk94RSxFQUFBcUcsVUFBeE4sU0FBQW5GLEVBQUE3QixHQUFjLEtBQUtBLEVBQUFrQyxLQUFBaUQsSUFBVW5GLEdBQUEsRUFBQWtDLEtBQUFpRCxHQUFjLEtBQUtuRixHQUFBa0MsS0FBQWlELElBQVduRixHQUFBLEVBQUFrQyxLQUFBaUQsR0FBYyxPQUFBbkYsR0FBK0lXLEVBQUFzRyxNQUF0SSxTQUFBMUgsRUFBQVMsRUFBQVcsRUFBQVAsR0FBa0IsT0FBQUosRUFBQVcsSUFBQVAsRUFBQUosRUFBQUksRUFBQUosR0FBb0hXLEVBQUFzRSxXQUEvRixTQUFBL0YsRUFBQWMsRUFBQVcsR0FBZ0IsT0FBQXVHLFdBQUFsSCxFQUFBbUgsUUFBQXhHLE1BQXdJLFNBQUFYLEVBQUFXLEVBQUFQLEdBQWlCLGFBQWtMUixPQUFBQyxlQUFBYyxFQUFBLGNBQXNDUixPQUFBLElBQVNRLEVBQUFnRyxNQUFwTixTQUFBdkYsRUFBQXBCLEdBQWMsT0FBQUEsRUFBQW9ILEtBQUFDLE1BQUFELEtBQUFFLFVBQUF0SCxPQUFzTVcsRUFBQTRHLGlCQUE3SixTQUFBNUgsRUFBQUssRUFBQVcsR0FBZ0IsSUFBQVAsRUFBQSxFQUFBMEIsVUFBQUwsYUFBQSxJQUFBSyxVQUFBLEdBQUFBLFVBQUEsTUFBZ0U5QixFQUFBaUIsZUFBQU4sS0FBQVgsRUFBQVcsR0FBQVAsS0FBOEcsU0FBQUosRUFBQVcsRUFBQVAsR0FBaUIsYUFBZ3dDUixPQUFBQyxlQUFBYyxFQUFBLGNBQXNDUixPQUFBLElBQVNRLEVBQUE2RyxVQUFBLEVBQUE3RyxFQUFBOEcsV0FBbHlDLFNBQUFyRyxFQUFBcEIsR0FBYyxRQUFBVyxFQUFBbUIsVUFBQUwsT0FBQXJCLEVBQUFtQixNQUFBLEVBQUFaLElBQUEsS0FBQVMsRUFBQSxFQUFrREEsRUFBQVQsRUFBSVMsSUFBQWhCLEVBQUFnQixFQUFBLEdBQUFVLFVBQUFWLEdBQXdCLEtBQUFoQixFQUFBcUIsT0FBQSxJQUFrQixJQUFBOUIsRUFBQVMsRUFBQSxHQUFXVCxRQUFBVCxFQUFBZ0YsYUFBQXZFLEVBQUFTLEVBQUEsSUFBQVQsS0FBQXNCLGVBQUEsTUFBQWpCLEVBQUEwSCxPQUFBL0gsRUFBQWdDLEVBQUFoQyxFQUFBaUMsSUFBNEUsUUFBQUMsRUFBQSxFQUFBdEMsRUFBQWEsRUFBQXFCLE9BQXVCSSxFQUFBdEMsSUFBSXNDLEVBQUEsQ0FBSyxJQUFBSSxFQUFBN0IsRUFBQXlCLEdBQVdJLFFBQUEvQyxFQUFBZ0YsYUFBQXJDLEVBQUF6QixFQUFBcUIsU0FBQVEsRUFBQTdCLEVBQUF5QixHQUFBN0IsRUFBQTBILE9BQUF6RixFQUFBTixFQUFBTSxFQUFBTCxJQUFBSyxFQUFBSyxLQUFBTCxFQUFBSSxJQUFBckMsRUFBQTJILGNBQUExRixFQUFBSSxJQUFBVixFQUFBTSxFQUFBSSxJQUFBVCxFQUFBSyxFQUFBSyxJQUFBWCxFQUFBTSxFQUFBSyxJQUFBVixFQUFBSyxFQUFBTixFQUFBTSxFQUFBTCxFQUFBSyxFQUFBMkYsY0FBQTNGLEVBQUFJLElBQUFyQyxFQUFBNkgsaUJBQUE1RixFQUFBSSxJQUFBVixFQUFBTSxFQUFBSSxJQUFBVCxFQUFBSyxFQUFBTixFQUFBTSxFQUFBTCxFQUFBSyxFQUFBMkYsY0FBQTNGLEVBQUFLLElBQUF0QyxFQUFBNkgsaUJBQUE1RixFQUFBSyxJQUFBWCxFQUFBTSxFQUFBSyxJQUFBVixFQUFBSyxFQUFBTixFQUFBTSxFQUFBTCxFQUFBSyxFQUFBMkYsY0FBQTNGLEVBQUFoQixlQUFBLE1BQUFqQixFQUFBOEgsT0FBQTdGLEVBQUFOLEVBQUFNLEVBQUFMLE9BQWtqQ2pCLEVBQUFvSCxXQUFqdkIsU0FBQXBJLEVBQUFLLEVBQUFXLEdBQWdCLElBQUFQLEVBQUEsY0FBQU8sRUFBQVMsRUFBQSxDQUF5Qk8sRUFBQTNCLEVBQUEyQixFQUFBQyxFQUFBNUIsRUFBQTRCLEVBQUFqQixHQUFjaEIsRUFBQSxDQUFJZ0MsRUFBQTNCLEVBQUEyQixFQUFBaEIsRUFBQWlCLEVBQUE1QixFQUFBNEIsR0FBY0MsRUFBQSxDQUFJRixFQUFBM0IsRUFBQTJCLEVBQUFDLEVBQUE1QixFQUFBNEIsRUFBQWpCLEdBQWNwQixFQUFBLENBQUlvQyxFQUFBM0IsRUFBQTJCLEVBQUFoQixFQUFBaUIsRUFBQTVCLEVBQUE0QixHQUFlLE9BQUFSLEVBQUFpQixJQUFBLENBQWNWLEVBQUFwQyxFQUFBb0MsRUFBQUMsRUFBQXJDLEVBQUFxQyxFQUFBeEIsR0FBY2dCLEVBQUFrQixJQUFBLENBQVFYLEVBQUFQLEVBQUFPLEVBQUF2QixFQUFBd0IsRUFBQVIsRUFBQVEsR0FBY2pDLEVBQUEwQyxJQUFBLENBQVFWLEVBQUFQLEVBQUFPLEVBQUF2QixFQUFBd0IsRUFBQVIsRUFBQVEsR0FBY2pDLEVBQUEyQyxJQUFBLENBQVFYLEVBQUFoQyxFQUFBZ0MsRUFBQUMsRUFBQWpDLEVBQUFpQyxFQUFBeEIsR0FBY3lCLEVBQUFRLElBQUEsQ0FBUVYsRUFBQWhDLEVBQUFnQyxFQUFBQyxFQUFBakMsRUFBQWlDLEVBQUF4QixHQUFjeUIsRUFBQVMsSUFBQSxDQUFRWCxFQUFBRSxFQUFBRixFQUFBdkIsRUFBQXdCLEVBQUFDLEVBQUFELEdBQWNyQyxFQUFBOEMsSUFBQSxDQUFRVixFQUFBRSxFQUFBRixFQUFBdkIsRUFBQXdCLEVBQUFDLEVBQUFELEdBQWNyQyxFQUFBK0MsSUFBQSxDQUFRWCxFQUFBcEMsRUFBQW9DLEVBQUFDLEVBQUFyQyxFQUFBcUMsRUFBQXhCLEdBQWMsQ0FBQWdCLEVBQUF6QixFQUFBa0MsRUFBQXRDLEVBQUE2QixJQUE2Y1QsRUFBQXFILGlCQUFoYyxTQUFBbkcsRUFBQTdCLEVBQUFXLEVBQUFQLEdBQWtCLElBQUFnQixHQUFBLEVBQUFsQyxFQUFBaUUsY0FBQW5ELEdBQUFMLEdBQUEsRUFBQVQsRUFBQWlFLGNBQUF4QyxHQUFBa0IsR0FBQSxFQUFBM0MsRUFBQWlFLGNBQUEvQyxHQUFBYixFQUFBUyxFQUFBSSxFQUFBMEMsT0FBQSxJQUFBdkQsRUFBQSxHQUFBQSxFQUFBMkIsRUFBQWxCLEVBQUFpSSxXQUFBOUksT0FBQSxJQUFBK0IsRUFBQSxHQUFBQSxFQUFxSXZCLEVBQUEwQyxLQUFBLEVBQUFKLEVBQUFpRSxpQkFBQTlFLEVBQUF6QixFQUFBbUQsRUFBQTNELEdBQXFDLElBQUF5QyxFQUFBeEIsSUFBQVosT0FBQSxJQUFBb0MsRUFBQSxHQUFBQSxFQUFBeUIsRUFBQWpELEVBQUE2SCxXQUFBOUcsT0FBQSxJQUFBa0MsRUFBQSxHQUFBQSxFQUE2RCxPQUFBeEIsRUFBQVEsS0FBQSxFQUFBSixFQUFBaUUsaUJBQUE5RSxFQUFBekIsRUFBQUgsRUFBQTJCLEdBQUEsQ0FBQUMsRUFBQXpCLEVBQUFrQyxJQUF1TWxCLEVBQUF1SCxXQUFuSixTQUFBM0ksRUFBQVMsRUFBQVcsR0FBZ0IsT0FBQUEsRUFBQSxpQkFBQUEsTUFBQSxDQUFpQ3dILE9BQUF4SCxJQUFTQSxFQUFBLENBQUt3SCxPQUFBLEdBQVNuSSxFQUFBNEgsYUFBQSxDQUFpQnBGLE1BQUE3QixHQUFRWCxHQUFvSSxJQUFBZCxFQUFBa0IsRUFBQSxHQUFBNkIsRUFBQTdCLEVBQUEsR0FBa0JPLEVBQUE2RyxLQUFBLGlCQUF1QixTQUFBeEgsRUFBQVcsRUFBQVAsR0FBaUIsYUFBYVIsT0FBQUMsZUFBQWMsRUFBQSxjQUFzQ1IsT0FBQSxJQUFXLElBQUFpQixFQUFBaEIsRUFBQSxHQUFXUixPQUFBd0ksS0FBQWhILEdBQUFvQyxRQUFBLFNBQUF4RCxHQUFtQyxZQUFBQSxHQUFBLGVBQUFBLEdBQUFKLE9BQUFDLGVBQUFjLEVBQUFYLEVBQUEsQ0FBNERGLFlBQUEsRUFBQUMsSUFBQSxXQUE2QixPQUFBcUIsRUFBQXBCLFFBQWlCLElBQUFMLEVBQUFTLEVBQUEsR0FBV1IsT0FBQXdJLEtBQUF6SSxHQUFBNkQsUUFBQSxTQUFBeEQsR0FBbUMsWUFBQUEsR0FBQSxlQUFBQSxHQUFBSixPQUFBQyxlQUFBYyxFQUFBWCxFQUFBLENBQTRERixZQUFBLEVBQUFDLElBQUEsV0FBNkIsT0FBQUosRUFBQUssUUFBaUIsSUFBQTZCLEVBQUF6QixFQUFBLEdBQVdSLE9BQUF3SSxLQUFBdkcsR0FBQTJCLFFBQUEsU0FBQXhELEdBQW1DLFlBQUFBLEdBQUEsZUFBQUEsR0FBQUosT0FBQUMsZUFBQWMsRUFBQVgsRUFBQSxDQUE0REYsWUFBQSxFQUFBQyxJQUFBLFdBQTZCLE9BQUE4QixFQUFBN0IsUUFBaUIsSUFBQVQsRUFBQWEsRUFBQSxHQUFXUixPQUFBd0ksS0FBQTdJLEdBQUFpRSxRQUFBLFNBQUF4RCxHQUFtQyxZQUFBQSxHQUFBLGVBQUFBLEdBQUFKLE9BQUFDLGVBQUFjLEVBQUFYLEVBQUEsQ0FBNERGLFlBQUEsRUFBQUMsSUFBQSxXQUE2QixPQUFBUixFQUFBUyxRQUFpQixJQUFBZCxFQUFBa0IsRUFBQSxHQUFXUixPQUFBd0ksS0FBQWxKLEdBQUFzRSxRQUFBLFNBQUF4RCxHQUFtQyxZQUFBQSxHQUFBLGVBQUFBLEdBQUFKLE9BQUFDLGVBQUFjLEVBQUFYLEVBQUEsQ0FBNERGLFlBQUEsRUFBQUMsSUFBQSxXQUE2QixPQUFBYixFQUFBYyx1b0RDaUIvdFYsSUFBTXFJLEVBQWIsV0FDSSxTQUFBQSxXQUFxQixRQUFBQyxFQUFBQyxLQUFBQyxFQUFBMUcsVUFBQUwsT0FBTmdILEVBQU0sSUFBQWxILE1BQUFpSCxHQUFBRSxFQUFBLEVBQUFBLEVBQUFGLEVBQUFFLElBQU5ELEVBQU1DLEdBQUE1RyxVQUFBNEcsR0FBQUMsZ0JBQUFKLEtBQUFGLFVBV2pCekksT0FBT2dKLE9BQU9MLEtBQU0sQ0FDaEJNLGNBQWVDLEVBQVFDLE1BQU1DLEtBQzdCQyxVQUFlLElBTWZDLFNBQWUsSUFHbkJYLEtBQUtZLE1BQVEsR0FHYnZKLE9BQU9nSixPQUFQN0csTUFBQW5DLE9BQU0sQ0FBUTJJLE1BQVI3RCxPQUFpQitELElBQ3ZCRixLQUFLYSxLQUFPQyxZQUFhZCxLQUFLYSxNQUc5QmIsS0FBS2UsZUFBZTlGLFFBQVEsU0FBQytGLEdBQWEsSUFDakNILEVBQWNHLEVBQWRILEtBQU1JLEVBQVFELEVBQVJDLEtBRVBDLEVBQVcsR0FDZjdKLE9BQU9nSixPQUFQN0csTUFBQW5DLE9BQU0sQ0FBUTZKLEdBQVIvRSxPQUFBZ0YsbUJBQXFCakIsRUFBS3pHLElBQUksU0FBQXhDLEdBQUMsT0FBSUEsRUFBRWdLLEVBQUsvSixXQUVoRCxJQUFNa0ssRUFBVyxJQUFJSCxFQUFLQyxHQUcxQjdKLE9BQU9nSixPQUFPTixFQUFNcUIsR0FDcEJDLDRCQUE0QlIsRUFBTU8sSUFDbENBLEVBQVNFLE9BQVN2QixHQUViYSxNQUFNMUYsS0FBS2tHLEtBSXBCL0osT0FBT2dKLE9BQVA3RyxNQUFBbkMsT0FBTSxDQUFRMkksTUFBUjdELE9BQWlCK0QsSUFDdkJGLEtBQUthLEtBQU9DLFlBQWFkLEtBQUthLE1BRzlCYixLQUFLWSxNQUFNM0YsUUFBUSxTQUFDbUcsR0FDaEJBLEVBQVNFLE9BQVN2QixJQXBEOUIsT0FBQXdCLGFBQUF6QixTQUFBLEVBQUE1SCxJQUFBLFNBQUFOLE1BQUEsU0FBQTRKLFNBeURRLE9BQU92QyxTQXpEZixDQUFBL0csSUFBQSxPQUFBTixNQUFBLFNBQUE2SixPQTZEUSxNQUFPLFdBN0RmM0IsU0FBQSxHQWlFTyxTQUFTdUIsNEJBQTRCUixFQUFNYSxRQUN0QkMsSUFBcEJELEVBQUtFLGFBQ0xmLEVBQU9hLEVBQUtFLFlBR2hCLElBQU1DLEVBQWFDLFlBQWdCakIsR0FFbkMsSUFBZ0MsSUFBNUJhLEVBQUtLLHFCQUVjLFVBQWZGLEdBQ2UsU0FBZkEsR0FBdUIsQ0FDdkIsSUFBTUcsRUFBZUMsWUFBMEJQLEVBQUtRLEtBQ3BELElBQXlDLElBQXJDQyxZQUFtQkgsR0FBeUIsQ0FDNUMsSUFBTUksRUFBb0JDLFlBQXdCWCxFQUFLUSxLQUN2RFIsRUFBS1EsSUFBTUUsRUFBb0JQLEVBQWEsSUFBTUcsR0FNOUQsT0FEQU4sRUFBS2IsS0FBT0MsWUFBYUQsR0FDbEJhLEVBR0osSUFBTW5CLEVBQVUsQ0FPbkJDLE1BQU9uSixPQUFPcUUsT0FBTyxDQUNqQitFLEtBQVksRUFDWjZCLE1BQVksRUFDWkMsSUFBWSxFQUNaQyxNQUFZLEVBQ2xCQyxVQUFZLEVBQ1pDLFdBQWEsRUFDUEMsV0FBWSxJQVNoQjFLLE9BdkJtQixTQUFBQSxPQXVCWjJLLEdBQXdCLFFBQUFDLEVBQUF0SixVQUFBTCxPQUFOZ0gsRUFBTSxJQUFBbEgsTUFBQSxFQUFBNkosSUFBQSxLQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQU41QyxFQUFNNEMsRUFBQSxHQUFBdkosVUFBQXVKLEdBQzNCLE9BQUFDLFdBQVdILEVBQWlCMUMsSUFHaEM4QyxpQkEzQm1CLFNBQUFBLGlCQTJCRkMsRUFBS0MsRUFBSUMsR0FDdEJDLFlBQWlCSCxFQUNiLENBQ0l4QixLQUFRMEIsRUFBUzFCLEtBQ2pCRCxPQUFRMkIsRUFBUzNCLFFBRXJCMEIsR0FDSkQsRUFBSUksVUFBWUYsRUFBU3pDLFlBVXBCNEMsRUFBYixXQUNJLFNBQUFBLGVBQXFCbEQsZ0JBQUFKLEtBQUFzRCxjQUFBLFFBQUFDLEVBQUFoSyxVQUFBTCxPQUFOZ0gsRUFBTSxJQUFBbEgsTUFBQXVLLEdBQUFDLEVBQUEsRUFBQUEsRUFBQUQsRUFBQUMsSUFBTnRELEVBQU1zRCxHQUFBakssVUFBQWlLLEdBQ2pCbk0sT0FBT2dKLE9BQVA3RyxNQUFBbkMsT0FBTSxDQUFRMkksS0FBTSxDQUVoQnlELE1BQW9CakQsSUFBTWtELE1BQzFCeEIsSUFBb0IsUUFNcEJILG9CQUFvQixJQVRsQjVGLE9BVUErRCxJQVpkLE9BQUFxQixhQUFBK0IsYUFBQSxFQUFBcEwsSUFBQSx1QkFBQU4sTUFBQSxTQUFBK0wsNEJBQUFMLGFBQUEsaUNDckpBN00sRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFwRCxJQUFBL0osRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFDLElBQUFwTixFQUFBUSxFQUFBMk0sRUFBQSxzQkFBQUUsSUFBQXJOLEVBQUFRLEVBQUEyTSxFQUFBLHNCQUFBRyxpQkFBQXROLEVBQUFRLEVBQUEyTSxFQUFBLHNCQUFBSSxZQUFBdk4sRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFLLGtCQUFBeE4sRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFNLGtCQUFBek4sRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFPLGtCQU1PLElBQU0zRCxFQUFRbkosT0FBT3FFLE9BQU8sQ0FDL0IrRSxLQUFvQixFQUNwQjJELEtBQW9CLEVBQ3BCVixNQUFvQixFQUNwQlcsY0FBb0IsRUFDcEJDLGNBQW9CLEVBQ3BCQyxRQUFvQixFQUN2QkMsZ0JBQW9CLEVBQ2pCQyxLQUFvQixFQUNwQkMsYUFBb0IsRUFDcEJDLFNBQW9CLEVBQ3BCQyxpQkFBb0IsR0FDcEJDLFdBQW9CLEdBQ3BCQyxtQkFBb0IsR0FDcEJDLEtBQW9CLEdBQ3BCQyxhQUFvQixHQUNwQkMsV0FBb0IsR0FDcEJDLFFBQW9CLEdBQ3BCdkMsV0FBb0IsS0FHWGtCLEVBQWdCLENBQ3pCckQsRUFBTTZELGNBQ1Q3RCxFQUFNZ0UsZ0JBQ0hoRSxFQUFNa0UsYUFDTmxFLEVBQU1vRSxpQkFDTnBFLEVBQU1zRSxtQkFDTnRFLEVBQU13RSxjQU9HbEIsRUFBWSxFQVNsQixTQUFTQyxlQUFlb0IsRUFBV0MsR0FDdEMsSUFBSUMsRUFBV0YsRUFDVSxpQkFBZEEsRUFDUEUsRUFBV0MsU0FBU0MsZUFBZUosR0FFbkNBLEVBQVlBLEVBQVVLLEdBRzFCLElBQU1DLEVBQVNwTyxPQUFPZ0osT0FDbEIsQ0FDSXFGLE1BQVEsTUFDUkMsT0FBUSxNQUNSQyxPQUFRUCxHQUVaRCxHQUdKQyxFQUFTUSxNQUFNSCxNQUFRRCxFQUFPQyxNQUFRLEtBQ3RDTCxFQUFTUSxNQUFNRixPQUFTRixFQUFPRSxPQUFTLEtBQ3hDTixFQUFTUSxNQUFNQyxVQUFZLE9BSTNCLElBRkEsSUFBTUMsRUFBUSxHQUVMdEMsRUFBUSxFQUFHQSxHQUFTakQsRUFBTW1DLGFBQWNjLEVBQU8sQ0FDcEQsSUFBTXVDLEVBQWFiLEVBQVkxQixFQUMzQndDLEVBQW9CLEtBRXBCeEMsSUFBVWpELEVBQU1tQyxhQUNoQnNELEVBQW9CLENBQUNDLFdBQWMsV0FFdkNILEVBQU03SyxLQUFLOEksVUFDUGdDLEVBQ0EzTyxPQUFPZ0osT0FBTyxHQUFJb0YsRUFBUSxDQUFDVSxVQUFXMUMsR0FBUXdDLEtBRXRELE9BQU9aLEVBaUJKLFNBQVNyQixVQUFVZ0MsRUFBWVAsR0FFbEMsR0FBMEIsaUJBQWZPLEVBQ1AsT0FBT0EsRUFHWCxJQUFJSSxFQUFTZCxTQUFTQyxlQUFlUyxHQUVyQyxJQUFLSSxFQUFRLENBZ0JULElBQUssSUFBSXhOLEtBZitCLElBQXBDNk0sRUFBTy9NLGVBQWUsWUFDdEIrTSxFQUFPRyxPQUFTTixTQUFTZSxjQUFjLE9BQ3ZDZixTQUFTZ0IsS0FBS0MsWUFBWWQsRUFBT0csUUFDakNILEVBQU9HLE9BQU9DLE1BQU1ILE1BQVFELEVBQU9DLE1BQVEsS0FDM0NELEVBQU9HLE9BQU9DLE1BQU1GLE9BQVNGLEVBQU9FLE9BQVMsT0FHakRTLEVBQVNkLFNBQVNlLGNBQWMsV0FDekJiLEdBQUtRLEVBRVpJLEVBQU9WLE1BQVFELEVBQU9DLE1BQ3RCVSxFQUFPVCxPQUFTRixFQUFPRSxPQUN2QlMsRUFBT1AsTUFBTVcsU0FBVyxXQUdWZixHQUN1QixJQUE3QkEsRUFBTy9NLGVBQWVFLElBR2hCLFVBQU5BLEdBQXVCLFdBQU5BLEdBRVY2TSxFQUFPL00sZUFBZUUsS0FDN0J3TixFQUFPUCxNQUFNak4sR0FBSzZNLEVBQU83TSxJQUtqQzZNLEVBQU9HLE9BQU9hLGFBQWFMLEVBQVFYLEVBQU9HLE9BQU9jLFlBR3JELE9BQU9OLEVBUUosU0FBU25DLGdCQUFnQjBDLEdBQ2R4QyxnQkFBZ0J3QyxHQUN4QmQsTUFBTWUsUUFBVSxPQVFuQixTQUFTMUMsZ0JBQWdCeUMsR0FDZHhDLGdCQUFnQndDLEdBQ3hCZCxNQUFNZSxRQUFVLFFBR25CLFNBQVN6QyxnQkFBZ0I2QixHQUM1QixNQUEwQixpQkFBZkEsRUFDQVYsU0FBU0MsZUFBZVMsR0FFeEJBLHFoQkN0SlIsSUFBTWEsRUFBYixXQUNJLFNBQUFBLHdIQUFxQnpHLENBQUFKLEtBQUE2RyxVQUFBLFFBQUE1RyxFQUFBMUcsVUFBQUwsT0FBTmdILEVBQU0sSUFBQWxILE1BQUFpSCxHQUFBRSxFQUFBLEVBQUFBLEVBQUFGLEVBQUFFLElBQU5ELEVBQU1DLEdBQUE1RyxVQUFBNEcsR0FpQmpCOUksT0FBT2dKLE9BQVA3RyxNQUFBbkMsT0FBTSxDQUFRMkksS0FBTSxDQUNoQmtDLElBQWMsS0FDZDRFLFdBQWMsS0FDZHJELE1BQWNqRCxJQUFNQyxLQUNwQjVGLFNBQWMsRUFDZGtNLGFBQWMsR0FDZEMsYUFBYyxFQUNkQyxXQUFjLEdBQ2RDLFdBQWMsS0FSWi9LLE9BU0ErRCxJQTNCZCwyR0FBQXFCLENBQUFzRixTQUFBLEVBQUEzTyxJQUFBLFNBQUFOLE1BQUEsU0FBQTRKLFNBbUNRLE9BQU92QyxTQW5DZixDQUFBL0csSUFBQSxPQUFBTixNQUFBLFNBQUE2SixPQTJDUSxNQUFPLFlBM0NmLENBQUF2SixJQUFBLGVBQUFOLE1BQUEsU0FBQXVQLGVBbURRLE1BQU8sS0FuRGYsQ0FBQWpQLElBQUEsaUJBQUFOLE1BQUEsU0FBQXdQLGVBZ0VtQmxFLEVBQUltRSxFQUFNQyxFQUFXNUYsUUFoRXhDbUYsU0FBQSxHQXNFYTVGLEVBQU8sQ0FPaEJzRyxNQUFPLEVBTVBDLEtBQU8sRUFTUHZQLE9BdEJnQixTQUFBQSxPQXNCVHdQLEdBQTRCLFFBQUE1RSxFQUFBdEosVUFBQUwsT0FBVndPLEVBQVUsSUFBQTFPLE1BQUEsRUFBQTZKLElBQUEsS0FBQUMsRUFBQSxFQUFBQSxFQUFBRCxFQUFBQyxJQUFWNEUsRUFBVTVFLEVBQUEsR0FBQXZKLFVBQUF1SixHQUMvQixJQUFNNUMsRUFBTzdJLE9BQU9nSixPQUFQN0csTUFBQW5DLE9BQU0sQ0FBUSxJQUFSOEUsT0FBZXVMLElBQzlCaEcsRUFBTyxJQUFJK0YsRUFBY3ZILEdBRXpCVyxFQUFRWCxHQUFRQSxFQUFLeEgsZUFBZSxRQUFXd0gsRUFBS1csS0FBTyxLQUdsRCxPQUFUQSxJQUNBQSxFQUFPOEcsWUFBb0JqRyxFQUFLUSxXQUlaUCxJQUFwQkQsRUFBS0UsYUFDTGYsRUFBT2EsRUFBS0UsWUFHaEIsSUFBTUMsRUFBYUMsZ0JBQWdCakIsR0FHbkMsR0FBbUIsVUFBZmdCLEdBQXlDLFNBQWZBLEVBQXVCLENBQ2pELElBQU1HLEVBQWU0RixZQUFvQmxHLEVBQUtRLEtBQ3hDRSxFQUFvQkMsWUFBd0JYLEVBQUtRLEtBQ3ZEUixFQUFLUSxJQUFNRSxFQUFvQlAsRUFBYSxJQUFNRyxFQUM5Q04sRUFBS29GLGFBQ0xwRixFQUFLb0YsV0FBYWpGLEVBQWEsSUFBTUgsRUFBS29GLFlBT2xELE9BRkFwRixFQUFLYixLQUFPQyxhQUFhRCxHQUVsQmEsSUFVUixTQUFTSSxnQkFBZ0JqQixHQUM1QixNQUFhLFVBQVRBLEdBQTZCLFNBQVRBLEVBQ2JBLEVBRVBBLElBQVNJLEVBQUt1RyxLQUNQLE9BRVAzRyxJQUFTSSxFQUFLc0csTUFDUCxRQUVKLEtBVUosU0FBU00sYUFBYUMsRUFBT0MsR0FDaEMsT0FBSUQsRUFBTWpILE9BQVNrSCxFQUFNbEgsT0FJckJ4SixPQUFPMlEsZUFBZUYsS0FBV3pRLE9BQU8yUSxlQUFlRCxJQUd2RDlGLFlBQTBCNkYsRUFBTTVGLE9BQVNELFlBQTBCOEYsRUFBTTdGLE9BRTdDLE1BQXhCNEYsRUFBTTVGLElBQUkrRixPQUFPLElBQXNDLE1BQXhCRixFQUFNN0YsSUFBSStGLE9BQU8sSUFJeEIsTUFBeEJILEVBQU01RixJQUFJK0YsT0FBTyxJQUFzQyxNQUF4QkYsRUFBTTdGLElBQUkrRixPQUFPLEtBVXJELFNBQVNDLGlCQUFpQkMsRUFBV0MsR0FDeEMsSUFBTUMsRUFBYVYsWUFBb0JRLEdBQ25DRyxFQUFXRixFQUdJLE9BQWZDLElBQ0FDLEVBQVdELEVBQWEsSUFBTUMsR0FFbEMsSUFBSUMsRUFBWXpILGFBQWF1SCxHQU03QixPQUhJVixZQUFvQlcsS0FDcEJDLEVBQVl6SCxhQUFhNkcsWUFBb0JXLEtBRTFDLENBQ0hDLFlBQ0FELFlBSUQsU0FBU3hILGFBQWFELEdBQ3pCLE1BQWEsU0FBVEEsR0FBbUJBLElBQVNJLEVBQUt1RyxLQUMxQnZHLEVBQUt1RyxLQUdMdkcsRUFBS3NHLE1BSWIsU0FBU2lCLG9CQUFvQkMsR0FDaEMsSUFBTUMsRUFBTyxJQUFJRCxFQUNqQixPQUFPeEcsWUFBMEJ5RyxFQUFLeEcsb0NDNU5uQyxTQUFTOUQsTUFBTXVLLEdBQ2xCLE9BQUlBLEVBQ085SixLQUFLQyxNQUFNRCxLQUFLRSxVQUFVNEosSUFFMUJBLEVDNkNSLFNBQVNqTSxXQUFXa00sRUFBS0MsR0FDNUIsT0FBT2xLLFdBQVdpSyxFQUFJaEssUUFBUWlLLGlhQ3BEM0IsU0FBUzVPLE1BQU1iLEVBQUdDLEdBQ3JCLE1BQU8sQ0FBQ0QsSUFBR0MsS0FVUixTQUFTYSxVQUFVNE8sR0FBYyxRQUFBN0ksRUFBQTFHLFVBQUFMLE9BQUw2UCxFQUFLLElBQUEvUCxNQUFBLEVBQUFpSCxJQUFBLEtBQUFFLEVBQUEsRUFBQUEsRUFBQUYsRUFBQUUsSUFBTDRJLEVBQUs1SSxFQUFBLEdBQUE1RyxVQUFBNEcsR0FDcEMsT0FBT2xHLE1BQU02TyxFQUFJdFAsV0FBSixFQUFBMkgsbUJBQVE0SCxFQUFJdFAsSUFBSSxTQUFBdVAsR0FBRSxPQUFJQSxFQUFHNVAsTUFBSzBQLEVBQUl0UCxXQUFKLEVBQUEySCxtQkFBUTRILEVBQUl0UCxJQUFJLFNBQUF1UCxHQUFFLE9BQUlBLEVBQUczUCxPQUdqRSxJQUFNb0MsRUFBU3BFLE9BQU9xRSxPQUFPekIsTUFBTSxFQUFHLElBUWhDMEIsRUFBYXRFLE9BQU9xRSxPQUFPLENBQUNFLE9BQU8sSUFTbkNDLEVBQVd4RSxPQUFPcUUsT0FBTyxDQUFDSSxLQUFLLElBU3JDLFNBQVMzQixJQUFJaUMsRUFBSUMsR0FBaUIsSUFBYjRNLEVBQWEsRUFBQTFQLFVBQUFMLGFBQUF5SSxJQUFBcEksVUFBQSxHQUFBQSxVQUFBLEdBQUgsRUFDbEMsT0FBT1csVUFBVSxTQUFDZ1AsRUFBS0MsR0FDbkIsT0FBT0QsRUFBTUMsRUFBTUYsR0FDcEI3TSxFQUFJQyxHQVNKLFNBQVNqQyxLQUFLZ0MsRUFBSUMsR0FDckIsT0FBT25DLFVBQVUsU0FBQ2dQLEVBQUtDLEdBQ25CLE9BQU9BLEVBQU1ELEdBQ2Q5TSxFQUFJQyxHQVFKLFNBQVNoQyxLQUFLK08sR0FDakIsT0FBT3pQLEtBQUtDLEtBQUt3UCxFQUFJaFEsRUFBSWdRLEVBQUloUSxFQUFJZ1EsRUFBSS9QLEVBQUkrUCxFQUFJL1AsR0FvQjFDLFNBQVNvQixNQUFNNE8sRUFBSUosR0FBK0IsSUFBdEJLLEVBQXNCLEVBQUEvUCxVQUFBTCxhQUFBeUksSUFBQXBJLFVBQUEsR0FBQUEsVUFBQSxHQUFSa0MsRUFDN0MsT0FBT3RCLElBQUltUCxFQUFhbFAsS0FBS2tQLEVBQWFELEdBQUtKLEdBbUI1QyxTQUFTdE8sdUJBQXVCeU8sR0FFbkMsT0FaRyxTQUFTMU8sY0FBYzBPLEdBQzFCLElBQU1HLEVBQVlsUCxLQUFLK08sR0FDdkIsT0FBT2xQLFVBQVUsU0FBQVksR0FBQyxPQUFJQSxFQUFJeU8sR0FBV0gsR0FVOUIxTyxDQUFjVCxPQUFPbVAsRUFBSS9QLEVBQUcrUCxFQUFJaFEsSUFNcEMsU0FBU3dCLGFBQWF5TyxHQUN6QixPQUFPcFAsTUFBTW9QLEVBQUdqUSxFQUFHaVEsRUFBR2hRLEdBTW5CLFNBQVN3QixRQUFRd08sR0FBeUIsSUFJekNyUyxFQUFHd1MsRUFKaUJ6UyxFQUFxQixFQUFBd0MsVUFBQUwsYUFBQXlJLElBQUFwSSxVQUFBLEdBQUFBLFVBQUEsR0FBakJrUSxJQUFVelAsRUFBTyxFQUFBVCxVQUFBTCxhQUFBeUksSUFBQXBJLFVBQUEsR0FBQUEsVUFBQSxHQUFILEVBQzFDLE9BQUs4UCxHQU1EdFMsSUFBTTBTLEtBRU5ELEVBREF4UyxFQUFLLEVBR0xnRCxFQUFJcVAsRUFBR2hRLEdBR1BtUSxHQURBeFMsR0FBTXFTLEVBQUdqUSxHQUFLaVEsRUFBR2hRLEVBQUlXLEdBQUtqRCxJQUFNLEVBQUlBLEVBQUlBLElBQy9CQSxFQUdOa0QsTUFBTSxFQUFJakQsRUFBSXFTLEVBQUdqUSxFQUFHLEVBQUlvUSxFQUFLSCxFQUFHaFEsRUFBSSxFQUFJVyxJQWZwQ3FQLEVBeUJSLFNBQVN0TyxPQUFPc08sRUFBSUssRUFBSUMsR0FDM0IsSUFBS04sRUFDRCxPQUFPQSxFQUdYLElBQU1PLEVBQWEzUCxNQUFNb1AsRUFBR2pRLEVBQUlzUSxFQUFJTCxFQUFHaFEsRUFBSXNRLEdBTzNDLE9BTklOLEVBQUd2UCxNQUNIOFAsRUFBVzlQLElBQU1HLE1BQU1vUCxFQUFHdlAsSUFBSVYsRUFBSXNRLEVBQUlMLEVBQUd2UCxJQUFJVCxFQUFJc1EsSUFFakROLEVBQUd0UCxNQUNINlAsRUFBVzdQLElBQU1FLE1BQU1vUCxFQUFHdFAsSUFBSVgsRUFBSXNRLEVBQUlMLEVBQUd0UCxJQUFJVixFQUFJc1EsSUFFOUNDLEVBd0JKLFNBQVN6TyxZQUFZME8sRUFBUVosR0FBb0IsUUFBQTFGLEVBQUFoSyxVQUFBTCxPQUFSNFEsRUFBUSxJQUFBOVEsTUFBQSxFQUFBdUssSUFBQSxLQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQVJzRyxFQUFRdEcsRUFBQSxHQUFBakssVUFBQWlLLEdBQ3BEc0csRUFBTzdPLFFBQVEsU0FBQ29PLEdBQ1osR0FBS0EsSUFBaUMsSUFBM0JBLEVBQUczUSxlQUFlLEtBQTdCLENBRG1CLElBQUFxUixFQUlKdFAsTUFBTTRPLEVBQUlKLEVBQVNZLEdBQTNCelEsRUFKWTJRLEVBSVozUSxFQUFHQyxFQUpTMFEsRUFJVDFRLEVBQ1ZnUSxFQUFHalEsRUFBSUEsRUFDUGlRLEVBQUdoUSxFQUFJQSxFQUNIZ1EsRUFBR3ZQLE1BQ0h1UCxFQUFHdlAsSUFBTVcsTUFBTTRPLEVBQUd2UCxJQUFLbVAsRUFBU1ksSUFFaENSLEVBQUd0UCxNQUNIc1AsRUFBR3RQLElBQU1VLE1BQU00TyxFQUFHdFAsSUFBS2tQLEVBQVNZLE9BV3JDLFNBQVN4TyxhQUFhMk8sRUFBT3hMLEdBQWdCLElBQ2hELElBQUlqRCxFQUFNNUIsS0FBSzRCLElBQUlpRCxHQUFNaEQsRUFBTTdCLEtBQUs2QixJQUFJZ0QsR0FEUXlMLEVBQUExUSxVQUFBTCxPQUFSNFEsRUFBUSxJQUFBOVEsTUFBQSxFQUFBaVIsSUFBQSxLQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQVJKLEVBQVFJLEVBQUEsR0FBQTNRLFVBQUEyUSxHQUVoREosRUFBTzdPLFFBQVEsU0FBQ29PLEdBQ1BBLElBQWlDLElBQTNCQSxFQUFHM1EsZUFBZSxPQUc3QnlSLFdBQVdILEVBQU9YLEVBQUk3TixFQUFLRCxHQUN2QjhOLEVBQUd2UCxLQUNIcVEsV0FBV0gsRUFBT1gsRUFBR3ZQLElBQUswQixFQUFLRCxHQUUvQjhOLEVBQUd0UCxLQUNIb1EsV0FBV0gsRUFBT1gsRUFBR3RQLElBQUt5QixFQUFLRCxNQVkzQyxTQUFTNE8sV0FBV0gsRUFBT1gsRUFBSTdOLEVBQUtELEdBQ2hDLElBQU02TyxFQUFZaFEsS0FBSzRQLEVBQU9YLEdBQ3hCSyxFQUFZVSxFQUFVaFIsRUFBSW1DLEVBQU02TyxFQUFVL1EsRUFBSW1DLEVBQzlDbU8sRUFBWVMsRUFBVWhSLEVBQUlvQyxFQUFNNE8sRUFBVS9RLEVBQUlrQyxFQUNwRDhOLEVBQUdqUSxFQUFlNFEsRUFBTTVRLEVBQUlzUSxFQUM1QkwsRUFBR2hRLEVBQWUyUSxFQUFNM1EsRUFBSXNRLG1iQ3BPekIsU0FBU3RNLGFBQWFqQixFQUFJQyxFQUExQmdPLEdBQTBELElBQTNCdE8sRUFBMkJzTyxFQUEzQnRPLE9BQVFDLEVBQW1CcU8sRUFBbkJyTyxVQUFXQyxFQUFRb08sRUFBUnBPLE1BQy9DcU8sRUFBTTFQLGFBQWF3QixHQUNuQm1PLEVBQU0zUCxhQUFheUIsR0FDekIsR0FBSUEsRUFBR3ZDLEtBQU91QyxFQUFHdEMsSUFDYixPQUFPa0MsRUFBTXFPLEVBQUtqTyxFQUFHdkMsSUFBS3VDLEVBQUd0QyxJQUFLd1EsR0FFdEMsSUFBTXZCLEVBQUszTSxFQUFHdkMsS0FBT3VDLEVBQUd0QyxJQUN4QixPQUFJaVAsRUFDT2hOLEVBQVVzTyxFQUFLdEIsRUFBSXVCLEdBRW5CeE8sRUFBT3VPLEVBQUtDLEdBK0JwQixTQUFTaE4sZUFBZTFGLEVBQUd1RSxFQUFJQyxHQUNsQyxPQUFPbkMsVUFHWCxTQUFTc1EsZUFBZTNTLEVBQUd1RSxFQUFJQyxHQUUzQixPQUFPeEUsR0FBS3dFLEVBQUtELEdBQU1BLEdBTFNqRSxLQUFLLEtBQU1OLEdBQUl1RSxFQUFJQyxHQXFHaEQsU0FBU21CLFdBQVczRixFQUFHdUUsRUFBSUMsR0FHOUIsT0FBT2dCLGFBQWFqQixFQUFJQyxFQUFJLENBQ3hCTixPQS9CUixTQUFTME8sWUFBWTVTLEVBQUd1RSxFQUFJQyxHQUV4QixJQUFNSSxFQUFJYyxlQUFlMUYsRUFBR3VFLEVBQUlDLEdBQ2hDLE1BQU8sQ0FDSEMsS0FBTyxDQUNIRixLQUNBQyxHQUFJSSxHQUVSRixNQUFPLENBQ0hILEdBQUlLLEVBQ0pKLFFBcUJtQmxFLEtBQUssS0FBTU4sR0FDbENtRSxVQXZEUixTQUFTME8sZUFBZTdTLEVBQUd1RSxFQUFJNE0sRUFBSTNNLEdBRS9CLElBQU1zTyxFQUFJcE4sZUFBZTFGLEVBQUd1RSxFQUFJNE0sR0FDMUI0QixFQUFJck4sZUFBZTFGLEVBQUdtUixFQUFJM00sR0FDMUJ3TyxFQUFJdE4sZUFBZTFGLEVBQUc4UyxFQUFHQyxHQUV6QnRPLEVBQU8sQ0FDVEYsS0FDQUMsR0FBSXdPLEdBRVJ2TyxFQUFLRCxHQUFHdkMsSUFBTTZRLEVBQ2QsSUFBTXBPLEVBQVEsQ0FDVkgsR0FBSXhCLGFBQWFpUSxHQUNqQnhPLE1BSUosT0FGQUUsRUFBTUYsR0FBR3ZDLElBQU04USxFQUVSLENBQ0h0TyxPQUNBQyxVQW9DMEJwRSxLQUFLLEtBQU1OLEdBQ3JDb0UsTUF0RlIsU0FBUzZPLFlBQVlqVCxFQUFHdUUsRUFBSXRDLEVBQUtDLEVBQUtzQyxHQUdsQyxJQUFNdU8sRUFBSXJOLGVBQWUxRixFQUFHdUUsRUFBSXRDLEdBQzFCK1EsRUFBSXROLGVBQWUxRixFQUFHaUMsRUFBS0MsR0FDM0JnUixFQUFJeE4sZUFBZTFGLEVBQUdrQyxFQUFLc0MsR0FDM0IyTyxFQUFJek4sZUFBZTFGLEVBQUcrUyxFQUFHQyxHQUN6QkksRUFBSTFOLGVBQWUxRixFQUFHZ1QsRUFBR0UsR0FDekJHLEVBQUkzTixlQUFlMUYsRUFBR21ULEVBQUdDLEdBRXpCM08sRUFBTyxDQUNURixLQUNBQyxHQUFJNk8sR0FFUjVPLEVBQUtELEdBQUd2QyxJQUFNOFEsRUFDZHRPLEVBQUtELEdBQUd0QyxJQUFNaVIsRUFFZCxJQUFNek8sRUFBUSxDQUNWSCxHQUFJeEIsYUFBYXNRLEdBQ2pCN08sTUFLSixPQUhBRSxFQUFNRixHQUFHdkMsSUFBTW1SLEVBQ2YxTyxFQUFNRixHQUFHdEMsSUFBTWdSLEVBRVIsQ0FDSHpPLE9BQ0FDLFVBNER1QnBFLEtBQUssS0FBTU4sS0E2QjFDLFNBQVNzVCxxQkFBcUIvTyxFQUFJdEMsRUFBS3VDLEVBQUkxRCxHQU12QyxPQXRCSixTQUFTeVMsdUJBQXVCMVIsRUFBR00sRUFBR2hELEdBRWxDLElBQU1xVSxFQUFlclIsRUFBSUEsRUFBSSxFQUFJTixFQUFJMUMsRUFFckMsT0FBSXFVLEVBQWUsRUFDUixHQUdBLEdBQ0RyUixFQUFJTCxLQUFLQyxLQUFLeVIsS0FBa0IsRUFBSTNSLEtBQ3BDTSxFQUFJTCxLQUFLQyxLQUFLeVIsS0FBa0IsRUFBSTNSLElBWXZDMFIsQ0FMSWhQLEVBQUssRUFBSXRDLEVBQU11QyxFQUNoQixHQUFLdkMsRUFBTXNDLEdBQ1hBLEVBQUt6RCxHQU1uQixTQUFTMlMsU0FBU3hRLEdBQ2QsT0FBSUEsRUFBSSxHQUNJbkIsS0FBSzZDLEtBQUsxQixFQUFHLEVBQUksR0FFbEJuQixLQUFLNkMsSUFBSTFCLEVBQUcsRUFBSSxHQXVGL0IsU0FBU3lRLGlCQUFpQm5QLEVBQUl0QyxFQUFLQyxFQUFLc0MsRUFBSTFELEdBUXhDLElBQU0xQixFQUFVLEdBTGhCNkMsR0FBT25CLElBRFB5RCxHQUFNekQsR0FNb0IsR0FKMUJvQixHQUFPcEIsSUFDUDBELEdBQU0xRCxHQVFOLE9BdkZKLFNBQVM2UyxtQkFBbUI5UixFQUFHTSxFQUFHaEQsR0FFOUIsSUFBTXlVLEVBQUsvUixFQUFJLEVBSVRnUyxHQURLLEVBQUkxUixFQUFJTixFQUFJQSxHQUFLLEVBQ2IsRUFFVGlTLEdBREssRUFBSWpTLEVBQUlBLEVBQUlBLEVBQUksRUFBSUEsRUFBSU0sRUFBSSxHQUFLaEQsR0FBSyxHQUNsQyxFQVlUcVUsRUFBZTNPLFdBQVdpUCxFQUFLQSxFQUFLRCxFQUFLQSxFQUFLQSxFQUFJLEdBR3hELEdBQW1CLEVBQWZMLEVBQWtCLENBQ2xCLElBQU1PLEVBQW1CalMsS0FBS0MsS0FBS3lSLEdBS25DLE1BQU8sQ0FKR0MsVUFBVUssRUFBS0MsR0FDZk4sU0FBU0ssRUFBS0MsR0FDTEgsR0FNdkIsR0FBcUIsSUFBakJKLEVBQW9CLENBRXBCLElBQU0vUixFQUFJZ1MsVUFBVUssR0FLcEIsTUFBTyxDQUhJLEVBQUlyUyxFQUFJbVMsR0FFUG5TLEVBQUltUyxHQVlwQixJQUFNaFUsRUFBSWtDLEtBQUtDLE1BQU04UixFQUFLQSxFQUFLQSxHQUUzQkcsR0FBVUYsRUFBS2xVLEVBRWZvVSxHQUFVLEVBQ1ZBLEdBQVUsRUFDTSxFQUFUQSxJQUNQQSxFQUFTLEdBRWIsSUFBTUMsRUFBTW5TLEtBQUtnRCxLQUFLa1AsR0FPaEJFLEVBQWUsRUFBSVQsU0FBUzdULEdBSWxDLE1BQU8sQ0FISXNVLEVBQWVwUyxLQUFLNEIsSUFBSXVRLEVBQU0sR0FBS0wsRUFDbkNNLEVBQWVwUyxLQUFLNEIsS0FBS3VRLEVBQU0sRUFBSW5TLEtBQUtpRCxJQUFNLEdBQUs2TyxFQUNuRE0sRUFBZXBTLEtBQUs0QixLQUFLdVEsRUFBTSxFQUFJblMsS0FBS2lELElBQU0sR0FBSzZPLEdBaUJ2REQsRUFKSSxFQUFJcFAsRUFBSyxFQUFJdEMsRUFBTSxFQUFJQyxHQUFROUMsSUFDOUIsRUFBSW1GLEVBQUssRUFBSXRDLEdBQU83QyxFQUN0Qm1GLEVBQUtuRixHQUVvQndDLElBQUksU0FBQTVCLEdBQUMsT0FBSTZFLFdBQVc3RSxFQUFHLEtBYXZELFNBQVM0RixpQkFBaUJyQixFQUFJQyxFQUFJMlAsR0FDckMsSUFBSUMsRUFDSixHQUF1QixPQUFuQkQsRUFBYTVTLEVBQ2I2UyxFQUFXLFFBQ1IsSUFBdUIsT0FBbkJELEVBQWEzUyxFQUdwQixNQUFPLEdBRlA0UyxFQUFXLElBa0JmLE9BYlc1TyxhQUFhakIsRUFBSUMsRUFBSSxDQUM1Qk4sT0FBVyxTQUFBQSxTQUFBLFFBQUFrTyxFQUFBMVEsVUFBQUwsT0FBSTZQLEVBQUosSUFBQS9QLE1BQUFpUixHQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQUluQixFQUFKbUIsR0FBQTNRLFVBQUEyUSxHQUFBLE9BbEtuQixTQUFTZ0Msa0JBQWtCOVAsRUFBSUMsRUFBSTFELEdBRS9CLE9BQUkwRCxJQUFPRCxFQUNBLEdBR0osRUFBRXpELEVBQUl5RCxJQUFPQyxFQUFLRCxLQTRKbUI1QyxXQUFqQixFQUFBMlMsd0JBQXFCcEQsRUFBSXRQLElBQUksU0FBQXVQLEdBQUUsT0FBSUEsRUFBR2lELE1BQXRDOVAsT0FBQSxDQUNuQjZQLEVBQWFDLE9BQ2pCalEsVUFBVyxTQUFBQSxZQUFBLFFBQUFvUSxFQUFBN1MsVUFBQUwsT0FBSTZQLEVBQUosSUFBQS9QLE1BQUFvVCxHQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQUl0RCxFQUFKc0QsR0FBQTlTLFVBQUE4UyxHQUFBLE9BQVlsQixxQkFBb0IzUixXQUFwQixFQUFBMlMsd0JBQXdCcEQsRUFBSXRQLElBQUksU0FBQXVQLEdBQUUsT0FBSUEsRUFBR2lELE1BQXpDOVAsT0FBQSxDQUNuQjZQLEVBQWFDLE9BQ2pCaFEsTUFBVyxTQUFBQSxRQUFBLFFBQUFxUSxFQUFBL1MsVUFBQUwsT0FBSTZQLEVBQUosSUFBQS9QLE1BQUFzVCxHQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQUl4RCxFQUFKd0QsR0FBQWhULFVBQUFnVCxHQUFBLE9BQVloQixpQkFBZ0IvUixXQUFoQixFQUFBMlMsd0JBQW9CcEQsRUFBSXRQLElBQUksU0FBQXVQLEdBQUUsT0FBSUEsRUFBR2lELE1BQXJDOVAsT0FBQSxDQUNuQjZQLEVBQWFDLFNBQ2xCdk8sT0FBTyxTQUFDN0YsR0FHUCxPQUFZLElBRFpBLEVBQUk2RSxXQUFXN0UsRUFBRyxLQUNEQSxHQUFLLElBR2hCNEIsSUFBSSxTQUFDNUIsR0FDWCxJQUFNYyxFQW5UUCxTQUFTMkUsZ0JBQWdCekYsRUFBR3VFLEVBQUlDLEdBQ25DLE9BQU9nQixhQUFhakIsRUFBSUMsRUFBSSxDQUN4Qk4sT0FBUSxTQUFBQSxTQUFBLFFBQUFrRSxFQUFBMUcsVUFBQUwsT0FBSTZQLEVBQUosSUFBQS9QLE1BQUFpSCxHQUFBRSxFQUFBLEVBQUFBLEVBQUFGLEVBQUFFLElBQUk0SSxFQUFKNUksR0FBQTVHLFVBQUE0RyxHQUFBLE9BQVk1QyxlQUFjL0QsV0FBZCxHQUFlM0IsR0FBZnNFLE9BQXFCNE0sS0FDekMvTSxVQUZ3QixTQUFBQSxZQUVOLFFBQUE2RyxFQUFBdEosVUFBQUwsT0FBTDZQLEVBQUssSUFBQS9QLE1BQUE2SixHQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQUxpRyxFQUFLakcsR0FBQXZKLFVBQUF1SixHQUNkLE9BQU81SSxVQUFTVixXQUFULEdBeUJuQixTQUFTZ1Qsa0JBQWtCM1UsRUFBR3VFLEVBQUk0TSxFQUFJM00sR0FHbEMsT0FBUUQsRUFBS0MsRUFBSyxFQUFJMk0sR0FBTW5SLEVBQUlBLEVBQUksR0FBS21SLEVBQUs1TSxHQUFNdkUsRUFBSXVFLEdBNUJiakUsS0FBSyxLQUFNTixJQUF2Q3NFLE9BQThDNE0sS0FFekQ5TSxNQUx3QixTQUFBQSxRQUtWLFFBQUFzSCxFQUFBaEssVUFBQUwsT0FBTDZQLEVBQUssSUFBQS9QLE1BQUF1SyxHQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQUx1RixFQUFLdkYsR0FBQWpLLFVBQUFpSyxHQUNWLE9BQU90SixVQUFTVixXQUFULEdBNEJuQixTQUFTaVQsY0FBYzVVLEVBQUd1RSxFQUFJdEMsRUFBS0MsRUFBS3NDLEdBR3BDLE9BQU9ELEdBQU0sRUFBSXZFLElBQU0sRUFBSUEsSUFBTSxFQUFJQSxHQUFLLEVBQUlpQyxHQUFPLEVBQUlqQyxJQUFNLEVBQUlBLEdBQUtBLEVBQ2pFLEVBQUlrQyxHQUFPLEVBQUlsQyxHQUFLQSxFQUFJQSxFQUFJd0UsRUFBS3hFLEVBQUlBLEVBQUlBLEdBaENUTSxLQUFLLEtBQU1OLElBQW5Dc0UsT0FBMEM0TSxPQTRTM0N6TCxDQUFnQnpGLEVBQUd1RSxFQUFJQyxHQUVqQyxPQURBMUQsRUFBRWQsRUFBSUEsRUFDQ2MsSUFnQlIsU0FBU2dGLGdCQUFnQnZCLEVBQUlDLEdBQTZCLElBQXpCeEUsRUFBeUIsRUFBQTBCLFVBQUFMLGFBQUF5SSxJQUFBcEksVUFBQSxHQUFBQSxVQUFBLEdBQXJCLEdBQUttRyxFQUFnQixFQUFBbkcsVUFBQUwsYUFBQXlJLElBQUFwSSxVQUFBLEdBQUFBLFVBQUEsR0FBSCxFQUUxRCxPQUFPWSxJQURLb0QsZUFBZTFGLEVBQUd1RSxFQUFJQyxHQUNsQjFCLHVCQUF1QlAsS0FBS2dDLEVBQUlDLElBQU1xRCxHQVNuRCxTQUFTN0IsY0FBY3pCLEVBQUlDLEdBQzlCLElBQU0wTSxFQUFNLENBQUMzTSxHQUNiLElBQUssSUFBSTRNLEtBQU0zTSxFQUNQMk0sRUFBR25NLFdBQVcsT0FBU1IsRUFBRzNELGVBQWVzUSxJQUN6Q0QsRUFBSTdOLEtBQUttQixFQUFHMk0sSUFHcEJELEVBQUk3TixLQUFLTixhQUFheUIsSUFJdEIsSUFGQSxJQUFNcVEsRUFBYzlSLGFBQWF5QixHQVRDc1EsRUFBQSxTQUFBQSxNQVd6QmhXLEVBQU9pVyxHQUNaLElBQU1DLEVBQWNsVyxFQUFJaVcsRUFFeEJGLEVBQVksS0FBTy9WLEdBQUt1RCxVQUFVLFNBQUM0UyxFQUFTL0QsR0FDeEMsT0FBTzhELEVBQWNDLEdBQVcsRUFBSUQsR0FBZTlELEdBQ3BEQSxFQUFJcFMsRUFBSSxHQUFJb1MsRUFBSXBTLEtBTGRBLEVBQUksRUFBR2lXLEVBQVk3RCxFQUFJN1AsT0FBUXZDLEVBQUlpVyxJQUFhalcsRUFBR2dXLEVBQW5EaFcsRUFBT2lXLEdBT2hCLE9BQU9GLEVBNERKLFNBQVN6TyxpQkFBaUI4TyxFQUFPalIsR0FDcEMsT0FBS2lSLEdBQVVqUixFQUdSLENBQ0gxQyxFQUFLMlQsRUFBTTNULEVBQ1hDLEVBQUswVCxFQUFNMVQsRUFDWFMsSUFBS3NFLE1BQU10QyxFQUFJL0IsS0FDZkEsSUFBS3FFLE1BQU10QyxFQUFJaEMsTUFOUmlULEVBbUJSLFNBQVMxTyxjQUFjakMsRUFBSUMsR0FBaUIsSUFBYjRNLEVBQWEsRUFBQTFQLFVBQUFMLGFBQUF5SSxJQUFBcEksVUFBQSxHQUFBQSxVQUFBLEdBQUgsRUFDNUMsT0FBTzhELGFBQWFqQixFQUFJQyxFQUFJLENBQ3hCTixPQUR3QixTQUFBQSxTQUVwQixPQUFPNUIsSUFBSWtDLEVBQUlqQyxLQUFLZ0MsRUFBSUMsR0FBSzRNLElBRWpDak4sVUFKd0IsU0FBQUEsWUFNcEIsT0FBT3ZCLE1BRGVvRCxjQUFjekIsRUFBSUMsR0FDYnRDLEtBQU1rUCxFQUFTNU0sSUFFOUNKLE1BUndCLFNBQUFBLFFBU3BCLE9BQU94QixNQUFNNEIsRUFBR3RDLEtBQU1rUCxFQUFTNU0sTUN6Y3BDLFNBQVM2QyxXQUFXK0QsR0FJdkIsTUFBSTFKLFVBQUFMLFFBQUEsSUFBQUssVUFBQUwsT0FBQSxHQUFnQixHQUFwQixDQUdBLElBQUk4VCxFQUFVelQsVUFBQUwsUUFBQSxPQUFBeUksRUFBQXBJLFVBQUEsR0FFVnlULElBQ0lBLElBQWVyUixJQUNmcVIsRUFBVXpULFVBQUFMLFFBQUEsT0FBQXlJLEVBQUFwSSxVQUFBLElBRVZ5VCxHQUFjQSxFQUFXdFUsZUFBZSxNQUN4Q3VLLEVBQUk5RCxPQUFPNk4sRUFBVzVULEVBQUc0VCxFQUFXM1QsSUFJNUMsSUFBSyxJQUFJMUMsRUFBSSxFQUFHc1csRUFBRzFULFVBQUFMLFFBQUEsSUFBQUssVUFBQUwsT0FBQSxFQUFrQnZDLEVBQUlzVyxJQUFPdFcsRUFBRyxDQUMvQyxJQUFJZ0MsRUFBV2hDLEVBQVYsS0FBQTRDLFVBQUFMLFFBQVV2QyxFQUFWLE9BQUFnTCxFQUFBcEksVUFBVTVDLEVBQVYsR0FHQWdDLElBSURBLElBQU1nRCxJQUNKaEYsR0FDRzRDLFVBQUFMLFFBQUEsSUFBQUssVUFBQUwsT0FBQSxLQUNEUCxFQUFXaEMsRUFBVixLQUFBNEMsVUFBQUwsUUFBVXZDLEVBQVYsT0FBQWdMLEVBQUFwSSxVQUFVNUMsRUFBVixHQUNEc00sRUFBSTlELE9BQU94RyxFQUFFUyxFQUFHVCxFQUFFVSxJQUVmVixFQUFFb0IsS0FBT3BCLEVBQUVtQixJQUNsQm1KLEVBQUk3RCxjQUFjekcsRUFBRW1CLElBQUlWLEVBQUdULEVBQUVtQixJQUFJVCxFQUFHVixFQUFFb0IsSUFBSVgsRUFBR1QsRUFBRW9CLElBQUlWLEVBQUdWLEVBQUVTLEVBQUdULEVBQUVVLEVBQUdWLEVBQUUwRyxjQUMzRDFHLEVBQUVtQixJQUNUbUosRUFBSTNELGlCQUFpQjNHLEVBQUVtQixJQUFJVixFQUFHVCxFQUFFbUIsSUFBSVQsRUFBR1YsRUFBRVMsRUFBR1QsRUFBRVUsRUFBR1YsRUFBRTBHLGNBQzVDMUcsRUFBRW9CLElBQ1RrSixFQUFJM0QsaUJBQWlCM0csRUFBRW9CLElBQUlYLEVBQUdULEVBQUVvQixJQUFJVixFQUFHVixFQUFFUyxFQUFHVCxFQUFFVSxFQUFHVixFQUFFMEcsY0FDNUMxRyxFQUFFRCxlQUFlLE1BQ3hCdUssRUFBSTFELE9BQU81RyxFQUFFUyxFQUFHVCxFQUFFVSxNQVd2QixTQUFTbUcsV0FBV3FLLEVBQVFqSyxHQUMvQixJQUFNc04sRUFBVSxjQUFpQnROLEVBQzdCdU4sRUFBTSxDQUNOL1QsRUFBR3lRLEVBQU96USxFQUNWQyxFQUFHd1EsRUFBT3hRLEVBQUl1RyxHQUVkckQsRUFBUSxDQUNSbkQsRUFBR3lRLEVBQU96USxFQUFJd0csRUFDZHZHLEVBQUd3USxFQUFPeFEsR0FFVitULEVBQU0sQ0FDTmhVLEVBQUd5USxFQUFPelEsRUFDVkMsRUFBR3dRLEVBQU94USxFQUFJdUcsR0FFZHRELEVBQU8sQ0FDUGxELEVBQUd5USxFQUFPelEsRUFBSXdHLEVBQ2R2RyxFQUFHd1EsRUFBT3hRLEdBbUNkLE9BakNBOFQsRUFBSXJULElBQU0sQ0FDTlYsRUFBR2tELEVBQUtsRCxFQUNSQyxFQUFHaUQsRUFBS2pELEVBQUk2VCxHQUVoQkMsRUFBSXBULElBQU0sQ0FDTlgsRUFBRytULEVBQUkvVCxFQUFJOFQsRUFDWDdULEVBQUc4VCxFQUFJOVQsR0FFWGtELEVBQU16QyxJQUFNLENBQ1JWLEVBQUcrVCxFQUFJL1QsRUFBSThULEVBQ1g3VCxFQUFHOFQsRUFBSTlULEdBRVhrRCxFQUFNeEMsSUFBTSxDQUNSWCxFQUFHbUQsRUFBTW5ELEVBQ1RDLEVBQUdrRCxFQUFNbEQsRUFBSTZULEdBRWpCRSxFQUFJdFQsSUFBTSxDQUNOVixFQUFHbUQsRUFBTW5ELEVBQ1RDLEVBQUdrRCxFQUFNbEQsRUFBSTZULEdBRWpCRSxFQUFJclQsSUFBTSxDQUNOWCxFQUFHZ1UsRUFBSWhVLEVBQUk4VCxFQUNYN1QsRUFBRytULEVBQUkvVCxHQUVYaUQsRUFBS3hDLElBQU0sQ0FDUFYsRUFBR2dVLEVBQUloVSxFQUFJOFQsRUFDWDdULEVBQUcrVCxFQUFJL1QsR0FFWGlELEVBQUt2QyxJQUFNLENBQ1BYLEVBQUdrRCxFQUFLbEQsRUFDUkMsRUFBR2lELEVBQUtqRCxFQUFJNlQsR0FHVCxDQUFDQyxFQUFLNVEsRUFBTzZRLEVBQUs5USxFQUFNNlEsR0N0SG5DMVcsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFqSSxJQUFBbEYsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUEvSCxJQUFBcEYsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUF4SixPQUFBM0QsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUF2SixPQUFBNUQsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFuSixRQUFBaEUsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFoSixlQUFBbkUsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUEvSSxVQUFBcEUsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUE3SSxTQUFBdEUsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUF6SSxjQUFBMUUsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUF2SSxlQUFBNUUsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFwRyxhQUFBL0csRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUFuRyxtQkFBQWhILEVBQUFRLEVBQUEyTSxFQUFBLHNCQUFBakcsa0JBQUFsSCxFQUFBUSxFQUFBMk0sRUFBQSxzQkFBQTNGLG1CQUFBeEgsRUFBQVEsRUFBQTJNLEVBQUEsc0JBQUF2RixnQkFBQTVILEVBQUFRLEVBQUEyTSxFQUFBLHFCRFVvQixrQkNWcEJuTixFQUFBUSxFQUFBMk0sRUFBQSxzQkFBQTFFLGFBQUF6SSxFQUFBUSxFQUFBMk0sRUFBQSxzQkFBQXBFLHk1QkM0Qk8sU0FBUzZOLGdCQW1CZixJQVZBLElBUnVCQyxFQUFNQyxFQUFPQyxFQUMvQkMsRUFDQUMsRUFNREMsRUFBYyxHQUNkQyxFQUFlLEdBRWJDLEVBQWdCdFUsVUFBVSxHQUMxQnVVLEVBQWV2VSxVQUFVLEdBQ3pCd1UsRUFBV3hVLFVBQVUsR0FFckJpVSxFQUFjSyxFQUFjeFUsR0FBSXdVLEVBQWN4VSxFQUFFeVUsRUFBYXpVLEdBQUcwVSxFQUc3REMsRUFBSyxFQUFHQSxFQUFLelUsVUFBVUwsT0FBUThVLElBQ3BDelUsVUFBVXlVLElBQ1pMLEVBQVl6UyxLQUFLa0QsZ0JBQU03RSxVQUFVeVUsS0FLbkMsR0FBR1IsRUFBWUcsRUFBWSxHQUFHdFUsRUFDN0J1VSxFQUFhLEdBQUtELEVBQVksUUFFekIsR0FBR0gsRUFBWUcsRUFBWUEsRUFBWXpVLE9BQU8sR0FBR0csRUFDdER1VSxFQUFlRCxPQUdmLElBQUksSUFBSUssRUFBRyxFQUFFQSxFQUFHTCxFQUFZelUsT0FBTzhVLElBQUssQ0FDdkMsR0FBR1IsR0FBYUcsRUFBWUssR0FBSTNVLEVBQUUsQ0FDakN1VSxFQUFlRCxFQUFZTSxPQUFPLEVBQUdELEVBQUcsR0FDeEMsTUFDSyxHQUFHUixFQUFZRyxFQUFZSyxHQUFJM1UsRUFBRSxDQUN0QyxJQUFJcVAsR0FyQ2dCNEUsRUFxQ0tLLEVBQVlLLEVBQUcsR0FyQ2RULEVBcUNpQkksRUFBWUssR0FyQ3RCUixFQXFDMEJBLE9BcEN6REMsSUFBV0gsRUFBTWpVLEVBQUVrVSxFQUFPbFUsRUFDMUJxVSxFQUFXL1QsS0FBS3VVLEtBQUtWLEVBQVlGLEVBQU1qVSxHQUFHb1UsR0FDckNqUSxxQkFBV2tRLEVBQVNKLEVBQU9DLEdBQ3RCalIsS0FBS0QsS0FrQ2pCdVIsRUFBZUQsRUFBWU0sT0FBTyxFQUFFRCxJQUV2QkosRUFBYTFVLFFBQVV3UCxFQUNwQyxPQUlILE9BQU9rRixFQWNELFNBQVNPLDBCQUNmLFNBQVNDLGNBQWNkLEVBQU1DLEVBQU9DLEdBQ25DLElBQUk5RSxFQUFPakwsMkJBQWlCNlAsRUFBTUMsRUFBTyxDQUFDblUsRUFBRSxLQUFLQyxFQUFFZ1YsRUFBZ0JoVixJQUMvRGlWLEVBQUs5USxxQkFBV2tMLEVBQUssR0FBRzdRLEVBQUV5VixFQUFNQyxHQUNwQyxNQUFPLENBQ05nQixPQUFPRCxFQUFHaFMsS0FBS0QsR0FDZmtSLE9BQU9lLEVBQUcvUixNQUFNRixJQVdsQixJQVBBLElBQUlzUixFQUFjLEdBQ2RDLEVBQWUsR0FFZlMsRUFBa0I5VSxVQUFVLEdBQzVCaVUsRUFBY2EsRUFBZ0JoVixFQUM5Qm1WLEVBQVNqVixVQUFVLEdBRWR5VSxFQUFLLEVBQUdBLEVBQUt6VSxVQUFVTCxPQUFROFUsSUFDcEN6VSxVQUFVeVUsSUFDWkwsRUFBWXpTLEtBQUtrRCxnQkFBTTdFLFVBQVV5VSxLQUluQyxHQUFHUixFQUFZRyxFQUFZLEdBQUd0VSxFQUM3QnVVLEVBQWEsR0FBS0QsRUFBWSxRQUN6QixHQUFHSCxFQUFZRyxFQUFZQSxFQUFZelUsT0FBTyxHQUFHRyxFQUN0RHVVLEVBQWVELE9BRWYsSUFBSSxJQUFJSyxFQUFHLEVBQUVBLEVBQUdMLEVBQVl6VSxPQUFPOFUsSUFBSyxDQUN2QyxHQUFHUixHQUFhRyxFQUFZSyxHQUFJM1UsRUFBRSxDQUNqQ3VVLEVBQWVELEVBQVlNLE9BQU8sRUFBR0QsRUFBRyxHQUN4QyxNQUNLLEdBQUdSLEVBQVlHLEVBQVlLLEdBQUkzVSxFQUFFLENBQ3RDLElBQUlrVixPQUFNLEVBQ1YsR0FBR0MsRUFBTyxDQUNULElBQUk5RixFQUFPMEYsY0FBY1QsRUFBWUssR0FBSUwsRUFBWUssRUFBRyxJQUN4RE8sRUFBUzdGLEVBQUs2RixPQUNkWixFQUFZSyxFQUFHLEdBQUt0RixFQUFLNkUsV0FDckIsQ0FFSmdCLEVBRFdILGNBQWNULEVBQVlLLEVBQUcsR0FBR0wsRUFBWUssSUFDekNPLFFBRWZYLEVBQWVELEVBQVlNLE9BQU8sRUFBRUQsSUFDdkI5UyxLQUFLcVQsR0FDbEIsT0FPSCxPQUhHQyxHQUNGWixFQUFhYSxVQUVQYixFQWdCRCxTQUFTYyx3QkFxQmYsSUFWQSxJQVZ1QnBCLEVBQU1DLEVBQU9DLEVBQy9CQyxFQUNBQyxFQUNBWSxFQU9EWCxFQUFjLEdBQ2RDLEVBQWUsR0FFYkMsRUFBZ0J0VSxVQUFVLEdBQzFCdVUsRUFBZXZVLFVBQVUsR0FDekJ3VSxFQUFXeFUsVUFBVSxHQUVyQmlVLEVBQWNLLEVBQWN4VSxHQUFJd1UsRUFBY3hVLEVBQUV5VSxFQUFhelUsR0FBRzBVLEVBRzdEQyxFQUFLLEVBQUdBLEVBQUt6VSxVQUFVTCxPQUFROFUsSUFDcEN6VSxVQUFVeVUsSUFDWkwsRUFBWXpTLEtBQUtrRCxnQkFBTTdFLFVBQVV5VSxLQUtuQyxHQUFHUixFQUFZRyxFQUFZLEdBQUd0VSxFQUM3QnVVLEVBQWVELE9BRVYsR0FBR0gsRUFBWUcsRUFBWUEsRUFBWXpVLE9BQU8sR0FBR0csRUFDdER1VSxFQUFhLEdBQUtELEVBQVlBLEVBQVl6VSxPQUFPLFFBR2pELElBQUksSUFBSThVLEVBQUdMLEVBQVl6VSxPQUFPLEVBQU0sR0FBSjhVLEVBQU1BLElBQ3JDLEdBQUdSLEVBQVlHLEVBQVlLLEdBQUkzVSxFQUFFLENBQ2hDLElBQUlxUCxHQXBDZ0I0RSxFQW9DS0ssRUFBWUssR0FwQ1hULEVBb0NlSSxFQUFZSyxFQUFHLEdBcEN2QlIsRUFvQzBCQSxPQW5DekRDLElBQVdILEVBQU1qVSxFQUFFa1UsRUFBT2xVLEVBQzFCcVUsRUFBVy9ULEtBQUt1VSxLQUFLVixFQUFZRixFQUFNalUsR0FBR29VLEdBRXZDLENBQ05OLEtBRkdtQixFQUFLOVEscUJBQVdrUSxFQUFTSixFQUFPQyxJQUU1QmpSLEtBQUtELEdBQ1prUixPQUFPZSxFQUFHL1IsTUFBTUYsS0ErQlg4USxFQUFNekUsRUFBS3lFLElBQ2ZRLEVBQVlLLEVBQUcsR0FBS3RGLEVBQUs2RSxPQUV6QkksRUFBWU0sT0FBTyxFQUFFRCxFQUFHLElBQ3hCSixFQUFlRCxHQUVGZ0IsUUFBUXhCLEdBQ3JCLE1BSUgsT0FBT1MsRUFnQkQsU0FBU2dCLHlCQUF5QkMsRUFBY0wsR0FDdEQsU0FBU0osY0FBY2QsRUFBTUMsRUFBT0MsR0FDbkMsSUFBSTlFLEVBQU9qTCwyQkFBaUI2UCxFQUFNQyxFQUFPLENBQUNuVSxFQUFFLEtBQUtDLEVBQUV3VixFQUFjeFYsSUFDN0RpVixFQUFLOVEscUJBQVdrTCxFQUFLLEdBQUc3USxFQUFFeVYsRUFBTUMsR0FTcEMsT0FSQTdFLEVBQU80RixFQUFHaFMsS0FBS0QsR0FRUixDQUNOcEMsTUFBT3FVLEVBQUdoUyxLQUFLRCxHQUNma1IsT0FBUWUsRUFBRy9SLE1BQU1GLElBUW5CLElBSkEsSUFBSXNSLEVBQWMsR0FDZEMsRUFBZSxHQUNmSixFQUFjcUIsRUFBY3hWLEVBRXZCMlUsRUFBSyxFQUFHQSxFQUFLelUsVUFBVUwsT0FBUThVLElBQ3BDelUsVUFBVXlVLElBQ1pMLEVBQVl6UyxLQUFLa0QsZ0JBQU03RSxVQUFVeVUsS0FJbkMsR0FBR1IsRUFBWUcsRUFBWSxHQUFHdFUsRUFDN0J1VSxFQUFlRCxPQUNWLEdBQUdILEVBQVlHLEVBQVlBLEVBQVl6VSxPQUFPLEdBQUdHLEVBQ3REdVUsRUFBYSxHQUFLRCxFQUFZQSxFQUFZelUsT0FBTyxRQUVqRCxJQUFJLElBQUk4VSxFQUFHTCxFQUFZelUsT0FBTyxFQUFNLEdBQUo4VSxFQUFNQSxJQUNyQyxHQUFHUixFQUFZRyxFQUFZSyxHQUFJM1UsRUFBRSxDQUVoQyxJQUFJcVAsT0FBSSxFQUNMOEYsRUFDRjlGLEVBQU8wRixjQUFjVCxFQUFZSyxFQUFHLEdBQUlMLEVBQVlLLEtBRXBEdEYsRUFBTzBGLGNBQWNULEVBQVlLLEdBQUtMLEVBQVlLLEVBQUcsSUFDckRMLEVBQVlLLEVBQUcsR0FBS3RGLEVBQUs2RSxRQUcxQkksRUFBWU0sT0FBTyxFQUFFRCxFQUFHLElBQ3hCSixFQUFlRCxHQUVGZ0IsUUFBUWpHLEVBQUt6TyxPQUMxQixNQU9ILE9BSEd1VSxHQUNGWixFQUFhYSxVQUVQYixFQVFELFNBQVNrQixZQUFZQyxFQUFPQyxHQUFzQixJQUFkdEIsRUFBYyxFQUFBblUsVUFBQUwsYUFBQXlJLElBQUFwSSxVQUFBLEdBQUFBLFVBQUEsR0FBSixHQUNwRCxNQUN1QixXQUFsQjBWLFFBQU9ELFNBQTJDck4sSUFBcEJzTixRQUFPRCxFQUFPNVYsU0FBdUN1SSxJQUFwQnNOLFFBQU9ELEVBQU8zVixJQUM1RCxXQUFqQjRWLFFBQU9GLFNBQXlDcE4sSUFBbkJzTixRQUFPRixFQUFNM1YsU0FBc0N1SSxJQUFuQnNOLFFBQU9GLEVBQU0xVixHQUV2RSxDQUNORCxFQUFJMFYsWUFBWUMsRUFBTTNWLEVBQUc0VixFQUFPNVYsRUFBR3NVLEdBQ25DclUsRUFBSXlWLFlBQVlDLEVBQU0xVixFQUFHMlYsRUFBTzNWLEVBQUdxVSxLQUlqQixVQUFqQnVCLFFBQU9ELElBQ1RFLFFBQVFDLElBQUksZ0dBRU0sVUFBaEJGLFFBQU9GLElBQ1RHLFFBQVFDLElBQUksaUdBR05KLEdBQVdDLEVBQVNELEdBQVNyQixHQVM5QixTQUFTMEIsZ0JBQWdCQyxFQUFlcFYsRUFBTXlULEdBQ3BELElBQUk0QixFQUFZLENBQ2ZsVyxFQUFHMFYsWUFBWU8sRUFBZWpXLEVBQUVhLEVBQU1iLEVBQUUsSUFDeENDLEVBQUd5VixZQUFZTyxFQUFlaFcsRUFBRVksRUFBTVosRUFBRSxLQUd0Q1ksRUFBTUgsTUFDUkcsRUFBTUgsSUFBSVYsRUFBSTBWLFlBQVk3VSxFQUFNSCxJQUFJVixFQUFFa1csRUFBWWxXLEVBQUVzVSxHQUNwRHpULEVBQU1ILElBQUlULEVBQUl5VixZQUFZN1UsRUFBTUgsSUFBSVQsRUFBRWlXLEVBQVlqVyxFQUFFcVUsSUFHbER6VCxFQUFNRixNQUNSRSxFQUFNRixJQUFJWCxFQUFJMFYsWUFBWTdVLEVBQU1GLElBQUlYLEVBQUVrVyxFQUFZbFcsRUFBRXNVLEdBQ3BEelQsRUFBTUYsSUFBSVYsRUFBSXlWLFlBQVk3VSxFQUFNRixJQUFJVixFQUFFaVcsRUFBWWpXLEVBQUVxVSxJQVMvQyxTQUFTNkIscUJBQXFCalIsRUFBRWtSLEVBQUUvUyxFQUFFa08sR0FJMUMsSUFBSThFLEVBQUtELEVBQUVuVyxFQUFJaUYsRUFBRWpGLEVBQ2JxVyxFQUFLcFIsRUFBRWxGLEVBQUlvVyxFQUFFcFcsRUFDYnVXLEVBQUtGLEVBQUluUixFQUFFbEYsRUFBS3NXLEVBQUlwUixFQUFFakYsRUFHdEJ1VyxFQUFLakYsRUFBRXRSLEVBQUlvRCxFQUFFcEQsRUFDYndXLEVBQUtwVCxFQUFFckQsRUFBSXVSLEVBQUV2UixFQUNiMFcsRUFBS0YsRUFBSW5ULEVBQUVyRCxFQUFJeVcsRUFBSXBULEVBQUVwRCxFQUVyQjBXLEVBQWNOLEVBQUdJLEVBQUtELEVBQUdGLEVBRTdCLE9BQW1CLEdBQWZLLE9BQ0hiLFFBQVFDLElBQUksaURBTUwsQ0FBQy9WLEdBRkN5VyxFQUFHRixFQUFLRCxFQUFHSSxHQUFJQyxFQUVYMVcsR0FESm9XLEVBQUdLLEVBQUtGLEVBQUdELEdBQUlJLEdBNEpuQixTQUFTQyxnQkFBZ0JDLEVBQVdDLEVBQVNDLEVBQVdDLEVBQVNDLEdBQW1CLElBQWJDLEVBQWEsRUFBQS9XLFVBQUFMLGFBQUF5SSxJQUFBcEksVUFBQSxHQUFBQSxVQUFBLEdBQUYsRUFDeEY4VyxFQUFRMVcsS0FBS3VVLElBQUt2VSxLQUFLNFcsTUFBTUYsSUFPN0IsSUFMQSxJQUFJRyxFQUFRLEdBQ1JDLEVBQVEsR0FFUkMsRUFBTyxJQUpYTCxFQU1RckMsRUFBSyxFQUFJQSxFQUFHMEMsR0FBTyxFQUFHMUMsSUFHNUJ5QyxFQUFNekMsR0FGSkEsRUFBRyxHQUFHLEdBQ1J3QyxFQUFNeEMsR0FBS2pULGlCQUFPdUMsMEJBQWdCb1QsRUFBSzFDLEVBQUdpQyxFQUFXQyxHQUFVSSxFQUFXLEdBQy9EdlYsaUJBQU91QywwQkFBZ0JvVCxFQUFLMUMsRUFBR21DLEVBQVdDLElBQVdFLEVBQVcsS0FFM0VFLEVBQU14QyxHQUFLalQsaUJBQU91QywwQkFBZ0JvVCxFQUFLMUMsRUFBR21DLEVBQVdDLElBQVdFLEVBQVcsR0FDaEV2VixpQkFBT3VDLDBCQUFnQm9ULEVBQUsxQyxFQUFHaUMsRUFBV0MsR0FBVUksRUFBVyxJQUk1RSxNQUFPLENBQUNFLE1BQU9BLEVBQU1DLE1BQU1BLEdBb0JyQixTQUFTRSxtQkFBbUJyUyxFQUFFa1IsRUFBRTlCLEVBQVFELEdBQzlDLElBQUltRCxFQUFJOUIsWUFBWXhRLEVBQUVrUixFQUFFOUIsR0FFeEIsT0FBT21ELGdCQUFnQnBELEVBRFZxRCxnQkFBZ0J0QixFQUFHbFIsR0FBR3lTLE1BQVNwWCxLQUFLaUQsR0FBRyxFQUNaZ1UsR0FPbEMsU0FBU0UsZ0JBQWdCN1csRUFBT3dCLEdBQ2xDQSxJQUFRQSxFQUFTLElBQ2pCQSxFQUFPckMsSUFBR3FDLEVBQU9yQyxFQUFJLEdBQ3JCcUMsRUFBT3BDLElBQUdvQyxFQUFPcEMsRUFBSSxHQUV6QixJQUFNSyxFQUFLTyxFQUFNYixFQUFJcUMsRUFBT3JDLEVBQ3RCWSxFQUFLQyxFQUFNWixFQUFJb0MsRUFBT3BDLEVBQzVCLE1BQU8sQ0FDTjVCLEVBQUdrQyxLQUFLQyxLQUNQRCxLQUFLNkMsSUFBSTlDLEVBQUUsR0FBS0MsS0FBSzZDLElBQUl4QyxFQUFFLElBRTVCK1csTUFBT3BYLEtBQUthLE1BQU1SLEVBQUVOLElBUWYsU0FBU21YLGdCQUFnQnBaLEVBQUdzWixFQUFPdFYsR0FLekMsT0FKSUEsSUFBUUEsRUFBUyxJQUNqQkEsRUFBT3JDLElBQUdxQyxFQUFPckMsRUFBSSxHQUNyQnFDLEVBQU9wQyxJQUFHb0MsRUFBT3BDLEVBQUksR0FFbEIsQ0FDTkQsRUFBRzNCLEVBQUlrQyxLQUFLNEIsSUFBSXdWLEdBQVN0VixFQUFPckMsRUFDaENDLEVBQUc1QixFQUFJa0MsS0FBSzZCLElBQUl1VixHQUFTdFYsRUFBT3BDLEdBZ0IzQixTQUFTMlgsVUFBVUMsRUFBTUMsRUFBSW5FLEVBQU1qUixHQUV6QyxJQUFNcVYsRUFBV0wsZ0JBQWdCSSxFQUFJRCxHQUFPeFosRUFFdENnRCxFQURXcVcsZ0JBQWdCaFYsRUFBSWlSLEdBQU90VixFQUNsQjBaLEVBR3BCUCxFQUFJOUIsWUFBWW9DLEVBQUlELEdBQ3BCcFosRUFBSWlYLFlBQVloVCxFQUFJaVIsR0FFMUIsR0FBR21FLEVBQUlwWCxJQUFJLEtBQUFzWCxFQUVNTixnQkFBZ0JJLEVBQUlwWCxJQUFJOFcsR0FBbkNuWixFQUZLMlosRUFFTDNaLEVBQUVzWixFQUZHSyxFQUVITCxNQUNQQSxHQUFTRCxnQkFBZ0JJLEVBQUlOLEdBQUdHLE1BQ2hDQSxHQUFTRCxnQkFBZ0JoVixFQUFJakUsR0FBR2taLE1BRWhDalYsRUFBSWhDLElBQU0rVyxnQkFBZ0JwWixFQUFJZ0QsRUFBT3NXLEVBQU9sWixHQUc3QyxHQUFHcVosRUFBSW5YLElBQUksS0FBQXNYLEVBRU1QLGdCQUFnQkksRUFBSW5YLElBQUk2VyxHQUFuQ25aLEVBRks0WixFQUVMNVosRUFBRXNaLEVBRkdNLEVBRUhOLE1BQ1BBLEdBQVNELGdCQUFnQkksRUFBSU4sR0FBR0csTUFDaENBLEdBQVNELGdCQUFnQmhWLEVBQUlqRSxHQUFHa1osTUFFaENqVixFQUFJL0IsSUFBTThXLGdCQUFnQnBaLEVBQUlnRCxFQUFPc1csRUFBT2xaLElBK0N2QyxTQUFTeVosU0FBU3pILEVBQU8wSCxFQUFPQyxFQUFZQyxHQVFsRCxJQVI2RixJQUEvQkMsSUFBK0IsRUFBQW5ZLFVBQUFMLGFBQUF5SSxJQUFBcEksVUFBQSxLQUFBQSxVQUFBLEdBQXJCa1gsRUFBcUIsRUFBQWxYLFVBQUFMLGFBQUF5SSxJQUFBcEksVUFBQSxHQUFBQSxVQUFBLEdBQWIsRUFBR2lYLEVBQVUsRUFBQWpYLFVBQUFMLGFBQUF5SSxJQUFBcEksVUFBQSxHQUFBQSxVQUFBLEdBQUYsRUFDdkZvWSxFQUFhLEdBQ2JDLEVBQU1qWSxLQUFLaUQsR0FBRyxFQUFFLEVBQ2hCOFQsRUFBTy9XLEtBQUtpRCxHQUFHMlUsRUFFZk0sRUFBWUgsR0FBTSxFQUFJLEVBR2xCL2EsRUFBSSxFQUFHQSxFQUFJNGEsRUFBUTVhLElBQzFCZ2IsRUFBV0EsRUFBV3pZLFFBQVUsQ0FDL0JFLEVBQUV5USxFQUFPelEsRUFBS08sS0FBSzRCLElBQUlxVyxHQUFPSixFQUFjSyxFQUM1Q3hZLEVBQUV3USxFQUFPeFEsRUFBS00sS0FBSzZCLElBQUlvVyxHQUFPSixFQUFjSyxHQUU3Q0QsR0FBT2xCLEVBQ1BpQixFQUFXQSxFQUFXelksUUFBVSxDQUMvQkUsRUFBRXlRLEVBQU96USxFQUFLTyxLQUFLNEIsSUFBSXFXLEdBQU9ILEVBQWNJLEVBQzVDeFksRUFBRXdRLEVBQU94USxFQUFLTSxLQUFLNkIsSUFBSW9XLEdBQU9ILEVBQWNJLEdBRTdDRCxHQUFPbEIsRUFRUixHQU5BaUIsRUFBV0EsRUFBV3pZLFFBQVUsQ0FDL0JFLEVBQUV5USxFQUFPelEsRUFDVEMsRUFBRXdRLEVBQU94USxFQUFLbVksRUFBY0ssR0FJbEIsRUFBUnBCLEVBQ0ZrQixFQUFXQSxFQUFXelksUUFBVXlDLGFBQ2hDZ1csRUFBYUEsRUFBV3hWLE9BQU9xRCxxQkFBVyxDQUFDcEcsRUFBRXlRLEVBQU96USxFQUFFQyxFQUFFd1EsRUFBT3hRLEdBQUdtWSxTQUM3RCxHQUFHZixFQUFRLEVBQUUsQ0FDbEJrQixFQUFXQSxFQUFXelksUUFBVXlDLGFBQ2hDLElBQUksSUFBSWhGLEVBQUUsRUFBRUEsR0FBVyxFQUFQNGEsR0FDZkksRUFBV0EsRUFBV3pZLFFBQVV5WSxFQUFXaGIsR0FDM0NBLElBQ0FBLElBRURnYixFQUFXQSxFQUFXelksUUFBVXlZLEVBQVcsR0FJNUMsR0FBVyxFQUFSbkIsRUFDRm1CLEVBQVdBLEVBQVd6WSxRQUFVeUMsYUFDaENnVyxFQUFhQSxFQUFXeFYsT0FBT3FELHFCQUFXLENBQUNwRyxFQUFFeVEsRUFBT3pRLEVBQUVDLEVBQUV3USxFQUFPeFEsR0FBR29ZLFNBQzdELEdBQUdqQixFQUFRLEVBQUUsQ0FDbEJtQixFQUFXQSxFQUFXelksUUFBVXlDLGFBQ2hDLElBQVFoRixFQUFFLEVBQUVBLEdBQVcsRUFBUDRhLEdBQ2ZJLEVBQVdBLEVBQVd6WSxRQUFVeVksRUFBV2hiLEdBQzNDQSxJQUNBQSxJQUVEZ2IsRUFBV0EsRUFBV3pZLFFBQVV5WSxFQUFXLEdBRzVDLE9BQU9BLGlDQ3B0QlJsYixFQUFBZ0IsRUFBQW1NLEdBQUEsSUFBQWtPLEVBQUFyYixFQUFBLFdBQUFzYixLQUFBRCxFQUFBLFlBQUFDLEdBQUEsU0FBQTdaLEdBQUF6QixFQUFBUSxFQUFBMk0sRUFBQTFMLEVBQUEsa0JBQUE0WixFQUFBNVosS0FBQSxDQUFBNlosR0FBQSxJQUFBQyxFQUFBdmIsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQW9PLEVBQUEsUUFBQUMsRUFBQXhiLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsMkJBQUFxTyxFQUFBLElBQUF4YixFQUFBUSxFQUFBMk0sRUFBQSx5QkFBQXFPLEVBQUEsUUFBQUMsRUFBQXpiLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFzTyxFQUFBLElBQUF6YixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQXNPLEVBQUEsSUFBQXpiLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBc08sRUFBQSxJQUFBemIsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUFzTyxFQUFBLElBQUF6YixFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQXNPLEVBQUEsSUFBQXpiLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBc08sRUFBQSxJQUFBemIsRUFBQVEsRUFBQTJNLEVBQUEsdUNBQUFzTyxFQUFBLElBQUF6YixFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQXNPLEVBQUEsSUFBQXpiLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBc08sRUFBQSxJQUFBemIsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUFzTyxFQUFBLElBQUF6YixFQUFBUSxFQUFBMk0sRUFBQSwwQ0FBQXNPLEVBQUEsUUFBQUMsRUFBQTFiLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUF1TyxFQUFBLElBQUExYixFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQXVPLEVBQUEsSUFBQTFiLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBdU8sRUFBQSxRQUFBQyxFQUFBM2IsRUFBQSxHQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSx3Q0FBQXdPLEVBQUEsSUFBQTNiLEVBQUFRLEVBQUEyTSxFQUFBLHdDQUFBd08sRUFBQSxJQUFBM2IsRUFBQVEsRUFBQTJNLEVBQUEsOENBQUF3TyxFQUFBLElBQUEzYixFQUFBUSxFQUFBMk0sRUFBQSw0Q0FBQXdPLEVBQUEsSUFBQTNiLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBd08sRUFBQSxJQUFBM2IsRUFBQVEsRUFBQTJNLEVBQUEsdUNBQUF3TyxFQUFBLElBQUEzYixFQUFBUSxFQUFBMk0sRUFBQSw4Q0FBQXdPLEVBQUEsUUFBQUMsRUFBQTViLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUF5TyxFQUFBLElBQUE1YixFQUFBUSxFQUFBMk0sRUFBQSx3Q0FBQXlPLEVBQUEsSUFBQTViLEVBQUFRLEVBQUEyTSxFQUFBLDBDQUFBeU8sRUFBQSxJQUFBNWIsRUFBQVEsRUFBQTJNLEVBQUEsdUNBQUF5TyxFQUFBLElBQUE1YixFQUFBUSxFQUFBMk0sRUFBQSx1Q0FBQXlPLEVBQUEsSUFBQTViLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBeU8sRUFBQSxJQUFBNWIsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUF5TyxFQUFBLElBQUE1YixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQXlPLEVBQUEsSUFBQTViLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBeU8sRUFBQSxJQUFBNWIsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUF5TyxFQUFBLElBQUE1YixFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQXlPLEVBQUEsSUFBQTViLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBeU8sRUFBQSxRQUFBQyxFQUFBN2IsRUFBQSxHQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSx5QkFBQTBPLEVBQUEsSUFBQTdiLEVBQUFRLEVBQUEyTSxFQUFBLHlCQUFBME8sRUFBQSxJQUFBN2IsRUFBQVEsRUFBQTJNLEVBQUEseUJBQUEwTyxFQUFBLElBQUE3YixFQUFBUSxFQUFBMk0sRUFBQSwrQ0FBQTBPLEVBQUEsSUFBQTdiLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBME8sRUFBQSxJQUFBN2IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUEwTyxFQUFBLElBQUE3YixFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQTBPLEVBQUEsSUFBQTdiLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBME8sRUFBQSxJQUFBN2IsRUFBQVEsRUFBQTJNLEVBQUEseUJBQUEwTyxFQUFBLElBQUE3YixFQUFBUSxFQUFBMk0sRUFBQSxxQ0FBQTBPLEVBQUEsUUFBQUMsRUFBQTliLEVBQUEsR0FBQUEsRUFBQVEsRUFBQTJNLEVBQUEsMEJBQUEyTyxFQUFBLElBQUE5YixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQTJPLEVBQUEsSUFBQTliLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBMk8sRUFBQSxJQUFBOWIsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUEyTyxFQUFBLElBQUE5YixFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQTJPLEVBQUEsSUFBQTliLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBMk8sRUFBQSxJQUFBOWIsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUEyTyxFQUFBLElBQUE5YixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQTJPLEVBQUEsUUFBQUMsRUFBQS9iLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUE0TyxFQUFBLElBQUEvYixFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQTRPLEVBQUEsSUFBQS9iLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBNE8sRUFBQSxJQUFBL2IsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUE0TyxFQUFBLElBQUEvYixFQUFBUSxFQUFBMk0sRUFBQSx5Q0FBQTRPLEVBQUEsSUFBQS9iLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBNE8sRUFBQSxRQUFBQyxFQUFBaGMsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSx3Q0FBQTZPLEVBQUEsSUFBQWhjLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBNk8sRUFBQSxRQUFBQyxFQUFBamMsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSx5QkFBQThPLEVBQUEsSUFBQWpjLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBOE8sRUFBQSxJQUFBamMsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUE4TyxFQUFBLElBQUFqYyxFQUFBUSxFQUFBMk0sRUFBQSw2QkFBQThPLEVBQUEsSUFBQWpjLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBOE8sRUFBQSxJQUFBamMsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUE4TyxFQUFBLElBQUFqYyxFQUFBUSxFQUFBMk0sRUFBQSxnREFBQThPLEVBQUEsSUFBQWpjLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBOE8sRUFBQSxRQUFBQyxFQUFBbGMsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQStPLEVBQUEsUUFBQUMsRUFBQW5jLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUFnUCxFQUFBLFFBQUFDLEVBQUFwYyxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBaVAsRUFBQSxRQUFBQyxFQUFBcmMsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQWtQLEVBQUEsUUFBQUMsRUFBQXRjLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFtUCxFQUFBLFFBQUFDLEVBQUF2YyxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLHVDQUFBb1AsRUFBQSxJQUFBdmMsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUFvUCxFQUFBLElBQUF2YyxFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQW9QLEVBQUEsSUFBQXZjLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBb1AsRUFBQSxJQUFBdmMsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUFvUCxFQUFBLElBQUF2YyxFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQW9QLEVBQUEsUUFBQUMsRUFBQXhjLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFxUCxFQUFBLElBQUF4YyxFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQXFQLEVBQUEsUUFBQUMsRUFBQXpjLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFzUCxFQUFBLElBQUF6YyxFQUFBUSxFQUFBMk0sRUFBQSw0QkFBQXNQLEVBQUEsUUFBQUMsRUFBQTFjLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUF1UCxFQUFBLFFBQUFDLEVBQUEzYyxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBd1AsRUFBQSxJQUFBM2MsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUF3UCxFQUFBLElBQUEzYyxFQUFBUSxFQUFBMk0sRUFBQSw2QkFBQXdQLEVBQUEsSUFBQTNjLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBd1AsRUFBQSxRQUFBQyxFQUFBNWMsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQXlQLEVBQUEsUUFBQUMsRUFBQTdjLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUEwUCxFQUFBLFFBQUFDLEVBQUE5YyxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBMlAsRUFBQSxRQUFBQyxFQUFBL2MsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQTRQLEVBQUEsUUFBQUMsRUFBQWhkLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUE2UCxFQUFBLFFBQUFDLEVBQUFqZCxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBOFAsRUFBQSxRQUFBQyxFQUFBbGQsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQStQLEVBQUEsUUFBQUMsRUFBQW5kLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFnUSxFQUFBLFFBQUFDLEVBQUFwZCxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBaVEsRUFBQSxRQUFBQyxFQUFBcmQsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQWtRLEVBQUEsSUFBQXJkLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBa1EsRUFBQSxRQUFBQyxFQUFBdGQsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQW1RLEVBQUEsUUFBQUMsRUFBQXZkLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFvUSxFQUFBLElBQUF2ZCxFQUFBUSxFQUFBMk0sRUFBQSx3Q0FBQW9RLEVBQUEsSUFBQXZkLEVBQUFRLEVBQUEyTSxFQUFBLHdDQUFBb1EsRUFBQSxJQUFBdmQsRUFBQVEsRUFBQTJNLEVBQUEsOENBQUFvUSxFQUFBLFFBQUFDLEVBQUF4ZCxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBcVEsRUFBQSxRQUFBQyxFQUFBemQsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQXNRLEVBQUEsSUFBQXpkLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBc1EsRUFBQSxJQUFBemQsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUFzUSxFQUFBLFFBQUFDLEVBQUExZCxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBdVEsRUFBQSxJQUFBMWQsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUF1USxFQUFBLFFBQUFDLEVBQUEzZCxFQUFBLEdBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBd1EsRUFBQSxJQUFBM2QsRUFBQVEsRUFBQTJNLEVBQUEseUJBQUF3USxFQUFBLElBQUEzZCxFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQXdRLEVBQUEsSUFBQTNkLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBd1EsRUFBQSxJQUFBM2QsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUF3USxFQUFBLElBQUEzZCxFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQXdRLEVBQUEsSUFBQTNkLEVBQUFRLEVBQUEyTSxFQUFBLHdDQUFBd1EsRUFBQSxRQUFBQyxFQUFBNWQsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw2QkFBQXlRLEVBQUEsUUFBQUMsRUFBQTdkLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUEwUSxFQUFBLFFBQUFDLEVBQUE5ZCxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBMlEsRUFBQSxJQUFBOWQsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUEyUSxFQUFBLFFBQUFDLEVBQUEvZCxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBNFEsRUFBQSxJQUFBL2QsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUE0USxFQUFBLFFBQUFDLEVBQUFoZSxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBNlEsRUFBQSxRQUFBQyxFQUFBamUsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQThRLEVBQUEsUUFBQUMsRUFBQWxlLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUErUSxFQUFBLFFBQUFDLEVBQUFuZSxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBZ1IsRUFBQSxRQUFBQyxFQUFBcGUsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQWlSLEVBQUEsUUFBQUMsRUFBQXJlLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFrUixFQUFBLElBQUFyZSxFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQWtSLEVBQUEsUUFBQUMsRUFBQXRlLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUFtUixFQUFBLFFBQUFDLEVBQUF2ZSxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBb1IsRUFBQSxRQUFBQyxHQUFBeGUsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQXFSLEdBQUEsUUFBQUMsR0FBQXplLEVBQUEsR0FBQUEsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUFzUixHQUFBLElBQUF6ZSxFQUFBUSxFQUFBMk0sRUFBQSxnREFBQXNSLEdBQUEsSUFBQXplLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBc1IsR0FBQSxJQUFBemUsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUFzUixHQUFBLFFBQUFDLEdBQUExZSxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBdVIsR0FBQSxJQUFBMWUsRUFBQVEsRUFBQTJNLEVBQUEsdUNBQUF1UixHQUFBLElBQUExZSxFQUFBUSxFQUFBMk0sRUFBQSx5Q0FBQXVSLEdBQUEsSUFBQTFlLEVBQUFRLEVBQUEyTSxFQUFBLHlDQUFBdVIsR0FBQSxJQUFBMWUsRUFBQVEsRUFBQTJNLEVBQUEseUNBQUF1UixHQUFBLElBQUExZSxFQUFBUSxFQUFBMk0sRUFBQSx1Q0FBQXVSLEdBQUEsSUFBQTFlLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBdVIsR0FBQSxJQUFBMWUsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUF1UixHQUFBLElBQUExZSxFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXVSLEdBQUEsUUFBQUMsR0FBQTNlLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBd1IsR0FBQSxJQUFBM2UsRUFBQVEsRUFBQTJNLEVBQUEsd0NBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBd1IsR0FBQSxJQUFBM2UsRUFBQVEsRUFBQTJNLEVBQUEsMkNBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSw0Q0FBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLDRDQUFBd1IsR0FBQSxJQUFBM2UsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSxxQ0FBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLDRDQUFBd1IsR0FBQSxJQUFBM2UsRUFBQVEsRUFBQTJNLEVBQUEsMENBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBd1IsR0FBQSxJQUFBM2UsRUFBQVEsRUFBQTJNLEVBQUEseUNBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBd1IsR0FBQSxJQUFBM2UsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSwwQkFBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBd1IsR0FBQSxJQUFBM2UsRUFBQVEsRUFBQTJNLEVBQUEsMkNBQUF3UixHQUFBLElBQUEzZSxFQUFBUSxFQUFBMk0sRUFBQSwwQ0FBQXdSLEdBQUEsSUFBQTNlLEVBQUFRLEVBQUEyTSxFQUFBLGdEQUFBd1IsR0FBQSxRQUFBQyxHQUFBNWUsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQXlSLEdBQUEsSUFBQTVlLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBeVIsR0FBQSxJQUFBNWUsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUF5UixHQUFBLElBQUE1ZSxFQUFBUSxFQUFBMk0sRUFBQSx3QkFBQXlSLEdBQUEsSUFBQTVlLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBeVIsR0FBQSxJQUFBNWUsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUF5UixHQUFBLFFBQUFDLEdBQUE3ZSxFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBMFIsR0FBQSxJQUFBN2UsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUEwUixHQUFBLElBQUE3ZSxFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQTBSLEdBQUEsSUFBQTdlLEVBQUFRLEVBQUEyTSxFQUFBLDBDQUFBMFIsR0FBQSxJQUFBN2UsRUFBQVEsRUFBQTJNLEVBQUEsMkJBQUEwUixHQUFBLElBQUE3ZSxFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQTBSLEdBQUEsUUFBQUMsR0FBQTllLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUEyUixHQUFBLElBQUE5ZSxFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQTJSLEdBQUEsSUFBQTllLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBMlIsR0FBQSxRQUFBQyxHQUFBL2UsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQTRSLEdBQUEsSUFBQS9lLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBNFIsR0FBQSxJQUFBL2UsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUE0UixHQUFBLElBQUEvZSxFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQTRSLEdBQUEsSUFBQS9lLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBNFIsR0FBQSxJQUFBL2UsRUFBQVEsRUFBQTJNLEVBQUEsMEJBQUE0UixHQUFBLElBQUEvZSxFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQTRSLEdBQUEsSUFBQS9lLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBNFIsR0FBQSxJQUFBL2UsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUE0UixHQUFBLElBQUEvZSxFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQTRSLEdBQUEsUUFBQUMsR0FBQWhmLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsd0NBQUE2UixHQUFBLElBQUFoZixFQUFBUSxFQUFBMk0sRUFBQSx5Q0FBQTZSLEdBQUEsSUFBQWhmLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBNlIsR0FBQSxJQUFBaGYsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUE2UixHQUFBLElBQUFoZixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQTZSLEdBQUEsSUFBQWhmLEVBQUFRLEVBQUEyTSxFQUFBLHlCQUFBNlIsR0FBQSxJQUFBaGYsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUE2UixHQUFBLFFBQUFDLEdBQUFqZixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBOFIsR0FBQSxJQUFBamYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUE4UixHQUFBLElBQUFqZixFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQThSLEdBQUEsSUFBQWpmLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBOFIsR0FBQSxJQUFBamYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUE4UixHQUFBLElBQUFqZixFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQThSLEdBQUEsSUFBQWpmLEVBQUFRLEVBQUEyTSxFQUFBLHlCQUFBOFIsR0FBQSxJQUFBamYsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUE4UixHQUFBLElBQUFqZixFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQThSLEdBQUEsSUFBQWpmLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBOFIsR0FBQSxJQUFBamYsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUE4UixHQUFBLFFBQUFDLEdBQUFsZixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBK1IsR0FBQSxJQUFBbGYsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUErUixHQUFBLElBQUFsZixFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQStSLEdBQUEsSUFBQWxmLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBK1IsR0FBQSxJQUFBbGYsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUErUixHQUFBLElBQUFsZixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQStSLEdBQUEsSUFBQWxmLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBK1IsR0FBQSxJQUFBbGYsRUFBQVEsRUFBQTJNLEVBQUEsdUNBQUErUixHQUFBLElBQUFsZixFQUFBUSxFQUFBMk0sRUFBQSw2Q0FBQStSLEdBQUEsUUFBQUMsR0FBQW5mLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUFnUyxHQUFBLElBQUFuZixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQWdTLEdBQUEsSUFBQW5mLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBZ1MsR0FBQSxJQUFBbmYsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUFnUyxHQUFBLElBQUFuZixFQUFBUSxFQUFBMk0sRUFBQSx3Q0FBQWdTLEdBQUEsSUFBQW5mLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBZ1MsR0FBQSxJQUFBbmYsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFnUyxHQUFBLElBQUFuZixFQUFBUSxFQUFBMk0sRUFBQSx3QkFBQWdTLEdBQUEsSUFBQW5mLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBZ1MsR0FBQSxJQUFBbmYsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUFnUyxHQUFBLFFBQUFDLEdBQUFwZixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBaVMsR0FBQSxJQUFBcGYsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFpUyxHQUFBLElBQUFwZixFQUFBUSxFQUFBMk0sRUFBQSw2QkFBQWlTLEdBQUEsSUFBQXBmLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBaVMsR0FBQSxJQUFBcGYsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUFpUyxHQUFBLElBQUFwZixFQUFBUSxFQUFBMk0sRUFBQSw2QkFBQWlTLEdBQUEsSUFBQXBmLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBaVMsR0FBQSxJQUFBcGYsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUFpUyxHQUFBLElBQUFwZixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQWlTLEdBQUEsUUFBQUMsR0FBQXJmLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsNENBQUFrUyxHQUFBLElBQUFyZixFQUFBUSxFQUFBMk0sRUFBQSw4Q0FBQWtTLEdBQUEsSUFBQXJmLEVBQUFRLEVBQUEyTSxFQUFBLHVDQUFBa1MsR0FBQSxJQUFBcmYsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFrUyxHQUFBLElBQUFyZixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQWtTLEdBQUEsSUFBQXJmLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBa1MsR0FBQSxJQUFBcmYsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFrUyxHQUFBLElBQUFyZixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQWtTLEdBQUEsSUFBQXJmLEVBQUFRLEVBQUEyTSxFQUFBLHdDQUFBa1MsR0FBQSxJQUFBcmYsRUFBQVEsRUFBQTJNLEVBQUEsMENBQUFrUyxHQUFBLElBQUFyZixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQWtTLEdBQUEsSUFBQXJmLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBa1MsR0FBQSxJQUFBcmYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFrUyxHQUFBLElBQUFyZixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQWtTLEdBQUEsSUFBQXJmLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBa1MsR0FBQSxJQUFBcmYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFrUyxHQUFBLElBQUFyZixFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQWtTLEdBQUEsSUFBQXJmLEVBQUFRLEVBQUEyTSxFQUFBLDJCQUFBa1MsR0FBQSxJQUFBcmYsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUFrUyxHQUFBLFFBQUFDLEdBQUF0ZixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBbVMsR0FBQSxJQUFBdGYsRUFBQVEsRUFBQTJNLEVBQUEsc0NBQUFtUyxHQUFBLElBQUF0ZixFQUFBUSxFQUFBMk0sRUFBQSx3Q0FBQW1TLEdBQUEsSUFBQXRmLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBbVMsR0FBQSxJQUFBdGYsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFtUyxHQUFBLElBQUF0ZixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQW1TLEdBQUEsSUFBQXRmLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBbVMsR0FBQSxJQUFBdGYsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUFtUyxHQUFBLElBQUF0ZixFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQW1TLEdBQUEsSUFBQXRmLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBbVMsR0FBQSxJQUFBdGYsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUFtUyxHQUFBLElBQUF0ZixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQW1TLEdBQUEsSUFBQXRmLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBbVMsR0FBQSxRQUFBQyxHQUFBdmYsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQW9TLEdBQUEsSUFBQXZmLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBb1MsR0FBQSxJQUFBdmYsRUFBQVEsRUFBQTJNLEVBQUEsc0NBQUFvUyxHQUFBLElBQUF2ZixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQW9TLEdBQUEsSUFBQXZmLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBb1MsR0FBQSxJQUFBdmYsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUFvUyxHQUFBLElBQUF2ZixFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQW9TLEdBQUEsSUFBQXZmLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBb1MsR0FBQSxJQUFBdmYsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFvUyxHQUFBLElBQUF2ZixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQW9TLEdBQUEsSUFBQXZmLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBb1MsR0FBQSxJQUFBdmYsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUFvUyxHQUFBLElBQUF2ZixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQW9TLEdBQUEsSUFBQXZmLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBb1MsR0FBQSxJQUFBdmYsRUFBQVEsRUFBQTJNLEVBQUEsMEJBQUFvUyxHQUFBLElBQUF2ZixFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQW9TLEdBQUEsUUFBQUMsR0FBQXhmLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUFxUyxHQUFBLElBQUF4ZixFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQXFTLEdBQUEsSUFBQXhmLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBcVMsR0FBQSxJQUFBeGYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFxUyxHQUFBLElBQUF4ZixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXFTLEdBQUEsSUFBQXhmLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBcVMsR0FBQSxJQUFBeGYsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFxUyxHQUFBLElBQUF4ZixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQXFTLEdBQUEsSUFBQXhmLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBcVMsR0FBQSxRQUFBQyxHQUFBemYsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQXNTLEdBQUEsSUFBQXpmLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBc1MsR0FBQSxJQUFBemYsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUFzUyxHQUFBLElBQUF6ZixFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQXNTLEdBQUEsSUFBQXpmLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBc1MsR0FBQSxJQUFBemYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFzUyxHQUFBLFFBQUFDLEdBQUExZixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBdVMsR0FBQSxJQUFBMWYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUF1UyxHQUFBLElBQUExZixFQUFBUSxFQUFBMk0sRUFBQSxzQ0FBQXVTLEdBQUEsSUFBQTFmLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBdVMsR0FBQSxJQUFBMWYsRUFBQVEsRUFBQTJNLEVBQUEsdUNBQUF1UyxHQUFBLElBQUExZixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQXVTLEdBQUEsSUFBQTFmLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBdVMsR0FBQSxJQUFBMWYsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUF1UyxHQUFBLElBQUExZixFQUFBUSxFQUFBMk0sRUFBQSwwQkFBQXVTLEdBQUEsSUFBQTFmLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBdVMsR0FBQSxRQUFBQyxHQUFBM2YsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw0QkFBQXdTLEdBQUEsSUFBQTNmLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBd1MsR0FBQSxJQUFBM2YsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUF3UyxHQUFBLElBQUEzZixFQUFBUSxFQUFBMk0sRUFBQSx3Q0FBQXdTLEdBQUEsSUFBQTNmLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBd1MsR0FBQSxJQUFBM2YsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUF3UyxHQUFBLElBQUEzZixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQXdTLEdBQUEsSUFBQTNmLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBd1MsR0FBQSxJQUFBM2YsRUFBQVEsRUFBQTJNLEVBQUEsd0NBQUF3UyxHQUFBLElBQUEzZixFQUFBUSxFQUFBMk0sRUFBQSx3QkFBQXdTLEdBQUEsSUFBQTNmLEVBQUFRLEVBQUEyTSxFQUFBLHdCQUFBd1MsR0FBQSxJQUFBM2YsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUF3UyxHQUFBLElBQUEzZixFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQXdTLEdBQUEsSUFBQTNmLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBd1MsR0FBQSxJQUFBM2YsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUF3UyxHQUFBLElBQUEzZixFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQXdTLEdBQUEsSUFBQTNmLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBd1MsR0FBQSxRQUFBQyxHQUFBNWYsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxxQ0FBQXlTLEdBQUEsSUFBQTVmLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBeVMsR0FBQSxJQUFBNWYsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUF5UyxHQUFBLElBQUE1ZixFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQXlTLEdBQUEsSUFBQTVmLEVBQUFRLEVBQUEyTSxFQUFBLDJCQUFBeVMsR0FBQSxJQUFBNWYsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUF5UyxHQUFBLFFBQUFDLEdBQUE3ZixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBMFMsR0FBQSxJQUFBN2YsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUEwUyxHQUFBLElBQUE3ZixFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQTBTLEdBQUEsSUFBQTdmLEVBQUFRLEVBQUEyTSxFQUFBLHdDQUFBMFMsR0FBQSxJQUFBN2YsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUEwUyxHQUFBLElBQUE3ZixFQUFBUSxFQUFBMk0sRUFBQSwwQkFBQTBTLEdBQUEsSUFBQTdmLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBMFMsR0FBQSxJQUFBN2YsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUEwUyxHQUFBLElBQUE3ZixFQUFBUSxFQUFBMk0sRUFBQSxxQ0FBQTBTLEdBQUEsSUFBQTdmLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBMFMsR0FBQSxJQUFBN2YsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUEwUyxHQUFBLElBQUE3ZixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQTBTLEdBQUEsUUFBQUMsR0FBQTlmLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUEyUyxHQUFBLElBQUE5ZixFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQTJTLEdBQUEsSUFBQTlmLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBMlMsR0FBQSxJQUFBOWYsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUEyUyxHQUFBLElBQUE5ZixFQUFBUSxFQUFBMk0sRUFBQSxvQ0FBQTJTLEdBQUEsSUFBQTlmLEVBQUFRLEVBQUEyTSxFQUFBLDJCQUFBMlMsR0FBQSxJQUFBOWYsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUEyUyxHQUFBLElBQUE5ZixFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQTJTLEdBQUEsSUFBQTlmLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBMlMsR0FBQSxJQUFBOWYsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUEyUyxHQUFBLFFBQUFDLEdBQUEvZixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBNFMsR0FBQSxJQUFBL2YsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUE0UyxHQUFBLElBQUEvZixFQUFBUSxFQUFBMk0sRUFBQSx1Q0FBQTRTLEdBQUEsSUFBQS9mLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBNFMsR0FBQSxJQUFBL2YsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUE0UyxHQUFBLElBQUEvZixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQTRTLEdBQUEsSUFBQS9mLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBNFMsR0FBQSxJQUFBL2YsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUE0UyxHQUFBLElBQUEvZixFQUFBUSxFQUFBMk0sRUFBQSxtQ0FBQTRTLEdBQUEsSUFBQS9mLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBNFMsR0FBQSxJQUFBL2YsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUE0UyxHQUFBLElBQUEvZixFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQTRTLEdBQUEsSUFBQS9mLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBNFMsR0FBQSxJQUFBL2YsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUE0UyxHQUFBLElBQUEvZixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQTRTLEdBQUEsSUFBQS9mLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBNFMsR0FBQSxRQUFBQyxHQUFBaGdCLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUE2UyxHQUFBLElBQUFoZ0IsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUE2UyxHQUFBLElBQUFoZ0IsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUE2UyxHQUFBLElBQUFoZ0IsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUE2UyxHQUFBLElBQUFoZ0IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUE2UyxHQUFBLElBQUFoZ0IsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUE2UyxHQUFBLElBQUFoZ0IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUE2UyxHQUFBLElBQUFoZ0IsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUE2UyxHQUFBLFFBQUFDLEdBQUFqZ0IsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQThTLEdBQUEsSUFBQWpnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQThTLEdBQUEsSUFBQWpnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQThTLEdBQUEsSUFBQWpnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQThTLEdBQUEsUUFBQUMsR0FBQWxnQixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLDJCQUFBK1MsR0FBQSxJQUFBbGdCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBK1MsR0FBQSxJQUFBbGdCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBK1MsR0FBQSxJQUFBbGdCLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBK1MsR0FBQSxRQUFBQyxHQUFBbmdCLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsc0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsdUNBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsbUNBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsNkJBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsNEJBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsd0JBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsa0NBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFnVCxHQUFBLElBQUFuZ0IsRUFBQVEsRUFBQTJNLEVBQUEsMEJBQUFnVCxHQUFBLFFBQUFDLEdBQUFwZ0IsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQWlULEdBQUEsSUFBQXBnQixFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQWlULEdBQUEsSUFBQXBnQixFQUFBUSxFQUFBMk0sRUFBQSw0QkFBQWlULEdBQUEsUUFBQUMsR0FBQXJnQixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLHVDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLHFDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLDhDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLDRDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLDRDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLG9DQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLDBDQUFBa1QsR0FBQSxJQUFBcmdCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBa1QsR0FBQSxRQUFBQyxHQUFBdGdCLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFtVCxHQUFBLElBQUF0Z0IsRUFBQVEsRUFBQTJNLEVBQUEsb0NBQUFtVCxHQUFBLElBQUF0Z0IsRUFBQVEsRUFBQTJNLEVBQUEscUNBQUFtVCxHQUFBLElBQUF0Z0IsRUFBQVEsRUFBQTJNLEVBQUEsMkJBQUFtVCxHQUFBLElBQUF0Z0IsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUFtVCxHQUFBLElBQUF0Z0IsRUFBQVEsRUFBQTJNLEVBQUEsaUNBQUFtVCxHQUFBLFFBQUFDLEdBQUF2Z0IsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQW9ULEdBQUEsSUFBQXZnQixFQUFBUSxFQUFBMk0sRUFBQSw2QkFBQW9ULEdBQUEsUUFBQUMsR0FBQXhnQixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBcVQsR0FBQSxJQUFBeGdCLEVBQUFRLEVBQUEyTSxFQUFBLHNDQUFBcVQsR0FBQSxJQUFBeGdCLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBcVQsR0FBQSxJQUFBeGdCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBcVQsR0FBQSxJQUFBeGdCLEVBQUFRLEVBQUEyTSxFQUFBLDBCQUFBcVQsR0FBQSxJQUFBeGdCLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBcVQsR0FBQSxJQUFBeGdCLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBcVQsR0FBQSxJQUFBeGdCLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBcVQsR0FBQSxRQUFBQyxHQUFBemdCLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsOEJBQUFzVCxHQUFBLElBQUF6Z0IsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFzVCxHQUFBLElBQUF6Z0IsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUFzVCxHQUFBLElBQUF6Z0IsRUFBQVEsRUFBQTJNLEVBQUEsMEJBQUFzVCxHQUFBLFFBQUFDLEdBQUExZ0IsRUFBQSxJQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSw4QkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSwyQkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSxnQ0FBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSw2QkFBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSxpQ0FBQXVULEdBQUEsSUFBQTFnQixFQUFBUSxFQUFBMk0sRUFBQSxrQ0FBQXVULEdBQUEsUUFBQUMsR0FBQTNnQixFQUFBLElBQUFBLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLDRCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLHlDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLHVDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGdDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGlDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLDZCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLDhCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLCtCQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLGtDQUFBd1QsR0FBQSxJQUFBM2dCLEVBQUFRLEVBQUEyTSxFQUFBLG1DQUFBd1QsR0FBQSxRQUFBQyxHQUFBNWdCLEVBQUEsSUFBQUEsRUFBQVEsRUFBQTJNLEVBQUEsK0JBQUF5VCxHQUFBLElBQUE1Z0IsRUFBQVEsRUFBQTJNLEVBQUEsZ0NBQUF5VCxHQUFBLElBQUE1Z0IsRUFBQVEsRUFBQTJNLEVBQUEsMkJBQUF5VCxHQUFBLFFBQUFDLEdBQUE3Z0IsRUFBQSxLQUFBQSxFQUFBUSxFQUFBMk0sRUFBQSxxQ0FBQTBULEdBQUEsSUFBQTdnQixFQUFBUSxFQUFBMk0sRUFBQSwrQkFBQTBULEdBQUEsSUFBQTdnQixFQUFBUSxF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LEVBQUFqNUYsRUFBQWk1RixFQUFBcjNGLEVBQUFxM0YsRUFBQTMxRixHQUVBMjFGLEVBQUFNLE1BQ0FOLEVBQUFNLElBQUFOLEVBQUFHLEtBQUFILEVBQUFLLFNBQUFMLEVBQUFpRixVQUFBakYsRUFBQU8sU0FFQVAsSUFLa0MvNUYsRUFBQWsxRiIsImZpbGUiOiJkYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImRhXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImRhXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDYpO1xuIiwiIWZ1bmN0aW9uKHIsbil7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9bigpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sbik6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5kcmF3cG9pbnQ9bigpOnIuZHJhd3BvaW50PW4oKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihyKXtmdW5jdGlvbiBuKGUpe2lmKHRbZV0pcmV0dXJuIHRbZV0uZXhwb3J0czt2YXIgbz10W2VdPXtpOmUsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gcltlXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxuKSxvLmw9ITAsby5leHBvcnRzfXZhciB0PXt9O3JldHVybiBuLm09cixuLmM9dCxuLmk9ZnVuY3Rpb24ocil7cmV0dXJuIHJ9LG4uZD1mdW5jdGlvbihyLHQsZSl7bi5vKHIsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDplfSl9LG4ubj1mdW5jdGlvbihyKXt2YXIgdD1yJiZyLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gci5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiByfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKHIsbil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLG4pfSxuLnA9XCIvXCIsbihuLnM9NSl9KFtmdW5jdGlvbihyLG4sdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZShyKXtpZihBcnJheS5pc0FycmF5KHIpKXtmb3IodmFyIG49MCx0PUFycmF5KHIubGVuZ3RoKTtuPHIubGVuZ3RoO24rKyl0W25dPXJbbl07cmV0dXJuIHR9cmV0dXJuIEFycmF5LmZyb20ocil9ZnVuY3Rpb24gbyhyLG4pe3JldHVybnt4OnIseTpufX1mdW5jdGlvbiB1KHIpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkobj4xP24tMTowKSx1PTE7dTxuO3UrKyl0W3UtMV09YXJndW1lbnRzW3VdO3JldHVybiBvKHIuYXBwbHkodm9pZCAwLGUodC5tYXAoZnVuY3Rpb24ocil7cmV0dXJuIHIueH0pKSksci5hcHBseSh2b2lkIDAsZSh0Lm1hcChmdW5jdGlvbihyKXtyZXR1cm4gci55fSkpKSl9ZnVuY3Rpb24gYyhyLG4pe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxO3JldHVybiB1KGZ1bmN0aW9uKHIsbil7cmV0dXJuIHIrbip0fSxyLG4pfWZ1bmN0aW9uIGkocixuKXtyZXR1cm4gdShmdW5jdGlvbihyLG4pe3JldHVybiBuLXJ9LHIsbil9ZnVuY3Rpb24gYShyKXtyZXR1cm4gTWF0aC5zcXJ0KHIueCpyLngrci55KnIueSl9ZnVuY3Rpb24gZihyKXtyZXR1cm4gTWF0aC5hdGFuMihyLnksci54KX1mdW5jdGlvbiBwKHIsbil7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOmc7cmV0dXJuIGModCxpKHQsciksbil9ZnVuY3Rpb24gbChyKXt2YXIgbj1hKHIpO3JldHVybiB1KGZ1bmN0aW9uKHIpe3JldHVybiByL259LHIpfWZ1bmN0aW9uIHkocil7cmV0dXJuIGwobygtci55LHIueCkpfWZ1bmN0aW9uIGQocil7cmV0dXJuIG8oci54LHIueSl9ZnVuY3Rpb24gdihyKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MS8wLHQ9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjA7aWYoIXIpcmV0dXJuIHI7dmFyIGU9dm9pZCAwLHU9dm9pZCAwO3JldHVybiBuPT09MS8wPyhlPTAsdT0wLHQ9ci55KTooZT0oci54KyhyLnktdCkqbikvKDErbipuKSx1PWUqbiksbygyKmUtci54LDIqdS1yLnkrMip0KX1mdW5jdGlvbiBzKHIsbix0KXtpZighcilyZXR1cm4gcjt2YXIgZT1vKHIueCtuLHIueSt0KTtyZXR1cm4gci5jcDEmJihlLmNwMT1vKHIuY3AxLngrbixyLmNwMS55K3QpKSxyLmNwMiYmKGUuY3AyPW8oci5jcDIueCtuLHIuY3AyLnkrdCkpLGV9ZnVuY3Rpb24geChyLG4pe2Zvcih2YXIgdD1bXSxlPWFyZ3VtZW50cy5sZW5ndGgsbz1BcnJheShlPjI/ZS0yOjApLHU9Mjt1PGU7dSsrKW9bdS0yXT1hcmd1bWVudHNbdV07cmV0dXJuIG8uZm9yRWFjaChmdW5jdGlvbihlKXt0LnB1c2gocyhlLHIsbikpfSksdH1mdW5jdGlvbiBoKHIsbil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1BcnJheSh0PjI/dC0yOjApLG89MjtvPHQ7bysrKWVbby0yXT1hcmd1bWVudHNbb107ZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKHQmJiExIT09dC5oYXNPd25Qcm9wZXJ0eShcInhcIikpe3ZhciBlPXAodCxuLHIpLG89ZS54LHU9ZS55O3QueD1vLHQueT11LHQuY3AxJiYodC5jcDE9cCh0LmNwMSxuLHIpKSx0LmNwMiYmKHQuY3AyPXAodC5jcDIsbixyKSl9fSl9ZnVuY3Rpb24gUChyLG4pe2Zvcih2YXIgdD1NYXRoLmNvcyhuKSxlPU1hdGguc2luKG4pLG89YXJndW1lbnRzLmxlbmd0aCx1PUFycmF5KG8+Mj9vLTI6MCksYz0yO2M8bztjKyspdVtjLTJdPWFyZ3VtZW50c1tjXTt1LmZvckVhY2goZnVuY3Rpb24obil7biYmITEhPT1uLmhhc093blByb3BlcnR5KFwieFwiKSYmKGIocixuLGUsdCksbi5jcDEmJmIocixuLmNwMSxlLHQpLG4uY3AyJiZiKHIsbi5jcDIsZSx0KSl9KX1mdW5jdGlvbiBiKHIsbix0LGUpe3ZhciBvPWkocixuKSx1PW8ueCplLW8ueSp0LGM9by54KnQrby55KmU7bi54PXIueCt1LG4ueT1yLnkrY31PYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxuLnBvaW50PW8sbi5tYWtlUG9pbnQ9dSxuLmFkZD1jLG4uZGlmZj1pLG4ubm9ybT1hLG4uYW5nbGU9ZixuLnNjYWxlPXAsbi5nZXRVbml0VmVjdG9yPWwsbi5nZXRQZXJwZW5kaWN1bGFyVmVjdG9yPXksbi5leHRyYWN0UG9pbnQ9ZCxuLnJlZmxlY3Q9dixuLmFkanVzdD1zLG4uYWRqdXN0UG9pbnRzPXgsbi5zY2FsZVBvaW50cz1oLG4ucm90YXRlUG9pbnRzPVA7dmFyIGc9bi5vcmlnaW49T2JqZWN0LmZyZWV6ZShvKDAsMCkpO24uYnJlYWtQb2ludD1PYmplY3QuZnJlZXplKHticmVhazohMH0pLG4uZW5kUG9pbnQ9T2JqZWN0LmZyZWV6ZSh7ZW5kOiEwfSl9LGZ1bmN0aW9uKHIsbix0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHIpe2lmKEFycmF5LmlzQXJyYXkocikpe2Zvcih2YXIgbj0wLHQ9QXJyYXkoci5sZW5ndGgpO248ci5sZW5ndGg7bisrKXRbbl09cltuXTtyZXR1cm4gdH1yZXR1cm4gQXJyYXkuZnJvbShyKX1mdW5jdGlvbiBvKHIsbix0KXt2YXIgZT10LmxpbmVhcixvPXQucXVhZHJhdGljLHU9dC5jdWJpYyxjPSgwLGsuZXh0cmFjdFBvaW50KShyKSxpPSgwLGsuZXh0cmFjdFBvaW50KShuKTtpZihuLmNwMSYmbi5jcDIpcmV0dXJuIHUoYyxuLmNwMSxuLmNwMixpKTt2YXIgYT1uLmNwMXx8bi5jcDI7cmV0dXJuIGE/byhjLGEsaSk6ZShjLGkpfWZ1bmN0aW9uIHUocixuLHQpe3JldHVybiBvKG4sdCx7bGluZWFyOmZ1bmN0aW9uKCl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShuKSxlPTA7ZTxuO2UrKyl0W2VdPWFyZ3VtZW50c1tlXTtyZXR1cm4gYy5hcHBseSh2b2lkIDAsW3JdLmNvbmNhdCh0KSl9LHF1YWRyYXRpYzpmdW5jdGlvbigpe2Zvcih2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHQ9QXJyYXkobiksZT0wO2U8bjtlKyspdFtlXT1hcmd1bWVudHNbZV07cmV0dXJuIGsubWFrZVBvaW50LmFwcGx5KHZvaWQgMCxbYS5iaW5kKG51bGwscildLmNvbmNhdCh0KSl9LGN1YmljOmZ1bmN0aW9uKCl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShuKSxlPTA7ZTxuO2UrKyl0W2VdPWFyZ3VtZW50c1tlXTtyZXR1cm4gay5tYWtlUG9pbnQuYXBwbHkodm9pZCAwLFtmLmJpbmQobnVsbCxyKV0uY29uY2F0KHQpKX19KX1mdW5jdGlvbiBjKHIsbix0KXtyZXR1cm4oMCxrLm1ha2VQb2ludCkoaS5iaW5kKG51bGwsciksbix0KX1mdW5jdGlvbiBpKHIsbix0KXtyZXR1cm4gcioodC1uKStufWZ1bmN0aW9uIGEocixuLHQsZSl7cmV0dXJuKG4rZS0yKnQpKnIqcisyKih0LW4pKnIrbn1mdW5jdGlvbiBmKHIsbix0LGUsbyl7cmV0dXJuIG4qKDEtcikqKDEtcikqKDEtcikrMyp0KigxLXIpKigxLXIpKnIrMyplKigxLXIpKnIqcitvKnIqcipyfWZ1bmN0aW9uIHAocixuLHQsZSxvKXt2YXIgdT1jKHIsbix0KSxpPWMocix0LGUpLGE9YyhyLGUsbyksZj1jKHIsdSxpKSxwPWMocixpLGEpLGw9YyhyLGYscCkseT17cDE6bixwMjpsfTt5LnAyLmNwMT11LHkucDIuY3AyPWY7dmFyIGQ9e3AxOigwLGsuZXh0cmFjdFBvaW50KShsKSxwMjpvfTtyZXR1cm4gZC5wMi5jcDE9cCxkLnAyLmNwMj1hLHtsZWZ0OnkscmlnaHQ6ZH19ZnVuY3Rpb24gbChyLG4sdCxlKXt2YXIgbz1jKHIsbix0KSx1PWMocix0LGUpLGk9YyhyLG8sdSksYT17cDE6bixwMjppfTthLnAyLmNwMT1vO3ZhciBmPXtwMTooMCxrLmV4dHJhY3RQb2ludCkoaSkscDI6ZX07cmV0dXJuIGYucDIuY3AxPXUse2xlZnQ6YSxyaWdodDpmfX1mdW5jdGlvbiB5KHIsbix0KXt2YXIgZT1jKHIsbix0KTtyZXR1cm57bGVmdDp7cDE6bixwMjplfSxyaWdodDp7cDE6ZSxwMjp0fX19ZnVuY3Rpb24gZChyLG4sdCl7cmV0dXJuIG8obix0LHtsaW5lYXI6eS5iaW5kKG51bGwscikscXVhZHJhdGljOmwuYmluZChudWxsLHIpLGN1YmljOnAuYmluZChudWxsLHIpfSl9ZnVuY3Rpb24gdihyLG4sdCl7cmV0dXJuIG49PT1yP1tdOlsodC1yKS8obi1yKV19ZnVuY3Rpb24gcyhyLG4sdCl7dmFyIGU9bipuLTQqcip0O3JldHVybiBlPDA/W106WygtbitNYXRoLnNxcnQoZSkpLygyKnIpLCgtbi1NYXRoLnNxcnQoZSkpLygyKnIpXX1mdW5jdGlvbiB4KHIsbix0LGUpe3JldHVybiBzKHItMipuK3QsMioobi1yKSxyLWUpfWZ1bmN0aW9uIGgocil7cmV0dXJuIHI8MD8tTWF0aC5wb3coLXIsMS8zKTpNYXRoLnBvdyhyLDEvMyl9ZnVuY3Rpb24gUChyLG4sdCl7dmFyIGU9ci8zLG89KDMqbi1yKnIpLzMsdT1vLzMsYz0oMipyKnIqci05KnIqbisyNyp0KS8yNyxpPWMvMixhPSgwLEMucm91bmRUb0RlYykoaSppK3UqdSp1LDgpO2lmKGE+MCl7dmFyIGY9TWF0aC5zcXJ0KGEpO3JldHVybltoKC1pK2YpLWgoaStmKS1lXX1pZigwPT09YSl7dmFyIHA9aCgtaSk7cmV0dXJuWzIqcC1lLC1wLWVdfXZhciBsPU1hdGguc3FydCgtdSp1KnUpLHk9LWkvbDt5PC0xP3k9LTE6eT4xJiYoeT0xKTt2YXIgZD1NYXRoLmFjb3MoeSksdj0yKmgobCk7cmV0dXJuW3YqTWF0aC5jb3MoZC8zKS1lLHYqTWF0aC5jb3MoKGQrMipNYXRoLlBJKS8zKS1lLHYqTWF0aC5jb3MoKGQrNCpNYXRoLlBJKS8zKS1lXX1mdW5jdGlvbiBiKHIsbix0LGUsbyl7ci09byxuLT1vLHQtPW8sZS09bzt2YXIgdT0zKm4tci0zKnQrZTtyZXR1cm4gUCgoMypyLTYqbiszKnQpL3UsKC0zKnIrMypuKS91LHIvdSkubWFwKGZ1bmN0aW9uKHIpe3JldHVybigwLEMucm91bmRUb0RlYykociw0KX0pfWZ1bmN0aW9uIGcocixuLHQpe3ZhciBjPXZvaWQgMDtpZihudWxsPT09dC54KWM9XCJ5XCI7ZWxzZXtpZihudWxsIT09dC55KXJldHVybltdO2M9XCJ4XCJ9cmV0dXJuIG8ocixuLHtsaW5lYXI6ZnVuY3Rpb24oKXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCxuPUFycmF5KHIpLG89MDtvPHI7bysrKW5bb109YXJndW1lbnRzW29dO3JldHVybiB2LmFwcGx5KHZvaWQgMCxlKG4ubWFwKGZ1bmN0aW9uKHIpe3JldHVybiByW2NdfSkpLmNvbmNhdChbdFtjXV0pKX0scXVhZHJhdGljOmZ1bmN0aW9uKCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShyKSxvPTA7bzxyO28rKyluW29dPWFyZ3VtZW50c1tvXTtyZXR1cm4geC5hcHBseSh2b2lkIDAsZShuLm1hcChmdW5jdGlvbihyKXtyZXR1cm4gcltjXX0pKS5jb25jYXQoW3RbY11dKSl9LGN1YmljOmZ1bmN0aW9uKCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsbj1BcnJheShyKSxvPTA7bzxyO28rKyluW29dPWFyZ3VtZW50c1tvXTtyZXR1cm4gYi5hcHBseSh2b2lkIDAsZShuLm1hcChmdW5jdGlvbihyKXtyZXR1cm4gcltjXX0pKS5jb25jYXQoW3RbY11dKSl9fSkuZmlsdGVyKGZ1bmN0aW9uKHIpe3JldHVybihyPSgwLEMucm91bmRUb0RlYykociwzKSk+PTAmJnI8PTF9KS5tYXAoZnVuY3Rpb24odCl7dmFyIGU9dSh0LHIsbik7cmV0dXJuIGUudD10LGV9KX1mdW5jdGlvbiBPKHIsbil7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOi41LGU9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOjAsbz1jKHQscixuKTtyZXR1cm4oMCxrLmFkZCkobywoMCxrLmdldFBlcnBlbmRpY3VsYXJWZWN0b3IpKCgwLGsuZGlmZikocixuKSksZSl9ZnVuY3Rpb24gbShyLG4pe3ZhciB0PVtyXTtmb3IodmFyIGUgaW4gbillLnN0YXJ0c1dpdGgoXCJjcFwiKSYmbi5oYXNPd25Qcm9wZXJ0eShlKSYmdC5wdXNoKG5bZV0pO3QucHVzaCgoMCxrLmV4dHJhY3RQb2ludCkobikpO2Zvcih2YXIgbz0oMCxrLmV4dHJhY3RQb2ludCkobiksdT0xLGM9dC5sZW5ndGg7dTxjOysrdSkhZnVuY3Rpb24ocixuKXt2YXIgZT1yL247b1tcImNwXCIrcl09KDAsay5tYWtlUG9pbnQpKGZ1bmN0aW9uKHIsbil7cmV0dXJuIGUqcisoMS1lKSpufSx0W3ItMV0sdFtyXSl9KHUsYyk7cmV0dXJuIG99ZnVuY3Rpb24gTShyLG4pe3JldHVybiBvKHIsbix7bGluZWFyOmZ1bmN0aW9uKCl7dmFyIHQ9bShyLG0ocixuKSk7cmV0dXJuW3QuY3AxLHQuY3AyXX0scXVhZHJhdGljOmZ1bmN0aW9uKCl7dmFyIHQ9bShyLG4pO3JldHVyblt0LmNwMSx0LmNwMl19LGN1YmljOmZ1bmN0aW9uKCl7cmV0dXJuW24uY3AxLG4uY3AyXX19KX1mdW5jdGlvbiBqKHIsbix0LGUpe2lmKCF0KXJldHVybiBlO2lmKCFlKXJldHVybiB0O3ZhciBvPU0obix0KSx1PXcobywyKSxpPXVbMF0sYT11WzFdLGY9TShuLGUpLHA9dyhmLDIpLGw9cFswXSx5PXBbMV0sZD1jKHIsdCxlKTtyZXR1cm4gZC5jcDE9YyhyLGksbCksZC5jcDI9YyhyLGEseSksZH1mdW5jdGlvbiBfKHIsbil7cmV0dXJuIHImJm4/e3g6ci54LHk6ci55LGNwMTooMCxxLmNsb25lKShuLmNwMiksY3AyOigwLHEuY2xvbmUpKG4uY3AxKX06cn1mdW5jdGlvbiBBKHIsbil7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjE7cmV0dXJuIG8ocixuLHtsaW5lYXI6ZnVuY3Rpb24oKXtyZXR1cm4oMCxrLmFkZCkobiwoMCxrLmRpZmYpKHIsbiksdCl9LHF1YWRyYXRpYzpmdW5jdGlvbigpe3ZhciBlPW0ocixuKTtyZXR1cm4oMCxrLnNjYWxlKShlLmNwMiwtdCxuKX0sY3ViaWM6ZnVuY3Rpb24oKXtyZXR1cm4oMCxrLnNjYWxlKShuLmNwMiwtdCxuKX19KX1PYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgdz1mdW5jdGlvbigpe2Z1bmN0aW9uIHIocixuKXt2YXIgdD1bXSxlPSEwLG89ITEsdT12b2lkIDA7dHJ5e2Zvcih2YXIgYyxpPXJbU3ltYm9sLml0ZXJhdG9yXSgpOyEoZT0oYz1pLm5leHQoKSkuZG9uZSkmJih0LnB1c2goYy52YWx1ZSksIW58fHQubGVuZ3RoIT09bik7ZT0hMCk7fWNhdGNoKHIpe289ITAsdT1yfWZpbmFsbHl7dHJ5eyFlJiZpLnJldHVybiYmaS5yZXR1cm4oKX1maW5hbGx5e2lmKG8pdGhyb3cgdX19cmV0dXJuIHR9cmV0dXJuIGZ1bmN0aW9uKG4sdCl7aWYoQXJyYXkuaXNBcnJheShuKSlyZXR1cm4gbjtpZihTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KG4pKXJldHVybiByKG4sdCk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIil9fSgpO24uYXBwbHlUb0N1cnZlPW8sbi5nZXRQb2ludE9uQ3VydmU9dSxuLmdldFBvaW50T25MaW5lPWMsbi5zcGxpdEN1cnZlPWQsbi5pbnRlcnBvbGF0ZUN1cnZlPWcsbi5zaW1wbGVRdWFkcmF0aWM9TyxuLmVsZXZhdGVEZWdyZWU9bSxuLmdldEN1YmljQ29udHJvbFBvaW50cz1NLG4udHJhbnNmb3JtQ3VydmU9aixuLnJldmVyc2VEcmF3UG9pbnQ9XyxuLmNvbnRpbnVlQ3VydmU9QTt2YXIgaz10KDApLHE9dCgzKSxDPXQoMil9LGZ1bmN0aW9uKHIsbix0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKHIpe3JldHVybiAxODAqci9NYXRoLlBJfWZ1bmN0aW9uIG8ocil7cmV0dXJuIHIqTWF0aC5QSS8xODB9ZnVuY3Rpb24gdShyKXtmb3IoO3I+TWF0aC5QSTspci09MipNYXRoLlBJO2Zvcig7cjwtTWF0aC5QSTspcis9MipNYXRoLlBJO3JldHVybiByfWZ1bmN0aW9uIGMocixuLHQpe3JldHVybiByPG4/bjpyPnQ/dDpyfWZ1bmN0aW9uIGkocixuKXtyZXR1cm4gcGFyc2VGbG9hdChyLnRvRml4ZWQobikpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG4uZGVnPWUsbi5yYWQ9byxuLnVud3JhcFJhZD11LG4uY2xhbXA9YyxuLnJvdW5kVG9EZWM9aX0sZnVuY3Rpb24ocixuLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGUocil7cmV0dXJuIHI/SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyKSk6cn1mdW5jdGlvbiBvKHIsbil7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O3IuaGFzT3duUHJvcGVydHkobil8fChyW25dPXQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG4uY2xvbmU9ZSxuLmZpbGxlckRlZmluaXRpb249b30sZnVuY3Rpb24ocixuLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGUocil7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShuPjE/bi0xOjApLGU9MTtlPG47ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoISh0Lmxlbmd0aDwxKSl7dmFyIG89dFswXTtvJiYobz09PWkuYnJlYWtQb2ludCYmKG89dFsxXSksbyYmby5oYXNPd25Qcm9wZXJ0eShcInhcIikmJnIubW92ZVRvKG8ueCxvLnkpKTtmb3IodmFyIHU9MSxjPXQubGVuZ3RoO3U8YzsrK3Upe3ZhciBhPXRbdV07YSYmKGE9PT1pLmJyZWFrUG9pbnQ/Kyt1PHQubGVuZ3RoJiYoYT10W3VdLHIubW92ZVRvKGEueCxhLnkpKTphLmNwMiYmYS5jcDE/ci5iZXppZXJDdXJ2ZVRvKGEuY3AxLngsYS5jcDEueSxhLmNwMi54LGEuY3AyLnksYS54LGEueSxhLnRyYWNlT3B0aW9ucyk6YS5jcDE/ci5xdWFkcmF0aWNDdXJ2ZVRvKGEuY3AxLngsYS5jcDEueSxhLngsYS55LGEudHJhY2VPcHRpb25zKTphLmNwMj9yLnF1YWRyYXRpY0N1cnZlVG8oYS5jcDIueCxhLmNwMi55LGEueCxhLnksYS50cmFjZU9wdGlvbnMpOmEuaGFzT3duUHJvcGVydHkoXCJ4XCIpJiZyLmxpbmVUbyhhLngsYS55KSl9fX1mdW5jdGlvbiBvKHIsbil7dmFyIHQ9LjU1MjI4NDc0OTgzMSpuLGU9e3g6ci54LHk6ci55K259LG89e3g6ci54K24seTpyLnl9LHU9e3g6ci54LHk6ci55LW59LGM9e3g6ci54LW4seTpyLnl9O3JldHVybiBlLmNwMT17eDpjLngseTpjLnkrdH0sZS5jcDI9e3g6ZS54LXQseTplLnl9LG8uY3AxPXt4OmUueCt0LHk6ZS55fSxvLmNwMj17eDpvLngseTpvLnkrdH0sdS5jcDE9e3g6by54LHk6by55LXR9LHUuY3AyPXt4OnUueCt0LHk6dS55fSxjLmNwMT17eDp1LngtdCx5OnUueX0sYy5jcDI9e3g6Yy54LHk6Yy55LXR9LFtlLG8sdSxjLGVdfWZ1bmN0aW9uIHUocixuLHQpe3ZhciBlPSgwLGkuZXh0cmFjdFBvaW50KShyKSxvPSgwLGkuZXh0cmFjdFBvaW50KShuKSx1PSgwLGkuZXh0cmFjdFBvaW50KSh0KSxjPXIudCxmPXZvaWQgMD09PWM/LjU6YyxwPXIuZGVmbGVjdGlvbixsPXZvaWQgMD09PXA/LjU6cDtvLmNwMT0oMCxhLnNpbXBsZVF1YWRyYXRpYykoZSxvLGYsbCk7dmFyIHk9dC50LGQ9dm9pZCAwPT09eT8uNTp5LHY9dC5kZWZsZWN0aW9uLHM9dm9pZCAwPT09dj8uNTp2O3JldHVybiB1LmNwMT0oMCxhLnNpbXBsZVF1YWRyYXRpYykoZSxvLGQscyksW2Usbyx1XX1mdW5jdGlvbiBjKHIsbil7cmV0dXJuIG4/XCJudW1iZXJcIj09dHlwZW9mIG4mJihuPXtyYWRpdXM6bn0pOm49e3JhZGl1czoxfSxyLnRyYWNlT3B0aW9ucz17cG9pbnQ6bn0scn1PYmplY3QuZGVmaW5lUHJvcGVydHkobixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxuLm5vbmU9dm9pZCAwLG4uZHJhd1BvaW50cz1lLG4uZHJhd0NpcmNsZT1vLG4uZHJhd1NwZWNpZmljQ3VybD11LG4udHJhY2VQb2ludD1jO3ZhciBpPXQoMCksYT10KDEpO24ubm9uZT1cInJnYmEoMCwwLDAsMClcIn0sZnVuY3Rpb24ocixuLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBlPXQoMyk7T2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihyKXtcImRlZmF1bHRcIiE9PXImJlwiX19lc01vZHVsZVwiIT09ciYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4scix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZVtyXX19KX0pO3ZhciBvPXQoMik7T2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbihyKXtcImRlZmF1bHRcIiE9PXImJlwiX19lc01vZHVsZVwiIT09ciYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4scix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb1tyXX19KX0pO3ZhciB1PXQoMCk7T2JqZWN0LmtleXModSkuZm9yRWFjaChmdW5jdGlvbihyKXtcImRlZmF1bHRcIiE9PXImJlwiX19lc01vZHVsZVwiIT09ciYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4scix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdVtyXX19KX0pO3ZhciBjPXQoMSk7T2JqZWN0LmtleXMoYykuZm9yRWFjaChmdW5jdGlvbihyKXtcImRlZmF1bHRcIiE9PXImJlwiX19lc01vZHVsZVwiIT09ciYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4scix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY1tyXX19KX0pO3ZhciBpPXQoNCk7T2JqZWN0LmtleXMoaSkuZm9yRWFjaChmdW5jdGlvbihyKXtcImRlZmF1bHRcIiE9PXImJlwiX19lc01vZHVsZVwiIT09ciYmT2JqZWN0LmRlZmluZVByb3BlcnR5KG4scix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaVtyXX19KX0pfV0pfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcmF3cG9pbnQuanMubWFwIiwiaW1wb3J0IHtub25lLCBjbG9uZX0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5pbXBvcnQge2V4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24sIGV4dHJhY3RMb2NhdGlvbk1vZGlmaWVyLCBsb2NhdGlvbklzU2lkZWxlc3N9IGZyb20gXCIuLi91dGlsL3BhcnRcIjtcclxuaW1wb3J0IHtnZXRTaWRlTG9jYXRpb24sIGdldFNpZGVWYWx1ZX0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7c2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uL3V0aWwvZHJhd1wiO1xyXG5cclxuLyoqXHJcbiAqIFdoZXJlIGFsbCBDbG90aGluZyBhbmQgQ2xvdGhpbmdQYXJ0IHNob3VsZCBnb1xyXG4gKiBAbmFtZXNwYWNlIENsb3RoZXNcclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDbG90aGluZyBob2xkcyBzdGF0aXN0aWNzIGFuZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2xvdGhlcywgYnV0IG5vIGRyYXdpbmcgbWV0aG9kc1xyXG4gKiBJbnN0ZWFkLCBpdCBob2xkcyBDbG90aGluZ1BhcnRzIHRoYXQgZWFjaCBrbm93IGhvdyB0byBkcmF3IHRoZW1zZWx2ZXNcclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsb3RoaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGVmYXVsdCBwcm9wZXJ0aWVzIG9mIGV2ZXJ5IGNsb3RoaW5nIG9iamVjdFxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhLkNsb3RoZXMuTGF5ZXJ9IGNsb3RoaW5nTGF5ZXIgTGF5ZXIgcmVsYXRpdmUgdG8gb3RoZXIgY2xvdGhpbmcgKGhvdyBjbG9zZVxyXG4gICAgICAgICAqIGlzIHRoZSBjbG90aGluZyB0byB0aGUgc2tpbilcclxuICAgICAgICAgKiBAcHJvcGVydHkge29iamVjdFtdfSBwYXJ0UHJvdG90eXBlcyBQYWlycyBvZiBzaWRlIGFuZCBDbG90aGluZ1BhcnQgcHJvdG90eXBlc1xyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhLkxheWVyfSBwYXJ0UHJvdG90eXBlc1tdLnNpZGUgU2lkZSBvZiB0aGUgY2xvdGhpbmcgcGFydFxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhLkNsb3RoaW5nUGFydH0gcGFydFByb3RvdHlwZVtdLnBhcnQgQSBjbG90aGluZyBwYXJ0IHVzZWQgYnkgdGhpcyBjbG90aGluZ1xyXG4gICAgICAgICAqIEB0eXBlIHt7Y2xvdGhpbmdMYXllcjogbnVtYmVyLCBwYXJ0UHJvdG90eXBlczogQXJyYXl9fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLkJBU0UsXHJcbiAgICAgICAgICAgIHRoaWNrbmVzcyAgICA6IDEuMixcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFdoZXRoZXIgdGhpcyBwaWVjZSBvZiBjbG90aGluZyBleHBsaWNpdGx5IGRvZXMgbm90IGNvdmVyIHdoYXRldmVyIGlzIGJlbmVhdGggaXRcclxuICAgICAgICAgICAgICogZXZlbiB3aGVuIHRoZSBwYXJ0IGhhcyBjb3ZlckNvbmNlYWwgcG9wdWxhdGVkLiAoZS5nLiBoYWlyIGNsaXBzIHNob3VsZG4ndCBoaWRlXHJcbiAgICAgICAgICAgICAqIHRoZSBoYWlyIHBhcnRzIGl0cyBhdHRhY2hlZCB0bylcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIG5vQ292ZXIgICAgICA6IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIGFjdHVhbCBwYXJ0cyBzdG9yYWdlXHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IFtdO1xyXG5cclxuICAgICAgICAvLyBhcHBseSBzaWRlIGluZm9ybWF0aW9uXHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCAuLi5kYXRhKTtcclxuICAgICAgICB0aGlzLnNpZGUgPSBnZXRTaWRlVmFsdWUodGhpcy5zaWRlKTtcclxuXHJcbiAgICAgICAgLy8gcmVwbGFjZSBlYWNoIHBhcnQgKHByb3RvdHlwZSkgd2l0aCBhbiBhY3R1YWwgcGFydCBvYmplY3RcclxuICAgICAgICB0aGlzLnBhcnRQcm90b3R5cGVzLmZvckVhY2goKHBhcnRQYWlyKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB7c2lkZSwgUGFydH0gPSBwYXJ0UGFpcjtcclxuXHJcbiAgICAgICAgICAgIGxldCBwYXJ0RGF0YSA9IHt9O1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHBhcnREYXRhLCAuLi5kYXRhLm1hcChkID0+IGRbUGFydC5uYW1lXSkpO1xyXG4gICAgICAgICAgICAvLyBhbGxvdyBwYXNzaW5nIGRvd24gZGF0YSB0byBwYXJ0IGNyZWF0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IHRoaXNQYXJ0ID0gbmV3IFBhcnQocGFydERhdGEpO1xyXG4gICAgICAgICAgICAvLyBtaXhpbiBiZWhhdmlvdXIgYnkgYXNzdW1pbmcgYWxsIGNvbXBvbmVudCBwYXJ0J3MgcHJvcGVydGllc1xyXG4gICAgICAgICAgICAvLyBUT0RPIGJsYWNrbGlzdCBjZXJ0YWluIHByb3BlcnRpZXMgdG8gYmUgYXNzaWduZWQgKGFib3ZlUGFydHMsIGJlbG93UGFydHMgLSBwYXJ0cyBzcGVjaWZpYyBpbmZvKVxyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHRoaXNQYXJ0KTtcclxuICAgICAgICAgICAgcHJvY2Vzc0Nsb3RoaW5nUGFydExvY2F0aW9uKHNpZGUsIHRoaXNQYXJ0KTtcclxuICAgICAgICAgICAgdGhpc1BhcnQuX293bmVyID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh0aGlzUGFydCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGRvIHRoaXMgYWdhaW4gYWZ0ZXIgYWxsIHBhcnRzIGhhdmUgdGhlaXIgZGVmYXVsdCBwcm9wZXJ0aWVzIGFzc2lnbmVkIHRvIG92ZXJyaWRlXHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCAuLi5kYXRhKTtcclxuICAgICAgICB0aGlzLnNpZGUgPSBnZXRTaWRlVmFsdWUodGhpcy5zaWRlKTtcclxuXHJcbiAgICAgICAgLy8gZm9yIHJldml2aW5nIHdoZXJlIHBhcnRzIGlzIGFzc2lnbmVkIGZyb20gZGF0YSByYXRoZXIgdGhhbiBjcmVhdGVkXHJcbiAgICAgICAgdGhpcy5wYXJ0cy5mb3JFYWNoKCh0aGlzUGFydCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzUGFydC5fb3duZXIgPSB0aGlzO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBub25lO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiI2ZmZlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0Nsb3RoaW5nUGFydExvY2F0aW9uKHNpZGUsIHBhcnQpIHtcclxuICAgIGlmIChwYXJ0LmZvcmNlZFNpZGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHNpZGUgPSBwYXJ0LmZvcmNlZFNpZGU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2lkZVN0cmluZyA9IGdldFNpZGVMb2NhdGlvbihzaWRlKTtcclxuXHJcbiAgICBpZiAocGFydC5mb3JjZWROb1NpZGVTdHJpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgLy8gcmVuYW1lIGZvciBtb3JlIHNwZWNpZmljaXR5XHJcbiAgICAgICAgaWYgKHNpZGVTdHJpbmcgPT09IFwicmlnaHRcIiB8fFxyXG4gICAgICAgICAgICBzaWRlU3RyaW5nID09PSBcImxlZnRcIikge1xyXG4gICAgICAgICAgICBjb25zdCBiYXNlTG9jYXRpb24gPSBleHRyYWN0VW5tb2RpZmllZExvY2F0aW9uKHBhcnQubG9jKTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uSXNTaWRlbGVzcyhiYXNlTG9jYXRpb24pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb25Nb2RpZmllcnMgPSBleHRyYWN0TG9jYXRpb25Nb2RpZmllcihwYXJ0LmxvYyk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0LmxvYyA9IGxvY2F0aW9uTW9kaWZpZXJzICsgc2lkZVN0cmluZyArIFwiIFwiICsgYmFzZUxvY2F0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBhcnQuc2lkZSA9IGdldFNpZGVWYWx1ZShzaWRlKTtcclxuICAgIHJldHVybiBwYXJ0O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQ2xvdGhlcyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQ2xvdGhpbmcgbGF5ZXJzIChzZXBhcmF0ZSBmcm9tIGRyYXdpbmcgbGF5ZXJzKVxyXG4gICAgICogQHJlYWRvbmx5XHJcbiAgICAgKiBAZW51bVxyXG4gICAgICogQG1lbWJlcm9mIG1vZHVsZTpkYS5DbG90aGVzXHJcbiAgICAgKi9cclxuICAgIExheWVyOiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBCQVNFICAgICAgOiAwLFxyXG4gICAgICAgIElOTkVSICAgICA6IDEsXHJcbiAgICAgICAgTUlEICAgICAgIDogMixcclxuICAgICAgICBPVVRFUiAgICAgOiAzLFxyXG5cdFx0T1VURVJfRkFSIDogNCxcclxuXHRcdEVWRU5fRkFSRVIgOiA1LFxyXG4gICAgICAgIE5VTV9MQVlFUlM6IDYsXHJcbiAgICB9KSxcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgQ2xvdGhpbmcgaW5zdGFuY2VcclxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZGEuQ2xvdGhlc1xyXG4gICAgICogQHBhcmFtIHtDbG90aGluZ30gQ2xvdGhpbmdDbGFzcyBDbG90aGluZyBwcm90b3R5cGUgdG8gaW5zdGFudGlhdGVcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIE92ZXJyaWRpbmcgZGF0YVxyXG4gICAgICogQHJldHVybnMge0Nsb3RoaW5nfSBJbnN0YW50aWF0ZWQgY2xvdGhpbmcgb2JqZWN0XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZShDbG90aGluZ0NsYXNzLCAuLi5kYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDbG90aGluZ0NsYXNzKC4uLmRhdGEpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIGNsb3RoaW5nKSB7XHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogY2xvdGhpbmcuZmlsbCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogY2xvdGhpbmcuc3Ryb2tlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gY2xvdGhpbmcudGhpY2tuZXNzO1xyXG4gICAgfSxcclxufTtcclxuXHJcblxyXG4vKipcclxuICogSG9sZHMgbm8gc3RhdGlzdGljYWwgaW5mb3JtYXRpb24gKHN0YXRlKVxyXG4gKiBpbnN0ZWFkIHJlbHlpbmcgb24gdGhlIG93bmluZyBDbG90aGluZyBvYmplY3QgdG8gZG8gc29cclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XHJcbiAgICAgICAgICAgIC8vIGRyYXdpbmcgbGF5ZXIgKG5vdCBjbG90aGluZyBsYXllcilcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBXaGVuIHRoaXMgQ2xvdGhpbmdQYXJ0IGhhcyBhIHNpZGUsIHdoZXRoZXIgdG8gZm9yY2UgaXQgdG8gbm90IGFwcGVuZFxyXG4gICAgICAgICAgICAgKiBhIHNpZGUgdG8gaXRzIGxvY2F0aW9uIChlLmcuIGlmIGl0J3MgdG9yc28gYW5kIHlvdSB3YW50IGl0IHRvIGFwcGVhciBvbiBhIHNpZGUsXHJcbiAgICAgICAgICAgICAqIGJ1dCBkb24ndCB3YW50IHRoZSBsb2NhdGlvbiB0byBiZSBcImxlZnQgdG9yc29cIilcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZvcmNlZE5vU2lkZVN0cmluZzogZmFsc2UsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCIvKipcclxuICogQ2FudmFzIGRyYXdpbmcgbGF5ZXIgb3JkZXI7IGhpZ2hlciB2YWx1ZSBpcyBmdXJ0aGVyIHVwXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICogQHJlYWRvbmx5XHJcbiAqIEBlbnVtIHtudW1iZXJ9XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgTGF5ZXIgPSBPYmplY3QuZnJlZXplKHtcclxuICAgIEJBU0UgICAgICAgICAgICAgIDogMCxcclxuICAgIEJBQ0sgICAgICAgICAgICAgIDogMSxcclxuICAgIEZST05UICAgICAgICAgICAgIDogMixcclxuICAgIFNIQURJTkdfRlJPTlQgICAgIDogMyxcclxuICAgIE1BTEVfR0VOSVRBTFMgICAgIDogNCxcclxuICAgIE1JRFJJRlQgICAgICAgICAgIDogNSxcclxuXHRTSEFESU5HX01JRFJJRlQgICA6IDYsXHJcbiAgICBBUk1TICAgICAgICAgICAgICA6IDcsXHJcbiAgICBTSEFESU5HX0FSTVMgICAgICA6IDgsXHJcbiAgICBHRU5JVEFMUyAgICAgICAgICA6IDksIC8vIFRlY2huaWNhbGx5IGp1c3QgYnJlYXN0cyBub3cuXHJcbiAgICBTSEFESU5HX0dFTklUQUxTICA6IDEwLFxyXG4gICAgQkVMT1dfSEFJUiAgICAgICAgOiAxMSxcclxuICAgIFNIQURJTkdfQkVMT1dfSEFJUjogMTIsXHJcbiAgICBIQUlSICAgICAgICAgICAgICA6IDEzLFxyXG4gICAgU0hBRElOR19IQUlSICAgICAgOiAxNCxcclxuICAgIEFCT1ZFX0hBSVIgICAgICAgIDogMTUsXHJcbiAgICBFRkZFQ1RTICAgICAgICAgICA6IDE2LFxyXG4gICAgTlVNX0xBWUVSUyAgICAgICAgOiAxNyBcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgU2hhZGluZ0xheWVycyA9IFtcclxuICAgIExheWVyLlNIQURJTkdfRlJPTlQsXHJcblx0TGF5ZXIuU0hBRElOR19NSURSSUZULFxyXG4gICAgTGF5ZXIuU0hBRElOR19BUk1TLFxyXG4gICAgTGF5ZXIuU0hBRElOR19HRU5JVEFMUyxcclxuICAgIExheWVyLlNIQURJTkdfQkVMT1dfSEFJUixcclxuICAgIExheWVyLlNIQURJTkdfSEFJUlxyXG5dO1xyXG5cclxuLyoqXHJcbiAqIE1pbmltYWwgZGlzdGFuY2UgZHJhd2luZyBvbiBjYW52YXMgdG8gZWxpbWluYXRlIHNlYW1zXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2VhbVdpZHRoID0gMC4wO1xyXG5cclxuLyoqXHJcbiAqIEdldCBhY2Nlc3MgdG8gYSBjYW52YXMgZ3JvdXAgRE9NIGVsZW1lbnQsIGNyZWF0aW5nIGl0IGlmIGl0IGRvZXNuJ3QgZXhpc3RcclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKiBAcGFyYW0geyhzdHJpbmd8SFRNTEVsZW1lbnQpfSBncm91cG5hbWUgSWQgb2YgdGhlIGNhbnZhcyBncm91cCBob2xkZXIsIG9yIHRoZSBET00gZWxlbWVudFxyXG4gKiBAcGFyYW0ge29iamVjdH0gc3R5bGVPdmVycmlkZSBPYmplY3QgaG9sZGluZyBjYW52YXMgc3R5bGUgb3ZlcnJpZGVzXHJcbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIGNhbnZhcyBncm91cCBob2xkZXIgSFRNTCBET00gZWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENhbnZhc0dyb3VwKGdyb3VwbmFtZSwgc3R5bGVPdmVycmlkZSkge1xyXG4gICAgbGV0IGdyb3VwT2JqID0gZ3JvdXBuYW1lO1xyXG4gICAgaWYgKHR5cGVvZiBncm91cG5hbWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBncm91cE9iaiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGdyb3VwbmFtZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGdyb3VwbmFtZSA9IGdyb3VwbmFtZS5pZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdHlsZXMgPSBPYmplY3QuYXNzaWduKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgd2lkdGggOiBcIjUwMFwiLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IFwiODAwXCIsXHJcbiAgICAgICAgICAgIHBhcmVudDogZ3JvdXBPYmosXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdHlsZU92ZXJyaWRlKTtcclxuXHJcbiAgICAvLyBzaXplIHNvIHN1cnJvdW5kaW5ncyBjYW4gcmVzcGVjdCBvdXIgYm91bmRhcmllc1xyXG4gICAgZ3JvdXBPYmouc3R5bGUud2lkdGggPSBzdHlsZXMud2lkdGggKyBcInB4XCI7XHJcbiAgICBncm91cE9iai5zdHlsZS5oZWlnaHQgPSBzdHlsZXMuaGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgZ3JvdXBPYmouc3R5bGUudGV4dEFsaWduID0gXCJsZWZ0XCI7XHJcblxyXG4gICAgY29uc3QgZ3JvdXAgPSBbXTtcclxuICAgIC8vIGNyZWF0ZSB2YXJpb3VzIGNhbnZhcyBsYXllcnMgd2l0aCB0aGUgc2FtZSBvdmVycmlkZVxyXG4gICAgZm9yIChsZXQgbGF5ZXIgPSAwOyBsYXllciA8PSBMYXllci5OVU1fTEFZRVJTOyArK2xheWVyKSB7XHJcbiAgICAgICAgY29uc3QgY2FudmFzTmFtZSA9IGdyb3VwbmFtZSArIGxheWVyO1xyXG4gICAgICAgIGxldCBoaWRlV29ya2luZ0NhbnZhcyA9IG51bGw7XHJcbiAgICAgICAgLy8gb25seSBkaXNwbGF5IGZpbmFsIGNhbnZhc1xyXG4gICAgICAgIGlmIChsYXllciAhPT0gTGF5ZXIuTlVNX0xBWUVSUykge1xyXG4gICAgICAgICAgICBoaWRlV29ya2luZ0NhbnZhcyA9IHtcInZpc2liaWxpdHlcIjogXCJoaWRkZW5cIn07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyb3VwLnB1c2goZ2V0Q2FudmFzKFxyXG4gICAgICAgICAgICBjYW52YXNOYW1lLFxyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzdHlsZXMsIHtcInotaW5kZXhcIjogbGF5ZXJ9LCBoaWRlV29ya2luZ0NhbnZhcykpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBncm91cE9iajtcclxufVxyXG5cclxuXHJcbi8qKiAgR2V0IGEgY2FudmFzIERPTSBlbGVtZW50IHdpdGggaWQ9Y2FudmFzTmFtZSwgZ2VuZXJhdGluZyBpdCBpZiBuZWNlc3NhcnlcclxuIHN0eWxlT3ZlcnJpZGUgaXMgdGhlIGFkZGl0aW9uYWwvb3ZlcnJpZGluZyBjc3Mgc3R5bGUgb2JqZWN0IHRvIGFwcGx5IG92ZXJcclxuIGRlZmF1bHRzXHJcbiBsaWtlbHksIHlvdSdkIHdhbnQgdG8gZGVmaW5lIGl0cyBsb2NhdGlvbjpcclxuXHJcbiBzdHlsZXMgPSB7XHJcbiAgICAgcG9zaXRpb246XCJhYnNvbHV0ZVwiLFxyXG4gICAgIHRvcDpcIjEwcHhcIixcclxuICAgICBsZWZ0OlwiMTBweFwiLFxyXG4gICAgIHBhcmVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNfaG9sZGVyXCIpLFxyXG4gICAgIH1cclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENhbnZhcyhjYW52YXNOYW1lLCBzdHlsZXMpIHtcclxuICAgIC8vIGlmIGdpdmVuIGEgY2FudmFzIG9iamVjdCwganVzdCByZXR1cm4gaXRcclxuICAgIGlmICh0eXBlb2YgY2FudmFzTmFtZSAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiBjYW52YXNOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNOYW1lKTtcclxuICAgIC8vIGNyZWF0ZSBjYW52YXNcclxuICAgIGlmICghY2FudmFzKSB7XHJcbiAgICAgICAgaWYgKHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShcInBhcmVudFwiKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgc3R5bGVzLnBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3R5bGVzLnBhcmVudCk7XHJcbiAgICAgICAgICAgIHN0eWxlcy5wYXJlbnQuc3R5bGUud2lkdGggPSBzdHlsZXMud2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgIHN0eWxlcy5wYXJlbnQuc3R5bGUuaGVpZ2h0ID0gc3R5bGVzLmhlaWdodCArIFwicHhcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgY2FudmFzLmlkID0gY2FudmFzTmFtZTtcclxuICAgICAgICAvLyB3aWR0aCBhbmQgaGVpZ2h0IGhhdmUgdG8gYmUgc2V0IG9uIHRoZSBET00gZWxlbWVudCByYXRoZXIgdGhhbiBzdHlsZWRcclxuICAgICAgICBjYW52YXMud2lkdGggPSBzdHlsZXMud2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHN0eWxlcy5oZWlnaHQ7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG5cclxuICAgICAgICAvLyBhZGQgdGhlIHJlc3Qgb2YgdGhlIHN0eWxpbmdcclxuICAgICAgICBmb3IgKGxldCBzIGluIHN0eWxlcykge1xyXG4gICAgICAgICAgICBpZiAoc3R5bGVzLmhhc093blByb3BlcnR5KHMpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHMgPT09IFwid2lkdGhcIiB8fCBzID09PSBcImhlaWdodFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHlsZXMuaGFzT3duUHJvcGVydHkocykpIHtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5zdHlsZVtzXSA9IHN0eWxlc1tzXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZW5zdXJlIGlzIGZpcnN0IGNoaWxkIG9mIHBhcmVudFxyXG4gICAgICAgIHN0eWxlcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKGNhbnZhcywgc3R5bGVzLnBhcmVudC5maXJzdENoaWxkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2FudmFzO1xyXG59XHJcblxyXG4vKipcclxuICogSGlkZSBhIGNhbnZhcyBncm91cCBmcm9tIHZpZXcgKGJ1dCBub3QgZGVsZXRlIGl0KVxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqIEBwYXJhbSB7KHN0cmluZ3xIVE1MRWxlbWVudCl9IGdyb3VwTmFtZSBFaXRoZXIgdGhlIGlkIG9mIHRoZSBncm91cCBlbGVtZW50IG9yIHRoZSBlbGVtZW50IGl0c2VsZlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhpZGVDYW52YXNHcm91cChncm91cE5hbWUpIHtcclxuICAgIGNvbnN0IGdyb3VwID0gZ2V0Q2FudmFzSGFuZGxlKGdyb3VwTmFtZSk7XHJcbiAgICBncm91cC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaG93IGEgY2FudmFzIGdyb3VwIGZyb20gdmlld1xyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqIEBwYXJhbSB7KHN0cmluZ3xIVE1MRWxlbWVudCl9IGdyb3VwTmFtZSBFaXRoZXIgdGhlIGlkIG9mIHRoZSBncm91cCBlbGVtZW50IG9yIHRoZSBlbGVtZW50IGl0c2VsZlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3dDYW52YXNHcm91cChncm91cE5hbWUpIHtcclxuICAgIGNvbnN0IGdyb3VwID0gZ2V0Q2FudmFzSGFuZGxlKGdyb3VwTmFtZSk7XHJcbiAgICBncm91cC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FudmFzSGFuZGxlKGNhbnZhc05hbWUpIHtcclxuICAgIGlmICh0eXBlb2YgY2FudmFzTmFtZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjYW52YXNOYW1lKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGNhbnZhc05hbWU7ICAvLyBhc3N1bWUgY2FudmFzIGVsZW1lbnQgcGFzc2VkIGluXHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBleHRyYWN0U2lkZUxvY2F0aW9uLFxyXG4gICAgZXh0cmFjdEJhc2VMb2NhdGlvbixcclxuICAgIGV4dHJhY3RMb2NhdGlvbk1vZGlmaWVyLFxyXG4gICAgZXh0cmFjdFVubW9kaWZpZWRMb2NhdGlvblxyXG59IGZyb20gXCIuLi91dGlsL3BhcnRcIjtcclxuaW1wb3J0IHtub25lfSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5cclxuLyoqXHJcbiAqIEFsbCBwYXJ0cyBzaG91bGQgZ28gaW4gdGhpcyBuYW1lc3BhY2VcclxuICogQG5hbWVzcGFjZSBQYXJ0XHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICovXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEJvZHlQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZGVmYXVsdCBwcm9wZXJ0aWVzIG9mIGFsbCBib2R5IHBhcnRzOyBhZGQgdG8gdGhpcyBvYmplY3QgdG8gYWRkIGFkZGl0aW9uYWwgZGVmYXVsdCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICogQHByb3BlcnR5IHsoc3RyaW5nfG51bGwpfSBsb2MgTG9jYXRpb24gb2YgdGhlIHBhcnQsIHByZXBlbmQgd2l0aCArIHRvIG1lYW4gYWxsb3cgb3RoZXJcclxuICAgICAgICAgKiBwYXJ0cyB0byBhbHNvIG9jY3VweSB0aGlzIGxvY2F0aW9uLCAtIHRvIG1lYW4gcmVzdHJpY3QgYW55IG90aGVyIHBhcnQgZnJvbSBiZWluZyBoZXJlXHJcbiAgICAgICAgICogQHByb3BlcnR5IHttb2R1bGU6ZGEuTGF5ZXJ9IGxheWVyIERyYXdpbmcgbGF5ZXIsXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufSByZWZsZWN0IFdoZXRoZXIgdGhpcyBwYXJ0IHNob3VsZCBiZSBkcmF3biBvbiB0aGUgb3RoZXIgc2lkZSBhcyB3ZWxsXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmdbXX0gY292ZXJDb25jZWFsIFdoZXRoZXIgdGhpcyBwYXJ0IHNob3VsZCBub3QgYmUgZHJhd24gaWYgdGhlcmUgYXJlIGNsb3RoZXNcclxuICAgICAgICAgKiBjb3ZlcmluZyBpdHMgbG9jYXRpb25cclxuICAgICAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHVuY292ZXJhYmxlIFdoZXRoZXIgaXQncyBwb3NzaWJsZSB0byB3ZWFyIGFueXRoaW5nIG92ZXIgdGhpcyBwYXJ0XHJcbiAgICAgICAgICogKG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIGNvbnZlcmNvbmNlYWwpXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmdbXX0gYWJvdmVQYXJ0cyBMaXN0IG9mIFwie3BhcnQgZ3JvdXB9IHtsb2NhdGlvbn1cIiBzdHJpbmdzIHRoYXQgc3BlY2lmeVxyXG4gICAgICAgICAqIHdoaWNoIHBhcnRzIG9mIHdoaWNoIHBhcnQgZ3JvdXBzIHRoaXMgcGFydCBzaG91bGQgYmUgZHJhd24gYWJvdmUuIEZvciBleGFtcGxlLCBoYXZpbmdcclxuICAgICAgICAgKiBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiIHdpbGwgZW5zdXJlIHRoaXMgcGFydCBnZXRzIGRyYXduIGFib3ZlIGFueSBwYXJ0cyBpbiB0aGF0IGxvY2F0aW9uLlxyXG4gICAgICAgICAqIFNwZWNpZnlpbmcgb25seSBhIGxvY2F0aW9uIHdpbGwgbWVhbiB0byBiZSBhYm92ZSBhbnkgcGFydCBpbiB0aGF0IGxvY2F0aW9uIHJlZ2FyZGxlc3Mgb2YgZ3JvdXAuXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmdbXX0gYmVsb3dQYXJ0cyBPcHBvc2l0ZSB0byBhYm92ZVBhcnRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xyXG4gICAgICAgICAgICBsb2MgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcmVudFBhcnQgIDogbnVsbCxcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgOiBMYXllci5CQVNFLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb3ZlckNvbmNlYWw6IFtdLFxyXG4gICAgICAgICAgICB1bmNvdmVyYWJsZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICA6IFtdLFxyXG4gICAgICAgICAgICBiZWxvd1BhcnRzICA6IFtdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBzdHJva2UgcGF0dGVybiBmb3IgdGhpcyBwYXJ0XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGZpbGwgcGF0dGVybiBmb3IgdGhpcyBwYXJ0XHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImluaGVyaXRcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBob3cgdGhpY2sgdGhlIHN0cm9rZSBsaW5lIHNob3VsZCBiZVxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgZ2V0TGluZVdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiAwLjg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGUgZHJhd3BvaW50cyBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXJ0IGFuZCByZXR1cm4gaXQgaW4gdGhlIHNlcXVlbmNlIHRvIGJlIGRyYXduLlxyXG4gICAgICogQHRoaXMge29iamVjdH0gQ2FsY3VsYXRlZCBkaW1lbnNpb25zIG9mIHRoZSBwbGF5ZXIgb3duaW5nIHRoZSBwYXJ0XHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZXggRXhwb3J0cyBmcm9tIGRyYXcgdGhhdCBzaG91bGQgaG9sZCBkcmF3IHBvaW50cyBjYWxjdWxhdGVkIHVwIHRvIG5vdztcclxuICAgICAqIGFkZGl0aW9uYWwgZHJhdyBwb2ludHMgZGVmaW5lZCBieSB0aGlzIHBhcnQgc2hvdWxkIGJlIGRlZmluZWQgb24gZXhcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtb2RzIENvbWJpbmVkIG1vZGlmaWVycyBvZiB0aGUgcGFydCBhbmQgdGhlIFBsYXllciBvd25pbmcgdGhlIHBhcnRcclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FsY3VsYXRlXHJcbiAgICAgKiBAcGFyYW0ge21vZHVsZTpkYS5Cb2R5UGFydH0gcGFydCBUaGUgYm9keSBwYXJ0IGl0c2VsZlxyXG4gICAgICogQHJldHVybiB7b2JqZWN0W119IExpc3Qgb2YgZHJhdyBwb2ludHMgKG9yIGNvbnZlcnRpYmxlIHRvIGRyYXcgcG9pbnQgb2JqZWN0cylcclxuICAgICAqL1xyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSwgcGFydCkge1xyXG4gICAgICAgIC8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJvZmZcIiwgeyBcImFyZ3NcIjogXCJhbGxcIiB9XSovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgUGFydCA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJpZ2h0IHNpZGUgb2YgdGhlIGJvZHkgZm9yIGFueXRoaW5nIHRha2luZyBzaWRlXHJcbiAgICAgKiBAcmVhZG9ubHlcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIFJJR0hUOiAwLFxyXG4gICAgLyoqXHJcbiAgICAgKiBMZWZ0IHNpZGUgb2YgdGhlIGJvZHkgZm9yIGFueXRoaW5nIHRha2luZyBzaWRlXHJcbiAgICAgKiBAcmVhZG9ubHlcclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIExFRlQgOiAxLFxyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlIG1lIGEgYmFzZSBib2R5IHBhcnQgYW5kIGEgc2lkZSBpdCdzIHN1cHBvc2VkIHRvIGJlIG9uXHJcbiAgICAgKiBJJ2xsIHJldHVybiB0byB5b3UgYSBib2R5IHBhcnQgc3BlY2lmaWMgdG8gdGhhdCBzaWRlXHJcbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmRhLlBhcnRcclxuICAgICAqIEBwYXJhbSB7Qm9keVBhcnR9IFBhcnRQcm90b3R5cGUgUHJvdG90eXBlIHRvIGluc3RhbnRpYXRlIHdpdGhcclxuICAgICAqIEBwYXJhbSB7Li4ub2JqZWN0fSB1c2VyRGF0YSBPdmVycmlkaW5nIGRhdGFcclxuICAgICAqIEByZXR1cm5zIHtCb2R5UGFydH1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlKFBhcnRQcm90b3R5cGUsIC4uLnVzZXJEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIC4uLnVzZXJEYXRhKTtcclxuICAgICAgICBsZXQgcGFydCA9IG5ldyBQYXJ0UHJvdG90eXBlKGRhdGEpO1xyXG5cclxuICAgICAgICBsZXQgc2lkZSA9IChkYXRhICYmIGRhdGEuaGFzT3duUHJvcGVydHkoXCJzaWRlXCIpKSA/IGRhdGEuc2lkZSA6IG51bGw7XHJcblxyXG4gICAgICAgIC8vIG92ZXJyaWRlIGlmIHBhcnQgbG9jYXRpb24gc3BlY2lmaWVzIHNpZGVcclxuICAgICAgICBpZiAoc2lkZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzaWRlID0gZXh0cmFjdFNpZGVMb2NhdGlvbihwYXJ0LmxvYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkaXJlY3Qgb3ZlcnJpZGVcclxuICAgICAgICBpZiAocGFydC5mb3JjZWRTaWRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2lkZSA9IHBhcnQuZm9yY2VkU2lkZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNpZGVTdHJpbmcgPSBnZXRTaWRlTG9jYXRpb24oc2lkZSk7XHJcblxyXG4gICAgICAgIC8vIHJlbmFtZSBmb3IgbW9yZSBzcGVjaWZpY2l0eVxyXG4gICAgICAgIGlmIChzaWRlU3RyaW5nID09PSBcInJpZ2h0XCIgfHwgc2lkZVN0cmluZyA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICAgICAgY29uc3QgYmFzZUxvY2F0aW9uID0gZXh0cmFjdEJhc2VMb2NhdGlvbihwYXJ0LmxvYyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uTW9kaWZpZXJzID0gZXh0cmFjdExvY2F0aW9uTW9kaWZpZXIocGFydC5sb2MpO1xyXG4gICAgICAgICAgICBwYXJ0LmxvYyA9IGxvY2F0aW9uTW9kaWZpZXJzICsgc2lkZVN0cmluZyArIFwiIFwiICsgYmFzZUxvY2F0aW9uO1xyXG4gICAgICAgICAgICBpZiAocGFydC5wYXJlbnRQYXJ0KSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0LnBhcmVudFBhcnQgPSBzaWRlU3RyaW5nICsgXCIgXCIgKyBwYXJ0LnBhcmVudFBhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbmZpZ3VyZSBzaWRlIHRvIGJlIGEgc3RhbmRhcmQgZm9ybWF0XHJcbiAgICAgICAgcGFydC5zaWRlID0gZ2V0U2lkZVZhbHVlKHNpZGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFydDtcclxuICAgIH0sXHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldCBhIHNpZGUgc3RyaW5nIGluIGEgd2VsbCBkZWZpbmVkIGZvcm1hdFxyXG4gKiBAcGFyYW0gc2lkZSBBIHNpZGUgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHsoc3RyaW5nfG51bGwpfSBFaXRoZXIgdGhlIHNpZGUgc3RyaW5nIG9yIG51bGwgaWYgdW5yZWNvZ25pemVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2lkZUxvY2F0aW9uKHNpZGUpIHtcclxuICAgIGlmIChzaWRlID09PSBcInJpZ2h0XCIgfHwgc2lkZSA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICByZXR1cm4gc2lkZTtcclxuICAgIH1cclxuICAgIGlmIChzaWRlID09PSBQYXJ0LkxFRlQpIHtcclxuICAgICAgICByZXR1cm4gXCJsZWZ0XCI7XHJcbiAgICB9XHJcbiAgICBpZiAoc2lkZSA9PT0gUGFydC5SSUdIVCkge1xyXG4gICAgICAgIHJldHVybiBcInJpZ2h0XCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDaGVjayB3aGV0aGVyIHR3byBwYXJ0cyBjb25mbGljdFxyXG4gKiBAcGFyYW0ge1BhcnR9IHBhcnRBXHJcbiAqIEBwYXJhbSB7UGFydH0gcGFydEJcclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHR3byBwYXJ0cyBoYXZlIGNvbmZsaWN0aW5nIGxvY2F0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnRDb25mbGljdChwYXJ0QSwgcGFydEIpIHtcclxuICAgIGlmIChwYXJ0QS5zaWRlICE9PSBwYXJ0Qi5zaWRlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gZWxzZSBvbiBzYW1lIHNpZGVcclxuICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFydEEpID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFydEIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoZXh0cmFjdFVubW9kaWZpZWRMb2NhdGlvbihwYXJ0QS5sb2MpID09PSBleHRyYWN0VW5tb2RpZmllZExvY2F0aW9uKHBhcnRCLmxvYykpIHtcclxuICAgICAgICAvLyByZWZ1c2UgYW55IG90aGVyIHBhcnQgYXQgbG9jYXRpb25cclxuICAgICAgICBpZiAocGFydEEubG9jLmNoYXJBdCgwKSA9PT0gXCItXCIgfHwgcGFydEIubG9jLmNoYXJBdCgwKSA9PT0gXCItXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsbG93IGFueSBwYXJ0cyBhdCBsb2NhdGlvbiAoc28gZXZlbiBpZiBzYW1lIGxvY2F0aW9uIHdvdWxkIHN0aWxsIGJlIE9LKVxyXG4gICAgICAgIGlmIChwYXJ0QS5sb2MuY2hhckF0KDApID09PSBcIitcIiB8fCBwYXJ0Qi5sb2MuY2hhckF0KDApID09PSBcIitcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG90aGVyd2lzZSBib3RoIGFyZSB1bm1vZGlmaWVkIGFuZCBjb25mbGljdFxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZExvY2F0aW9uKHBhcmVudExvYywgY2hpbGQpIHtcclxuICAgIGNvbnN0IHBhcmVudFNpZGUgPSBleHRyYWN0U2lkZUxvY2F0aW9uKHBhcmVudExvYyk7XHJcbiAgICBsZXQgY2hpbGRMb2MgPSBjaGlsZDtcclxuXHJcbiAgICAvLyBjb3VsZCBwb3RlbnRpYWxseSBub3QgaGF2ZSBhIHNpZGUgKGNlbnRlcmVkKVxyXG4gICAgaWYgKHBhcmVudFNpZGUgIT09IG51bGwpIHtcclxuICAgICAgICBjaGlsZExvYyA9IHBhcmVudFNpZGUgKyBcIiBcIiArIGNoaWxkTG9jO1xyXG4gICAgfVxyXG4gICAgbGV0IGNoaWxkU2lkZSA9IGdldFNpZGVWYWx1ZShwYXJlbnRTaWRlKTtcclxuXHJcbiAgICAvLyBjb3VsZCBnZXQgb3ZlcnJpZGVuIGlmIHNpZGUgZXhwbGljaXRlbHkgc2V0XHJcbiAgICBpZiAoZXh0cmFjdFNpZGVMb2NhdGlvbihjaGlsZExvYykpIHtcclxuICAgICAgICBjaGlsZFNpZGUgPSBnZXRTaWRlVmFsdWUoZXh0cmFjdFNpZGVMb2NhdGlvbihjaGlsZExvYykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjaGlsZFNpZGUsXHJcbiAgICAgICAgY2hpbGRMb2NcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTaWRlVmFsdWUoc2lkZSkge1xyXG4gICAgaWYgKHNpZGUgPT09IFwibGVmdFwiIHx8IHNpZGUgPT09IFBhcnQuTEVGVCkge1xyXG4gICAgICAgIHJldHVybiBQYXJ0LkxFRlQ7XHJcbiAgICAgICAgLy8gY291bGQgYWx0ZXJuYXRpdmVseSBhbHJlYWR5IGJlIGdpdmVuIGluIG51bWVyaWMgdGVybXNcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFBhcnQuUklHSFQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBdHRhY2hlZExvY2F0aW9uKHBhcnRQcm90b3R5cGUpIHtcclxuICAgIGNvbnN0IHRlbXAgPSBuZXcgcGFydFByb3RvdHlwZSgpO1xyXG4gICAgcmV0dXJuIGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24odGVtcC5sb2MpO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGpvaG5zb24gb24gMTAuMDUuMTcuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKG9iaikge1xyXG4gICAgaWYgKG9iaikge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRGVmaW5lIGEgZHJhdyBwb2ludCBpZiBpdCBkb2Vzbid0IGV4aXN0IGFscmVhZHlcclxuICogQHBhcmFtIHtvYmplY3R9IGV4IEV4cG9ydCBob2xkaW5nIGRyYXcgcG9pbnRzXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBkcmF3UG9pbnROYW1lIE5hbWUgb2YgdGhlIGxvY2F0aW9uXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZpbml0aW9uIE9iamVjdCBob2xkaW5nIHgsIHksIGNwMSwgYW5kIGNwMlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxlckRlZmluaXRpb24oZXgsIGRyYXdQb2ludE5hbWUsIGRlZmluaXRpb24gPSB7fSkge1xyXG4gICAgaWYgKGV4Lmhhc093blByb3BlcnR5KGRyYXdQb2ludE5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZXhbZHJhd1BvaW50TmFtZV0gPSBkZWZpbml0aW9uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpvaG5zb24gb24gMjAxNy0wNC0wMi5cclxuICovXHJcblxyXG4vKipcclxuICogQ29udmVydCByYWRpYW5zIHRvIGRlZ3JlZXNcclxuICogQHBhcmFtIHJhZGlhblxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZyhyYWRpYW4pIHtcclxuICAgIHJldHVybiAxODAgKiByYWRpYW4gLyBNYXRoLlBJO1xyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydCBkZWdyZWVzIHRvIHJhZGlhbnNcclxuICogQHBhcmFtIGRlZ3JlZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhZChkZWdyZWUpIHtcclxuICAgIHJldHVybiBkZWdyZWUgKiBNYXRoLlBJIC8gMTgwO1xyXG59XHJcblxyXG4vKipcclxuICogVW53cmFwIGEgcmFkaWFuIHRvIGl0cyBlcXVpdmFsZW50IGZvcm0gYmV0d2VlbiBbLVBJLCBQSV1cclxuICogQHBhcmFtIHJhZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcFJhZChyYWQpIHtcclxuICAgIHdoaWxlIChyYWQgPiBNYXRoLlBJKSB7XHJcbiAgICAgICAgcmFkIC09IDIgKiBNYXRoLlBJO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKHJhZCA8IC1NYXRoLlBJKSB7XHJcbiAgICAgICAgcmFkICs9IDIgKiBNYXRoLlBJO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENsYW1wIGEgbnVtYmVyIGJldHdlZW4gYSBtaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1cclxuICogQHBhcmFtIHtudW1iZXJ9IG1pblxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IENsYW1wZWQgbnVtYmVyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAobnVtLCBtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIG51bSA8IG1pbiA/IG1pbiA6IG51bSA+IG1heCA/IG1heCA6IG51bTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdW5kIGEgbnVtYmVyIHRvIGEgZml4ZWQgbnVtYmVyIG9mIGRlY2ltYWxzXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW0gTnVtYmVyIHRvIHJvdW5kXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1EZWNpbWFscyBOdW1iZXIgb2YgZGVjaW1hbHNcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3VuZFRvRGVjKG51bSwgbnVtRGVjaW1hbHMpIHtcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KG51bS50b0ZpeGVkKG51bURlY2ltYWxzKSk7XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcclxuICAgIHJldHVybiB7eCwgeX07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYWtlIGEgbmV3IHBvaW50IHdoZXJlIGVhY2ggZGltZW5zaW9uIGlzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgYSBmdW5jdGlvbiB0b1xyXG4gKiB0aGUgY29ycmVzcG9uZGluZyBkaW1lbnNpb24gb2YgYSBsaXN0IG9mIGNvbnRyb2wgcG9pbnRzLlxyXG4gKiBAcGFyYW0gZnVuY1xyXG4gKiBAcGFyYW0gY3BzXHJcbiAqIEByZXR1cm5zIHt7eCwgeX18Kn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlUG9pbnQoZnVuYywgLi4uY3BzKSB7XHJcbiAgICByZXR1cm4gcG9pbnQoZnVuYyguLi5jcHMubWFwKGNwID0+IGNwLngpKSwgZnVuYyguLi5jcHMubWFwKGNwID0+IGNwLnkpKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBvcmlnaW4gPSBPYmplY3QuZnJlZXplKHBvaW50KDAsIDApKTtcclxuXHJcbi8qKlxyXG4gKiBJbnNlcnQgdGhpcyBzcGVjaWFsIHBvaW50IGluIHRoZSBsaXN0IG9mIHBvaW50cyBnaXZlbiB0byBkcmF3UG9pbnRzIHRvXHJcbiAqIG1vdmUgdG8gdGhlIG5leHQgcG9pbnQgaW5zdGVhZCBvZiBkcmF3aW5nIHRvIHRoZSBuZXh0IHBvaW50XHJcbiAqIEByZWFkb25seVxyXG4gKiBAdHlwZSB7T2JqZWN0fVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGJyZWFrUG9pbnQgPSBPYmplY3QuZnJlZXplKHticmVhazogdHJ1ZX0pO1xyXG5cclxuLyoqXHJcbiAqIFNpZ25hbHMgZm9yIGEgZmlsbCBwYXRoIHRvIG5vdCB0cnkgdG8gY29tcGxldGUgaXQgYnkgZHJhd2luZyBhIGN1cnZlIGZyb20gZW5kXHJcbiAqIHBvaW50IHRvIGZpcnN0IHBvaW50IGFzIHRoZSBmaWxsIGhhcyBhbHJlYWR5IGRvbmUgaXRzIGpvYlxyXG4gKiBtb3ZlIHRvIHRoZSBuZXh0IHBvaW50IGluc3RlYWQgb2YgZHJhd2luZyB0byB0aGUgbmV4dCBwb2ludFxyXG4gKiBAcmVhZG9ubHlcclxuICogQHR5cGUge09iamVjdH1cclxuICovXHJcbmV4cG9ydCBjb25zdCBlbmRQb2ludCA9IE9iamVjdC5mcmVlemUoe2VuZDogdHJ1ZX0pO1xyXG5cclxuLyoqXHJcbiAqIFRyZWF0IHBvaW50cyBhcyB2ZWN0b3JzIGFuZCBhZGQgdGhlbSwgb3B0aW9uYWxseSBhZnRlciBzY2FsaW5nIHAyXHJcbiAqIEBwYXJhbSBwMVxyXG4gKiBAcGFyYW0gcDJcclxuICogQHBhcmFtIHNjYWxlQnlcclxuICogQHJldHVybnMge3t4OiAqLCB5OiAqfX1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGQocDEsIHAyLCBzY2FsZUJ5ID0gMSkge1xyXG4gICAgcmV0dXJuIG1ha2VQb2ludCgocHAxLCBwcDIpID0+IHtcclxuICAgICAgICByZXR1cm4gcHAxICsgcHAyICogc2NhbGVCeTtcclxuICAgIH0sIHAxLCBwMik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGRpZmZlcmVuY2Ugb2YgMiBkcmF3IHBvaW50cyBwMiAtIHAxOyBjb25jZXB0dWFsbHkgYSB2ZWN0b3IgcG9pbnRpbmcgcDEgLT4gcDJcclxuICogQHBhcmFtIHt7eDpudW1iZXIsIHk6bnVtYmVyfX0gcDEgRmlyc3QgcG9pbnRcclxuICogQHBhcmFtIHt7eDpudW1iZXIsIHk6bnVtYmVyfX0gcDIgU2Vjb25kIHBvaW50XHJcbiAqIEByZXR1cm5zIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpZmYocDEsIHAyKSB7XHJcbiAgICByZXR1cm4gbWFrZVBvaW50KChwcDEsIHBwMikgPT4ge1xyXG4gICAgICAgIHJldHVybiBwcDIgLSBwcDE7XHJcbiAgICB9LCBwMSwgcDIpO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBtYWduaXR1ZGUgb2YgYSB2ZWN0b3JcclxuICogQHBhcmFtIHZlY1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBFdWNsaWRlYW4gKExeMikgbm9ybSBvZiB2ZWNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBub3JtKHZlYykge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh2ZWMueCAqIHZlYy54ICsgdmVjLnkgKiB2ZWMueSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGFuZ2xlIG9mIGEgdmVjdG9yIGluIHJhZGlhbnNcclxuICogQHBhcmFtIHZlY1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBbmdsZSBpbiByYWRpYW5zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYW5nbGUodmVjKSB7XHJcbiAgICByZXR1cm4gTWF0aC5hdGFuMih2ZWMueSwgdmVjLngpO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IGEgcG9pbnQgYWZ0ZXIgc2NhbGluZyBpdCByZWxhdGl2ZSB0byBhIHJlZmVyZW5jZSBwb2ludC5cclxuICogR3Jvd3MgdGhlIHZlY3RvciByZWZlcmVuY2VQdCAtPiBwdCBieSBzY2FsZUJ5LlxyXG4gKiBAcGFyYW0gcHRcclxuICogQHBhcmFtIHNjYWxlQnlcclxuICogQHBhcmFtIHJlZmVyZW5jZVB0IFRoZSBwb2ludCBmcm9tIHdoaWNoIHRvIHNjYWxlXHJcbiAqIEByZXR1cm5zIHt7eDogKiwgeTogKn19XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUocHQsIHNjYWxlQnksIHJlZmVyZW5jZVB0ID0gb3JpZ2luKSB7XHJcbiAgICByZXR1cm4gYWRkKHJlZmVyZW5jZVB0LCBkaWZmKHJlZmVyZW5jZVB0LCBwdCksIHNjYWxlQnkpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFJlbGF0aXZlIHRvIDAsMCwgZ2V0IHRoZSBkaXJlY3Rpb24gYSBkcmF3IHBvaW50L3ZlY3RvciBpcyBwb2ludGluZyBhdFxyXG4gKiBAcGFyYW0gdmVjXHJcbiAqIEByZXR1cm5zIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXRWZWN0b3IodmVjKSB7XHJcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBub3JtKHZlYyk7XHJcbiAgICByZXR1cm4gbWFrZVBvaW50KHYgPT4gdiAvIG1hZ25pdHVkZSwgdmVjKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBjb3VudGVyY2xvY2t3aXNlIHBlcnBlbmRpY3VsYXIgdW5pdCB2ZWN0b3JcclxuICogQHBhcmFtIHZlYyBQb2ludCB0aGF0IGRvdWJsZXMgYXMgYSB2ZWN0b3IgZnJvbSAoMCwwKSB0byB0aGUgcG9pbnRcclxuICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn19XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGVycGVuZGljdWxhclZlY3Rvcih2ZWMpIHtcclxuICAgIC8vIHJvdGF0ZSBjb3VudGVyY2xvY2t3aXNlIGJ5IDkwIGRlZ3JlZXNcclxuICAgIHJldHVybiBnZXRVbml0VmVjdG9yKHBvaW50KC12ZWMueSwgdmVjLngpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBhbnkgZXh0cmEgaW5mb3JtYXRpb24gZnJvbSBhIHBvaW50IGRvd24gdG8ganVzdCB4LHlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UG9pbnQocHQpIHtcclxuICAgIHJldHVybiBwb2ludChwdC54LCBwdC55KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBhbnkgZXh0cmEgaW5mb3JtYXRpb24gZnJvbSBhIHBvaW50IGFuZCByZWZsZWN0IGFjcm9zcyB5IGF4aXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZWZsZWN0KHB0LCBtID0gSW5maW5pdHksIGIgPSAwKSB7XHJcbiAgICBpZiAoIXB0KSB7XHJcbiAgICAgICAgcmV0dXJuIHB0O1xyXG4gICAgfVxyXG4gICAgbGV0IGMsIGNtO1xyXG5cclxuICAgIC8vIHZlcnRpY2FsIGxpbmVhclxyXG4gICAgaWYgKG0gPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgYyAgPSAwO1xyXG4gICAgICAgIGNtID0gMDtcclxuICAgICAgICAvLyBoYXMgbm8gc2luZ2xlIHktaW50ZXJjZXB0XHJcbiAgICAgICAgYiA9IHB0Lnk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGMgID0gKHB0LnggKyAocHQueSAtIGIpICogbSkgLyAoMSArIG0gKiBtKTtcclxuICAgICAgICBjbSA9IGMgKiBtO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb2ludCgyICogYyAtIHB0LngsIDIgKiBjbSAtIHB0LnkgKyAyICogYik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaGlmdCBhIGRyYXcgcG9pbnQgYW5kIGl0cyBjb250cm9sIHBvaW50c1xyXG4gKiBAcGFyYW0ge29iamVjdH0gcHRcclxuICogQHBhcmFtIHtudW1iZXJ9IGR4XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBkeVxyXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkanVzdChwdCwgZHgsIGR5KSB7XHJcbiAgICBpZiAoIXB0KSB7XHJcbiAgICAgICAgcmV0dXJuIHB0O1xyXG4gICAgfVxyXG4gICAgLy8gcmV0dXJuIGEgcG9pbnQgd2l0aCB4IGFuZCB5IGFkanVzdGVkIGJ5IGR4IGFuZCBkeSByZXNwZWN0aXZlbHlcclxuICAgIGNvbnN0IG1vdmVkUG9pbnQgPSBwb2ludChwdC54ICsgZHgsIHB0LnkgKyBkeSk7XHJcbiAgICBpZiAocHQuY3AxKSB7XHJcbiAgICAgICAgbW92ZWRQb2ludC5jcDEgPSBwb2ludChwdC5jcDEueCArIGR4LCBwdC5jcDEueSArIGR5KTtcclxuICAgIH1cclxuICAgIGlmIChwdC5jcDIpIHtcclxuICAgICAgICBtb3ZlZFBvaW50LmNwMiA9IHBvaW50KHB0LmNwMi54ICsgZHgsIHB0LmNwMi55ICsgZHkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vdmVkUG9pbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaGlmdCBhIHNlcXVlbmNlIG9mIGRyYXcgcG9pbnRzIGFuZCByZXR1cm4gdGhlIHNoaWZ0ZWQgcG9pbnRzXHJcbiAqIEBwYXJhbSBkeFxyXG4gKiBAcGFyYW0gZHlcclxuICogQHBhcmFtIHBvaW50c1xyXG4gKiBAcmV0dXJucyB7QXJyYXl9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRqdXN0UG9pbnRzKGR4LCBkeSwgLi4ucG9pbnRzKSB7XHJcbiAgICBjb25zdCBzaGlmdGVkUG9pbnRzID0gW107XHJcbiAgICBwb2ludHMuZm9yRWFjaCgocHQpID0+IHtcclxuICAgICAgICBzaGlmdGVkUG9pbnRzLnB1c2goYWRqdXN0KHB0LCBkeCwgZHkpKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNoaWZ0ZWRQb2ludHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHBsb2RlIG9yIHNocmluayBwb2ludHMgYXJvdW5kIGEgY2VudGVyIHBvaW50IGluIHBsYWNlXHJcbiAqIEBwYXJhbSBjZW50ZXIgVGhlIHBvaW50IG90aGVyIHBvaW50cyBhcmUgc2NhbGVkIHJlbGF0aXZlIHRvXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZUJ5IE11bHRpcGxpZXIgZm9yIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIGVhY2ggcG9pbnQgYW5kIGNlbnRlclxyXG4gKiBAcGFyYW0gcG9pbnRzIFBvaW50cyB0byBzY2FsZSByZWxhdGl2ZSB0byBjZW50ZXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVBvaW50cyhjZW50ZXIsIHNjYWxlQnksIC4uLnBvaW50cykge1xyXG4gICAgcG9pbnRzLmZvckVhY2goKHB0KSA9PiB7XHJcbiAgICAgICAgaWYgKCFwdCB8fCBwdC5oYXNPd25Qcm9wZXJ0eSgneCcpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHt4LCB5fSA9IHNjYWxlKHB0LCBzY2FsZUJ5LCBjZW50ZXIpO1xyXG4gICAgICAgIHB0LnggPSB4O1xyXG4gICAgICAgIHB0LnkgPSB5O1xyXG4gICAgICAgIGlmIChwdC5jcDEpIHtcclxuICAgICAgICAgICAgcHQuY3AxID0gc2NhbGUocHQuY3AxLCBzY2FsZUJ5LCBjZW50ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHQuY3AyKSB7XHJcbiAgICAgICAgICAgIHB0LmNwMiA9IHNjYWxlKHB0LmNwMiwgc2NhbGVCeSwgY2VudGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZSBhIHNldCBvZiBwb2ludHMgYWJvdXQgYSBwaXZvdCBpbiBwbGFjZVxyXG4gKiBAcGFyYW0ge29iamVjdH0gcGl2b3QgVGhlIHBvaW50IHRvIHJvdGF0ZSBhYm91dFxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIFJhZGlhbnMgY291bnRlcmNsb2Nrd2lzZSB0byByb3RhdGUgcG9pbnRzXHJcbiAqIEBwYXJhbSBwb2ludHMgTGlzdCBvZiBwb2ludHMgdG8gcm90YXRlIGFib3V0IHBpdm90XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUG9pbnRzKHBpdm90LCByYWQsIC4uLnBvaW50cykge1xyXG4gICAgbGV0IGNvcyA9IE1hdGguY29zKHJhZCksIHNpbiA9IE1hdGguc2luKHJhZCk7XHJcbiAgICBwb2ludHMuZm9yRWFjaCgocHQpID0+IHtcclxuICAgICAgICBpZiAoIXB0IHx8IHB0Lmhhc093blByb3BlcnR5KCd4JykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcm90YXRlRGlmZihwaXZvdCwgcHQsIHNpbiwgY29zKTtcclxuICAgICAgICBpZiAocHQuY3AxKSB7XHJcbiAgICAgICAgICAgIHJvdGF0ZURpZmYocGl2b3QsIHB0LmNwMSwgc2luLCBjb3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHQuY3AyKSB7XHJcbiAgICAgICAgICAgIHJvdGF0ZURpZmYocGl2b3QsIHB0LmNwMiwgc2luLCBjb3MpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogSGVscGVyIGZvciByb3RhdGUgcG9pbnRzIHRvIGJlIHVzZWQgd2l0aCBjYWNoZWQgc2luIGFuZCBjb3NcclxuICogQHBhcmFtIHBpdm90IFBvaW50IGFyb3VuZCB3aGljaCB0byByb3RhdGVcclxuICogQHBhcmFtIHB0IFBvaW50IHRvIGJlIHJvdGF0ZWRcclxuICogQHBhcmFtIHNpbiBDYWNoZWQgc2luKHJhZCkgdG8gcm90YXRlIGJ5XHJcbiAqIEBwYXJhbSBjb3MgQ2FjaGVkIGNvcyhyYWQpIHRvIHJvdGF0ZSBieVxyXG4gKi9cclxuZnVuY3Rpb24gcm90YXRlRGlmZihwaXZvdCwgcHQsIHNpbiwgY29zKSB7XHJcbiAgICBjb25zdCBwb2ludERpZmYgPSBkaWZmKHBpdm90LCBwdCk7XHJcbiAgICBjb25zdCBkeCAgICAgICAgPSBwb2ludERpZmYueCAqIGNvcyAtIHBvaW50RGlmZi55ICogc2luO1xyXG4gICAgY29uc3QgZHkgICAgICAgID0gcG9pbnREaWZmLnggKiBzaW4gKyBwb2ludERpZmYueSAqIGNvcztcclxuICAgIHB0LnggICAgICAgICAgICA9IHBpdm90LnggKyBkeDtcclxuICAgIHB0LnkgICAgICAgICAgICA9IHBpdm90LnkgKyBkeTtcclxufVxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBqb2huc29uIG9uIDExLjA1LjE3LlxyXG4gKi9cclxuXHJcbmltcG9ydCB7c2NhbGUsIGFkZCwgbWFrZVBvaW50LCBleHRyYWN0UG9pbnQsIGRpZmYsIGdldFBlcnBlbmRpY3VsYXJWZWN0b3J9IGZyb20gXCIuL3BvaW50XCI7XHJcbmltcG9ydCB7Y2xvbmV9IGZyb20gXCIuL3V0aWxcIjtcclxuaW1wb3J0IHtyb3VuZFRvRGVjfSBmcm9tIFwiLi9udW1lcmljXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlUb0N1cnZlKHAxLCBwMiwge2xpbmVhciwgcXVhZHJhdGljLCBjdWJpY30pIHtcclxuICAgIGNvbnN0IGVwMSA9IGV4dHJhY3RQb2ludChwMSk7XHJcbiAgICBjb25zdCBlcDIgPSBleHRyYWN0UG9pbnQocDIpO1xyXG4gICAgaWYgKHAyLmNwMSAmJiBwMi5jcDIpIHtcclxuICAgICAgICByZXR1cm4gY3ViaWMoZXAxLCBwMi5jcDEsIHAyLmNwMiwgZXAyKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNwID0gcDIuY3AxIHx8IHAyLmNwMjtcclxuICAgIGlmIChjcCkge1xyXG4gICAgICAgIHJldHVybiBxdWFkcmF0aWMoZXAxLCBjcCwgZXAyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGxpbmVhcihlcDEsIGVwMik7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYSBwb2ludCBhdCB0IChvdXQgb2YgWzAsMV0pIGFsb25nIHRoZSBbcDEsIHAyXSBjdXJ2ZVxyXG4gKiBAcGFyYW0gdFxyXG4gKiBAcGFyYW0gcDFcclxuICogQHBhcmFtIHAyXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvaW50T25DdXJ2ZSh0LCBwMSwgcDIpIHtcclxuICAgIHJldHVybiBhcHBseVRvQ3VydmUocDEsIHAyLCB7XHJcbiAgICAgICAgbGluZWFyOiAoLi4uY3BzKSA9PiBnZXRQb2ludE9uTGluZSh0LCAuLi5jcHMpLFxyXG4gICAgICAgIHF1YWRyYXRpYyguLi5jcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1ha2VQb2ludChnZXRRdWFkcmF0aWNWYWx1ZS5iaW5kKG51bGwsIHQpLCAuLi5jcHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3ViaWMoLi4uY3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYWtlUG9pbnQoZ2V0Q3ViaWNWYWx1ZS5iaW5kKG51bGwsIHQpLCAuLi5jcHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNob3J0aGFuZCBmb3IgZ2V0dGluZyBwb2ludCBvbiBhIGxpbmUgY29ubmVjdGluZyBwMSAtPiBwMlxyXG4gKiBVc2VmdWwgZm9yIGZvcmNlIHRyZWF0bWVudCBvZiBwMiBhcyBhIGxpbmVhciBlbmQgcG9pbnQgZXZlbiBpZiBpdCBoYXMgY29udHJvbCBwb2ludHNcclxuICogQHBhcmFtIHRcclxuICogQHBhcmFtIHAxXHJcbiAqIEBwYXJhbSBwMlxyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2ludE9uTGluZSh0LCBwMSwgcDIpIHtcclxuICAgIHJldHVybiBtYWtlUG9pbnQoZ2V0TGluZWFyVmFsdWUuYmluZChudWxsLCB0KSwgcDEsIHAyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TGluZWFyVmFsdWUodCwgcDEsIHAyKSB7XHJcbiAgICAvLyAoMSAtIHQpICogcDEgKyB0ICogcDJcclxuICAgIHJldHVybiB0ICogKHAyIC0gcDEpICsgcDE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFF1YWRyYXRpY1ZhbHVlKHQsIHAxLCBjcCwgcDIpIHtcclxuICAgIC8vICgxIC0gdCleMiAqIHAxICsgMigxIC0gdCl0ICogY3AgKyB0XjIgKiBwMlxyXG4gICAgLy8gZ2F0aGVyIGNvZWZmaWNpZW50cyBvZiB0XjIsIHQsIGFuZCAxXHJcbiAgICByZXR1cm4gKHAxICsgcDIgLSAyICogY3ApICogdCAqIHQgKyAyICogKGNwIC0gcDEpICogdCArIHAxO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDdWJpY1ZhbHVlKHQsIHAxLCBjcDEsIGNwMiwgcDIpIHtcclxuICAgIC8vICgxIC0gdCleMyAqIHAxICsgMygxIC0gdCleMiAqIHQgKiBjcDEgKyAzKDEgLSB0KXReMiAqIGNwMiArIHReMyAqIHAyXHJcbiAgICAvLyBsZWF2ZSBpbiB1bmV4cGFuZGVkIGZvcm1cclxuICAgIHJldHVybiBwMSAqICgxIC0gdCkgKiAoMSAtIHQpICogKDEgLSB0KSArIDMgKiBjcDEgKiAoMSAtIHQpICogKDEgLSB0KSAqIHQgK1xyXG4gICAgICAgICAgIDMgKiBjcDIgKiAoMSAtIHQpICogdCAqIHQgKyBwMiAqIHQgKiB0ICogdDtcclxufVxyXG5cclxuZnVuY3Rpb24gc3BsaXRCZXppZXIodCwgcDEsIGNwMSwgY3AyLCBwMikge1xyXG4gICAgLy8gc3BsaXQgYSBjdWJpYyBjdWJpYyBiYXNlZCBvbiBEZSBDYXN0ZWxqYXUsIHQgaXMgYmV0d2VlbiBbMCwxXVxyXG4gICAgLy8ganVzdCBhIHNlcmllcyBvZiBsaW5lYXIgaW50ZXJwb2xhdGlvbnNcclxuICAgIGNvbnN0IEUgPSBnZXRQb2ludE9uTGluZSh0LCBwMSwgY3AxKTtcclxuICAgIGNvbnN0IEYgPSBnZXRQb2ludE9uTGluZSh0LCBjcDEsIGNwMik7XHJcbiAgICBjb25zdCBHID0gZ2V0UG9pbnRPbkxpbmUodCwgY3AyLCBwMik7XHJcbiAgICBjb25zdCBIID0gZ2V0UG9pbnRPbkxpbmUodCwgRSwgRik7XHJcbiAgICBjb25zdCBKID0gZ2V0UG9pbnRPbkxpbmUodCwgRiwgRyk7XHJcbiAgICBjb25zdCBLID0gZ2V0UG9pbnRPbkxpbmUodCwgSCwgSik7XHJcblxyXG4gICAgY29uc3QgbGVmdCA9IHtcclxuICAgICAgICBwMSxcclxuICAgICAgICBwMjogS1xyXG4gICAgfTtcclxuICAgIGxlZnQucDIuY3AxID0gRTtcclxuICAgIGxlZnQucDIuY3AyID0gSDtcclxuXHJcbiAgICBjb25zdCByaWdodCA9IHtcclxuICAgICAgICBwMTogZXh0cmFjdFBvaW50KEspLFxyXG4gICAgICAgIHAyXHJcbiAgICB9O1xyXG4gICAgcmlnaHQucDIuY3AxID0gSjtcclxuICAgIHJpZ2h0LnAyLmNwMiA9IEc7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsZWZ0LFxyXG4gICAgICAgIHJpZ2h0XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdFF1YWRyYXRpYyh0LCBwMSwgY3AsIHAyKSB7XHJcbiAgICAvLyBzcGxpdCBhIHF1YWRyYXRpYyBjdWJpYyBiYXNlZCBvbiBEZSBDYXN0ZWxqYXUsIHQgaXMgYmV0d2VlbiBbMCwxXVxyXG4gICAgY29uc3QgRCA9IGdldFBvaW50T25MaW5lKHQsIHAxLCBjcCk7XHJcbiAgICBjb25zdCBFID0gZ2V0UG9pbnRPbkxpbmUodCwgY3AsIHAyKTtcclxuICAgIGNvbnN0IEYgPSBnZXRQb2ludE9uTGluZSh0LCBELCBFKTtcclxuXHJcbiAgICBjb25zdCBsZWZ0ID0ge1xyXG4gICAgICAgIHAxLFxyXG4gICAgICAgIHAyOiBGXHJcbiAgICB9O1xyXG4gICAgbGVmdC5wMi5jcDEgPSBEO1xyXG4gICAgY29uc3QgcmlnaHQgPSB7XHJcbiAgICAgICAgcDE6IGV4dHJhY3RQb2ludChGKSxcclxuICAgICAgICBwMlxyXG4gICAgfTtcclxuICAgIHJpZ2h0LnAyLmNwMSA9IEU7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBsZWZ0LFxyXG4gICAgICAgIHJpZ2h0XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdExpbmVhcih0LCBwMSwgcDIpIHtcclxuICAgIC8vIHNwbGl0IGEgbGluZWFyIGxpbmVhclxyXG4gICAgY29uc3QgQyA9IGdldFBvaW50T25MaW5lKHQsIHAxLCBwMik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxlZnQgOiB7XHJcbiAgICAgICAgICAgIHAxLFxyXG4gICAgICAgICAgICBwMjogQ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmlnaHQ6IHtcclxuICAgICAgICAgICAgcDE6IEMsXHJcbiAgICAgICAgICAgIHAyXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNwbGl0IHRoZSBjdXJ2ZSBiZXR3ZWVuIHR3byBkcmF3cG9pbnRzIGFuZCByZXR1cm4gYWxsIHRoZSByZXN1bHRpbmcgZHJhd3BvaW50c1xyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0IFwidGltZVwiIGFsb25nIHRoZSBjdXJ2ZSB0byBzcGxpdCBhdC4gU2luY2UgYWxsIGN1cnZlcyBhcmUgcGFyYW1ldGVyaXplZFxyXG4gKiBjdXJ2ZXMsIHQgaXMgdGhlaXIgcGFyYW1ldGVyLiBDYW4gYmUgdGhvdWdodCBvZiBhcyB0cmF2ZXJzaW5nIGFsb25nIHRoZSBjdXJ2ZSwgd2hlcmUgMCBpc1xyXG4gKiBhdCB0aGUgc3RhcnQgcG9pbnQgYW5kIDEgaXMgYXQgdGhlIGVuZCBwb2ludC4gVGhpcyB2YWx1ZSBjYW4gZ28gYmV5b25kIFswLDFdLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gcDEgU3RhcnRpbmcgZHJhd3BvaW50XHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBwMiBFbmRpbmcgZHJhd3BvaW50IGFuZCBhbHNvIHdoZXJlIHdlIGxvb2sgYXQgdGhlIGNvbnRyb2wgcG9pbnRzXHJcbiAqIEByZXR1cm5zIHt7bGVmdCwgcmlnaHR9fSBPYmplY3QgaGF2aW5nIGEgbGVmdCBhbmQgcmlnaHQgcHJvcGVydHksIGVhY2ggd2l0aCB0aGVpciBvd25cclxuICogcDEgKHN0YXJ0IHBvaW50KSwgcDIgKGVuZCBwb2ludCksIGFuZCBvcHRpb25hbGx5IGNwMSBhbmQgY3AyIGRlcGVuZGluZyBvbiB3aGF0IGtpbmQgb2ZcclxuICogY3VydmUgd2FzIHNwbGl0LiBOb3RlIHRoYXQgc3AubGVmdC5wMiA9PT0gc3AucmlnaHQucDEgYWx3YXlzIGluIHZhbHVlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0Q3VydmUodCwgcDEsIHAyKSB7XHJcbiAgICAvLyBzcGxpdCBlaXRoZXIgYSBxdWFkcmF0aWMgb3IgY3ViaWMgY3VydmUgZGVwZW5kaW5nIG9uIG51bWJlciBvZiBjb250cm9sIHBvaW50cyBvblxyXG4gICAgLy8gdGhlIGVuZCBwb2ludFxyXG4gICAgcmV0dXJuIGFwcGx5VG9DdXJ2ZShwMSwgcDIsIHtcclxuICAgICAgICBsaW5lYXIgICA6IHNwbGl0TGluZWFyLmJpbmQobnVsbCwgdCksXHJcbiAgICAgICAgcXVhZHJhdGljOiBzcGxpdFF1YWRyYXRpYy5iaW5kKG51bGwsIHQpLFxyXG4gICAgICAgIGN1YmljICAgIDogc3BsaXRCZXppZXIuYmluZChudWxsLCB0KSxcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZUxpbmVhcihwMSwgcDIsIHApIHtcclxuICAgIC8vIGluZmluaXRlIG51bWJlciBvZiBvcHRpb25zLCBjYW4ndCBjYWxjdWxhdGVcclxuICAgIGlmIChwMiA9PT0gcDEpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICAvLyB0XHJcbiAgICByZXR1cm4gWyhwIC0gcDEpIC8gKHAyIC0gcDEpXTtcclxufVxyXG5cclxuZnVuY3Rpb24gc29sdmVRdWFkcmF0aWNFcXVhdGlvbihhLCBiLCBjKSB7XHJcblxyXG4gICAgY29uc3QgZGlzY3JpbWluYW50ID0gYiAqIGIgLSA0ICogYSAqIGM7XHJcblxyXG4gICAgaWYgKGRpc2NyaW1pbmFudCA8IDApIHtcclxuICAgICAgICByZXR1cm4gW107XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAoLWIgKyBNYXRoLnNxcnQoZGlzY3JpbWluYW50KSkgLyAoMiAqIGEpLFxyXG4gICAgICAgICAgICAoLWIgLSBNYXRoLnNxcnQoZGlzY3JpbWluYW50KSkgLyAoMiAqIGEpXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGludGVycG9sYXRlUXVhZHJhdGljKHAxLCBjcDEsIHAyLCBwKSB7XHJcbiAgICBjb25zdCBhID0gKHAxIC0gMiAqIGNwMSArIHAyKTtcclxuICAgIGNvbnN0IGIgPSAyICogKGNwMSAtIHAxKTtcclxuICAgIGNvbnN0IGMgPSBwMSAtIHA7XHJcblxyXG4gICAgLy8gMiBwb3NzaWJsZSB2YWx1ZXMgZm9yIHRcclxuICAgIHJldHVybiBzb2x2ZVF1YWRyYXRpY0VxdWF0aW9uKGEsIGIsIGMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjdWJlUm9vdCh2KSB7XHJcbiAgICBpZiAodiA8IDApIHtcclxuICAgICAgICByZXR1cm4gLU1hdGgucG93KC12LCAxIC8gMyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnBvdyh2LCAxIC8gMyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTb2x2ZSBhIGN1YmljIGVxdWF0aW9uIG9mIHRoZSBmb3JtIHheMyArIGEgKiB4XjIgKyBiICogeCArIGMgPSAwIGZvciB4XHJcbiAqIFVzZXMgQ2FyZGFubydzIGVxdWF0aW9uXHJcbiAqIFNlZSBodHRwczovL3RyYW5zNG1pbmQuY29tL3BlcnNvbmFsX2RldmVsb3BtZW50L21hdGhlbWF0aWNzL3BvbHlub21pYWxzL2N1YmljQWxnZWJyYS5odG1cclxuICogQHBhcmFtIGFcclxuICogQHBhcmFtIGJcclxuICogQHBhcmFtIGNcclxuICogQHJldHVybnMgeyp9XHJcbiAqL1xyXG5mdW5jdGlvbiBzb2x2ZUN1YmljRXF1YXRpb24oYSwgYiwgYykge1xyXG5cclxuICAgIGNvbnN0IGEzID0gYSAvIDM7XHJcbiAgICAvLyByZWR1Y2UgdG8gdF4zICsgcCAqIHQgKyBxID0gMCBmb3JtXHJcbiAgICAvLyBhbHdheXMgcmVkdWNpYmxlIGJ5IHN1YnN0aXR1dGluZyB4ID0gdCAtIGEgLyAzXHJcbiAgICBjb25zdCBwID0gKDMgKiBiIC0gYSAqIGEpIC8gMztcclxuICAgIGNvbnN0IHAzID0gcCAvIDM7XHJcbiAgICBjb25zdCBxID0gKDIgKiBhICogYSAqIGEgLSA5ICogYSAqIGIgKyAyNyAqIGMpIC8gMjc7XHJcbiAgICBjb25zdCBxMiA9IHEgLyAyO1xyXG5cclxuICAgIC8vIGZ1cnRoZXIgdHJhbnNmb3JtYXRpb24gaW50byAodSAtIHYpXjMgKyAzdXYodSAtIHYpID0gdV4zIC0gdl4zXHJcbiAgICAvLyB3aXRoIHN1YnN0aXR1dGlvbnMgcCA9IDN1diwgLXEgPSB1XjMgLSB2XjMsIHQgPSB1IC0gdlxyXG4gICAgLy8gdiA9IHAvKDN1KSBzdWJzdGl0dXRlZCBpbnRvXHJcbiAgICAvLyB1XjMgLSB2XjMgPSAtcSBnaXZlc1xyXG4gICAgLy8gdV4zICsgcSAtIChwLygzdSkpXjMgPSAwIG11bHRpcGx5IGJ5IHVeM1xyXG4gICAgLy8gdV42ICsgcXVeMyAtIChwLzMpXjMgPSAwIHF1YWRyYXRpYyBpbiB1XjNcclxuICAgIC8vIHVeMyA9ICgtcSArLSBzcXJ0KHFeMyArIDQocC8zKV4zKSkgLyAyIHNpbXBsaWZpZWQgdG9cclxuICAgIC8vIHVeMyA9IC1xLzIgKy0gc3FydCgocS8yKV4yICsgKHAvMyleMykgZ2V0IHZeMyBmcm9tIHVeMyAtIHZeMyA9IC1xXHJcbiAgICAvLyB2XjMgPSBxLzIgICstIHNxcnQoKHEvMileMiArIChwLzMpXjMpXHJcbiAgICAvLyBhbmQgZGV0ZXJtaW5lIHRoZSBkaXNjcmltaW5hbnQ6XHJcbiAgICBjb25zdCBkaXNjcmltaW5hbnQgPSByb3VuZFRvRGVjKHEyICogcTIgKyBwMyAqIHAzICogcDMsIDgpO1xyXG5cclxuICAgIC8vIDEgcmVhbCByb290XHJcbiAgICBpZiAoZGlzY3JpbWluYW50ID4gMCkge1xyXG4gICAgICAgIGNvbnN0IHNxcnREaXNjcmltaW5hbnQgPSBNYXRoLnNxcnQoZGlzY3JpbWluYW50KTtcclxuICAgICAgICBjb25zdCB1ID0gY3ViZVJvb3QoLXEyICsgc3FydERpc2NyaW1pbmFudCk7XHJcbiAgICAgICAgY29uc3QgdiA9IGN1YmVSb290KHEyICsgc3FydERpc2NyaW1pbmFudCk7XHJcbiAgICAgICAgY29uc3QgeDEgPSB1IC0gdiAtIGEzO1xyXG4gICAgICAgIC8vIGlnbm9yZSBvdGhlciBpbWFnaW5hcnkgcm9vdHNcclxuICAgICAgICByZXR1cm4gW3gxXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhbGwgcm9vdHMgcmVhbCAoMyBpbiB0b3RhbCwgMSBzaW5nbGUgYW5kIDEgZG91YmxlKVxyXG4gICAgaWYgKGRpc2NyaW1pbmFudCA9PT0gMCkge1xyXG4gICAgICAgIC8vIHYgPSAtdVxyXG4gICAgICAgIGNvbnN0IHUgPSBjdWJlUm9vdCgtcTIpO1xyXG4gICAgICAgIC8vIHQgPSB1IC0gdiwgeCA9IHQgLSBhLzMgPSB1IC0gdiAtIGEvMyA9IDJ1IC0gYS8zXHJcbiAgICAgICAgY29uc3QgeDEgPSAyICogdSAtIGEzO1xyXG4gICAgICAgIC8vIGNvbmp1Z2F0ZSByb290cyBwcm9kdWNlIDEgZG91YmxlIHJvb3RcclxuICAgICAgICBjb25zdCB4MiA9IC11IC0gYTM7XHJcbiAgICAgICAgcmV0dXJuIFt4MSwgeDJdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGFsbCByb290cyBhcmUgcmVhbCBhbmQgZGlmZmVyZW50ICh1bnBsZWFzYW50IGltYWdpbmFyeSBkaXNjcmltaW5hbnQpXHJcbiAgICAvLyBmaXJzdCByZXByZXNlbnQgaW4gcG9sYXIgZm9ybSAoYSArIGJpKSA9IHIoY29zKHBoaSkgKyBpKnNpbihwaGkpKVxyXG4gICAgLy8gZmFjdG9yaW5nIG91dCBpID0gc3FydCgtMSlcclxuICAgIC8vIHVeMyA9IC1xLzIgKyBpKnNxcnQoLWRpc2NyaW1pbmFudClcclxuICAgIC8vIHZeMyA9IHEvMiAgKyBpKnNxcnQoLWRpc2NyaW1pbmFudClcclxuICAgIC8vIGZvciB1XjMsIGEgPSAtcS8yLCBiID0gc3FydCgtZGlzY3JpbWluYW50KVxyXG4gICAgLy8gcl4yID0gYV4yICsgYl4yID0gKC1xLzIpXjIgLSBkaXNjcmltaW5hbnRcclxuICAgIC8vIHJeMiA9IChxLzIpXjIgLSAoKHEvMileMiArIChwLzMpXjMpID0gLShwLzMpXjNcclxuICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoLXAzICogcDMgKiBwMyk7XHJcbiAgICAvLyBjb3MocGhpKSA9IGEvciAodHJpYW5nbGUgd2l0aCBhIGFsb25nIFJlLCBiIGFsb25nIEltIGFuZCByIGh5cG90ZW51c2UpXHJcbiAgICBsZXQgY29zcGhpID0gLXEyIC8gcjtcclxuICAgIC8vIGNvcnJlY3QgZm9yIGZsb2F0IHJvdW5kaW5nXHJcbiAgICBpZiAoY29zcGhpIDwgLTEpIHtcclxuICAgICAgICBjb3NwaGkgPSAtMTtcclxuICAgIH0gZWxzZSBpZiAoY29zcGhpID4gMSkge1xyXG4gICAgICAgIGNvc3BoaSA9IDE7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwaGkgPSBNYXRoLmFjb3MoY29zcGhpKTtcclxuICAgIC8vIGRlIE1vaXZyZSdzIGxhdyAtPiBbcihjb3MocGhpKSArIGkqc2luKHBoaSldXm4gPSByXm4gKiAoY29zKHBoaS9uKSArIGkqc2luKHBoaS9uKSlcclxuICAgIC8vIHZhbHVlcyBiZWxvdyBlYXN5IHRvIHNlZSBpZiBzZWVuIGFzIHZlY3RvcnMgaW4gY29tcGxleCBwbGFuZVxyXG4gICAgLy8gdSA9IHJeKDEvMykgKiAoY29zKHBoaS8zKSAgKyBpKnNpbihwaGkvMykpXHJcbiAgICAvLyB2ID0gcl4oMS8zKSAqICgtY29zKHBoaS8zKSArIGkqc2luKHBoaS8zKSlcclxuICAgIC8vIHggPSB1IC0gdiAtIGEvM1xyXG4gICAgLy8gaW1hZ2luYXJ5IHBhcnRzIGNhbmNlbCBvdXRcclxuICAgIGNvbnN0IGNvbW1vblByZWZpeCA9IDIgKiBjdWJlUm9vdChyKTtcclxuICAgIGNvbnN0IHgxID0gY29tbW9uUHJlZml4ICogTWF0aC5jb3MocGhpIC8gMykgLSBhMztcclxuICAgIGNvbnN0IHgyID0gY29tbW9uUHJlZml4ICogTWF0aC5jb3MoKHBoaSArIDIgKiBNYXRoLlBJKSAvIDMpIC0gYTM7XHJcbiAgICBjb25zdCB4MyA9IGNvbW1vblByZWZpeCAqIE1hdGguY29zKChwaGkgKyA0ICogTWF0aC5QSSkgLyAzKSAtIGEzO1xyXG4gICAgcmV0dXJuIFt4MSwgeDIsIHgzXTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW50ZXJwb2xhdGVDdWJpYyhwMSwgY3AxLCBjcDIsIHAyLCBwKSB7XHJcbiAgICAvLyBhbmQgcmV3cml0ZSBmcm9tIFthKDEtdCleMyArIDNidCgxLXQpXjIgKyAzYygxLXQpdF4yICsgZHReM10gZm9ybVxyXG4gICAgcDEgLT0gcDtcclxuICAgIGNwMSAtPSBwO1xyXG4gICAgY3AyIC09IHA7XHJcbiAgICBwMiAtPSBwO1xyXG5cclxuICAgIC8vIHRvIFt0XjMgKyBhdF4yICsgYnQgKyBjXSBmb3JtOlxyXG4gICAgY29uc3QgZCA9IC1wMSArIDMgKiBjcDEgLSAzICogY3AyICsgcDI7XHJcbiAgICBjb25zdCBhID0gKDMgKiBwMSAtIDYgKiBjcDEgKyAzICogY3AyICkgLyBkO1xyXG4gICAgY29uc3QgYiA9ICgtMyAqIHAxICsgMyAqIGNwMSkgLyBkO1xyXG4gICAgY29uc3QgYyA9IHAxIC8gZDtcclxuXHJcbiAgICByZXR1cm4gc29sdmVDdWJpY0VxdWF0aW9uKGEsIGIsIGMpLm1hcCh0ID0+IHJvdW5kVG9EZWModCwgNCkpO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldCBwb2ludHMgYWxvbmcgdGhlIGN1cnZlIGZyb20gdCA9IFswLDFdIHRoYXQgc2hhcmUgdGhlIGZpeGVkIGRpbWVuc2lvbiBhcyBiZXR3ZWVuUG9pbnQuXHJcbiAqIEZvciBleGFtcGxlLCBpZiBiZXR3ZWVuUG9pbnQgPSB7eDoxMCwgeTpudWxsfSwgdGhlbiB3ZSBhcmUgbG9va2luZyBmb3IgYWxsIHBvaW50cyB3aXRoXHJcbiAqIHggPSAxMC5cclxuICogQHBhcmFtIHAxXHJcbiAqIEBwYXJhbSBwMlxyXG4gKiBAcGFyYW0gYmV0d2VlblBvaW50IFF1ZXJ5IHRoYXQgaGFzIGVpdGhlciB4IG9yIHkgc2V0IHRvIG51bGwgd2hpY2ggaXMgdG8gYmUgZGV0ZXJtaW5lZFxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IExpc3Qgb2YgZHJhdyBwb2ludHMgdGhhdCBoYXZlIGEgXCJ0XCIgcHJvcGVydHkgd2hpY2ggaXMgaG93IGZhciB0aGV5IGFyZSBhbG9uZyB0aGUgY3VydmVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUN1cnZlKHAxLCBwMiwgYmV0d2VlblBvaW50KSB7XHJcbiAgICBsZXQga25vd25EaW07XHJcbiAgICBpZiAoYmV0d2VlblBvaW50LnggPT09IG51bGwpIHtcclxuICAgICAgICBrbm93bkRpbSA9IFwieVwiO1xyXG4gICAgfSBlbHNlIGlmIChiZXR3ZWVuUG9pbnQueSA9PT0gbnVsbCkge1xyXG4gICAgICAgIGtub3duRGltID0gXCJ4XCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cyA9IGFwcGx5VG9DdXJ2ZShwMSwgcDIsIHtcclxuICAgICAgICBsaW5lYXIgICA6ICguLi5jcHMpID0+IGludGVycG9sYXRlTGluZWFyKC4uLmNwcy5tYXAoY3AgPT4gY3Bba25vd25EaW1dKSxcclxuICAgICAgICAgICAgYmV0d2VlblBvaW50W2tub3duRGltXSksXHJcbiAgICAgICAgcXVhZHJhdGljOiAoLi4uY3BzKSA9PiBpbnRlcnBvbGF0ZVF1YWRyYXRpYyguLi5jcHMubWFwKGNwID0+IGNwW2tub3duRGltXSksXHJcbiAgICAgICAgICAgIGJldHdlZW5Qb2ludFtrbm93bkRpbV0pLFxyXG4gICAgICAgIGN1YmljICAgIDogKC4uLmNwcykgPT4gaW50ZXJwb2xhdGVDdWJpYyguLi5jcHMubWFwKGNwID0+IGNwW2tub3duRGltXSksXHJcbiAgICAgICAgICAgIGJldHdlZW5Qb2ludFtrbm93bkRpbV0pLFxyXG4gICAgfSkuZmlsdGVyKCh0KSA9PiB7XHJcbiAgICAgICAgLy8gc29sdmluZyBjdWJpYyBlcXVhdGlvbnMgaXMgbm90IHZlcnkgbnVtZXJpY2FsbHkgc3RhYmxlLi4uXHJcbiAgICAgICAgdCA9IHJvdW5kVG9EZWModCwgMyk7XHJcbiAgICAgICAgcmV0dXJuIHQgPj0gMCAmJiB0IDw9IDE7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdHMubWFwKCh0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcCA9IGdldFBvaW50T25DdXJ2ZSh0LCBwMSwgcDIpO1xyXG4gICAgICAgIHAudCA9IHQ7XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9KTtcclxuXHJcbn1cclxuXHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBjb250cm9sIHBvaW50IGZvciBhIHF1YWRyYXRpYyBjdXJ2ZSBiZXR3ZWVuIHR3byBwb2ludHMgd2l0aFxyXG4gKiBhIHNpbXBsZSBkZWZsZWN0aW9uIHBhcmFtZXRlclxyXG4gKiBAcGFyYW0gcDFcclxuICogQHBhcmFtIHAyXHJcbiAqIEBwYXJhbSB0IEhvdyBmYXIgYWxvbmcgdGhlIGxpbmVhciBiZXR3ZWVuIHAxIGFuZCBwMiB0aGUgY29udHJvbCBwb2ludCBzaG91bGQgc3RhcnRcclxuICogQHBhcmFtIGRlZmxlY3Rpb24gV2hpY2ggZGlyZWN0aW9uIGFuZCBob3cgZmFyIHBlcnBlbmRpY3VsYXIgdG8gdGhlIHAxLXAyIGxpbmVhclxyXG4gKiB0aGUgY29udHJvbCBwb2ludCBzaG91bGQgYmUgKHRoZSBub3JtIG9mIHRoZSBwZXJwZW5kaWN1bGFyIHZlY3RvcilcclxuICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn19XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2ltcGxlUXVhZHJhdGljKHAxLCBwMiwgdCA9IDAuNSwgZGVmbGVjdGlvbiA9IDApIHtcclxuICAgIGNvbnN0IGNwMSA9IGdldFBvaW50T25MaW5lKHQsIHAxLCBwMik7XHJcbiAgICByZXR1cm4gYWRkKGNwMSwgZ2V0UGVycGVuZGljdWxhclZlY3RvcihkaWZmKHAxLCBwMikpLCBkZWZsZWN0aW9uKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBJbmNyZWFzZSB0aGUgZGVncmVlIG9mIGEgY3ViaWMgY3VydmUgKGUuZy4gcXVhZHJhdGljIHRvIGN1YmljKSB3aXRob3V0IGNoYW5naW5nIGl0cyBzaGFwZVxyXG4gKiBAcGFyYW0gcDEgU3RhcnRpbmcgcG9pbnQgb2YgdGhlIGN1cnZlXHJcbiAqIEBwYXJhbSBwMiBFbmRpbmcgcG9pbnQgb2YgdGhlIGN1cnZlIGFuZCBob2xkcyB0aGUgb3RoZXIgY29udHJvbCBwb2ludHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlbGV2YXRlRGVncmVlKHAxLCBwMikge1xyXG4gICAgY29uc3QgY3BzID0gW3AxXTtcclxuICAgIGZvciAobGV0IGNwIGluIHAyKSB7XHJcbiAgICAgICAgaWYgKGNwLnN0YXJ0c1dpdGgoXCJjcFwiKSAmJiBwMi5oYXNPd25Qcm9wZXJ0eShjcCkpIHtcclxuICAgICAgICAgICAgY3BzLnB1c2gocDJbY3BdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjcHMucHVzaChleHRyYWN0UG9pbnQocDIpKTtcclxuXHJcbiAgICBjb25zdCBuZXdFbmRQb2ludCA9IGV4dHJhY3RQb2ludChwMik7XHJcbiAgICAvLyBzZWUgaHR0cHM6Ly93d3cuY3MubXR1LmVkdS9+c2hlbmUvQ09VUlNFUy9jczM2MjEvTk9URVMvc3BsaW5lL0Jlemllci9iZXppZXItZWxldi5odG1sXHJcbiAgICBmb3IgKGxldCBpID0gMSwgbmV3RGVncmVlID0gY3BzLmxlbmd0aDsgaSA8IG5ld0RlZ3JlZTsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY29lZmZpY2llbnQgPSBpIC8gbmV3RGVncmVlO1xyXG5cclxuICAgICAgICBuZXdFbmRQb2ludFtcImNwXCIgKyBpXSA9IG1ha2VQb2ludCgoY3BzUHJldiwgY3BzKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb2VmZmljaWVudCAqIGNwc1ByZXYgKyAoMSAtIGNvZWZmaWNpZW50KSAqIGNwcztcclxuICAgICAgICB9LCBjcHNbaSAtIDFdLCBjcHNbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ld0VuZFBvaW50O1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBjdWJpYyBjdWJpYyBjb250cm9sIHBvaW50IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJ2ZSBmcm9tIHN0YXJ0IHRvIGVuZC5cclxuICogSWYgZW5kIGFscmVhZHkgaGFzIDIgY29udHJvbCBwb2ludHMgcmV0dXJuIHRoZW07IGlmIGVuZCBoYXMgb25seSAxIGNvbnRyb2wgcG9pbnQgKHF1YWRyYXRpYylcclxuICogdGhlbiByZXR1cm4gMiBjb250cm9sIHBvaW50cyB0aGF0IHdvdWxkIGxlYWQgdG8gYW4gZXF1aXZhbGVudCBjdXJ2ZTsgaWYgZW5kIGhhcyBubyBjb250cm9sXHJcbiAqIHBvaW50IChsaW5lYXIpIHRoZW4gcmV0dXJuIDIgY29udHJvbCBwb2ludHMgbG9jYXRlZCBpZGVudGljYWxseSBhdCB0aGUgbWlkcG9pbnQgYmV0d2VlblxyXG4gKiBzdGFydCBhbmQgZW5kLlxyXG4gKiBAcGFyYW0gcDFcclxuICogQHBhcmFtIHAyXHJcbiAqIEByZXR1cm5zIHtbKiwqXX0gY3AxIGFuZCBjcDIgb2YgZW5kIHBvaW50XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3ViaWNDb250cm9sUG9pbnRzKHAxLCBwMikge1xyXG4gICAgcmV0dXJuIGFwcGx5VG9DdXJ2ZShwMSwgcDIsIHtcclxuICAgICAgICBsaW5lYXIgKCkgIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3RW5kID0gZWxldmF0ZURlZ3JlZShwMSwgZWxldmF0ZURlZ3JlZShwMSwgcDIpKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtuZXdFbmQuY3AxLCBuZXdFbmQuY3AyXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHF1YWRyYXRpYyAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0VuZCA9IGVsZXZhdGVEZWdyZWUocDEsIHAyKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtuZXdFbmQuY3AxLCBuZXdFbmQuY3AyXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGN1YmljOiAoKSA9PiBbcDIuY3AxLCBwMi5jcDJdXHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybSBzdGFydCBjdXJ2ZSBpbnRvIGVuZCBjdXJ2ZSAocmVzdWx0cyBpbiBjdWJpYyBjdWJpYykgd2l0aCB0aGUgYW1vdW50XHJcbiAqIG9mIHRyYW5zZm9ybWF0aW9uIGRldGVybWluZWQgYnkgdCBbMCwxXS4gTGltaXRlZCB0byB0cmFuc2Zvcm1pbmcgdGhlIGVuZCBwb2ludCBhcyB0aGUgc3RhcnQgYW5kXHJcbiAqIGVuZCBjdXJ2ZXMgbXVzdCBoYXZlIHRoZSBzYW1lIHN0YXJ0aW5nIHBvaW50XHJcbiAqIEBwYXJhbSB0IEFtb3VudCB0byB0cmFuc2Zvcm0sIFswLDFdIDAgaXMgbm8gdHJhbnNmb3JtYXRpb24gYXQgYWxsIGFuZCBpcyBlcXVhbCB0byB0aGUgc3RhcnQgY3VydmU7XHJcbiAqIDEgaXMgZnVsbCB0cmFuc2Zvcm1hdGlvbiBhbmQgaXMgZXF1YWwgdG8gdGhlIGVuZCBjdXJ2ZVxyXG4gKiBAcGFyYW0gcDFcclxuICogQHBhcmFtIGluaXRQMlxyXG4gKiBAcGFyYW0gZW5kUDJcclxuICogQHJldHVybnMgUmVwbGFjZW1lbnQgZHJhdyBwb2ludCBmb3IgZW5kUDJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1DdXJ2ZSh0LCBwMSwgaW5pdFAyLCBlbmRQMikge1xyXG4gICAgaWYgKCFpbml0UDIpIHtcclxuICAgICAgICByZXR1cm4gZW5kUDI7XHJcbiAgICB9XHJcbiAgICBpZiAoIWVuZFAyKSB7XHJcbiAgICAgICAgcmV0dXJuIGluaXRQMjtcclxuICAgIH1cclxuICAgIGNvbnN0IFtpbml0Q3AxLCBpbml0Q3AyXSA9IGdldEN1YmljQ29udHJvbFBvaW50cyhwMSwgaW5pdFAyKTtcclxuICAgIGNvbnN0IFtlbmRDcDEsIGVuZENwMl0gPSBnZXRDdWJpY0NvbnRyb2xQb2ludHMocDEsIGVuZFAyKTtcclxuICAgIGNvbnN0IG5ld0VuZCA9IGdldFBvaW50T25MaW5lKHQsIGluaXRQMiwgZW5kUDIpO1xyXG4gICAgbmV3RW5kLmNwMSA9IGdldFBvaW50T25MaW5lKHQsIGluaXRDcDEsIGVuZENwMSk7XHJcbiAgICBuZXdFbmQuY3AyID0gZ2V0UG9pbnRPbkxpbmUodCwgaW5pdENwMiwgZW5kQ3AyKTtcclxuICAgIHJldHVybiBuZXdFbmQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHaXZlbiBhIGN1cnZlIGRlZmluZWQgYnkgKHN0YXJ0LCBlbmQpLCByZXR1cm4gYSBkcmF3IHBvaW50IHN1Y2ggdGhhdCAoZW5kLCByZXR1cm5lZCBwb2ludCkgbG9va3MgaWRlbnRpY2FsLFxyXG4gKiBidXQgdHJhdmVscyBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxyXG4gKiBAcGFyYW0gc3RhcnRcclxuICogQHBhcmFtIGVuZFxyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZXZlcnNlRHJhd1BvaW50KHN0YXJ0LCBlbmQpIHtcclxuICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xyXG4gICAgICAgIHJldHVybiBzdGFydDtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgeCAgOiBzdGFydC54LFxyXG4gICAgICAgIHkgIDogc3RhcnQueSxcclxuICAgICAgICBjcDE6IGNsb25lKGVuZC5jcDIpLFxyXG4gICAgICAgIGNwMjogY2xvbmUoZW5kLmNwMSlcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYSBjb250cm9sIHBvaW50IHRoYXQgd291bGQgZW5zdXJlIGEgc21vb3RoIGNvbnRpbnVhdGlvbiBmcm9tIHRoZSBpbnB1dCBjdXJ2ZSB3aGVuXHJcbiAqIHVzZWQgYXMgY3AxIGVpdGhlciBmb3IgYSBxdWFkcmF0aWMgb3IgY3ViaWMgY3VydmUuXHJcbiAqIEBwYXJhbSB7cG9pbnR9IHAxIFN0YXJ0IHBvaW50IG9mIGEgY3VydmVcclxuICogQHBhcmFtIHtwb2ludH0gcDIgRW5kIHBvaW50IG9mIGEgY3VydmVcclxuICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlQnkgSG93IG11Y2ggYmFjayB0byBleHRlbmQgdGhlIGNvbnRpbnVpbmcgY29udHJvbCBwb2ludC5cclxuICogQSB2YWx1ZSBvZiAxIHByb2R1Y2VzIGEgc3ltbWV0cmljIGN1cnZlLlxyXG4gKiBAcmV0dXJucyB7e3gsIHl9fHt4OiBudW1iZXIsIHk6IG51bWJlcn18Kn0gQ29udGludWluZyBjb250cm9sIHBvaW50XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29udGludWVDdXJ2ZShwMSwgcDIsIHNjYWxlQnkgPSAxKSB7XHJcbiAgICByZXR1cm4gYXBwbHlUb0N1cnZlKHAxLCBwMiwge1xyXG4gICAgICAgIGxpbmVhcigpe1xyXG4gICAgICAgICAgICByZXR1cm4gYWRkKHAyLCBkaWZmKHAxLCBwMiksIHNjYWxlQnkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcXVhZHJhdGljKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjdWJpY0VuZFBvaW50ID0gZWxldmF0ZURlZ3JlZShwMSwgcDIpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2NhbGUoY3ViaWNFbmRQb2ludC5jcDIsIC1zY2FsZUJ5LCBwMik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjdWJpYygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNjYWxlKHAyLmNwMiwgLXNjYWxlQnksIHAyKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7YnJlYWtQb2ludCwgZXh0cmFjdFBvaW50fSBmcm9tIFwiLi9wb2ludFwiO1xyXG5pbXBvcnQge3NpbXBsZVF1YWRyYXRpY30gZnJvbSBcIi4vY3VydmVcIjtcclxuXHJcbi8qKlxyXG4gKiBTdHlsaW5nIG9wdGlvbiB0byBub3Qgc2hvdyBzdHJva2Ugb3IgZmlsbFxyXG4gKiBAcmVhZG9ubHlcclxuICogQHR5cGUge3N0cmluZ31cclxuICovXHJcbmV4cG9ydCBjb25zdCBub25lID0gXCJyZ2JhKDAsMCwwLDApXCI7XHJcblxyXG4vKipcclxuICogRHJhdyB0aGUgcGF0aCBmb3JtZWQgYnkgdGhlIGxpc3Qgb2YgZHJhd3BvaW50c1xyXG4gKiBAcGFyYW0ge0NvbnRleHQyRFRyYWNrZWR9IGN0eCBDb250ZXh0MkQgdG8gcmVuZGVyIHRvLCBpZiBpdCBleGlzdHNcclxuICogQHBhcmFtIHtPYmplY3RbXX0gcG9pbnRzIE9yZGVyZWQgbGlzdCBvZiBkcmF3IHBvaW50cywgZWFjaCB3aXRoIHggYW5kIHlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3UG9pbnRzKGN0eCwgLi4ucG9pbnRzKSB7XHJcbiAgICAvLyBnaXZlbiBjdHggYW5kIGEgbGlzdCBvZiBwb2ludHMsIGRyYXcgcG9pbnRzIGJldHdlZW4gdGhlbSBiYXNlZCBvbiBob3cgbWFueSBjb250cm9sIHBvaW50c1xyXG4gICAgLy8gYXJlIGRlZmluZWQgZm9yIGVhY2hcclxuICAgIC8vIGRvZXMgbm90IGJlZ2luIGEgcGF0aCBvciBmaWxsIG9yIHN0cm9rZSAoanVzdCBtb3ZlcyBwZW4gYmV0d2VlbiB0aGUgcG9pbnRzKVxyXG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHN0YXJ0UG9pbnQgPSBwb2ludHNbMF07XHJcbiAgICAvLyBpZiBudWxsIGlzIHBhc3NlZCB0aHJvdWdoLCBqdXN0IGNvbnRpbnVlIGZyb20gbGFzdCBsb2NhdGlvblxyXG4gICAgaWYgKHN0YXJ0UG9pbnQpIHtcclxuICAgICAgICBpZiAoc3RhcnRQb2ludCA9PT0gYnJlYWtQb2ludCkge1xyXG4gICAgICAgICAgICBzdGFydFBvaW50ID0gcG9pbnRzWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhcnRQb2ludCAmJiBzdGFydFBvaW50Lmhhc093blByb3BlcnR5KFwieFwiKSkge1xyXG4gICAgICAgICAgICBjdHgubW92ZVRvKHN0YXJ0UG9pbnQueCwgc3RhcnRQb2ludC55KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBmb3IgZXZlcnkgcG9pbnQgYWZ0ZXJcclxuICAgIGZvciAobGV0IGkgPSAxLCBsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICBsZXQgcCA9IHBvaW50c1tpXTtcclxuICAgICAgICAvLyBhbGxvdyBjYWxscyB3aXRoIG5vbmV4aXN0ZW50IHBvaW50cyBzbyB0aGF0IGRpZmZlcmVudCBkcmF3aW5nIG1vZGVzIGNhbiBiZVxyXG4gICAgICAgIC8vIGNvbnNvbGlkYXRlZFxyXG4gICAgICAgIGlmICghcCkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRvbid0IGhhdmUgcG9pbnQgI1wiLCBpKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwID09PSBicmVha1BvaW50KSB7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGkgPCBwb2ludHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBwID0gcG9pbnRzW2ldO1xyXG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyhwLngsIHAueSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHAuY3AyICYmIHAuY3AxKSB7XHJcbiAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHAuY3AxLngsIHAuY3AxLnksIHAuY3AyLngsIHAuY3AyLnksIHAueCwgcC55LCBwLnRyYWNlT3B0aW9ucyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwLmNwMSkge1xyXG4gICAgICAgICAgICBjdHgucXVhZHJhdGljQ3VydmVUbyhwLmNwMS54LCBwLmNwMS55LCBwLngsIHAueSwgcC50cmFjZU9wdGlvbnMpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocC5jcDIpIHtcclxuICAgICAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8ocC5jcDIueCwgcC5jcDIueSwgcC54LCBwLnksIHAudHJhY2VPcHRpb25zKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHAuaGFzT3duUHJvcGVydHkoXCJ4XCIpKSB7XHJcbiAgICAgICAgICAgIGN0eC5saW5lVG8ocC54LCBwLnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgZHJhd3BvaW50cyBmb3IgYSBjaXJjbGVcclxuICogQHBhcmFtIHtvYmplY3R9IGNlbnRlciBQb2ludCBhdCB0aGUgY2VudGVyIG9mIHRoZSBjaXJjbGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyBSYWRpdXMgaW4gY21cclxuICogQHJldHVybnMge29iamVjdFtdfSBMaXN0IG9mIGRyYXcgcG9pbnRzIGZvciB0aGlzIGNpcmNsZSAoY291bGQgYmUgcGFzc2VkIHRvIGd1aU1lbnVJdGVtKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdDaXJjbGUoY2VudGVyLCByYWRpdXMpIHtcclxuICAgIGNvbnN0IHN0cmV0Y2ggPSAwLjU1MjI4NDc0OTgzMSAqIHJhZGl1cztcclxuICAgIGxldCB0b3AgPSB7XHJcbiAgICAgICAgeDogY2VudGVyLngsXHJcbiAgICAgICAgeTogY2VudGVyLnkgKyByYWRpdXNcclxuICAgIH07XHJcbiAgICBsZXQgcmlnaHQgPSB7XHJcbiAgICAgICAgeDogY2VudGVyLnggKyByYWRpdXMsXHJcbiAgICAgICAgeTogY2VudGVyLnlcclxuICAgIH07XHJcbiAgICBsZXQgYm90ID0ge1xyXG4gICAgICAgIHg6IGNlbnRlci54LFxyXG4gICAgICAgIHk6IGNlbnRlci55IC0gcmFkaXVzXHJcbiAgICB9O1xyXG4gICAgbGV0IGxlZnQgPSB7XHJcbiAgICAgICAgeDogY2VudGVyLnggLSByYWRpdXMsXHJcbiAgICAgICAgeTogY2VudGVyLnlcclxuICAgIH07XHJcbiAgICB0b3AuY3AxID0ge1xyXG4gICAgICAgIHg6IGxlZnQueCxcclxuICAgICAgICB5OiBsZWZ0LnkgKyBzdHJldGNoXHJcbiAgICB9O1xyXG4gICAgdG9wLmNwMiA9IHtcclxuICAgICAgICB4OiB0b3AueCAtIHN0cmV0Y2gsXHJcbiAgICAgICAgeTogdG9wLnlcclxuICAgIH07XHJcbiAgICByaWdodC5jcDEgPSB7XHJcbiAgICAgICAgeDogdG9wLnggKyBzdHJldGNoLFxyXG4gICAgICAgIHk6IHRvcC55XHJcbiAgICB9O1xyXG4gICAgcmlnaHQuY3AyID0ge1xyXG4gICAgICAgIHg6IHJpZ2h0LngsXHJcbiAgICAgICAgeTogcmlnaHQueSArIHN0cmV0Y2hcclxuICAgIH07XHJcbiAgICBib3QuY3AxID0ge1xyXG4gICAgICAgIHg6IHJpZ2h0LngsXHJcbiAgICAgICAgeTogcmlnaHQueSAtIHN0cmV0Y2hcclxuICAgIH07XHJcbiAgICBib3QuY3AyID0ge1xyXG4gICAgICAgIHg6IGJvdC54ICsgc3RyZXRjaCxcclxuICAgICAgICB5OiBib3QueVxyXG4gICAgfTtcclxuICAgIGxlZnQuY3AxID0ge1xyXG4gICAgICAgIHg6IGJvdC54IC0gc3RyZXRjaCxcclxuICAgICAgICB5OiBib3QueVxyXG4gICAgfTtcclxuICAgIGxlZnQuY3AyID0ge1xyXG4gICAgICAgIHg6IGxlZnQueCxcclxuICAgICAgICB5OiBsZWZ0LnkgLSBzdHJldGNoXHJcbiAgICB9O1xyXG4gICAgLy8gZG9lc24ndCBhY3R1YWxseSBtYXR0ZXIgaW4gd2hpY2ggb3JkZXIgeW91IGRyYXcgdGhlbVxyXG4gICAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3QsIGxlZnQsIHRvcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3U3BlY2lmaWNDdXJsKGxlZnQsIGNlbnRlciwgcmlnaHQpIHtcclxuICAgIGNvbnN0IHAxID0gZXh0cmFjdFBvaW50KGxlZnQpO1xyXG4gICAgY29uc3QgcDIgPSBleHRyYWN0UG9pbnQoY2VudGVyKTtcclxuICAgIGNvbnN0IHAzID0gZXh0cmFjdFBvaW50KHJpZ2h0KTtcclxuXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3Qge3QgPSAwLjUsIGRlZmxlY3Rpb24gPSAwLjV9ID0gbGVmdDtcclxuICAgICAgICBwMi5jcDEgPSBzaW1wbGVRdWFkcmF0aWMocDEsIHAyLCB0LCBkZWZsZWN0aW9uKTtcclxuICAgIH1cclxuICAgIHtcclxuICAgICAgICBjb25zdCB7dCA9IDAuNSwgZGVmbGVjdGlvbiA9IDAuNX0gPSByaWdodDtcclxuICAgICAgICBwMy5jcDEgPSBzaW1wbGVRdWFkcmF0aWMocDEsIHAyLCB0LCBkZWZsZWN0aW9uKTtcclxuICAgIH1cclxuICAgIHJldHVybiBbcDEsIHAyLCBwM107XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogRGVidWcgdGhlIGN1cnZlIGdvaW5nIGludG8gYSBkcmF3cG9pbnQuIFVzZSBieSB3cmFwcGluZyBhIGRyYXdwb2ludCB3aXRoIGl0IHdoZW4gcmV0dXJuaW5nXHJcbiAqIHRvIGd1aU1lbnVJdGVtLlxyXG4gKiBAcGFyYW0ge29iamVjdH0gcHRcclxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBmb3IgaG93IHRvIHNob3cgdGhlIHBvaW50c1xyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFjZVBvaW50KHB0LCBvcHRpb25zKSB7XHJcbiAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICBvcHRpb25zID0ge3JhZGl1czogMX07XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgLy8gY29udmVuaWVuY2UgZm9yIGRlZmluaW5nIHJhZGl1cyBvZiB0cmFjZSBwb2ludFxyXG4gICAgICAgIG9wdGlvbnMgPSB7cmFkaXVzOiBvcHRpb25zfTtcclxuICAgIH1cclxuICAgIHB0LnRyYWNlT3B0aW9ucyA9IHtwb2ludDogb3B0aW9uc307XHJcbiAgICByZXR1cm4gcHQ7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiIsImV4cG9ydCAqIGZyb20gJy4vdXRpbCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vbnVtZXJpYyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vcG9pbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2N1cnZlJztcclxuZXhwb3J0ICogZnJvbSAnLi9kcmF3JztcclxuIiwiaW1wb3J0IHtcclxuXHRjbG9uZSxcclxuXHRzcGxpdEN1cnZlLFxyXG5cdGludGVycG9sYXRlQ3VydmUsXHJcblx0YWRqdXN0LFxyXG5cdGdldFBvaW50T25DdXJ2ZSxcclxuXHRicmVha1BvaW50LFxyXG4gICAgZHJhd0NpcmNsZSxcclxuXHQvKlxyXG5cdHNpbXBsZVF1YWRyYXRpYyxcclxuXHRkcmF3UG9pbnRzLFxyXG5cdGV4dHJhY3RQb2ludCxcclxuXHQgKi9cclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG4vKipcclxuXHR0YWtlcyB0aGUgbGVuZ3RoIGluIHkgYXhpcyBhbmQgY29tcGFyZSBpdCB3aXRoIHkgcG9zaXRpb25zIG9mIGFycmF5IG9mIHBvaW50c1xyXG5cdGdldExpbWJQb2ludHMoXHJcblx0XHR0aGUgaGlnaGVzdCByZWZlcmVuY2UgcG9pbnQgKGFrYSAwJSksXHJcblx0XHR0aGUgbG93ZXN0IHJlZmVyZW5jZSBwb2ludCAoYWthIDEwMCUpLFxyXG5cdFx0cGVyY2VudGFnZSBvZiBjb3ZlcmVkIGFyZWEgKDAtMSksXHJcblx0XHRwb2ludDEgKHRoZSBoaWdoZXN0IG9uZSksXHJcblx0XHRwb2ludDIsXHJcblx0XHRldGMuXHRcclxuXHQpO1xyXG5cdHJldHVybnMgYXJyYXkgb2YgcG9pbnRzIGluIHRoZSBjb3ZlcmVkIGFyZWFcclxuXHR1c2VkIGZvciBzbGVldmVzIGFuZCBwYW50cyB3aXRoIGxldGlhYmxlIGxlbmd0aFxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGltYlBvaW50cygpe1xyXG5cdGZ1bmN0aW9uIHBvaW50X2JldHdlZW4oZmlyc3Qsc2Vjb25kLHRvdGFsTGVuZ3RoKXtcclxuXHRcdGxldCBkaXN0YW5jZSA9IGZpcnN0Lnktc2Vjb25kLnk7IC8vZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzIFxyXG5cdFx0bGV0IHBlcmNlbnQgPSAgTWF0aC5hYnMoKHRvdGFsTGVuZ3RoLWZpcnN0LnkpL2Rpc3RhbmNlKTsvL2hvdyBtYW55IHBlcmNlbnQgb2YgZGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzIGFyZSBjb3ZlcmVkXHJcblx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKHBlcmNlbnQsIGZpcnN0LCBzZWNvbmQpO1x0XHJcblx0XHRsZXQgdGVtcCA9IHNwLmxlZnQucDI7XHJcblx0XHRyZXR1cm4gdGVtcDtcclxuXHR9XHJcblxyXG5cdGxldCBpbnB1dF9hcnJheSA9IFtdO1xyXG5cdGxldCBvdXRwdXRfYXJyYXkgPSBbXTtcclxuXHRcclxuXHRjb25zdCBoaWdoZXN0X3BvaW50ID0gYXJndW1lbnRzWzBdO1xyXG5cdGNvbnN0IGxvd2VzdF9wb2ludCA9IGFyZ3VtZW50c1sxXTtcclxuXHRjb25zdCBjb3ZlcmFnZSA9IGFyZ3VtZW50c1syXTtcclxuXHRcdFxyXG5cdGNvbnN0IHRvdGFsTGVuZ3RoID0gaGlnaGVzdF9wb2ludC55LSgoaGlnaGVzdF9wb2ludC55LWxvd2VzdF9wb2ludC55KSpjb3ZlcmFnZSk7XHJcblx0Ly95IHBvc2l0aW9uIG9mIHRoZSBsYXN0IHBvaW50IChwb3NpdGlvbiBvZiB0aGUgZmlyc3QgLSBjb3ZlcmFnZSApXHJcblxyXG5cdGZvciAobGV0IGlpID0gMzsgaWkgPCBhcmd1bWVudHMubGVuZ3RoOyBpaSsrKSB7XHJcblx0XHRpZihhcmd1bWVudHNbaWldKXtcclxuXHRcdFx0aW5wdXRfYXJyYXkucHVzaChjbG9uZShhcmd1bWVudHNbaWldKSk7IFxyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvL25vIHZhbGlkIHBvaW50cyAtIHJldHVybnMgdGhlIGZpcnN0IG9uZVxyXG5cdGlmKHRvdGFsTGVuZ3RoPmlucHV0X2FycmF5WzBdLnkpeyBcclxuXHRcdG91dHB1dF9hcnJheVswXSA9IGlucHV0X2FycmF5WzBdO1xyXG5cdC8vYWxsIHBvaW50cyB2YWxpZCAtIHJldHVybnMgYWxsXHJcblx0fWVsc2UgaWYodG90YWxMZW5ndGg8aW5wdXRfYXJyYXlbaW5wdXRfYXJyYXkubGVuZ3RoLTFdLnkpeyBcdFx0XHRcclxuXHRcdG91dHB1dF9hcnJheSA9IGlucHV0X2FycmF5O1xyXG5cdC8vZmluZHMgdGhlIGxhc3QgdmFsaWQgcG9pbnRcclxuXHR9ZWxzZXsgXHJcblx0XHRmb3IobGV0IGlpPTE7aWk8aW5wdXRfYXJyYXkubGVuZ3RoO2lpKyspe1xyXG5cdFx0XHRpZih0b3RhbExlbmd0aD09aW5wdXRfYXJyYXlbaWldLnkpeyAvL3NwZWNpYWwgbHVja3kgY2FzZVxyXG5cdFx0XHRcdG91dHB1dF9hcnJheSA9IGlucHV0X2FycmF5LnNwbGljZSgwLChpaSsxKSk7XHJcblx0XHRcdFx0YnJlYWs7XHRcclxuXHRcdFx0fWVsc2UgaWYodG90YWxMZW5ndGg+aW5wdXRfYXJyYXlbaWldLnkpe1xyXG5cdFx0XHRcdGxldCB0ZW1wID0gcG9pbnRfYmV0d2VlbihpbnB1dF9hcnJheVtpaS0xXSxpbnB1dF9hcnJheVtpaV0sdG90YWxMZW5ndGgpO1xyXG5cdFx0XHRcdG91dHB1dF9hcnJheSA9IGlucHV0X2FycmF5LnNwbGljZSgwLGlpKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRvdXRwdXRfYXJyYXlbb3V0cHV0X2FycmF5Lmxlbmd0aF0gPSB0ZW1wO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBvdXRwdXRfYXJyYXk7XHJcbn1cclxuXHRcclxuLyoqXHJcblx0c2ltaWxhciB0byBcImdldExpbWJQb2ludHNcIiBidXQgbmVlZHMgb25seSB0aGUgbG93ZXN0IHBvaW50XHJcblx0Z2V0TGltYlBvaW50c0Fib3ZlUG9pbnQoXHJcblx0XHR0aGUgbG93ZXN0IHJlZmVyZW5jZSBwb2ludFxyXG5cdFx0cmV2ZXJ0ICh0cnVlL2ZhbHNlKSAtIHJldHVybnMgcmV2ZXJzZWQgYXJyYXkgKGVnIGZvciBpbm5lciBwb2ludHMgd2hpY2ggbmVlZHMgdG8gYmUgZHJhd24gaW4gb3JkZXIgZnJvbSB0aGUgbG93ZXN0IHRvIHRoZSBoaWdoZXN0KVxyXG5cdFx0cG9pbnQxICh0aGUgaGlnaGVzdCBvbmUpLFxyXG5cdFx0cG9pbnQyLFxyXG5cdFx0ZXRjLlx0XHJcblx0KTtcclxuXHR1c2VkICB3aGVuIHlvdSBoYXZlIHRoZSBsb3dlc3Rtb3N0IHBvaW50IG9uIHRoZSBvbmUgc2lkZSBvZiBsaW1iIGFuZCBuZWVkIHRvIGZpbmQgYWxsIHRoZSBwb2ludCBhYm92ZSBpdCBvbiB0aGUgb3RoZXIgc2lkZVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGltYlBvaW50c0Fib3ZlUG9pbnQoKXtcclxuXHRmdW5jdGlvbiBwb2ludF9iZXR3ZWVuKGZpcnN0LHNlY29uZCx0b3RhbExlbmd0aCl7XHJcblx0XHRsZXQgdGVtcCA9IGludGVycG9sYXRlQ3VydmUoZmlyc3Qsc2Vjb25kLHt4Om51bGwseTplcXVhbGl6ZXJfcG9pbnQueX0pO1xyXG5cdFx0bGV0IHNwID0gc3BsaXRDdXJ2ZSh0ZW1wWzBdLnQsZmlyc3Qsc2Vjb25kKTtcdFxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0Ym90dG9tOnNwLmxlZnQucDIsXHJcblx0XHRcdHNlY29uZDpzcC5yaWdodC5wMlxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bGV0IGlucHV0X2FycmF5ID0gW107XHJcblx0bGV0IG91dHB1dF9hcnJheSA9IFtdO1xyXG5cdFxyXG5cdGxldCBlcXVhbGl6ZXJfcG9pbnQgPSBhcmd1bWVudHNbMF07XHJcblx0bGV0IHRvdGFsTGVuZ3RoID0gZXF1YWxpemVyX3BvaW50Lnk7XHJcblx0bGV0IHJldmVydCA9IGFyZ3VtZW50c1sxXTtcclxuXHRcclxuXHRmb3IgKGxldCBpaSA9IDI7IGlpIDwgYXJndW1lbnRzLmxlbmd0aDsgaWkrKykge1xyXG5cdFx0aWYoYXJndW1lbnRzW2lpXSl7XHJcblx0XHRcdGlucHV0X2FycmF5LnB1c2goY2xvbmUoYXJndW1lbnRzW2lpXSkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRpZih0b3RhbExlbmd0aD5pbnB1dF9hcnJheVswXS55KXtcclxuXHRcdG91dHB1dF9hcnJheVswXSA9IGlucHV0X2FycmF5WzBdO1xyXG5cdH1lbHNlIGlmKHRvdGFsTGVuZ3RoPGlucHV0X2FycmF5W2lucHV0X2FycmF5Lmxlbmd0aC0xXS55KXtcclxuXHRcdG91dHB1dF9hcnJheSA9IGlucHV0X2FycmF5O1xyXG5cdH1lbHNleyBcclxuXHRcdGZvcihsZXQgaWk9MTtpaTxpbnB1dF9hcnJheS5sZW5ndGg7aWkrKyl7XHJcblx0XHRcdGlmKHRvdGFsTGVuZ3RoPT1pbnB1dF9hcnJheVtpaV0ueSl7XHJcblx0XHRcdFx0b3V0cHV0X2FycmF5ID0gaW5wdXRfYXJyYXkuc3BsaWNlKDAsKGlpKzEpKTtcclxuXHRcdFx0XHRicmVhaztcdFxyXG5cdFx0XHR9ZWxzZSBpZih0b3RhbExlbmd0aD5pbnB1dF9hcnJheVtpaV0ueSl7XHJcblx0XHRcdFx0bGV0IGJvdHRvbTtcclxuXHRcdFx0XHRpZihyZXZlcnQpe1xyXG5cdFx0XHRcdFx0bGV0IHRlbXAgPSBwb2ludF9iZXR3ZWVuKGlucHV0X2FycmF5W2lpXSxpbnB1dF9hcnJheVtpaS0xXSx0b3RhbExlbmd0aCk7XHJcblx0XHRcdFx0XHRib3R0b20gPSB0ZW1wLmJvdHRvbTtcclxuXHRcdFx0XHRcdGlucHV0X2FycmF5W2lpLTFdID0gdGVtcC5zZWNvbmQ7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRsZXQgdGVtcCA9IHBvaW50X2JldHdlZW4oaW5wdXRfYXJyYXlbaWktMV0saW5wdXRfYXJyYXlbaWldLHRvdGFsTGVuZ3RoKTtcclxuXHRcdFx0XHRcdGJvdHRvbSA9IHRlbXAuYm90dG9tO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0b3V0cHV0X2FycmF5ID0gaW5wdXRfYXJyYXkuc3BsaWNlKDAsaWkpO1xyXG5cdFx0XHRcdG91dHB1dF9hcnJheS5wdXNoKGJvdHRvbSk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0aWYocmV2ZXJ0KXtcclxuXHRcdG91dHB1dF9hcnJheS5yZXZlcnNlKCk7XHJcblx0fVxyXG5cdHJldHVybiBvdXRwdXRfYXJyYXk7XHJcbn1cclxuXHRcclxuXHJcbi8qKlxyXG5cdHRoZSBzYW1lIGFzIGdldExpbWJQb2ludHMgYnV0IHJldHVybnMgcG9pbnRzIHRoYXQgYXJlIG91dHNpZGUgdGhlIGNvdmVyZWQgYXJlYVxyXG5cdFx0Z2V0TGltYlBvaW50c05lZ2F0aXZlKFxyXG5cdFx0dGhlIGhpZ2hlc3QgcmVmZXJlbmNlIHBvaW50IChha2EgMCUpLFxyXG5cdFx0dGhlIGxvd2VzdCByZWZlcmVuY2UgcG9pbnQgKGFrYSAxMDAlKSxcclxuXHRcdHBlcmNlbnRhZ2Ugb2YgY292ZXJlZCBhcmVhICgwLTEpLFxyXG5cdFx0cG9pbnQxICh0aGUgaGlnaGVzdCBvbmUpLFxyXG5cdFx0cG9pbnQyLFxyXG5cdFx0ZXRjLlx0XHJcblx0KTtcclxuXHR1c2VkIGZvciBzb2Nrc1xyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGltYlBvaW50c05lZ2F0aXZlKCl7XHJcblx0ZnVuY3Rpb24gcG9pbnRfYmV0d2VlbihmaXJzdCxzZWNvbmQsdG90YWxMZW5ndGgpe1xyXG5cdFx0bGV0IGRpc3RhbmNlID0gZmlyc3QueS1zZWNvbmQueTsgLy9kaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMgXHJcblx0XHRsZXQgcGVyY2VudCA9ICBNYXRoLmFicygodG90YWxMZW5ndGgtZmlyc3QueSkvZGlzdGFuY2UpOy8vaG93IG1hbnkgcGVyY2VudCBvZiBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHMgYXJlIGNvdmVyZWRcclxuXHRcdGxldCBzcCA9IHNwbGl0Q3VydmUocGVyY2VudCwgZmlyc3QsIHNlY29uZCk7XHRcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRvcDpzcC5sZWZ0LnAyLFxyXG5cdFx0XHRzZWNvbmQ6c3AucmlnaHQucDJcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0bGV0IGlucHV0X2FycmF5ID0gW107XHJcblx0bGV0IG91dHB1dF9hcnJheSA9IFtdO1xyXG5cdFxyXG5cdGNvbnN0IGhpZ2hlc3RfcG9pbnQgPSBhcmd1bWVudHNbMF07XHJcblx0Y29uc3QgbG93ZXN0X3BvaW50ID0gYXJndW1lbnRzWzFdO1xyXG5cdGNvbnN0IGNvdmVyYWdlID0gYXJndW1lbnRzWzJdO1xyXG5cdFx0XHJcblx0Y29uc3QgdG90YWxMZW5ndGggPSBoaWdoZXN0X3BvaW50LnktKChoaWdoZXN0X3BvaW50LnktbG93ZXN0X3BvaW50LnkpKmNvdmVyYWdlKTtcclxuXHQvL3kgcG9zaXRpb24gb2YgdGhlIGxhc3QgcG9pbnQgKHBvc2l0aW9uIG9mIHRoZSBmaXJzdCAtIGNvdmVyYWdlIClcclxuXHJcblx0Zm9yIChsZXQgaWkgPSAzOyBpaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGlpKyspIHtcclxuXHRcdGlmKGFyZ3VtZW50c1tpaV0pe1xyXG5cdFx0XHRpbnB1dF9hcnJheS5wdXNoKGNsb25lKGFyZ3VtZW50c1tpaV0pKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vYWxsIHBvaW50cyB2YWxpZCAtIHJldHVybiBhbGxcclxuXHRpZih0b3RhbExlbmd0aD5pbnB1dF9hcnJheVswXS55KXsgXHJcblx0XHRvdXRwdXRfYXJyYXkgPSBpbnB1dF9hcnJheTtcclxuXHQvL25vIHZhbGlkIHBvaW50cyAtIHJldHVybnMgdGhlIGxhc3Qgb25lXHJcblx0fWVsc2UgaWYodG90YWxMZW5ndGg8aW5wdXRfYXJyYXlbaW5wdXRfYXJyYXkubGVuZ3RoLTFdLnkpeyBcdFx0XHJcblx0XHRvdXRwdXRfYXJyYXlbMF0gPSBpbnB1dF9hcnJheVtpbnB1dF9hcnJheS5sZW5ndGgtMV07XHJcblx0Ly9maW5kcyB0aGUgbGFzdCB2YWxpZCBwb2ludFxyXG5cdH1lbHNleyBcclxuXHRcdGZvcihsZXQgaWk9aW5wdXRfYXJyYXkubGVuZ3RoLTI7aWk+PTA7aWktLSl7XHJcblx0XHRcdGlmKHRvdGFsTGVuZ3RoPGlucHV0X2FycmF5W2lpXS55KXtcclxuXHRcdFx0XHRsZXQgdGVtcCA9IHBvaW50X2JldHdlZW4oaW5wdXRfYXJyYXlbaWldLGlucHV0X2FycmF5W2lpKzFdLHRvdGFsTGVuZ3RoKTtcclxuXHRcdFx0XHRsZXQgdG9wID0gdGVtcC50b3BcclxuXHRcdFx0XHRpbnB1dF9hcnJheVtpaSsxXSA9IHRlbXAuc2Vjb25kO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlucHV0X2FycmF5LnNwbGljZSgwLGlpKzEpO1xyXG5cdFx0XHRcdG91dHB1dF9hcnJheSA9IGlucHV0X2FycmF5O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdG91dHB1dF9hcnJheS51bnNoaWZ0KHRvcCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG91dHB1dF9hcnJheTtcclxufVxyXG5cdFxyXG5cclxuXHRcclxuLyoqXHJcblx0c2ltaWxhciB0byBcImdldExpbWJQb2ludHNBYm92ZVBvaW50XCIgYnV0IG5lZWRzIG9ubHkgdGhlIGhpZ2hlc3QgcG9pbnRcclxuXHRnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQoXHJcblx0XHR0aGUgaGlnaGVzdCByZWZlcmVuY2UgcG9pbnRcclxuXHRcdHJldmVydCAodHJ1ZS9mYWxzZSkgLSByZXR1cm5zIHJldmVyc2VkIGFycmF5IChlZyBmb3IgaW5uZXIgcG9pbnRzIHdoaWNoIG5lZWRzIHRvIGJlIGRyYXduIGluIG9yZGVyIGZyb20gdGhlIGxvd2VzdCB0byB0aGUgaGlnaGVzdClcclxuXHRcdHBvaW50MSAodGhlIGhpZ2hlc3Qgb25lKSwgXHJcblx0XHRwb2ludDIsXHJcblx0XHRldGMuXHRcclxuXHQpO1xyXG5cdHVzZWQgIHdoZW4geW91IGhhdmUgdGhlIGhpZ2hlc3QgcG9pbnQgb24gdGhlIG9uZSBzaWRlIG9mIGxpbWIgYW5kIG5lZWQgZmluZCBhbGwgdGhlIHBvaW50IGJlbGxvdyBpdCBvbiB0aGUgb3RoZXIgc2lkZVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGltYlBvaW50c0JlbGxvd1BvaW50KGNvbnRyb2xfcG9pbnQscmV2ZXJ0KXtcdFxyXG5cdGZ1bmN0aW9uIHBvaW50X2JldHdlZW4oZmlyc3Qsc2Vjb25kLHRvdGFsTGVuZ3RoKXtcclxuXHRcdGxldCB0ZW1wID0gaW50ZXJwb2xhdGVDdXJ2ZShmaXJzdCxzZWNvbmQse3g6bnVsbCx5OmNvbnRyb2xfcG9pbnQueX0pO1xyXG5cdFx0bGV0IHNwID0gc3BsaXRDdXJ2ZSh0ZW1wWzBdLnQsZmlyc3Qsc2Vjb25kKTtcdFxyXG5cdFx0dGVtcCA9IHNwLmxlZnQucDI7XHJcblx0XHQvKlxyXG5cdFx0dGVtcC5jcDEgPSBzcC5sZWZ0LmNwMTtcclxuXHRcdHRlbXAuY3AyID0gc3AubGVmdC5jcDI7XHJcblx0XHRcclxuXHRcdHJldHVybiB0ZW1wO1xyXG5cdFx0Ki9cclxuXHRcdFxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cG9pbnQ6IHNwLmxlZnQucDIsXHJcblx0XHRcdHNlY29uZDogc3AucmlnaHQucDJcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0bGV0IGlucHV0X2FycmF5ID0gW107XHJcblx0bGV0IG91dHB1dF9hcnJheSA9IFtdO1xyXG5cdGxldCB0b3RhbExlbmd0aCA9IGNvbnRyb2xfcG9pbnQueTtcclxuXHJcblx0Zm9yIChsZXQgaWkgPSAyOyBpaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGlpKyspIHtcclxuXHRcdGlmKGFyZ3VtZW50c1tpaV0pe1xyXG5cdFx0XHRpbnB1dF9hcnJheS5wdXNoKGNsb25lKGFyZ3VtZW50c1tpaV0pKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHRcdFxyXG5cdGlmKHRvdGFsTGVuZ3RoPmlucHV0X2FycmF5WzBdLnkpe1xyXG5cdFx0b3V0cHV0X2FycmF5ID0gaW5wdXRfYXJyYXk7IFxyXG5cdH1lbHNlIGlmKHRvdGFsTGVuZ3RoPGlucHV0X2FycmF5W2lucHV0X2FycmF5Lmxlbmd0aC0xXS55KXtcclxuXHRcdG91dHB1dF9hcnJheVswXSA9IGlucHV0X2FycmF5W2lucHV0X2FycmF5Lmxlbmd0aC0xXTtcclxuXHR9ZWxzZXsgXHJcblx0XHRmb3IobGV0IGlpPWlucHV0X2FycmF5Lmxlbmd0aC0yO2lpPj0wO2lpLS0pe1xyXG5cdFx0XHRpZih0b3RhbExlbmd0aDxpbnB1dF9hcnJheVtpaV0ueSl7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0bGV0IHRlbXA7XHJcblx0XHRcdFx0aWYocmV2ZXJ0KXtcclxuXHRcdFx0XHRcdHRlbXAgPSBwb2ludF9iZXR3ZWVuKGlucHV0X2FycmF5W2lpKzFdLCBpbnB1dF9hcnJheVtpaV0sIHRvdGFsTGVuZ3RoKTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdHRlbXAgPSBwb2ludF9iZXR3ZWVuKGlucHV0X2FycmF5W2lpXSwgaW5wdXRfYXJyYXlbaWkrMV0sIHRvdGFsTGVuZ3RoKTtcclxuXHRcdFx0XHRcdGlucHV0X2FycmF5W2lpKzFdID0gdGVtcC5zZWNvbmQ7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpbnB1dF9hcnJheS5zcGxpY2UoMCxpaSsxKTtcclxuXHRcdFx0XHRvdXRwdXRfYXJyYXkgPSBpbnB1dF9hcnJheTtcclxuXHJcblx0XHRcdFx0b3V0cHV0X2FycmF5LnVuc2hpZnQodGVtcC5wb2ludCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0aWYocmV2ZXJ0KXtcclxuXHRcdG91dHB1dF9hcnJheS5yZXZlcnNlKCk7XHJcblx0fVxyXG5cdHJldHVybiBvdXRwdXRfYXJyYXk7XHJcbn1cclxuXHRcclxuXHRcclxuLyoqXHJcblx0ZmluZEJldHdlZW4oZmlyc3QgdmFsdWUsc2Vjb25kIHZhbHVlLCBwZXJjZW50KVxyXG5cdHJldHVybnMgdmFsdWUgd2l0aCBwZXJjZW50IGRpc3RhbmNlIGJldHdlZW4gZmlyc3QgYW5kIHNlY29uZCB2YWx1ZVxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluZEJldHdlZW4obG93ZXIsIGhpZ2hlciwgcGVyY2VudCA9IDAuNSl7XHJcblx0aWYoXHJcblx0XHQgICAodHlwZW9mIGhpZ2hlciA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgaGlnaGVyLnggIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgaGlnaGVyLnkgIT09IHVuZGVmaW5lZClcclxuXHRcdCYmICh0eXBlb2YgbG93ZXIgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGxvd2VyLnggIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbG93ZXIueSAhPT0gdW5kZWZpbmVkKVxyXG5cdCl7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR4IDogZmluZEJldHdlZW4obG93ZXIueCwgaGlnaGVyLngsIHBlcmNlbnQpLFxyXG5cdFx0XHR5IDogZmluZEJldHdlZW4obG93ZXIueSwgaGlnaGVyLnksIHBlcmNlbnQpLFxyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0aWYodHlwZW9mIGhpZ2hlciA9PSBcIm9iamVjdFwiKXtcclxuXHRcdGNvbnNvbGUubG9nKFwiRVJST1IhIFRoZSBmaXJzdCB2YXJpYWJsZSBpbnB1dGVkIGluIGZpbmRCZXR3ZWVuKCkgaXMgbm90IGEgcHJpbWl0aXZlIHZhbHVlIChpZSBpcyBvYmplY3QpISBcIik7XHJcblx0fVxyXG5cdGlmKHR5cGVvZiBsb3dlciA9PSBcIm9iamVjdFwiKXtcclxuXHRcdGNvbnNvbGUubG9nKFwiRVJST1IhIFRoZSBzZWNvbmQgdmFyaWFibGUgaW5wdXRlZCBpbiBmaW5kQmV0d2VlbigpIGlzIG5vdCBhIHByaW1pdGl2ZSB2YWx1ZSAoaWUgaXMgb2JqZWN0KSEgXCIpO1xyXG5cdH1cclxuXHRcclxuXHRyZXR1cm4gbG93ZXIgKyAoIChoaWdoZXIgLSBsb3dlcikgKiBwZXJjZW50ICk7XHJcbn1cclxuXHRcdFxyXG5cdFx0XHJcbi8qKlxyXG5cdGdyYWR1YWxseSBzdHJhaWdodGVucyBjdXJ2ZVxyXG5cdChieSBtb3ZpbmcgYm90aCBjb250cm9sIHBvaW50cyBjbG9zZXIgdG8gdGhlIGNlbnRyZSBvZiB0aGUgY3VydmUpXHJcbiovXHRcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJhaWdodGVuQ3VydmUocHJldmlvdXNfcG9pbnQscG9pbnQscGVyY2VudCl7XHJcblx0bGV0IGVxdWlsaWJyaXVtPXtcclxuXHRcdHg6IGZpbmRCZXR3ZWVuKHByZXZpb3VzX3BvaW50LngscG9pbnQueCwwLjUpLFxyXG5cdFx0eTogZmluZEJldHdlZW4ocHJldmlvdXNfcG9pbnQueSxwb2ludC55LDAuNSlcclxuXHR9O1xyXG5cdFx0XHJcblx0aWYocG9pbnQuY3AxKXtcclxuXHRcdHBvaW50LmNwMS54ID0gZmluZEJldHdlZW4ocG9pbnQuY3AxLngsZXF1aWxpYnJpdW0ueCxwZXJjZW50KTtcclxuXHRcdHBvaW50LmNwMS55ID0gZmluZEJldHdlZW4ocG9pbnQuY3AxLnksZXF1aWxpYnJpdW0ueSxwZXJjZW50KTtcclxuXHR9XHJcblx0XHJcblx0aWYocG9pbnQuY3AyKXtcclxuXHRcdHBvaW50LmNwMi54ID0gZmluZEJldHdlZW4ocG9pbnQuY3AyLngsZXF1aWxpYnJpdW0ueCxwZXJjZW50KTtcclxuXHRcdHBvaW50LmNwMi55ID0gZmluZEJldHdlZW4ocG9pbnQuY3AyLnksZXF1aWxpYnJpdW0ueSxwZXJjZW50KTtcclxuXHR9XHJcbn1cclxuXHRcdFxyXG5cdFx0XHJcbi8qKlxyXG5cdGZpbmRzIHBvaW50IHdoaWNoIGlzIGludGVyc2VjdGlvbiBvZiBsaW5lcyBBQiBhbmQgQ0RcclxuKi9cdFxyXG5cdFxyXG5leHBvcnQgZnVuY3Rpb24gbGluZUxpbmVJbnRlcnNlY3Rpb24oQSxCLEMsRCl7IFxyXG5cdC8vaHR0cHM6Ly93d3cuZ2Vla3Nmb3JnZWVrcy5vcmcvcHJvZ3JhbS1mb3ItcG9pbnQtb2YtaW50ZXJzZWN0aW9uLW9mLXR3by1saW5lcy9cclxuXHRcclxuXHQvLyBMaW5lIEFCIHJlcHJlc2VudGVkIGFzIGExeCArIGIxeSA9IGMxIFxyXG5cdGxldCBhMSA9IEIueSAtIEEueTsgXHJcblx0bGV0IGIxID0gQS54IC0gQi54OyBcclxuXHRsZXQgYzEgPSBhMSooQS54KSArIGIxKihBLnkpOyBcclxuICAgXHJcblx0Ly8gTGluZSBDRCByZXByZXNlbnRlZCBhcyBhMnggKyBiMnkgPSBjMiBcclxuXHRsZXQgYTIgPSBELnkgLSBDLnk7IFxyXG5cdGxldCBiMiA9IEMueCAtIEQueDsgXHJcblx0bGV0IGMyID0gYTIqKEMueCkrIGIyKihDLnkpOyBcclxuICAgXHJcblx0bGV0IGRldGVybWluYW50ID0gYTEqYjIgLSBhMipiMTsgXHJcbiAgIFxyXG5cdGlmIChkZXRlcm1pbmFudCA9PSAwKXtcclxuXHRcdGNvbnNvbGUubG9nKFwiRXJyIC0gbGluZUxpbmVJbnRlcnNlY3Rpb24gLSB0aGV5IGFyZSBwYXJhbGVsXCIpO1xyXG5cdFx0Ly8gVGhlIGxpbmVzIGFyZSBwYXJhbGxlbC4gVGhpcyBpcyBzaW1wbGlmaWVkIFxyXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHR9ZWxzZXsgXHJcblx0XHRsZXQgeCA9IChiMipjMSAtIGIxKmMyKS9kZXRlcm1pbmFudDsgXHJcblx0XHRsZXQgeSA9IChhMSpjMiAtIGEyKmMxKS9kZXRlcm1pbmFudDsgXHJcblx0XHRyZXR1cm4ge3g6eCwgeTp5fTsgXHJcblx0fSBcclxufVxyXG5cclxuXHJcbi8qKlxyXG5cdGZpbmRzIHBvaW50IHdoaWNoIGlzIGludGVyc2VjdGlvbiBvZiBiZXppZXIgY3VydmUgYW5kIGxpbmUgQUIgXHJcblx0bGluZUN1YmljSW50ZXJzZWN0aW9uKHN0YXJ0cG9pbnQsZW5kcG9pbnQsQSxCKXtcclxuKi9cdFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVDdWJpY0ludGVyc2VjdGlvbihzdGFydCxlbmQsbGluZUEsbGluZUIpe1xyXG5cdC8vaHR0cHM6Ly93d3cucGFydGljbGVpbmNlbGwuY29tLzIwMTMvY3ViaWMtbGluZS1pbnRlcnNlY3Rpb24vXHJcblx0XHRcclxuXHQvL2FzYXAgLSBpdCBpcyBpbiBjdXJ2ZS5qcyBtYWRlIGl0IGltcG9ydGFibGVcclxuXHRmdW5jdGlvbiBzb2x2ZUN1YmljRXF1YXRpb24oYSwgYiwgYykge1xyXG5cdFx0Y29uc3QgYTMgPSBhIC8gMztcclxuXHRcdGNvbnN0IHAgPSAoMyAqIGIgLSBhICogYSkgLyAzO1xyXG5cdFx0Y29uc3QgcDMgPSBwIC8gMztcclxuXHRcdGNvbnN0IHEgPSAoMiAqIGEgKiBhICogYSAtIDkgKiBhICogYiArIDI3ICogYykgLyAyNztcclxuXHRcdGNvbnN0IHEyID0gcSAvIDI7XHJcblx0XHRjb25zdCBkaXNjcmltaW5hbnQgPSByb3VuZFRvRGVjKHEyICogcTIgKyBwMyAqIHAzICogcDMsIDgpO1xyXG5cclxuXHRcdGlmIChkaXNjcmltaW5hbnQgPiAwKSB7XHJcblx0XHRcdGNvbnN0IHNxcnREaXNjcmltaW5hbnQgPSBNYXRoLnNxcnQoZGlzY3JpbWluYW50KTtcclxuXHRcdFx0Y29uc3QgdSA9IGN1YmVSb290KC1xMiArIHNxcnREaXNjcmltaW5hbnQpO1xyXG5cdFx0XHRjb25zdCB2ID0gY3ViZVJvb3QocTIgKyBzcXJ0RGlzY3JpbWluYW50KTtcclxuXHRcdFx0Y29uc3QgeDEgPSB1IC0gdiAtIGEzO1xyXG5cdFx0XHQvLyBpZ25vcmUgb3RoZXIgaW1hZ2luYXJ5IHJvb3RzXHJcblx0XHRcdHJldHVybiBbeDFdO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFsbCByb290cyByZWFsICgzIGluIHRvdGFsLCAxIHNpbmdsZSBhbmQgMSBkb3VibGUpXHJcblx0XHRpZiAoZGlzY3JpbWluYW50ID09PSAwKSB7XHJcblx0XHRcdC8vIHYgPSAtdVxyXG5cdFx0XHRjb25zdCB1ID0gY3ViZVJvb3QoLXEyKTtcclxuXHRcdFx0Ly8gdCA9IHUgLSB2LCB4ID0gdCAtIGEvMyA9IHUgLSB2IC0gYS8zID0gMnUgLSBhLzNcclxuXHRcdFx0Y29uc3QgeDEgPSAyICogdSAtIGEzO1xyXG5cdFx0XHQvLyBjb25qdWdhdGUgcm9vdHMgcHJvZHVjZSAxIGRvdWJsZSByb290XHJcblx0XHRcdGNvbnN0IHgyID0gLXUgLSBhMztcclxuXHRcdFx0cmV0dXJuIFt4MSwgeDJdO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgciA9IE1hdGguc3FydCgtcDMgKiBwMyAqIHAzKTtcclxuXHRcdGxldCBjb3NwaGkgPSAtcTIgLyByO1xyXG5cdFx0aWYgKGNvc3BoaSA8IC0xKSB7XHJcblx0XHRcdGNvc3BoaSA9IC0xO1xyXG5cdFx0fSBlbHNlIGlmIChjb3NwaGkgPiAxKSB7XHJcblx0XHRcdGNvc3BoaSA9IDE7XHJcblx0XHR9XHJcblx0XHRjb25zdCBwaGkgPSBNYXRoLmFjb3MoY29zcGhpKTtcclxuXHRcdGNvbnN0IGNvbW1vblByZWZpeCA9IDIgKiBjdWJlUm9vdChyKTtcclxuXHRcdGNvbnN0IHgxID0gY29tbW9uUHJlZml4ICogTWF0aC5jb3MocGhpIC8gMykgLSBhMztcclxuXHRcdGNvbnN0IHgyID0gY29tbW9uUHJlZml4ICogTWF0aC5jb3MoKHBoaSArIDIgKiBNYXRoLlBJKSAvIDMpIC0gYTM7XHJcblx0XHRjb25zdCB4MyA9IGNvbW1vblByZWZpeCAqIE1hdGguY29zKChwaGkgKyA0ICogTWF0aC5QSSkgLyAzKSAtIGEzO1xyXG5cdFx0cmV0dXJuIFt4MSwgeDIsIHgzXTtcclxuXHR9XHJcblx0XHJcblx0ZnVuY3Rpb24gY3ViZVJvb3Qodikge1xyXG4gICAgICAgIGlmICh2IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gLU1hdGgucG93KC12LCAxIC8gMyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KHYsIDEgLyAzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblx0XHJcblx0ZnVuY3Rpb24gcm91bmRUb0RlYyhudW0sIG51bURlY2ltYWxzKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobnVtLnRvRml4ZWQobnVtRGVjaW1hbHMpKTtcclxuICAgIH1cclxuXHRcclxuXHRmdW5jdGlvbiByb3VuZFRvRGVjaW1hbChudW0sIGRlYykge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIE1hdGgucG93KDEwLCBkZWMpKSAvIE1hdGgucG93KDEwLCBkZWMpO1xyXG4gICAgfVxyXG5cclxuXHRsZXQgQT1saW5lQi55LWxpbmVBLnk7XHQgICAgLy9BPXkyLXkxXHJcblx0bGV0IEI9bGluZUEueC1saW5lQi54O1x0ICAgIC8vQj14MS14MlxyXG5cdGxldCBDPSBsaW5lQS54KihsaW5lQS55LWxpbmVCLnkpK2xpbmVBLnkqKGxpbmVCLngrbGluZUEueCk7XHJcblx0XHQgIFxyXG5cdGZ1bmN0aW9uIGJlemllckNvZWZmcyhQMCxQMSxQMixQMyl7XHJcblx0XHRsZXQgWiA9IEFycmF5KCk7XHJcblx0XHRaWzBdID0gLVAwICsgMypQMSArIC0zKlAyICsgUDM7IFxyXG5cdFx0WlsxXSA9IDMqUDAgLSA2KlAxICsgMypQMjtcclxuXHRcdFpbMl0gPSAtMypQMCArIDMqUDE7XHJcblx0XHRaWzNdID0gUDA7XHJcblx0XHRyZXR1cm4gWjtcclxuXHR9XHJcblxyXG5cdGxldCBieCA9IGJlemllckNvZWZmcyhzdGFydC54LCBlbmQuY3AxLngsIGVuZC5jcDIueCwgZW5kLngpO1xyXG5cdGxldCBieSA9IGJlemllckNvZWZmcyhzdGFydC55LCBlbmQuY3AxLnksIGVuZC5jcDIueSwgZW5kLnkpO1xyXG4gXHJcblx0bGV0IFAgPSBBcnJheSgpO1xyXG5cdFBbMF0gPSBBKmJ4WzBdK0IqYnlbMF07XHRcdC8qdF4zKi9cclxuXHRQWzFdID0gKCBBKmJ4WzFdK0IqYnlbMV0gKS9QWzBdIDtcdC8qdF4yKi9cclxuXHRQWzJdID0gKCBBKmJ4WzJdK0IqYnlbMl0gKS9QWzBdO1x0Lyp0Ki9cclxuXHRQWzNdID0gKCBBKmJ4WzNdK0IqYnlbM10gKyBDICkvUFswXTtcdC8qMSovXHJcbiBcclxuXHRsZXQgcm9vdHM9c29sdmVDdWJpY0VxdWF0aW9uKFBbMV0sUFsyXSxQWzNdKTtcclxuXHJcblxyXG5cdGxldCB0O1xyXG5cdGxldCByb290ID0gdm9pZCAwO1xyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgcm9vdHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdHJvb3QgPSByb3VuZFRvRGVjaW1hbChyb290c1tpXSwgMTUpO1xyXG5cdFx0aWYgKHJvb3QgPj0gMCAmJiByb290IDw9IDEpIHtcclxuXHRcdCAgdD1yb290O1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHRsZXQgWD1ieFswXSp0KnQqdCtieFsxXSp0KnQrYnhbMl0qdCtieFszXTtcclxuXHRsZXQgWT1ieVswXSp0KnQqdCtieVsxXSp0KnQrYnlbMl0qdCtieVszXTsgIFxyXG5cdFxyXG5cdC8vQVNBUCAtIEFTVU1FUyBUSEVSRSBJUyBPTkxZIE9ORSBWQUxJRCBQT0lOVFxyXG5cdHJldHVybiB7eDpYLHk6WX07XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG5cdGZpbmRzIGlmIHBvaW50IEMgaXMgbG9jYXRlZCBvbiBsaW5lIGRlZmluZWQgYnkgcG9pbnRzIEEgYW5kIEJcclxuXHQocmV0dXJucyAwIGlmIGl0IGlzKVxyXG4qL1xyXG4vL1RPRE8/P1xyXG5leHBvcnQgZnVuY3Rpb24gcG9pbnRMaW5lSW50ZXJzZWN0aW9uKEEsQixDKXtcclxuXHRmdW5jdGlvbiBsaW5lRXF1YXRpb24oQSxCKXtcclxuXHRcdGxldCBtPShcclxuXHRcdFx0KEIueS1BLnkpLyhCLngtQS54KVxyXG5cdFx0KTtcclxuXHJcblx0XHRsZXQgYj0oXHJcblx0XHRcdEEueS0obSpBLngpXHJcblx0XHQpO1x0XHJcblxyXG5cdFx0Ly95ID0gbXggKyBiXHJcblx0XHRyZXR1cm57XHJcblx0XHRcdG06bSxcclxuXHRcdFx0YjpiLFxyXG5cdFx0fTtcclxuXHR9XHJcblx0bGV0IHRlbXAgPSBsaW5lRXF1YXRpb24oQSxCKTtcclxuXHQvL3kgLSBteCAtIGIgPSAwO1xyXG5cdHJldHVybiAoQy55LSh0ZW1wLm0qQy54KS10ZW1wLmIpO1xyXG59XHJcblx0XHRcclxuXHJcblxyXG4vKipcclxuXHRyZXR1cm5zIHBvaW50cyBmb3IgZHJhd2luZyBsYWNpbmcgYmV0d2VlbiB0d28gY3VydmVzXHJcblx0Z2V0TGFjaW5nUG9pbnRzKFxyXG5cdFx0c3RhcnRwb2ludCBvZiB0aGUgaW5uZXIgY3VydmVcclxuXHRcdGVuZHBvaW50IG9mIHRoZSBpbm5lciBjdXJ2ZVxyXG5cdFx0c3RhcnRwb2ludCBvZiBvdXRlclxyXG5cdFx0ZW5kcG9pbnQgb2Ygb3V0ZXJcclxuXHRcdG51bWJlciBvZiBjcm9zc2luZ3NcclxuXHRcdGFkanVzdG1lbnQgKHRvIG5vdCBoYXZlIGxhY2UgaG9sZSBzdHJhaWdodCBvbiB0aGUgY3VydmUpXHJcblx0KTtcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExhY2luZ1BvaW50cyhpbm5lclN0YXJ0LGlubmVyRW5kLG91dGVyU3RhcnQsb3V0ZXJFbmQsY291bnQsYWRqdXN0bWVudD0wKXtcclxuXHRjb3VudCA9IE1hdGguYWJzKCBNYXRoLnJvdW5kKGNvdW50KSApO1xyXG5cdGNvdW50Kys7XHJcblx0bGV0IGlubmVyID0gW107XHJcblx0bGV0IG91dGVyID0gW107XHJcblx0XHJcblx0bGV0IHN0ZXAgPSAxL2NvdW50O1xyXG5cdFxyXG5cdGZvcihsZXQgaWkgPSAwOyAoaWkqc3RlcCk8PTE7IGlpKyspe1xyXG5cdFx0aWYoaWklMiE9MCl7XHJcblx0XHRcdGlubmVyW2lpXT0gYWRqdXN0KGdldFBvaW50T25DdXJ2ZShzdGVwKmlpLGlubmVyU3RhcnQsaW5uZXJFbmQpLGFkanVzdG1lbnQsMClcclxuXHRcdFx0b3V0ZXJbaWldPSBhZGp1c3QoZ2V0UG9pbnRPbkN1cnZlKHN0ZXAqaWksb3V0ZXJTdGFydCxvdXRlckVuZCksLWFkanVzdG1lbnQsMClcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRpbm5lcltpaV09IGFkanVzdChnZXRQb2ludE9uQ3VydmUoc3RlcCppaSxvdXRlclN0YXJ0LG91dGVyRW5kKSwtYWRqdXN0bWVudCwwKVxyXG5cdFx0XHRvdXRlcltpaV09IGFkanVzdChnZXRQb2ludE9uQ3VydmUoc3RlcCppaSxpbm5lclN0YXJ0LGlubmVyRW5kKSxhZGp1c3RtZW50LDApXHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdHJldHVybiB7aW5uZXI6IGlubmVyLG91dGVyOm91dGVyfTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG5cdGZpcnN0IGZpbmRzIGEgcG9pbnQgVCBvbiB0aGUgbGluZSBiZXR3ZWVuIHBvaW50cyBcIkFcIiBhbmQgXCJCXCIgd2l0aCBkaXN0YW5jZSBmcm9tIFwiQVwiIFwicGVyY2VudFwiKkFCXHJcblx0dGhlbiByZXR1cm5zIHBvaW50IEMgcGVycGVuZGljdWxhciB0byBsaW5lIEFCIHdpdGggZGlzdGFuY2UgZnJvbSB0aGUgcG9pbnQgVCBcImRpc3RhbmNlXCJcclxuXHRcclxuXHRcdENcclxuXHRcdHxcclxuXHRBLS0tVC0tLS1CXHJcblx0ICAgXHJcblx0cGVycGVuZGljdWxhclBvaW50KFxyXG5cdFx0QSAtIGZpc3QgcG9pbnQge3gseX1cclxuXHRcdEIgLSBzZWNvbmQgcG9pbnQge3gseX1cclxuXHRcdHBlcmNlbnQgLSBwZXJjZW50YWdlIG9mIGRpc3RhbmNlIEFCICh2YWx1ZXMgMC0xKVxyXG5cdFx0ZGlzdGFuY2UgLSBwZXJwZW5kaWN1bGFyIGRpc3RhbmNlIGZyb20gYSBwb2ludCBUIG9uIGxpbmUgQUIgYW5kIHRoZSByZXN1bHRpbmcgcG9pbnQgQ1xyXG5cdClcclxuXHRyZXR1cm5zIENcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBlcnBlbmRpY3VsYXJQb2ludChBLEIscGVyY2VudCxkaXN0YW5jZSl7XHJcblx0bGV0IFQgPSBmaW5kQmV0d2VlbihBLEIscGVyY2VudCk7XHJcblx0bGV0IGFuZ2xlID0gIGNhcnRlc2lhbjJwb2xhcihCLCBBKS50aGV0YSArIChNYXRoLlBJLzIpO1xyXG5cdHJldHVybiBwb2xhcjJjYXJ0ZXNpYW4oZGlzdGFuY2UsIGFuZ2xlLCBUKSBcclxuXHRcclxufVxyXG5cclxuLyoqXHJcblx0dHJhbnNmZXJzIHBvaW50IGZyb20gQ2FydGVzaWFuIGNvb3JkaW5hdGVzIHRvIFBvbGFyXHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW4ycG9sYXIocG9pbnQsIG9yaWdpbil7XHJcblx0aWYoIW9yaWdpbikgb3JpZ2luID0ge307XHJcblx0aWYoIW9yaWdpbi54KSBvcmlnaW4ueCA9IDA7XHJcblx0aWYoIW9yaWdpbi55KSBvcmlnaW4ueSA9IDA7XHJcblx0XHJcblx0Y29uc3QgYSA9IChwb2ludC54IC0gb3JpZ2luLngpO1xyXG5cdGNvbnN0IGIgPSAocG9pbnQueSAtIG9yaWdpbi55KTtcclxuXHRyZXR1cm4ge1xyXG5cdFx0cjogTWF0aC5zcXJ0KCAgXHJcblx0XHRcdE1hdGgucG93KGEsMikgKyBNYXRoLnBvdyhiLDIpXHJcblx0XHQpLFxyXG5cdFx0dGhldGE6IE1hdGguYXRhbjIoYixhKVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG5cdHRyYW5zZmVycyBwb2ludCBmcm9tIFBvbGFyIGNvb3JkaW5hdGVzIHRvIENhcnRlc2lhblxyXG5cdHRoZXRhIGlzIGluIHJhZGlhbnNcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBvbGFyMmNhcnRlc2lhbihyLCB0aGV0YSwgb3JpZ2luKXtcclxuXHRpZighb3JpZ2luKSBvcmlnaW4gPSB7fTtcclxuXHRpZighb3JpZ2luLngpIG9yaWdpbi54ID0gMDtcclxuXHRpZighb3JpZ2luLnkpIG9yaWdpbi55ID0gMDtcclxuXHRcclxuXHRyZXR1cm4ge1xyXG5cdFx0eDogciAqIE1hdGguY29zKHRoZXRhKSArIG9yaWdpbi54LFxyXG5cdFx0eTogciAqIE1hdGguc2luKHRoZXRhKSArIG9yaWdpbi55XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcblx0Y29waWVzIGNvbnRyb2wgcG9pbnRzIGZyb20gdGhlIGZpcnN0IGN1cnZlIHRvIHRoZSBzZWNvbmQgY3VydmUsXHJcblx0YWRqdXN0ZWQgYnkgc2l6ZSBkaWZmZXJlbmNlIGFuZCByb3RhdGlvbiBiZXR3ZWVuIGJvdGggY3VydmVzXHJcblx0Y29weUN1cnZlKFxyXG5cdFx0c3RhcnQgb2YgdGhlIG9yaWdpbmFsIGZpc3QgY3VydmUsXHJcblx0XHRlbmQgb2YgdGhlIG9yaWdpbmFsIGN1cnZlICh3aXRoIGNvbnRyb2wgcG9pbnRzKSxcclxuXHRcdHN0YXJ0IG9mIHRoZSBzZWNvbmQgY3VydmUgKG9yIGF0IHRoaXMgcG9pbnQgb25seSBhIGxpbmUgYmVmb3JlIGNwcyBhcmUgYWRkZWQpXHJcblx0XHRlbmQgb2YgdGhlIHNlY29uZCBjdXJ2ZVxyXG5cdClcclxuKi9cclxuXHJcbi8vVE9ETyBOT1QgU1VSRSBJRiBXT1JLUyBQUk9QRVJMWSBcclxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlDdXJ2ZShTVEFSVCxFTkQsc3RhcnQsZW5kKXtcclxuXHQvL2ZpbmQgc2NhbGVcclxuXHRjb25zdCBTVEFSVEVORCA9IGNhcnRlc2lhbjJwb2xhcihFTkQsU1RBUlQpLnI7XHJcblx0Y29uc3Qgc3RhcnRlbmQgPSBjYXJ0ZXNpYW4ycG9sYXIoZW5kLHN0YXJ0KS5yO1xyXG5cdGNvbnN0IHNjYWxlID0gIHN0YXJ0ZW5kIC8gU1RBUlRFTkQ7XHJcblxyXG5cdC8vY2VudGVycyBvZiBjdXJ2ZXMgXHJcblx0Y29uc3QgVCA9IGZpbmRCZXR3ZWVuKEVORCxTVEFSVCk7XHJcblx0Y29uc3QgdCA9IGZpbmRCZXR3ZWVuKGVuZCxzdGFydCk7XHJcblxyXG5cdGlmKEVORC5jcDEpe1xyXG5cdFx0Ly9yb3RhdGlvblxyXG5cdFx0bGV0IHtyLHRoZXRhfSA9IGNhcnRlc2lhbjJwb2xhcihFTkQuY3AxLFQpO1xyXG5cdFx0dGhldGEgLT0gY2FydGVzaWFuMnBvbGFyKEVORCxUKS50aGV0YVxyXG5cdFx0dGhldGEgKz0gY2FydGVzaWFuMnBvbGFyKGVuZCx0KS50aGV0YVxyXG5cdFx0XHJcblx0XHRlbmQuY3AxID0gcG9sYXIyY2FydGVzaWFuKHIgKiBzY2FsZSwgdGhldGEsIHQpXHJcblx0fTtcclxuXHRcclxuXHRpZihFTkQuY3AyKXtcclxuXHRcdC8vcm90YXRpb25cclxuXHRcdGxldCB7cix0aGV0YX0gPSBjYXJ0ZXNpYW4ycG9sYXIoRU5ELmNwMixUKTtcclxuXHRcdHRoZXRhIC09IGNhcnRlc2lhbjJwb2xhcihFTkQsVCkudGhldGFcclxuXHRcdHRoZXRhICs9IGNhcnRlc2lhbjJwb2xhcihlbmQsdCkudGhldGFcclxuXHRcdFxyXG5cdFx0ZW5kLmNwMiA9IHBvbGFyMmNhcnRlc2lhbihyICogc2NhbGUsIHRoZXRhLCB0KVxyXG5cdH07XHJcbn07XHJcblxyXG4vKipcclxuXHRkcmF3cyBzcGlyYWxcclxuXHRkcmF3U3BpcmFsKFxyXG5cdFx0Y2VudGVyIGFyb3VuZCB3aGljaCB0aGUgc3BpcmFsIHNwaXJhbHNcclxuXHRcdG91dGVybW9zdCBzdGFydHBvaW50XHJcblx0XHRudW1iZXIgb2YgbG9vcHMgYXJvdW5kIHRoZSBjZW50ZXJcclxuXHRcdGRpcmVjdGlvbjogLTEgY2xvY2t3aXNlOyAxIGNvdW50ZXJjbG9ja3dpc2UgLy9UTyBETyAtIG1heWJlIGl0IGlzIHRoZSBvdGhlciB3YXkgYXJvdW5kXHJcblx0KVxyXG4qL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTcGlyYWwoY2VudGVyLHN0YXJ0LGxvb3BzLGRpcmVjdGlvbiA9IDEpe1xyXG5cdC8vYmFzZWQgb24gaHR0cHM6Ly9zdWJzY3JpcHRpb24ucGFja3RwdWIuY29tL2Jvb2svd2ViX2RldmVsb3BtZW50Lzk3ODE4NDk2OTEzNjkvMS9jaDAxbHZsMXNlYzE2L2RyYXdpbmctYS1zcGlyYWxcclxuXHRjb25zdCBpdGVyYXRpb25zID0gNTA7IC8vY29tcGxldGUgY2lyY2xlIGNvbnNpc3Qgb2YgaXRlcmF0aW9uc1xyXG5cdGRpcmVjdGlvbiA9IGRpcmVjdGlvbj49MCA/IDEgOiAtMTtcclxuXHRsZXQgcG9pbnRzID0gW107XHJcblx0XHRcclxuXHRsZXQge3IsdGhldGF9ID0gY2FydGVzaWFuMnBvbGFyKHN0YXJ0LCBjZW50ZXIpO1xyXG5cdGxldCBzdGVwID0gciAvIChpdGVyYXRpb25zKmxvb3BzKTtcclxuXHRcclxuXHRwb2ludHNbcG9pbnRzLmxlbmd0aF0gPSBwb2xhcjJjYXJ0ZXNpYW4ociwgdGhldGEsIGNlbnRlcik7XHJcblx0XHJcblx0Zm9yKGxldCBpID0gMDsgaSA8IChpdGVyYXRpb25zKmxvb3BzKTsgaSsrKSB7XHJcblx0XHRyIC09IHN0ZXA7XHJcblx0XHR0aGV0YSAtPSAoTWF0aC5QSSAqIDIpIC8gaXRlcmF0aW9ucyAqIGRpcmVjdGlvbjtcclxuXHRcdFxyXG5cdFx0cG9pbnRzW3BvaW50cy5sZW5ndGhdID0gcG9sYXIyY2FydGVzaWFuKHIsIHRoZXRhLCBjZW50ZXIpO1xyXG5cdH1cclxuXHRcclxuXHRyZXR1cm4gcG9pbnRzO1xyXG59O1xyXG5cclxuLyoqXHJcblx0ZHJhd1N0YXIoXHJcblx0XHRjZW50ZXIge3gseX1cclxuXHRcdG51bWJlciBvZiBzcGlrZXNcclxuXHRcdG91dGVyUmFkaXVzXHJcblx0XHRpbm5lclJhZGl1c1xyXG5cdFx0dXAgKGJvb2xlYW4pIC0gdGhlIGZpcnN0IHNwaWtlIHNob3VsZCBiZSBmYWNpbmcgdXB3YXJkcyAoZmFsc2UgLSBkb3dud2FyZHMpXHJcblx0XHRvdXRlciAtICAwID0gbm90aGluZzsgMSA9IHRoZXJlIHNob3VsZCBiZSBhIGNpcmNsZSBkcmF3biBhcm91bmQgdGhlIHN0YXI7IC0xID0gdGhlcmUgc2hvdWxkIGJlIGEgcG9seWdvbiBkcmF3biBhcm91bmQgdGhlIHN0YXI7XHJcblx0XHRpbm5lciAtIHRoZSBzYW1lIHRoaW5nIGFzIG91dGVyIGJ1dCBpbnNpZGUgdGhlIHN0YXJcclxuXHQpXHJcblx0KHRoZSBsYXN0IHRocmVlIHBhcmFtZXRlcnMgYXJlIHRoZXJlIHRvIGVuYWJsZSBkcmF3aW5nIG5pY2UgcGVudGFncmFtcylcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdTdGFyKGNlbnRlcixzcGlrZXMsb3V0ZXJSYWRpdXMsaW5uZXJSYWRpdXMsdXAgPSB0cnVlLG91dGVyID0gMCwgaW5uZXIgPSAwKXtcclxuXHRsZXQgc3RhcnBvaW50cyA9IFtdO1xyXG5cdGxldCByb3QgPSBNYXRoLlBJLzIqMzsgLy9yb3RhdGlvbj8/P1xyXG5cdGxldCBzdGVwID0gTWF0aC5QSS9zcGlrZXNcclxuXHRcclxuXHRsZXQgZGlyZWN0aW9uID0gdXAgPyAtMSA6IDE7IFxyXG5cdFxyXG5cdC8vc3RhcnMgc3Bpa2VzXHJcblx0Zm9yKGxldCBpID0gMDsgaSA8IHNwaWtlczsgaSsrKXtcclxuXHRcdHN0YXJwb2ludHNbc3RhcnBvaW50cy5sZW5ndGhdID0ge1xyXG5cdFx0XHR4OmNlbnRlci54ICsoIE1hdGguY29zKHJvdCkgKiBvdXRlclJhZGl1cyAqIGRpcmVjdGlvbiksXHJcblx0XHRcdHk6Y2VudGVyLnkgKyggTWF0aC5zaW4ocm90KSAqIG91dGVyUmFkaXVzICogZGlyZWN0aW9uKVxyXG5cdFx0fVxyXG5cdFx0cm90ICs9IHN0ZXA7XHJcblx0XHRzdGFycG9pbnRzW3N0YXJwb2ludHMubGVuZ3RoXSA9IHtcclxuXHRcdFx0eDpjZW50ZXIueCArKCBNYXRoLmNvcyhyb3QpICogaW5uZXJSYWRpdXMgKiBkaXJlY3Rpb24pLFxyXG5cdFx0XHR5OmNlbnRlci55ICsoIE1hdGguc2luKHJvdCkgKiBpbm5lclJhZGl1cyAqIGRpcmVjdGlvbilcclxuXHRcdH1cclxuXHRcdHJvdCArPSBzdGVwO1xyXG5cdH07XHJcblx0c3RhcnBvaW50c1tzdGFycG9pbnRzLmxlbmd0aF0gPSB7XHJcblx0XHR4OmNlbnRlci54LFxyXG5cdFx0eTpjZW50ZXIueSAtKCBvdXRlclJhZGl1cyAqIGRpcmVjdGlvbilcclxuXHR9O1xyXG5cclxuXHQvL291dGVyIGNpcmNsZS9wb2x5Z29uXHJcblx0aWYob3V0ZXIgPiAwKXtcclxuXHRcdHN0YXJwb2ludHNbc3RhcnBvaW50cy5sZW5ndGhdID0gYnJlYWtQb2ludDtcclxuXHRcdHN0YXJwb2ludHMgPSBzdGFycG9pbnRzLmNvbmNhdChkcmF3Q2lyY2xlKHt4OmNlbnRlci54LHk6Y2VudGVyLnl9LG91dGVyUmFkaXVzKSk7XHJcblx0fWVsc2UgaWYob3V0ZXIgPCAwKXtcclxuXHRcdHN0YXJwb2ludHNbc3RhcnBvaW50cy5sZW5ndGhdID0gYnJlYWtQb2ludDtcclxuXHRcdGZvcih2YXIgaT0wO2k8PShzcGlrZXMqMik7KXtcclxuXHRcdFx0c3RhcnBvaW50c1tzdGFycG9pbnRzLmxlbmd0aF0gPSBzdGFycG9pbnRzW2ldXHJcblx0XHRcdGkrKztcclxuXHRcdFx0aSsrO1xyXG5cdFx0fTtcclxuXHRcdHN0YXJwb2ludHNbc3RhcnBvaW50cy5sZW5ndGhdID0gc3RhcnBvaW50c1swXTtcdFxyXG5cdH07XHJcblx0XHJcblx0Ly9pbm5lciBjaXJjbGUvcG9seWdvblxyXG5cdGlmKGlubmVyID4gMCl7XHJcblx0XHRzdGFycG9pbnRzW3N0YXJwb2ludHMubGVuZ3RoXSA9IGJyZWFrUG9pbnQ7XHJcblx0XHRzdGFycG9pbnRzID0gc3RhcnBvaW50cy5jb25jYXQoZHJhd0NpcmNsZSh7eDpjZW50ZXIueCx5OmNlbnRlci55fSxpbm5lclJhZGl1cykpO1xyXG5cdH1lbHNlIGlmKGlubmVyIDwgMCl7XHJcblx0XHRzdGFycG9pbnRzW3N0YXJwb2ludHMubGVuZ3RoXSA9IGJyZWFrUG9pbnQ7XHJcblx0XHRmb3IodmFyIGk9MTtpPD0oc3Bpa2VzKjIpOyl7XHJcblx0XHRcdHN0YXJwb2ludHNbc3RhcnBvaW50cy5sZW5ndGhdID0gc3RhcnBvaW50c1tpXVxyXG5cdFx0XHRpKys7XHJcblx0XHRcdGkrKztcclxuXHRcdH07XHJcblx0XHRzdGFycG9pbnRzW3N0YXJwb2ludHMubGVuZ3RoXSA9IHN0YXJwb2ludHNbMV07XHJcblx0fTtcclxuXHRcclxuXHRyZXR1cm4gc3RhcnBvaW50c1xyXG59IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSm9obnNvbiBvbiAyMDE3LTA2LTE3LlxyXG4gKi9cclxuZXhwb3J0ICogZnJvbSBcImRyYXdwb2ludFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tYXRlcmlhbHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbG9hZC9sb2FkXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWwvdXRpbGl0eVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi91dGlsL3NlcmlhbGl6YXRpb25cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdXRpbC9wYXJ0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWwvcGF0dGVyblwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi91dGlsL2RyYXdcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdXRpbC9jYW52YXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vdXRpbC9wbGF5ZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZHJhdy9pbml0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RyYXcvZHJhd1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9oYWlyX3BhcnRzL3N0eWxlc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9kZWNvcmF0aXZlX3BhcnRzL2RlY29yYXRpdmVfcGFydFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9kZWNvcmF0aXZlX3BhcnRzL2ZhY2lhbF9oYWlyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RlY29yYXRpdmVfcGFydHMvZnVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RlY29yYXRpdmVfcGFydHMvbWFya2luZ3NcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZGVjb3JhdGl2ZV9wYXJ0cy9vdXRsaW5lXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RlY29yYXRpdmVfcGFydHMvaG9ybnNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZGVjb3JhdGl2ZV9wYXJ0cy90YWlsXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RlY29yYXRpdmVfcGFydHMvd2luZ3NcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZmFjZV9wYXJ0cy9lYXJzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ZhY2VfcGFydHMvZXllYnJvd1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9mYWNlX3BhcnRzL2V5ZWxhc2hcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZmFjZV9wYXJ0cy9leWVsaWRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZmFjZV9wYXJ0cy9leWVzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ZhY2VfcGFydHMvZmFjZV9wYXJ0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2ZhY2VfcGFydHMvaXJpc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9mYWNlX3BhcnRzL2xpcHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZmFjZV9wYXJ0cy9tb3V0aFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9mYWNlX3BhcnRzL25vc2VcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZmFjZV9wYXJ0cy9wdXBpbFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wbGF5ZXIvcGxheWVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BsYXllci9kaW1lbnNpb25zXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BsYXllci9leHByZXNzaW9uXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BsYXllci9tb2RzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BsYXllci9zdGF0c1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wYXJ0cy9wYXJ0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnRzL2FybVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wYXJ0cy9idXR0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnRzL2NoZXN0XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnRzL2ZlZXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vcGFydHMvZ3JvaW5cIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vcGFydHMvaGFuZFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wYXJ0cy9oZWFkXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnRzL2xlZ1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wYXJ0cy9uZWNrXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnRzL3BlbmlzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3BhcnRzL3Rlc3RpY2xlc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wYXJ0cy90b3Jzb1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9wYXJ0cy92YWdpbmFcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9jbG90aGluZ1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL2RyZXNzc2hpcnRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9oZWVsc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL2hhdHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9qYWNrZXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9uZWNrX2FjY2Vzc29yeVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL3BhbnRzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb3RoZXMvc2hvZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9zb2Nrc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL3N3ZWF0ZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy91bmRlcndlYXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9qZXdlbHJ5XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb3RoZXMvamV3ZWxyeTJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9zdXBlcl91bmRlcndlYXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9zdXBlcl9wYW50c1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL3N1cGVyX3NvY2tzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb3RoZXMvaGF0czJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9kcmVzc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL3RvcHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9jb3JzZXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9nbG92ZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9jaG9rZXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9uZWNrbGFjZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9lYXJyaW5nc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL2JvZHljaGFpblwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL2FybWxldFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL2FjY2Vzc29yeVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL21ha2V1cFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL3Jlc3RyYWludHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9hbmtsZXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9saXBzdGlja1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL2FybW9yXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb3RoZXMvbmFpbHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy9GQUlcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy93RkFJXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb3RoZXMvd05haWxzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb3RoZXMvd0dsb3Zlc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL3dDb3JzZXRcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy93SGVlbHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy93RHJlc3NcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy93U3VwZXJfc29ja3NcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy93U3VwZXJfcGFudHNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy93VG9wc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9jbG90aGVzL3dTdXBlcl91bmRlcndlYXJcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vY2xvdGhlcy93QWNjZXNzb3J5XCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2Nsb3RoZXMvd01ha2V1cFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9pdGVtcy9pdGVtXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2RlY29yYXRpdmVfcGFydHMvdGF0dG9vXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3NrZWxldG9ucy9kZWZhdWx0X3BhcnRzXCI7XHJcblxyXG4iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtjb25uZWN0RW5kUG9pbnRzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge3NldFN0cm9rZUFuZEZpbGx9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxuXHRkcmF3UG9pbnRzLCBcclxuXHRzcGxpdEN1cnZlLFxyXG5cdGJyZWFrUG9pbnQsXHJcblx0Y2xvbmUsXHJcblx0bm9uZSxcclxuXHRhZGp1c3QsXHJcblx0cmVmbGVjdCxcclxuXHRpbnRlcnBvbGF0ZUN1cnZlLFxyXG59IGZyb20gXCJkcmF3cG9pbnQvc3JjXCI7IC8vICEhISEgc3JjIG1ha2VzIGFsbCB0aGUgZGlmZmVyZW5jZSEhIVxyXG5pbXBvcnQge1xyXG5cdGdldExpbWJQb2ludHMsXHJcblx0Z2V0TGltYlBvaW50c0Fib3ZlUG9pbnQsXHJcblx0c3RyYWlnaHRlbkN1cnZlLFxyXG5cdGZpbmRCZXR3ZWVuLFxyXG5cdGxpbmVMaW5lSW50ZXJzZWN0aW9uLFxyXG5cdGxpbmVDdWJpY0ludGVyc2VjdGlvbixcclxuXHRwb2ludExpbmVJbnRlcnNlY3Rpb24sXHJcblx0Z2V0TGFjaW5nUG9pbnRzLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRjYWxjRHJlc3NCYXNlLFxyXG5cdERyZXNzLFxyXG5cdGNhbGNTdXBlclNsZWV2ZSxcclxuXHRjYWxjRHJlc3NDbGVhdmFnZSxcclxuXHRMYWNpbmdQYXJ0XHJcbn0gZnJvbSBcIi4vZHJlc3NcIjtcclxuXHJcblxyXG4vKlxyXG5cdGNhbiBoYW5kbGUgd3diYiBzaGl0XHJcblx0bmVjZXNzYXJ5OiBcclxuXHRcdGh1ZVxyXG5cdFx0c2F0dXJcclxuXHRcdGxpZ2h0XHJcblx0XHRhbHBoYVxyXG5cdFx0XHJcblx0XHRmaXNobmVzc1xyXG5cdFx0cGF0XHJcblx0XHRwYXRfc2l6ZVxyXG5cdFx0XHJcblx0XHRib2R5c3VpdFxyXG5cclxuXHRib2R5c3VpdCBpcyBhY3RpdmF0ZWQgd2hlbiB0aGUgbGFzdCBpdGVtIGluIG91dGxpbmUgaXMgXCJ0cnVlXCJcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHd3YmJfZnR3KGV4LGN0eCxpbnNpZGUsb3V0bGluZSxhZGRpdGlvbmFsKXtcclxuXHRpZih0eXBlb2Ygb3V0bGluZSA9PSBcInVuZGVmaW5lZFwiKW91dGxpbmU9aW5zaWRlO1xyXG5cdFxyXG5cdGN0eC5zdHJva2VTdHlsZSA9IFwiaHNsYShcIit0aGlzLmh1ZStcIixcIisodGhpcy5zYXR1ci0xMCkrXCIlLFwiKyh0aGlzLmxpZ2h0LTEwKStcIiUsMSlcIjsgIFxyXG5cdGN0eC5maWxsU3R5bGUgPSBcImhzbGEoXCIrdGhpcy5odWUrXCIsXCIrdGhpcy5zYXR1citcIiUsXCIrdGhpcy5saWdodCtcIiUsXCIrdGhpcy5hbHBoYStcIilcIjtcclxuXHRcclxuXHRpZihhZGRpdGlvbmFsICYmIGFkZGl0aW9uYWwuZmlsbFdpdGhTdHJva2UpY3R4LmZpbGxTdHlsZSA9IGN0eC5zdHJva2VTdHlsZTtcclxuXHRpZihhZGRpdGlvbmFsICYmIGFkZGl0aW9uYWwuZmlsbFdpdGhIaWdobGlnaHRlZEZpbGwpY3R4LmZpbGxTdHlsZSA9IFwiaHNsYShcIit0aGlzLmh1ZStcIixcIisodGhpcy5zYXR1ci0xNSkrXCIlLFwiKyh0aGlzLmxpZ2h0LTIyKStcIiUsMSlcIjsgIFxyXG5cdGlmKGFkZGl0aW9uYWwgJiYgYWRkaXRpb25hbC5maWxsV2l0aEhpZ2hsaWdodCljdHguZmlsbFN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0aWYoYWRkaXRpb25hbCAmJiBhZGRpdGlvbmFsLnN0cm9rZVdpdGhIaWdobGlnaHQpY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHJcbi8vXHRjb25zdCB0aGlja25lc3MgPSAoYWRkaXRpb25hbCAmJiBhZGRpdGlvbmFsLnRoaWNrbmVzcykgPyBhZGRpdGlvbmFsLnRoaWNrbmVzcyA6IHRoaXMudGhpY2tuZXNzO1xyXG5cdFxyXG5cclxuXHQvL2lmKHRoaXMuaW52aXNpYmxlPjEpdGhpcy5pbnZpc2libGU9MTtcclxuXHRpZih0aGlzLmludmlzaWJsZT49MSlyZXR1cm47XHJcblx0XHJcblx0Ly9pZiBub3QgZGVmaW5lZCwgdXNlIGRlZmF1bHQgcGF0dGVybiBcclxuXHRpZih0eXBlb2YgdGhpcy5wYXQgPT09IFwidW5kZWZpbmVkXCIpdGhpcy5wYXQgPSBcImZpc2huZXRcIjtcclxuXHRpZih0eXBlb2YgdGhpcy5wYXRfc2l6ZSA9PT0gXCJ1bmRlZmluZWRcIil0aGlzLnBhdF9zaXplID0gIDc1O1xyXG5cdFxyXG5cdC8vc2hvdyBvbmx5IHBhdHRlcm4gXHJcblx0aWYodGhpcy5maXNobmVzcz49MSB8fCB0aGlzLnBhdF9zaG93KXtcclxuXHRcdGN0eC5maWxsU3R5bGUgPSBkYS5nZXRQYXR0ZXJuKHRoaXMucGF0LHRoaXMucGF0X3NpemUpO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0XHQuLi5pbnNpZGVcclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHJcblx0Ly9zaG93IGdyYWR1YWwgdHJhbnNpdGlvbiBmcm9tIGNvbG9yIHRvIHBhdHRlcm4gXHJcblx0fWVsc2UgaWYodGhpcy5maXNobmVzcz4wKXtcclxuXHRcdGlmKHRoaXMuaW52aXNpYmxlPjApY3R4Lmdsb2JhbEFscGhhID0gMSAtIHRoaXMuaW52aXNpYmxlOyAgLy9JTlZJU0lCTEVcclxuXHRcdFxyXG5cdFx0bGV0IG9yaWdpbmFsID0gY3R4LmZpbGxTdHlsZTtcclxuXHRcclxuXHRcdFxyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IGRhLmdldFBhdHRlcm4odGhpcy5wYXQsdGhpcy5wYXRfc2l6ZSk7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRcdC4uLmluc2lkZVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFxyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IG9yaWdpbmFsO1xyXG5cdFx0XHJcblx0XHRjdHguZ2xvYmFsQWxwaGEgPSAoMS10aGlzLmZpc2huZXNzKVxyXG5cdFx0aWYodGhpcy5pbnZpc2libGU+MCljdHguZ2xvYmFsQWxwaGEgPSBjdHguZ2xvYmFsQWxwaGEgLSB0aGlzLmludmlzaWJsZTsgIC8vSU5WSVNJQkxFXHJcblx0XHRpZihjdHguZ2xvYmFsQWxwaGE8MCljdHguZ2xvYmFsQWxwaGE9MDtcclxuXHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0XHQuLi5pbnNpZGVcclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcclxuXHRcclxuXHQvL3Nob3cgb25seSBjb2xvclxyXG5cdH1lbHNle1xyXG5cdFx0aWYodGhpcy5pbnZpc2libGU+MCljdHguZ2xvYmFsQWxwaGEgPSAxIC0gdGhpcy5pbnZpc2libGU7ICAvL0lOVklTSUJMRVxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHQuLi5pbnNpZGVcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdH1cclxuLypcdFxyXG5cdGlmKHRoaXMuYm9keXN1aXQgJiYgb3V0bGluZVtvdXRsaW5lLmxlbmd0aC0xXT09PXRydWUpe1xyXG5cdFx0b3V0bGluZS5zcGxpY2UoLTIsIDIpO1xyXG5cdH1lbHNlIGlmKCF0aGlzLmJvZHlzdWl0ICYmIG91dGxpbmVbb3V0bGluZS5sZW5ndGgtMV09PT10cnVlKXtcclxuXHRcdG91dGxpbmUuc3BsaWNlKC0xLCAxKTtcclxuXHR9O1xyXG4qL1x0XHJcblx0aWYodGhpcy5maXNobmVzcz4wLjUpY3R4LnN0cm9rZVN0eWxlID0gXCJibGFja1wiOyAvL3RvIGRvIC0gZ3JheT9cclxuXHRcclxuXHQvKlxyXG5cdGNvbnNvbGUubG9nKFwiVEhJQ1wiKVxyXG4gaWYoYWRkaXRpb25hbCljb25zb2xlLmxvZyhhZGRpdGlvbmFsLmxpbmVXaWR0aClcclxuXHQgY29uc29sZS5sb2coXCJUSElDXCIpXHJcbiBjb25zb2xlLmxvZyhhZGRpdGlvbmFsKVxyXG4gKi9cclxuIC8vYXNkZmFzZGZcclxuIFxyXG5cdGxldCBsaW5lID0gdGhpcy50aGlja25lc3MgLSB0aGlzLmZpc2huZXNzO1xyXG5cdGlmKGxpbmU8PTApbGluZT0wLjE7XHJcblx0Y3R4LmxpbmVXaWR0aCA9IGxpbmU7XHJcblx0aWYoYWRkaXRpb25hbCAmJiBhZGRpdGlvbmFsLmxpbmVXaWR0aCkgY3R4LmxpbmVXaWR0aCA9IGFkZGl0aW9uYWwubGluZVdpZHRoO1xyXG5cdFxyXG4vL1x0Y29uc29sZS5sb2coY3R4LmxpbmVXaWR0aClcclxuXHRcclxuXHRpZih0aGlzLmludmlzaWJsZT4wKWN0eC5nbG9iYWxBbHBoYSA9IDEgLSB0aGlzLmludmlzaWJsZTsgLy9JTlZJU0lCTEVcclxuXHRjdHguYmVnaW5QYXRoKCk7XHJcblx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0Li4ub3V0bGluZVxyXG5cdCk7XHJcblx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd3diYl9mdHdfZChleCxjdHgsdHJhbnNwYXJlbmN5LGluc2lkZSxvdXRsaW5lLGFkZGl0aW9uYWwpe1xyXG4vKmNvbnNvbGUubG9nKHRyYW5zcGFyZW5jeSlcclxuY29uc29sZS5sb2codHlwZW9mIG91dGxpbmUpXHJcbmNvbnNvbGUubG9nKG91dGxpbmUpXHJcbiovXHJcblx0aWYodHlwZW9mIG91dGxpbmUgPT0gXCJ1bmRlZmluZWRcIilvdXRsaW5lPWluc2lkZTtcclxuXHRcclxuXHRjdHguc3Ryb2tlU3R5bGUgPSBcImhzbGEoXCIrdGhpcy5odWUrXCIsXCIrKHRoaXMuc2F0dXItMTApK1wiJSxcIisodGhpcy5saWdodC0xMCkrXCIlLDEpXCI7ICBcclxuXHRjdHguZmlsbFN0eWxlID0gXCJoc2xhKFwiK3RoaXMuaHVlK1wiLFwiK3RoaXMuc2F0dXIrXCIlLFwiK3RoaXMubGlnaHQrXCIlLFwiK3RoaXMuYWxwaGErXCIpXCI7XHJcblx0XHJcblx0aWYoYWRkaXRpb25hbCAmJiBhZGRpdGlvbmFsLmZpbGxXaXRoU3Ryb2tlKWN0eC5maWxsU3R5bGUgPSBjdHguc3Ryb2tlU3R5bGU7XHJcblx0aWYoYWRkaXRpb25hbCAmJiBhZGRpdGlvbmFsLmZpbGxXaXRoSGlnaGxpZ2h0ZWRGaWxsKWN0eC5maWxsU3R5bGUgPSBcImhzbGEoXCIrdGhpcy5odWUrXCIsXCIrKHRoaXMuc2F0dXItMTUpK1wiJSxcIisodGhpcy5saWdodC0yMikrXCIlLDEpXCI7ICBcclxuXHRpZihhZGRpdGlvbmFsICYmIGFkZGl0aW9uYWwuZmlsbFdpdGhIaWdobGlnaHQpY3R4LmZpbGxTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0O1xyXG5cdGlmKGFkZGl0aW9uYWwgJiYgYWRkaXRpb25hbC5zdHJva2VXaXRoSGlnaGxpZ2h0KWN0eC5zdHJva2VTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0O1xyXG5cdFxyXG4vL1x0Y29uc3QgdGhpY2tuZXNzID0gKGFkZGl0aW9uYWwgJiYgYWRkaXRpb25hbC50aGlja25lc3MpID8gYWRkaXRpb25hbC50aGlja25lc3MgOiB0aGlzLnRoaWNrbmVzcztcclxuXHQvKlxyXG5jb25zb2xlLmxvZyhcInh4XCIpO1x0XHJcbmNvbnNvbGUubG9nKGluc2lkZSk7XHJcbmNvbnNvbGUubG9nKG91dGxpbmUpO1xyXG4qL1xyXG5cdC8vaWYodGhpcy5pbnZpc2libGU+MSl0aGlzLmludmlzaWJsZT0xO1xyXG5cdGlmKHRoaXMuaW52aXNpYmxlPj0xKXJldHVybjtcclxuXHRcclxuXHQvL2lmIG5vdCBkZWZpbmVkLCB1c2UgZGVmYXVsdCBwYXR0ZXJuIFxyXG5cdGlmKHR5cGVvZiB0aGlzLnBhdCA9PT0gXCJ1bmRlZmluZWRcIil0aGlzLnBhdCA9IFwiZmlzaG5ldFwiO1xyXG5cdGlmKHR5cGVvZiB0aGlzLnBhdF9zaXplID09PSBcInVuZGVmaW5lZFwiKXRoaXMucGF0X3NpemUgPSAgNzU7XHJcblx0XHJcblx0aWYodHJhbnNwYXJlbmN5PjApe1xyXG5cdFx0aWYodGhpcy5pbnZpc2libGU+MCljdHguZ2xvYmFsQWxwaGEgPSAxIC0gdGhpcy5pbnZpc2libGU7ICAvL0lOVklTSUJMRVxyXG5cdC8qXHRcclxuXHRcdGxldCBvcmlnaW5hbCA9IGN0eC5maWxsU3R5bGU7XHJcblx0XHJcblx0XHRcclxuXHRcdGN0eC5maWxsU3R5bGUgPSBkYS5nZXRQYXR0ZXJuKHRoaXMucGF0LHRoaXMucGF0X3NpemUpO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0XHQuLi5pbnNpZGVcclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcclxuXHRcdGN0eC5maWxsU3R5bGUgPSBvcmlnaW5hbDtcclxuXHQqL1x0XHJcblxyXG5cdFx0XHRcclxuXHRcdGxldCBhbGYgPSAoMS10cmFuc3BhcmVuY3kpXHJcblx0XHJcblx0XHRpZih0aGlzLmludmlzaWJsZT4wKWFsZiA9IGN0eC5nbG9iYWxBbHBoYSAtIHRoaXMuaW52aXNpYmxlOyAgLy9JTlZJU0lCTEVcclxuXHRcclxuLy9jb25zb2xlLmxvZyhcImFscGhhXCIrY3R4Lmdsb2JhbEFscGhhKVx0XHJcblx0XHRpZihhbGY8MCl7XHJcblx0XHRcdGN0eC5nbG9iYWxBbHBoYSA9IDA7XHJcblx0XHR9ZWxzZSBpZihhbGY+MSl7XHJcblx0XHRcdGN0eC5nbG9iYWxBbHBoYSA9IDE7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0Y3R4Lmdsb2JhbEFscGhhID0gYWxmO1xyXG5cdFx0fVxyXG5cdFx0Ly9pZihjdHguZ2xvYmFsQWxwaGE+MSljdHguZ2xvYmFsQWxwaGE9MTtcclxuLy9jb25zb2xlLmxvZyhcImFscGhhXCIrY3R4Lmdsb2JhbEFscGhhKVx0XHJcblx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdFx0Li4uaW5zaWRlXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XHJcblx0XHJcblx0Ly9zaG93IG9ubHkgY29sb3JcclxuXHR9ZWxzZXtcclxuXHRcdGlmKHRoaXMuaW52aXNpYmxlPjApY3R4Lmdsb2JhbEFscGhhID0gMSAtIHRoaXMuaW52aXNpYmxlOyAgLy9JTlZJU0lCTEVcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Li4uaW5zaWRlXHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHR9XHJcbi8qXHRcclxuXHRpZih0aGlzLmJvZHlzdWl0ICYmIG91dGxpbmVbb3V0bGluZS5sZW5ndGgtMV09PT10cnVlKXtcclxuXHRcdG91dGxpbmUuc3BsaWNlKC0yLCAyKTtcclxuXHR9ZWxzZSBpZighdGhpcy5ib2R5c3VpdCAmJiBvdXRsaW5lW291dGxpbmUubGVuZ3RoLTFdPT09dHJ1ZSl7XHJcblx0XHRvdXRsaW5lLnNwbGljZSgtMSwgMSk7XHJcblx0fTtcclxuKi9cdFxyXG5cdC8vaWYodHJhbnNwYXJlbmN5PjAuNSljdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7IC8vdG8gZG8gLSBncmF5P1xyXG5cdFxyXG5cdC8qXHJcblx0Y29uc29sZS5sb2coXCJUSElDXCIpXHJcbiBpZihhZGRpdGlvbmFsKWNvbnNvbGUubG9nKGFkZGl0aW9uYWwubGluZVdpZHRoKVxyXG5cdCBjb25zb2xlLmxvZyhcIlRISUNcIilcclxuIGNvbnNvbGUubG9nKGFkZGl0aW9uYWwpXHJcbiAqL1xyXG4gLy9hc2RmYXNkZlxyXG4gXHJcblxyXG4vL1x0Y29uc29sZS5sb2coY3R4LmxpbmVXaWR0aClcclxuXHRpZih0aGlzLmludmlzaWJsZSA+IDEgfHwgdHJhbnNwYXJlbmN5ID4gMSl7XHJcblx0XHRcclxuXHRcdFxyXG5cdH1lbHNle1xyXG5cdFx0bGV0IGxpbmUgPSB0aGlzLnRoaWNrbmVzcztcclxuXHRcdGlmKGxpbmU8PTApbGluZT0wLjE7XHJcblx0XHRjdHgubGluZVdpZHRoID0gbGluZTtcclxuXHRcdGlmKGFkZGl0aW9uYWwgJiYgYWRkaXRpb25hbC5saW5lV2lkdGgpIGN0eC5saW5lV2lkdGggPSBhZGRpdGlvbmFsLmxpbmVXaWR0aDtcclxuXHRcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5pbnZpc2libGUgPiAwIHx8IHRyYW5zcGFyZW5jeSA+IDApe1xyXG5cdFx0XHRsZXQgYWxmID0gMSAtIHRyYW5zcGFyZW5jeTtcclxuXHRcdFx0aWYodGhpcy5pbnZpc2libGUpYWxmIC09IHRoaXMuaW52aXNpYmxlOyAvL0lOVklTSUJMRSAvL1RPRE8gQ0hFQ0tcclxuXHJcblx0XHRcdGlmKGFsZjwwKXtcclxuXHRcdFx0XHRjdHguZ2xvYmFsQWxwaGEgPSAwO1xyXG5cdFx0XHR9ZWxzZSBpZihhbGY+MSl7XHJcblx0XHRcdFx0Y3R4Lmdsb2JhbEFscGhhID0gMTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0Y3R4Lmdsb2JhbEFscGhhID0gYWxmO1xyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Li4ub3V0bGluZVxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHR9O1x0XHJcbn07XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3Q292ZXJOaXBwbGVzKGV4LCBjdHgsIHBhcnQpIHtcclxuICAgIGlmIChleC5oYXNPd25Qcm9wZXJ0eShcImJyZWFzdFwiKSA9PT0gZmFsc2UpIHtcclxuICAgICAgaWYocGFydC5maXNobmVzcz4wKXJldHVybiB0cnVlO1xyXG4vL1RPIERPIC0gSVZJU0lCTEUhXHQgIFxyXG5cdC8vXHRjdHguc2F2ZSgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA1O1xyXG5cdC8vY29uc29sZS5sb2cocGFydCk7XHJcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSBcImhzbGEoXCIrcGFydC5odWUrXCIsXCIrcGFydC5zYXR1citcIiUsXCIrcGFydC5saWdodCtcIiUsXCIrcGFydC5hbHBoYStcIilcIjtcclxuICAgLy8gY29uc29sZS5sb2coY3R4LnN0cm9rZVN0eWxlKTtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgYnJlYWtQb2ludCwgZXguY2hlc3QubmlwcGxlcyk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgIC8vICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5pcHBsZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXVxyXG4gICAgICAgIH0sIHtcclxuXHRcdFx0bGFjdDowLFxyXG5cdFx0XHRzaG93TmlwcGxlczpmYWxzZSwgIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cdFxyXG5cdHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHQgXHQvL1NVUEVSUElOS1xyXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gXCJoc2xhKFwiK3RoaXMuaHVlK1wiLFwiKyh0aGlzLnNhdHVyLTEwKStcIiUsXCIrKHRoaXMubGlnaHQtMTApK1wiJSwxKVwiOyAgXHJcblx0XHRjdHguZmlsbFN0eWxlID0gXCJoc2xhKFwiK3RoaXMuaHVlK1wiLFwiK3RoaXMuc2F0dXIrXCIlLFwiK3RoaXMubGlnaHQrXCIlLFwiK3RoaXMuYWxwaGErXCIpXCI7XHJcblxyXG5cdFx0aWYodGhpcy5maXNobmVzcz4wLjIpcmV0dXJuO1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLnNob3dOaXBwbGVzKXtcclxuXHRcdFx0Ly9jdHguc2F2ZSgpO1xyXG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBkYS5hZGp1c3RDb2xvcihjdHguZmlsbFN0eWxlLCB7XHJcblx0XHRcdFx0XHRzOiAtMTAsIC8vLTVcclxuXHRcdFx0XHRcdGw6IC0xMFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdC8vY3R4LmZpbGxTdHlsZSA9IFwibGltZVwiO1xyXG5cdFx0XHRcdC8vY3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdC8vZGEuZHJhd1BvaW50cy5hcHBseShkYSwgW2N0eF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSggIGRhLmRyYXdDaXJjbGUoZXguY2hlc3QubmlwcGxlcywxLjUpICApKSk7XHJcblx0XHRcdFx0Ly9jdHguZmlsbCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0XHRjdHgubGluZVdpZHRoID0gMjtcclxuXHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xyXG5cdFx0XHRcdFx0IFxyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRkcmF3UG9pbnRzKGN0eCwgYnJlYWtQb2ludCwgZXguY2hlc3QubmlwcGxlcyk7XHJcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHQvL2N0eC5yZXN0b3JlKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGlmKHRoaXMubGFjdD4wKXtcclxuXHRcdC8vXHRjdHguc2F2ZSgpO1xyXG5cdFx0XHRjdHgubGluZVdpZHRoID0gMjtcclxuXHRcdFx0Ly9jdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xyXG5cdFx0XHRcdCBcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgYnJlYWtQb2ludCwgZXguY2hlc3QubmlwcGxlcyk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdC8vXHRjdHgucmVzdG9yZSgpO1xyXG5cclxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGN0eC5zdHJva2VTdHlsZTtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRsZXQgbGVmdCA9IHtcclxuXHRcdFx0XHR4OmV4LmNoZXN0Lm5pcHBsZXMueC0oMS4yKnRoaXMubGFjdCksXHJcblx0XHRcdFx0eTpleC5jaGVzdC5uaXBwbGVzLnlcclxuXHRcdFx0fTtcclxuXHRcdFx0bGV0IHJpZ2h0ID0ge1xyXG5cdFx0XHRcdHg6ZXguY2hlc3QubmlwcGxlcy54KygxLjIqdGhpcy5sYWN0KSxcclxuXHRcdFx0XHR5OmV4LmNoZXN0Lm5pcHBsZXMueVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRsZXQgYm90ID0ge1xyXG5cdFx0XHRcdHg6ZXguY2hlc3QubmlwcGxlcy54LFxyXG5cdFx0XHRcdHk6ZXguY2hlc3QubmlwcGxlcy55LSh0aGlzLmxhY3QqNS40KVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRkYS5kcmF3UG9pbnRzKGN0eCxsZWZ0LHJpZ2h0LGJvdCxsZWZ0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHJcblx0XHR9XHJcblx0IFxyXG5cdCBcclxuXHR9XHJcbn1cclxuIiwiaW1wb3J0IHJlc29sdmVQYXRoIGZyb20gJ29iamVjdC1yZXNvbHZlLXBhdGgnO1xyXG5pbXBvcnQge2FkanVzdH0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZWQgYnkgSm9obnNvbiBvbiAyMDE3LTA2LTE3LlxyXG4gKi9cclxuLyoqXHJcbiAqIEV4dHJhY3QgdGhlIHNpZGUgY29tcG9uZW50IGZyb20gYSBsb2NhdGlvbiBzdHJpbmdcclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFydExvYyBMb2NhdGlvbiBzdHJpbmcgb2YgYSBwYXJ0XHJcbiAqIEByZXR1cm5zIHsoc3RyaW5nfG51bGwpfSBFaXRoZXIgdGhlIHNpZGUgc3RyaW5nIG9yIG51bGwgaWYgbm8gc2lkZSBpbmRpY2F0ZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0U2lkZUxvY2F0aW9uKHBhcnRMb2MpIHtcclxuICAgIGNvbnN0IGxvYyA9IGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24ocGFydExvYyk7XHJcbiAgICAvLyBzaG91bGQgYmUgZmlyc3Qgd29yZCBzZXBhcmF0ZWQgYnkgd2hpdGVzcGFjZVxyXG4gICAgaWYgKGxvYy5pbmRleE9mKFwiIFwiKSA8IDApIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHJldHVybiBsb2Muc3Vic3RyKDAsIGxvYy5pbmRleE9mKFwiIFwiKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHRyYWN0IHRoZSBiYXNlIGNvbXBvbmVudCBmcm9tIGEgbG9jYXRpb24gc3RyaW5nXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhcnRMb2MgTG9jYXRpb24gc3RyaW5nIG9mIGEgcGFydFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgYmFzZSBjb21wb25lbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0QmFzZUxvY2F0aW9uKHBhcnRMb2MpIHtcclxuICAgIGNvbnN0IGxvYyA9IGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24ocGFydExvYyk7XHJcbiAgICAvLyBsYXN0IHdvcmQgc2VwYXJhdGVkIGJ5IHdoaXRlc3BhY2VcclxuICAgIGlmIChsb2MuaW5kZXhPZihcIiBcIikgPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGxvYztcclxuICAgIH1cclxuICAgIHJldHVybiBsb2Muc3Vic3RyKGxvYy5sYXN0SW5kZXhPZihcIiBcIikgKyAxKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEV4dHJhY3QgdGhlIHVuZGVybHlpbmcgbG9jYXRpb24gKHNpZGUgKyBiYXNlKSBvZiBhIGxvY2F0aW9uIGFmdGVyIHN0cmlwcGluZyBpdCBvZlxyXG4gKiBwb3RlbnRpYWwgbW9kaWZpZXIgY2hhcmFjdGVycywgd2hpY2ggYXJlIHByZXBlbmRlZCAodXNlICsgZm9yIG5vbi1yZXN0cmljdGl2ZSwgLSBmb3IgZXhjbHVzaXZlKVxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJ0TG9jIGxvY2F0aW9uIG5hbWUgb2YgcGFydFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24ocGFydExvYykge1xyXG4gICAgZm9yIChsZXQgYyA9IDA7IGMgPCBwYXJ0TG9jLmxlbmd0aDsgKytjKSB7XHJcbiAgICAgICAgc3dpdGNoIChwYXJ0TG9jW2NdKSB7XHJcbiAgICAgICAgY2FzZSBcIitcIjpcclxuICAgICAgICBjYXNlIFwiLVwiOlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gcGFydExvYy5zdWJzdHIoYyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRXh0cmFjdCBtb2RpZmllciBjaGFyYWN0ZXJzICgrIGZvciBub24tcmVzdHJpY3RpdmUsIC0gZm9yIGV4Y2x1c2l2ZSlcclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFydExvYyBMb2NhdGlvbiBuYW1lIG9mIHBhcnRcclxuICogQHJldHVybnMge3N0cmluZ30gTW9kaWZpZXIgY2hhcmFjdGVycyBmb3IgdGhpcyBsb2NhdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RMb2NhdGlvbk1vZGlmaWVyKHBhcnRMb2MpIHtcclxuICAgIGxldCBtb2RpZmllcnMgPSBcIlwiO1xyXG4gICAgZm9yIChsZXQgYyA9IDA7IGMgPCBwYXJ0TG9jLmxlbmd0aDsgKytjKSB7XHJcbiAgICAgICAgc3dpdGNoIChwYXJ0TG9jW2NdKSB7XHJcbiAgICAgICAgY2FzZSBcIitcIjpcclxuICAgICAgICBjYXNlIFwiLVwiOlxyXG4gICAgICAgICAgICBtb2RpZmllcnMgKz0gcGFydExvY1tjXTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vZGlmaWVycztcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3Qgb2YgYWxsIGJhc2UgbG9jYXRpb25zICh3aXRob3V0IHNpZGUgYW5kIG1vZGlmaWVycylcclxuICovXHJcbmV4cG9ydCBjb25zdCBMb2NhdGlvbiA9IHtcclxuICAgIEFSTSAgICAgIDogXCJhcm1cIixcclxuICAgIENIRVNUICAgIDogXCJjaGVzdFwiLFxyXG4gICAgVE9SU08gICAgOiBcInRvcnNvXCIsXHJcbiAgICBCVVRUICAgICA6IFwiYnV0dFwiLFxyXG4gICAgRkVFVCAgICAgOiBcImZlZXRcIixcclxuICAgIEdST0lOICAgIDogXCJncm9pblwiLFxyXG4gICAgSEFORCAgICAgOiBcImhhbmRcIixcclxuICAgIEhFQUQgICAgIDogXCJoZWFkXCIsXHJcbiAgICBMRUcgICAgICA6IFwibGVnXCIsXHJcbiAgICBORUNLICAgICA6IFwibmVja1wiLFxyXG4gICAgUEVOSVMgICAgOiBcInBlbmlzXCIsXHJcbiAgICBWQUdJTkEgICA6IFwidmFnaW5hXCIsXHJcbiAgICBURVNUSUNMRVM6IFwidGVzdGljbGVzXCIsXHJcbiAgICBFQVIgICAgICA6IFwiZWFyc1wiLFxyXG4gICAgRVlFQlJPVyAgOiBcImJyb3dcIixcclxuICAgIEVZRUxBU0ggIDogXCJleWVsYXNoXCIsXHJcbiAgICBFWUVMSUQgICA6IFwiZXllbGlkXCIsXHJcbiAgICBFWUVTICAgICA6IFwiZXllc1wiLFxyXG4gICAgSVJJUyAgICAgOiBcImlyaXNcIixcclxuICAgIExJUFMgICAgIDogXCJsaXBzXCIsXHJcbiAgICBNT1VUSCAgICA6IFwibW91dGhcIixcclxuICAgIE5PU0UgICAgIDogXCJub3NlXCIsXHJcbiAgICBQVVBJTCAgICA6IFwicHVwaWxcIixcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2NhdGlvbklzU2lkZWxlc3MobG9jKSB7XHJcbiAgICBzd2l0Y2ggKGxvYykge1xyXG4gICAgICAgIC8vIGRyb3Bkb3duXHJcbiAgICBjYXNlIExvY2F0aW9uLlRPUlNPOlxyXG4gICAgY2FzZSBMb2NhdGlvbi5IRUFEOlxyXG4gICAgY2FzZSBMb2NhdGlvbi5ORUNLOlxyXG4gICAgY2FzZSBMb2NhdGlvbi5QRU5JUzpcclxuICAgIGNhc2UgTG9jYXRpb24uVEVTVElDTEVTOlxyXG4gICAgY2FzZSBMb2NhdGlvbi5WQUdJTkE6XHJcbiAgICBjYXNlIExvY2F0aW9uLkxJUFM6XHJcbiAgICBjYXNlIExvY2F0aW9uLk1PVVRIOlxyXG4gICAgY2FzZSBMb2NhdGlvbi5OT1NFOlxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgYSBsb2NhdGlvbiByZWxhdGl2ZSB0byBhIGRyYXdwb2ludFxyXG4gKiBAcGFyYW0gZXhcclxuICogQHBhcmFtIGRyYXdwb2ludFxyXG4gKiBAcGFyYW0gZHhcclxuICogQHBhcmFtIGR5XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9jYXRlUmVsYXRpdmVUb0RyYXdwb2ludChleCwge2RyYXdwb2ludCwgZHgsIGR5fSkge1xyXG4gICAgY29uc3QgZHAgPSByZXNvbHZlUGF0aChleCwgZHJhd3BvaW50KTtcclxuICAgIHJldHVybiBhZGp1c3QoZHAsIGR4LCBkeSk7XHJcbn1cclxuIiwiaW1wb3J0IHtnZXRMb2FkZWRQYXR0ZXJufSBmcm9tIFwiLi9wYXR0ZXJuXCI7XHJcbmltcG9ydCB7ZXh0cmFjdFVubW9kaWZpZWRMb2NhdGlvbn0gZnJvbSBcIi4vcGFydFwiO1xyXG5pbXBvcnQge2RpZmYsIG5vcm0sIHNwbGl0Q3VydmUsIG5vbmV9IGZyb20gXCJkcmF3cG9pbnQvc3JjXCI7XHJcblxyXG4vKipcclxuICogY29udmVyc2lvbnMgYmV0d2VlbiBjYW52YXMgdW5pdHMgKGN1KSB0byBjZW50aW1ldGVycyAoY20pIGFuZCBpbmNoZXMgKGluKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluY3UoaW5jaGVzKSB7XHJcbiAgICByZXR1cm4gY21jdShpbmNoZXMgKiAyLjU0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNtY3UoY20pIHtcclxuICAgIHJldHVybiBjbSAqIDI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjdWNtKGN1KSB7XHJcbiAgICByZXR1cm4gY3UgLyAyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFBvaW50c1RvQ2FudmFzVW5pdHMocG9pbnRzKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwb2ludHMpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29udmVydFBvaW50c1RvQ2FudmFzVW5pdHMocG9pbnRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBwb2ludHMgIT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9ICAvLyBjYW4ndCBob2xkIGFueSBkcmF3IHBvaW50c1xyXG5cclxuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocG9pbnRzKTtcclxuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgbmFtZXMubGVuZ3RoOyArK24pIHtcclxuICAgICAgICBsZXQgbmFtZSA9IG5hbWVzW25dO1xyXG4gICAgICAgIGlmIChuYW1lID09PSBcInhcIiB8fCBuYW1lID09PSBcInlcIikge1xyXG4gICAgICAgICAgICBwb2ludHNbbmFtZV0gPSBjbWN1KHBvaW50c1tuYW1lXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29udmVydFBvaW50c1RvQ2FudmFzVW5pdHMocG9pbnRzW25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgc3Ryb2tlIGFuZCBmaWxsIGZvciBnaXZlbiBjb250ZXh0XHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxyXG4gKiBAcGFyYW0ge1BhcnR9IHBhcnQgU29tZSBraW5kIG9mIFBhcnQgb2JqZWN0XHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBleCBFeHBvcnQgZnJvbSBkcmF3XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0U3Ryb2tlQW5kRmlsbChjdHgsIHBhcnQsIGV4KSB7XHJcbiAgICBsZXQgc3Ryb2tlID0gZ2V0TG9hZGVkUGF0dGVybi5jYWxsKHBhcnQsIHBhcnQuc3Ryb2tlLCBjdHgsIGV4KTtcclxuXHJcbiAgICBpZiAoc3Ryb2tlID09PSBcImluaGVyaXRcIikge1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGV4LmJhc2VTdHJva2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZmlsbCA9IGdldExvYWRlZFBhdHRlcm4uY2FsbChwYXJ0LCBwYXJ0LmZpbGwsIGN0eCwgZXgpO1xyXG5cclxuICAgIGlmIChmaWxsID09PSBcImluaGVyaXRcIikge1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBleC5iYXNlRmlsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGZpbGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmhlcml0IHRoZSBzdHJva2Ugc3R5bGUgb2YgaXRzIHBhcmVudCBwYXJ0IChtdXN0IGhhdmUgdGhpcyBib3VuZCB0byBhIHBhcnQpXHJcbiAqIEBwYXJhbSBjdHhcclxuICogQHBhcmFtIGV4XHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGluaGVyaXRTdHJva2UoY3R4LCBleCkge1xyXG4gICAgY29uc3QgbXlMb2MgPSBleHRyYWN0VW5tb2RpZmllZExvY2F0aW9uKHRoaXMubG9jKTtcclxuICAgIC8vIGZpcnN0IGNoZWNrIGlmIHRoZXJlJ3MgY2xvdGhpbmcgaGVyZVxyXG4gICAgY29uc3QgY292ZXJpbmdDbG90aGluZyA9IGV4LmF2YXRhci5nZXRDbG90aGluZ0luTG9jYXRpb24uY2FsbChleC5hdmF0YXIsIG15TG9jKTtcclxuICAgIGxldCB0b3BDbG90aGluZyA9IG51bGw7XHJcbiAgICBjb3ZlcmluZ0Nsb3RoaW5nLmZvckVhY2goKGNsb3RoaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKHRvcENsb3RoaW5nID09PSBudWxsIHx8IGNsb3RoaW5nLmNsb3RoaW5nTGF5ZXIgPiB0b3BDbG90aGluZy5jbG90aGluZ0xheWVyKSB7XHJcbiAgICAgICAgICAgIHRvcENsb3RoaW5nID0gY2xvdGhpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gaWYgY292ZXJpbmcgd2l0aCBjbG90aGluZyB1c2UgaXQsIGVsc2UgdXNlIHBhcmVudCBib2R5IHBhcnQncyBjb2xvdXJcclxuICAgIGlmICh0b3BDbG90aGluZykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdG9wQ2xvdGhpbmcuc3Ryb2tlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRvcENsb3RoaW5nLnN0cm9rZShjdHgsIGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRvcENsb3RoaW5nLnN0cm9rZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50UGFydCA9IGV4LmF2YXRhci5nZXRQYXJ0SW5Mb2NhdGlvbi5jYWxsKGV4LmF2YXRhciwgbXlMb2MpO1xyXG4gICAgICAgIGlmIChwYXJlbnRQYXJ0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyZW50UGFydC5zdHJva2UgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50U3Ryb2tlID0gcGFyZW50UGFydC5zdHJva2UoY3R4LCBleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50U3Ryb2tlICE9PSBub25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudFN0cm9rZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyZW50UGFydC5zdHJva2UgIT09IG5vbmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRQYXJ0LnN0cm9rZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXguYmFzZVN0cm9rZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaGVyaXRGaWxsKGN0eCwgZXgpIHtcclxuICAgIGNvbnN0IHBhcmVudFBhcnQgPSBleC5hdmF0YXIuZ2V0UGFydEluTG9jYXRpb24odGhpcy5sb2MpO1xyXG4gICAgaWYgKHBhcmVudFBhcnQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHBhcmVudFBhcnQuZmlsbCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRQYXJ0LmZpbGwoY3R4LCBleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJlbnRQYXJ0LmZpbGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXguYmFzZUZpbGw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlUGFydChwYXJ0TmFtZSwgZXgpIHtcclxuICAgIGlmIChleC5oYXNPd25Qcm9wZXJ0eShwYXJ0TmFtZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUcnlpbmcgdG8gZHJhdyAke3BhcnROYW1lfSBidXQgaXQgaGFzbid0IGJlZW4gZGVmaW5lZCB5ZXRgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3QocG9pbnRBLCBwb2ludEIpIHtcclxuICAgIGNvbnN0IG15RGlmZiA9IGRpZmYocG9pbnRBLCBwb2ludEIpO1xyXG4gICAgcmV0dXJuIG5vcm0obXlEaWZmKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERFUFJFQ0FURUQgZnVuY3Rpb24sIHVzZSBzaW1wbGVRdWFkcmF0aWMgaW5zdGVhZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2VRdWFkcmF0aWMocDEsIHAyLCB0LCBkeCwgZHksIHN0LCBldCkge1xyXG4gICAgLy8gZHJhdyBhIHNtb290aCBxdWFkcmF0aWMgY3VydmUgd2l0aCB0aGUgY29udHJvbCBwb2ludCB0IGFsb25nIHRoZSBzdHJhaWdodCBsaW5lIGZyb20gcDEgdG8gcDJcclxuICAgIC8vIGRpc3R1cmJlZCB3aXRoIGR4IGFuZCBkeSBpZiBhcHBsaWNhYmxlXHJcbiAgICBpZiAoIXQpIHtcclxuICAgICAgICB0ID0gMC41O1xyXG4gICAgfVxyXG4gICAgaWYgKCFkeCkge1xyXG4gICAgICAgIGR4ID0gMDtcclxuICAgIH1cclxuICAgIGlmICghZHkpIHtcclxuICAgICAgICBkeSA9IDA7XHJcbiAgICB9XHJcbiAgICBsZXQgY3AxID0ge1xyXG4gICAgICAgIHg6IHAxLnggKiB0ICsgcDIueCAqICgxIC0gdCkgKyBkeCxcclxuICAgICAgICB5OiBwMS55ICogdCArIHAyLnkgKiAoMSAtIHQpICsgZHlcclxuICAgIH07XHJcbiAgICAvLyBzdGFydCB0aW1lIG5vdCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiAwXHJcbiAgICBpZiAoc3QpIHtcclxuICAgICAgICBjb25zdCBwZW5kID0gcDI7XHJcbiAgICAgICAgcGVuZC5jcDEgPSBjcDE7XHJcbiAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKHN0LCBwMSwgcGVuZCk7XHJcbiAgICAgICAgY3AxID0gc3AucmlnaHQucDIuY3AxO1xyXG4gICAgfVxyXG4gICAgaWYgKGV0KSB7XHJcbiAgICAgICAgY29uc3QgcGVuZCA9IHAyO1xyXG4gICAgICAgIHBlbmQuY3AxID0gY3AxO1xyXG4gICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZShldCwgcDEsIHBlbmQpO1xyXG4gICAgICAgIGNwMSA9IHNwLmxlZnQucDIuY3AxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNwMTtcclxufVxyXG4iLCJpbXBvcnQge25vbmV9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgc2hpbmUgPSBcImhzbGEoMCwxMDAlLDEwMCUsMC4yKVwiO1xyXG5leHBvcnQgY29uc3Qgc2hhZGluZ0RhcmsgPSBcImhzbCgwLDE1JSw4MCUpXCI7XHJcbmV4cG9ydCBjb25zdCBzaGFkaW5nTWVkaXVtID0gXCJoc2woMCwxNSUsODUlKVwiO1xyXG5leHBvcnQgY29uc3Qgc2hhZGluZ0xpZ2h0ID0gXCJoc2woMCwxNSUsOTAlKVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLkZST05ULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBzaGFkaW5nRGFyaztcclxuICAgIH1cclxuXHJcbiAgICBnZXRMaW5lV2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIGFsbCB0aGUgcG9seWZpbGxzXHJcbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgICAgIC8vIFdlIG11c3QgY2hlY2sgYWdhaW5zdCB0aGVzZSBzcGVjaWZpYyBjYXNlcy5cclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG5leHRLZXkgaW4gc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtuZXh0S2V5XSA9IHNvdXJjZVtuZXh0S2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xyXG4gICAgICAgIH07XHJcbiAgICB9KSgpO1xyXG59XHJcblN0cmluZy5wcm90b3R5cGUuY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnNsaWNlKDEpO1xyXG59O1xyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5sYXN0KSB7XHJcbiAgICBBcnJheS5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMubGVuZ3RoKSA/IHRoaXNbdGhpcy5sZW5ndGggLSAxXSA6IG51bGw7XHJcbiAgICB9O1xyXG59XHJcbmlmICghQXJyYXkucHJvdG90eXBlLmV4dGVuZCkge1xyXG4gICAgQXJyYXkucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uIChiKSB7XHJcbiAgICAgICAgdGhpcy5wdXNoLmFwcGx5KHRoaXMsIGIpO1xyXG4gICAgfTtcclxufVxyXG5BcnJheS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAobmVlZGxlKSB7XHJcbiAgICBjb25zdCBmaW5kTmFOID0gbmVlZGxlICE9PSBuZWVkbGU7XHJcbiAgICBsZXQgaW5kZXhPZjtcclxuXHJcbiAgICBpZiAoIWZpbmROYU4gJiYgdHlwZW9mIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobmVlZGxlKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gLTEsIGluZGV4ID0gLTE7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgoZmluZE5hTiAmJiBpdGVtICE9PSBpdGVtKSB8fCBpdGVtID09PSBuZWVkbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbmRleE9mLmNhbGwodGhpcywgbmVlZGxlKSA+IC0xO1xyXG59O1xyXG5cclxuaWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHtcclxuICAgIFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiB8fCAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1YnN0cihwb3NpdGlvbiwgc2VhcmNoU3RyaW5nLmxlbmd0aCkgPT09IHNlYXJjaFN0cmluZztcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHRyYWN0IG51bWVyaWMgUkdCIHZhbHVlcyBmcm9tIGEgSFRNTCBjb21wYXRpYmxlIHN0cmluZyAod2hpdGVzcGFjZSBpZ25vcmVkKVxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZ2JTdHJpbmcgUkdCIHN0cmluZyBpbiB0aGUgZm9ybWF0IFwicmdiKDEwMCwyMjAsNDIpXCJcclxuICogQHJldHVybnMgeyhvYmplY3R8bnVsbCl9IEVpdGhlciBhbiBvYmplY3QgaG9sZGluZyByLGcsYiBwcm9wZXJ0aWVzLCBvciBudWxsIGlmIG5vdCBtYXRjaGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFJHQihyZ2JTdHJpbmcpIHtcclxuICAgIGNvbnN0IHJnYiA9IC9yZ2JcXChcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKlxcKS8uZXhlYyhyZ2JTdHJpbmcpO1xyXG4gICAgaWYgKHJnYikge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHI6IHBhcnNlSW50KHJnYlsxXSksXHJcbiAgICAgICAgICAgIGc6IHBhcnNlSW50KHJnYlsyXSksXHJcbiAgICAgICAgICAgIGI6IHBhcnNlSW50KHJnYlszXSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFeHRyYWN0IG51bWVyaWMgSFNMIHZhbHVlcyBmcm9tIGEgSFRNTCBjb21wYXRpYmxlIHN0cmluZyAod2hpdGVzcGFjZSBpZ25vcmVkKVxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBoc2xTdHJpbmcgSFNMIHN0cmluZyBpbiB0aGUgZm9ybWF0IFwiaHNsKDMxMCwxMiUsMjUlKVwiXHJcbiAqIEByZXR1cm5zIHsob2JqZWN0fG51bGwpfSBFaXRoZXIgYW4gb2JqZWN0IGhvbGRpbmcgaCxzLGwgcHJvcGVydGllcywgb3IgbnVsbCBpZiBub3QgbWF0Y2hlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RIU0woaHNsU3RyaW5nKSB7XHJcbiAgICBjb25zdCBoc2wgPSAvaHNsXFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKSVcXHMqLFxccyooXFxkKyklXFxzKlxcKS8uZXhlYyhoc2xTdHJpbmcpO1xyXG4gICAgaWYgKGhzbCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGg6IHBhcnNlSW50KGhzbFsxXSksXHJcbiAgICAgICAgICAgIHM6IHBhcnNlSW50KGhzbFsyXSksXHJcbiAgICAgICAgICAgIGw6IHBhcnNlSW50KGhzbFszXSksXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogRXh0cmFjdCBudW1lcmljIFJHQiB2YWx1ZXMgZnJvbSBhIEhUTUwgY29tcGF0aWJsZSBoZXggc3RyaW5nICh3aGl0ZXNwYWNlIGlnbm9yZWQpXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICogQHBhcmFtIHtzdHJpbmd9IGhleFN0cmluZyBIZXggc3RyaW5nIGluIHRoZSBmb3JtYXQgXCIjZmZhYWJjXCJcclxuICogQHJldHVybnMgeyhvYmplY3R8bnVsbCl9IEVpdGhlciBhbiBvYmplY3QgaG9sZGluZyByLGcsYiBwcm9wZXJ0aWVzLCBvciBudWxsIGlmIG5vdCBtYXRjaGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEhleChoZXhTdHJpbmcpIHtcclxuICAgIGNvbnN0IHJnYiA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXhTdHJpbmcpO1xyXG4gICAgaWYgKHJnYikge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHI6IHBhcnNlSW50KHJnYlsxXSwgMTYpLFxyXG4gICAgICAgICAgICBnOiBwYXJzZUludChyZ2JbMl0sIDE2KSxcclxuICAgICAgICAgICAgYjogcGFyc2VJbnQocmdiWzNdLCAxNilcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IGFuIFJHQiBvYmplY3QgdG8gSFNMIG9iamVjdCwgd2hpY2ggYXJlIG1vcmUgaW50dWl0aXZlIHRvIG1vZGlmeS5cclxuICogQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tamFja3Nvbi9cclxuICogQHBhcmFtIHtvYmplY3R9IHJnYiBSR0Igb2JqZWN0IGhvbGRpbmcgcixnLGIgcHJvcGVydGllcyAoZWFjaCBbMCwyNTVdKVxyXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBIU0wgb2JqZWN0IGhvbGRpbmcgaCxzLGwgcHJvcGVydGllcyAoaCBbMCwzNjBdLCBzLGwgWzAsMTAwXSlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBSR0JUb0hTTChyZ2IpIHtcclxuICAgIGxldCByLCBnLCBiO1xyXG4gICAgW3IsIGcsIGJdID0gW3JnYi5yLCByZ2IuZywgcmdiLmJdO1xyXG4gICAgciAvPSAyNTUsIGcgLz0gMjU1LCBiIC89IDI1NTtcclxuICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLCBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcclxuICAgIGxldCBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xyXG5cclxuICAgIGlmIChtYXggPT09IG1pbikge1xyXG4gICAgICAgIGggPSBzID0gMDsgIC8vIGFjaHJvbWF0aWNcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgZCA9IG1heCAtIG1pbjtcclxuICAgICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XHJcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcclxuICAgICAgICBjYXNlIHI6XHJcbiAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBnOlxyXG4gICAgICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIGI6XHJcbiAgICAgICAgICAgIGggPSAociAtIGcpIC8gZCArIDQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoIC89IDY7XHJcbiAgICB9XHJcbiAgICBoICo9IDM2MDtcclxuICAgIHMgKj0gMTAwO1xyXG4gICAgbCAqPSAxMDA7XHJcblxyXG4gICAgcmV0dXJuIHJnYi5oYXNPd25Qcm9wZXJ0eShcImFcIikgPyB7XHJcbiAgICAgICAgaCxcclxuICAgICAgICBzLFxyXG4gICAgICAgIGwsXHJcbiAgICAgICAgYTogcmdiLmFcclxuICAgIH0gOiB7XHJcbiAgICAgICAgaCxcclxuICAgICAgICBzLFxyXG4gICAgICAgIGxcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGp1c3QgYW4gZXhpc3RpbmcgY29sb3IgaW50byBhIG5ldyBjb2xvclxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqIEBwYXJhbSBjb2xvciBBIGNvbG9yIGluIFJHQiwgaGV4LCBvciBIU0wgZm9ybVxyXG4gKiBAcGFyYW0gYWRqdXN0bWVudCBPYmplY3Qgd2l0aCBILCBTLCBMLCBhbmQgb3B0aW9uYWxseSBBIGFzIHByb3BlcnRpZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGp1c3RDb2xvcihjb2xvciwgYWRqdXN0bWVudCkge1xyXG4gICAgLy8gY29udmVydCBldmVyeXRoaW5nIHRvIEhTTFxyXG4gICAgbGV0IGhzbCA9IG51bGw7XHJcbiAgICBpZiAodHlwZW9mIGNvbG9yID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBmaXJzdCBub24tbnVsbCByZXN1bHRcclxuICAgICAgICBoc2wgPSBleHRyYWN0SFNMKGNvbG9yKTtcclxuICAgICAgICBpZiAoaHNsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhzbCA9IGhzbCB8fCBleHRyYWN0UkdCKGNvbG9yKTtcclxuICAgICAgICAgICAgaHNsID0gaHNsIHx8IGV4dHJhY3RIZXgoY29sb3IpO1xyXG4gICAgICAgICAgICAvLyBoYXZlIGFuIFJHQiB2YWx1ZVxyXG4gICAgICAgICAgICBpZiAoaHNsKSB7XHJcbiAgICAgICAgICAgICAgICBoc2wgPSBSR0JUb0hTTChoc2wpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShcImhcIikgJiYgY29sb3IuaGFzT3duUHJvcGVydHkoXCJzXCIpICYmXHJcbiAgICAgICAgICAgICAgIGNvbG9yLmhhc093blByb3BlcnR5KFwibFwiKSkge1xyXG4gICAgICAgIGhzbCA9IGNvbG9yO1xyXG4gICAgfSBlbHNlIGlmIChjb2xvci5oYXNPd25Qcm9wZXJ0eShcInJcIikgJiYgY29sb3IuaGFzT3duUHJvcGVydHkoXCJnXCIpICYmXHJcbiAgICAgICAgICAgICAgIGNvbG9yLmhhc093blByb3BlcnR5KFwiYlwiKSkge1xyXG4gICAgICAgIGhzbCA9IFJHQlRvSFNMKGNvbG9yKTtcclxuICAgIH1cclxuICAgIC8vIGNhbid0IGRvIGl0XHJcbiAgICBpZiAoaHNsID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBoc2wuaCArPSBhZGp1c3RtZW50LmggfHwgMDtcclxuICAgIGhzbC5zICs9IGFkanVzdG1lbnQucyB8fCAwO1xyXG4gICAgaHNsLmwgKz0gYWRqdXN0bWVudC5sIHx8IDA7XHJcbiAgICBpZiAoYWRqdXN0bWVudC5oYXNPd25Qcm9wZXJ0eShcImFcIikpIHtcclxuICAgICAgICByZXR1cm4gYGhzbGEoJHtoc2wuaC50b0ZpeGVkKDEpfSwke2hzbC5zLnRvRml4ZWQoMSl9JSwke2hzbC5sLnRvRml4ZWQoMSl9JSwke2FkanVzdG1lbnQuYS50b0ZpeGVkKFxyXG4gICAgICAgICAgICAyKX0pYDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGBoc2woJHtoc2wuaC50b0ZpeGVkKDEpfSwke2hzbC5zLnRvRml4ZWQoMSl9JSwke2hzbC5sLnRvRml4ZWQoMSl9JSlgO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBSTEUocykge1xyXG4gICAgLy8gc2ltcGxlIHJ1biBsZW5ndGggZW5jb2RpbmcgZm9yIGltYWdlcyAoNCBjaGFyYWN0ZXJzIGF0IGEgdGltZSlcclxuICAgIGxldCBzaG9ydGVzdHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApICsgcztcclxuXHJcbiAgICAvLyB0cnkgZW5jb2RpbmcgbXVsdGlwbGVzIG9mIDQgKHJlcGV0aXRpb25zIGNvdWxkIGJlIGF0IGRpZmZlcmVudCBpbnRlcnZhbHMpXHJcbiAgICAvLyB0cnkgc3VicGl4ZWwgZW5jb2RpbmcgZmlyc3QgKClcclxuICAgIGZvciAobGV0IGogPSAxOyBqIDwgNDE7KSB7XHJcbiAgICAgICAgLy8gZmlyc3QgY2hhcmFjdGVyIHRvIGluZGljYXRlIGhvdyBtYW55IHBpeGVscyBpcyBhIHBhdHRlcm5cclxuICAgICAgICBsZXQgc3MgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGopO1xyXG4gICAgICAgIGxldCBjID0gcy5zbGljZSgwLCBqKTtcclxuICAgICAgICBsZXQgcmVwZWF0ID0gMTtcclxuXHJcbiAgICAgICAgbGV0IGkgPSBqO1xyXG4gICAgICAgIGZvciAodmFyIGxlbiA9IHMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IGopIHtcclxuICAgICAgICAgICAgLy8gYmFzZTY0IGNhbiBvbmx5IGhhbmRsZSB1cCB0byAyNTVcclxuICAgICAgICAgICAgaWYgKGMgIT09IHMuc2xpY2UoaSwgaSArIGopIHx8IHJlcGVhdCA9PT0gMjU1KSB7XHJcbiAgICAgICAgICAgICAgICBzcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlcGVhdCkgKyBjO1xyXG4gICAgICAgICAgICAgICAgcmVwZWF0ID0gMTtcclxuICAgICAgICAgICAgICAgIGMgPSBzLnNsaWNlKGksIGkgKyBqKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICsrcmVwZWF0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdhcyBzdGlsbCByZXBlYXRpbmcgYSBzZXF1ZW5jZSBhdCB0aGUgZW5kXHJcbiAgICAgICAgaWYgKGMgPT09IHMuc2xpY2Uocy5sZW5ndGggLSBqKSkge1xyXG4gICAgICAgICAgICBzcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlcGVhdCkgKyBjO1xyXG4gICAgICAgIH0vLyBjb3B5IG92ZXIgdGhlIGVuZCAobnVtYmVyIG9mIHRvdGFsIHBpeGVscyBkb2Vzbid0IGRpdmlkZSA0KnN0cmlkZSBldmVubHkpXHJcbiAgICAgICAgZWxzZSBpZiAoaSA+IHMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICBzcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDEpICsgcy5zbGljZShpIC0gaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIlJMRSBvdmVyXCIsIGosIFwic3RyaWRlIC0tIGNvbXByZXNzZWRcIiwgc3MubGVuZ3RoLCBcIm9yaWdpbmFsXCIsIHMubGVuZ3RoKTtcclxuICAgICAgICBpZiAoc3MubGVuZ3RoIDwgc2hvcnRlc3RzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBzaG9ydGVzdHMgPSBzcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWZ0ZXIgc3VicGl4ZWwgZW5jb2RpbmcsIGluY3JlbWVudCBieSBhIHBpeGVsXHJcbiAgICAgICAgaWYgKGogPT09IDEpIHtcclxuICAgICAgICAgICAgaiA9IDQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaiArPSA0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGFjdHVhbGx5IHNtYWxsZXIgdG8ga2VlcCBvcmlnaW5hbCBzdHJpbmdcclxuICAgIHJldHVybiBzaG9ydGVzdHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFJMRChzcykge1xyXG4gICAgLy8gc2ltcGxlIHJ1biBsZW5ndGggZGVjb2RpbmdcclxuICAgIGNvbnN0IHN0cmlkZSA9IHNzLmNoYXJDb2RlQXQoMCk7XHJcbiAgICBpZiAoc3RyaWRlID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHNzLnNsaWNlKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzID0gXCJcIjtcclxuICAgIGZvciAobGV0IGkgPSAxLCBsZW4gPSBzcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSArIHN0cmlkZSkge1xyXG4gICAgICAgIHMgKz0gc3Muc2xpY2UoaSArIDEsIGkgKyAxICsgc3RyaWRlKS5yZXBlYXQoc3MuY2hhckNvZGVBdChpKSk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhcImRlY29kZWQgbGVuZ3RoXCIsIHMubGVuZ3RoKTtcclxuICAgIHJldHVybiBzO1xyXG59XHJcblxyXG4vLyB6aWd1cmF0IGFsZ29yaXRobSwgZnJvbVxyXG4vLyBodHRwczovL3d3dy5maWxvc29waHkub3JnL3Bvc3QvMzUvbm9ybWFsZGlzdHJpYnV0ZWRfcmFuZG9tX3ZhbHVlc19pbl9qYXZhc2NyaXB0X3VzaW5nX3RoZV96aWdndXJhdF9hbGdvcml0aG0vXHJcbmZ1bmN0aW9uIFppZ2d1cmF0KHNlZWQpIHtcclxuICAgIGxldCBqc3IgPSAxMjM0NTY3ODk7XHJcbiAgICBsZXQgd24gPSBBcnJheSgxMjgpO1xyXG4gICAgbGV0IGZuID0gQXJyYXkoMTI4KTtcclxuICAgIGxldCBrbiA9IEFycmF5KDEyOCk7XHJcblxyXG4gICAgZnVuY3Rpb24gUk5PUigpIHtcclxuICAgICAgICBjb25zdCBoeiA9IFNIUjMoKTtcclxuICAgICAgICBjb25zdCBpeiA9IGh6ICYgMTI3O1xyXG4gICAgICAgIHJldHVybiAoTWF0aC5hYnMoaHopIDwga25baXpdKSA/IGh6ICogd25baXpdIDogbmZpeChoeiwgaXopO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubmV4dEdhdXNzaWFuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBSTk9SKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIG5maXgoaHosIGl6KSB7XHJcbiAgICAgICAgY29uc3QgciA9IDMuNDQyNjE5ODU1ODk5O1xyXG4gICAgICAgIGNvbnN0IHIxID0gMS4wIC8gcjtcclxuICAgICAgICBsZXQgeDtcclxuICAgICAgICBsZXQgeTtcclxuICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICB4ID0gaHogKiB3bltpel07XHJcbiAgICAgICAgICAgIGlmIChpeiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB4ID0gKC1NYXRoLmxvZyhVTkkoKSkgKiByMSk7XHJcbiAgICAgICAgICAgICAgICB5ID0gLU1hdGgubG9nKFVOSSgpKTtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh5ICsgeSA8IHggKiB4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9ICgtTWF0aC5sb2coVU5JKCkpICogcjEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgPSAtTWF0aC5sb2coVU5JKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChoeiA+IDApID8gciArIHggOiAtciAtIHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmbltpel0gKyBVTkkoKSAqIChmbltpeiAtIDFdIC0gZm5baXpdKSA8IE1hdGguZXhwKC0wLjUgKiB4ICogeCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGh6ID0gU0hSMygpO1xyXG4gICAgICAgICAgICBpeiA9IGh6ICYgMTI3O1xyXG5cclxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGh6KSA8IGtuW2l6XSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChoeiAqIHduW2l6XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gU0hSMygpIHtcclxuICAgICAgICBjb25zdCBqeiA9IGpzcjtcclxuICAgICAgICBsZXQganpyID0ganNyO1xyXG4gICAgICAgIGp6ciBePSAoanpyIDw8IDEzKTtcclxuICAgICAgICBqenIgXj0gKGp6ciA+Pj4gMTcpO1xyXG4gICAgICAgIGp6ciBePSAoanpyIDw8IDUpO1xyXG4gICAgICAgIGpzciA9IGp6cjtcclxuICAgICAgICByZXR1cm4gKGp6ICsganpyKSB8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gVU5JKCkge1xyXG4gICAgICAgIHJldHVybiAwLjUgKiAoMSArIFNIUjMoKSAvIC1NYXRoLnBvdygyLCAzMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHppZ3NldChzZWVkKSB7XHJcbiAgICAgICAgLy8gc2VlZCBnZW5lcmF0b3IgYmFzZWQgb24gY3VycmVudCB0aW1lXHJcbiAgICAgICAgaWYoIXNlZWQpc2VlZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdFx0anNyIF49IHNlZWQ7XHJcblxyXG4gICAgICAgIGNvbnN0IG0xID0gMjE0NzQ4MzY0OC4wO1xyXG4gICAgICAgIGxldCBkbiA9IDMuNDQyNjE5ODU1ODk5O1xyXG4gICAgICAgIGxldCB0biA9IGRuO1xyXG4gICAgICAgIGNvbnN0IHZuID0gOS45MTI1NjMwMzUyNjIxN2UtMztcclxuXHJcbiAgICAgICAgdmFyIHEgPSB2biAvIE1hdGguZXhwKC0wLjUgKiBkbiAqIGRuKTtcclxuICAgICAgICBrblswXSA9IE1hdGguZmxvb3IoKGRuIC8gcSkgKiBtMSk7XHJcbiAgICAgICAga25bMV0gPSAwO1xyXG5cclxuICAgICAgICB3blswXSA9IHEgLyBtMTtcclxuICAgICAgICB3blsxMjddID0gZG4gLyBtMTtcclxuXHJcbiAgICAgICAgZm5bMF0gPSAxLjA7XHJcbiAgICAgICAgZm5bMTI3XSA9IE1hdGguZXhwKC0wLjUgKiBkbiAqIGRuKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDEyNjsgaSA+PSAxOyBpLS0pIHtcclxuICAgICAgICAgICAgZG4gPSBNYXRoLnNxcnQoLTIuMCAqIE1hdGgubG9nKHZuIC8gZG4gKyBNYXRoLmV4cCgtMC41ICogZG4gKiBkbikpKTtcclxuICAgICAgICAgICAga25baSArIDFdID0gTWF0aC5mbG9vcigoZG4gLyB0bikgKiBtMSk7XHJcbiAgICAgICAgICAgIHRuID0gZG47XHJcbiAgICAgICAgICAgIGZuW2ldID0gTWF0aC5leHAoLTAuNSAqIGRuICogZG4pO1xyXG4gICAgICAgICAgICB3bltpXSA9IGRuIC8gbTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHppZ3NldChzZWVkKTtcclxufVxyXG5cclxuLy8gaW5zdGFudGlhdGUgdGhlIGdlbmVyYXRvclxyXG5sZXQgcmFuZFppZztcclxuXHJcbi8qKlxyXG4gKiBHZXQgYSBub3JtYWxseSBkaXN0cmlidXRlZCByYW5kb20gbnVtYmVyXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICogKHVzaW5nIHRoZSBaaWdndXJhdCBhbGdvcml0aG0gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWmlnZ3VyYXRfYWxnb3JpdGhtKVxyXG4gKiBAcGFyYW0ge251bWJlcn0gbWVhbiBNZWFuIG9mIHRoZSB1bmRlcmx5aW5nIG5vcm1hbCBkaXN0cmlidXRpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHN0ZGV2IFN0YW5kYXJkIGRldmlhdGlvbiBhcm91bmQgbWVhblxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmFuZG9tIG51bWJlclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmROb3JtYWwobWVhbiwgc3RkZXYpIHtcclxuICAgIC8vIHBzZXVkbyByYW5kb20gYXBwcm94aW1hdGVcclxuICAgIC8vIHN0YW5kYXJkIG5vcm1hbDogbWVhbiAwIGFuZCBzdGRldiAxXHJcbiAgICBpZiAoIXJhbmRaaWcpIHtcclxuICAgICAgICBpbml0aWF0ZVJhbmROb3JtYWwoc2VlZClcclxuICAgIH1cclxuICAgIHJldHVybiByYW5kWmlnLm5leHRHYXVzc2lhbigpICogc3RkZXYgKyBtZWFuO1xyXG59XHJcblxyXG4vL2NvdWxkIGJlIGluaXRpYWxpemVkIHdpdGggc3BlY2lmaWMgbnVtYmVyIChnYWluZWQgZnJvbSB0aW1lIC0gbmV3IERhdGUoKS5nZXRUaW1lKCkpICh3aXRob3V0IGl0IHVzZXMgcmFuZG9tKVxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhdGVSYW5kTm9ybWFsKHNlZWQpIHtcclxuXHRyYW5kWmlnID0gbmV3IFppZ2d1cmF0KHNlZWQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVzdFJhbmRHZW5lcmF0b3Iobikge1xyXG4gICAgY29uc3QgaGlzdG9ncmFtID1cclxuICAgICAgICB7fTsgIC8vIGJ1Y2tldHMgd2l0aCBlYWNoIGtleSBiZWluZyBhbiBpbnRlZ2VyIG1hcHBpbmcgdG8gdGhlIG51bWJlciBvZiBvY2N1cmFuY2VzXHJcbiAgICBmb3IgKGxldCBpID0gLTEwMDsgaSA8IDEwMTsgKytpKSB7XHJcbiAgICAgICAgaGlzdG9ncmFtW2ldID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdjtcclxuICAgIHdoaWxlIChuLS0gPiAwKSB7XHJcbiAgICAgICAgdiA9IE1hdGgucm91bmQocmFuZE5vcm1hbCgxMCwgMjApKTtcclxuICAgICAgICArK2hpc3RvZ3JhbVt2XTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc3RyID0gW107XHJcbiAgICBmb3IgKGxldCBpIGluIGhpc3RvZ3JhbSkge1xyXG4gICAgICAgIHN0ci5wdXNoKFwiXCIgKyBpICsgXCJcXHRcIiArIGhpc3RvZ3JhbVtpXSk7XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhzdHIuam9pbihcIlxcblwiKSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZVBvaW50KHAxLCBwMiwgYmlhcyA9IDAuNSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB4OiBwMS54ICogKDEgLSBiaWFzKSArIHAyLnggKiBiaWFzLFxyXG4gICAgICAgIHk6IHAxLnkgKiAoMSAtIGJpYXMpICsgcDIueSAqIGJpYXNcclxuICAgIH07XHJcbn1cclxuXHJcblxyXG4vLyB0b3BvbG9naWNhbCBzb3J0IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hcmNlbGtsZWhyL3RvcG9zb3J0XHJcbmV4cG9ydCBmdW5jdGlvbiB0b3BvbG9naWNhbFNvcnQobm9kZXMsIGVkZ2VzKSB7XHJcbiAgICBsZXQgY3Vyc29yID0gbm9kZXMubGVuZ3RoXHJcbiAgICAgICAgLCBzb3J0ZWQgPSBuZXcgQXJyYXkoY3Vyc29yKVxyXG4gICAgICAgICwgdmlzaXRlZCA9IHt9XHJcbiAgICAgICAgLCBpID0gY3Vyc29yO1xyXG5cclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICBpZiAoIXZpc2l0ZWRbaV0pIHtcclxuICAgICAgICAgICAgdmlzaXQobm9kZXNbaV0sIGksIFtdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNvcnRlZDtcclxuXHJcbiAgICBmdW5jdGlvbiB2aXNpdChub2RlLCBpLCBwcmVkZWNlc3NvcnMpIHtcclxuICAgICAgICBpZiAocHJlZGVjZXNzb3JzLmluZGV4T2Yobm9kZSkgPj0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDeWNsaWMgZGVwZW5kZW5jeTogXCIgKyBKU09OLnN0cmluZ2lmeShub2RlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIX5ub2Rlcy5pbmRleE9mKG5vZGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZvdW5kIHVua25vd24gbm9kZS4gTWFrZSBzdXJlIHRvIHByb3ZpZGVkIGFsbCBpbnZvbHZlZCBub2Rlcy4gVW5rbm93biBub2RlOiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShub2RlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmlzaXRlZFtpXSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZpc2l0ZWRbaV0gPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBvdXRnb2luZyBlZGdlc1xyXG4gICAgICAgIGNvbnN0IG91dGdvaW5nID0gZWRnZXMuZmlsdGVyKGZ1bmN0aW9uIChlZGdlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlZGdlWzBdID09PSBub2RlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoKGkgPSBvdXRnb2luZy5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZWRzID0gcHJlZGVjZXNzb3JzLmNvbmNhdChub2RlKTtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBvdXRnb2luZ1stLWldWzFdO1xyXG4gICAgICAgICAgICAgICAgdmlzaXQoY2hpbGQsIG5vZGVzLmluZGV4T2YoY2hpbGQpLCBwcmVkcyk7XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKGkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc29ydGVkWy0tY3Vyc29yXSA9IG5vZGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaW1wbGVUb3BvbG9naWNhbFNvcnQoZWRnZXMpIHtcclxuICAgIHJldHVybiB0b3BvbG9naWNhbFNvcnQodW5pcXVlTm9kZXMoZWRnZXMpLCBlZGdlcyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVuaXF1ZU5vZGVzKGFycikge1xyXG4gICAgY29uc3QgcmVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGVkZ2UgPSBhcnJbaV07XHJcbiAgICAgICAgaWYgKHJlcy5pbmRleE9mKGVkZ2VbMF0pIDwgMCkge1xyXG4gICAgICAgICAgICByZXMucHVzaChlZGdlWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlcy5pbmRleE9mKGVkZ2VbMV0pIDwgMCkge1xyXG4gICAgICAgICAgICByZXMucHVzaChlZGdlWzFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgQ29udGV4dDJEVHJhY2tlZCBmcm9tIFwiY29udGV4dC0yZC10cmFja2VkXCI7XHJcbmltcG9ydCB7ZHJhd1RhdHRvb1BhdHRlcm4sIHBhdHRlcm5Mb2FkaW5nUXVldWV9IGZyb20gXCIuLi91dGlsL3BhdHRlcm5cIjtcclxuaW1wb3J0IHtsb2FkZWR9IGZyb20gXCIuLi9sb2FkL2xvYWRcIjtcclxuaW1wb3J0IHtTa2VsZXRvbn0gZnJvbSBcIi4uL3NrZWxldG9ucy9za2VsZXRvblwiO1xyXG5pbXBvcnQge1BhcnQsIGdldENoaWxkTG9jYXRpb24sIEJvZHlQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge2V4dHJhY3RCYXNlTG9jYXRpb24sIGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb259IGZyb20gXCIuLi91dGlsL3BhcnRcIjtcclxuaW1wb3J0IHtjb252ZXJ0UG9pbnRzVG9DYW52YXNVbml0cywgZGlzdCwgc2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uL3V0aWwvZHJhd1wiO1xyXG5pbXBvcnQge2NvbmZpZ3VyZUJhc2VDb2xvcnMsIGluaXRDYW52YXN9IGZyb20gXCIuL2luaXRcIjtcclxuaW1wb3J0IHt0b3BvbG9naWNhbFNvcnR9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuaW1wb3J0IHtMYXllciwgU2hhZGluZ0xheWVyc30gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Q2xvdGhlc30gZnJvbSBcIi4uL2Nsb3RoZXMvY2xvdGhpbmdcIjtcclxuLy8gVE9ETyBsb29rIGludG8gd2h5IGltcG9ydGluZyB0aGlzIGZyb20gL3NyYyBicmVha3Mgc29tZXRoaW5ncyAoc3BlY2lmaWNhbGx5IGFyb3VuZCBjaGVzdCBhcmVhIHdpdGggcGF0dGVybnMpXHJcbmltcG9ydCB7XHJcbiAgICBkcmF3UG9pbnRzLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIG5vbmUsXHJcbiAgICBlbmRQb2ludCxcclxuICAgIHJhZCwgYnJlYWtQb2ludFxyXG59IGZyb20gXCJkcmF3cG9pbnQvc3JjXCI7XHJcbmltcG9ydCB7YXBwbHlNb2RzLCByZW1vdmVNb2RzfSBmcm9tIFwiLi4vdXRpbC9wbGF5ZXJcIjtcclxuaW1wb3J0IHtJdGVtc30gZnJvbSBcIi4uL2l0ZW1zL2l0ZW1cIjtcclxuaW1wb3J0IHtTaG9lU2lkZVBhcnR9IGZyb20gXCIuLi9jbG90aGVzL3Nob2VzXCI7XHJcbmltcG9ydCB7VGF0dG9vc30gZnJvbSBcIi4uL2RlY29yYXRpdmVfcGFydHMvdGF0dG9vXCI7XHJcblxyXG4vKiBDb3B5cmlnaHQgMjAxNiBKb2huc29uIFpob25nICovXHJcblxyXG5cclxuLyoqXHJcbiAqIERyYXcgYW4gYXZhdGFyIHRvIGEgY2FudmFzR3JvdXBcclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjYW52YXNHcm91cE9iaiBIVE1MIERPTSBlbGVtZW50IGhvbGRpbmcgYWxsIHRoZSBjYW52YXNlcywgZ290dGVuIHdpdGhcclxuICogZGEuZ2V0Q2FudmFzR3JvdXBcclxuICogQHBhcmFtIGF2YXRhciBQbGF5ZXIgb2JqZWN0IHRvIGRyYXdcclxuICogQHBhcmFtIHtvYmplY3R9IHVzZXJDb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCBjb250YWluc1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVzZXJDb25maWcucGFzc1Rocm91Z2ggSWYgdHJ1ZSwgd2lsbCB1c2UgZXhpc3RpbmcgZGltZW5zaW9ucyB0byBkcmF3IHJhdGhlciB0aGFuIGNhbGN1bGF0aW5nIHRoZW1cclxuICogQHBhcmFtIHtzdHJpbmd9IHVzZXJDb25maWcubmFtZUNvbG9yIENvbG9yIHRvIHJlbmRlciB0aGUgbmFtZSBpblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlckNvbmZpZy5nZW5kZXJDb2xvciBDb2xvciB0byByZW5kZXIgdGhlIGdlbmRlciBpblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlckNvbmZpZy5oZWlnaHRDb2xvciBDb2xvciB0byByZW5kZXIgdGhlIGhlaWdodCB0ZXh0IGluXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQ29uZmlnLmhlaWdodEJhckNvbG9yIENvbG9yIHRvIHJlbmRlciB0aGUgaGVpZ2h0IGJhciBpblxyXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBFeHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJhdyhjYW52YXNHcm91cE9iaiwgYXZhdGFyLCB1c2VyQ29uZmlnKSB7XHJcbiAgICBpZiAoIWxvYWRlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeWluZyB0byBkcmF3IHdpdGhvdXQgaGF2aW5nIGxvYWRlZCBmaXJzdCEgKGNhbGwgZGEubG9hZCgpIGJlZm9yZSlcIik7XHJcbiAgICB9XHJcbiAgICAvLyBtYWtlIHN1cmUgYWxsIG5lZWRlZCBwYXR0ZXJucyBhcmUgbG9hZGVkXHJcbiAgICBpZiAocGF0dGVybkxvYWRpbmdRdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocGF0dGVybkxvYWRpbmdRdWV1ZSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHBhdHRlcm5Mb2FkaW5nUXVldWUubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIGRyYXcoY2FudmFzR3JvdXBPYmosIGF2YXRhciwgdXNlckNvbmZpZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBjYW52YXMgbmFtZSBpcyB0aGUgc3RyaW5nIGlkIG9mIHRoZSBjYW52YXMgZWxlbWVudCB0byBkcmF3IHRvXHJcbiAgICAvLyBpZiBpdCdzIG5vdCBhIHN0cmluZywgd2UgYXNzdW1lIGl0J3MgdGhlIGFjdHVhbCBjYW52YXMgcGFzc2VkIGluXHJcbiAgICBsZXQgY29uZmlnID0ge1xyXG4gICAgICAgIG5hbWVDb2xvciAgICAgICAgICA6IFwiIzAwMFwiLFxyXG4gICAgICAgIGdlbmRlckNvbG9yICAgICAgICA6IFwiIzAwMFwiLFxyXG4gICAgICAgIGhlaWdodENvbG9yICAgICAgICA6IFwiIzAwMFwiLFxyXG4gICAgICAgIGhlaWdodEJhckNvbG9yICAgICA6IFwiIzAwMFwiLFxyXG4gICAgICAgIHByaW50QWRkaXRpb25hbEluZm86IHRydWUsXHJcbiAgICAgICAgcHJpbnRIZWlnaHQgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICByZW5kZXJTaG9lU2lkZVZpZXcgOiB0cnVlLFxyXG4gICAgICAgIG9mZnNldFggICAgICAgICAgICA6IDAsXHJcbiAgICAgICAgb2Zmc2V0WSAgICAgICAgICAgIDogMCxcclxuICAgIH07XHJcbiAgICBpZiAodXNlckNvbmZpZykge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oY29uZmlnLCB1c2VyQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhc3N1bWluZyBjYW52YXMgZ3JvdXAgZXhpc3RzXHJcblxyXG4gICAgLy8gbm90IHRlcnJpYmx5IGVsZWdhbnQgd2F5IG9mIGRvaW5nIHRoaXMgKGRvbid0IHdhbnQgdG8gcGFzcyBhdmF0YXIgdG8gZHJhdyBmdW5jdGlvbnMpXHJcbiAgICBhdmF0YXIuTW9kcy5zaG9lSGVpZ2h0ID0gYXZhdGFyLmhlaWdodEFkanVzdCgpO1xyXG4gICAgLy8gZGVmaW5lIHN0YXRzXHJcbiAgICBpZiAoIWNvbmZpZy5wYXNzVGhyb3VnaCkge1xyXG4gICAgICAgIGF2YXRhci5jYWxjRGltZW5zaW9ucygpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2sgPSBTa2VsZXRvblthdmF0YXIuc2tlbGV0b25dO1xyXG4gICAgaWYgKCFzaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbid0IGZpbmQgc2tlbGV0b24gd2l0aCBuYW1lIFwiICsgYXZhdGFyLnNrZWxldG9uKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVTklUIERFRklOSVRJT05cclxuICAgIC8vIGludGVybmFsIG1vZGVsIG9mIDQwMHgxODAgY2FudmFzXHJcbiAgICAvLyBhc3N1bWluZyBtYXggaGVpZ2h0IGlzIDIwMGNtLCAxIGNhbnZhcyB1bml0ID0gMC41Y20gPSA1bW1cclxuICAgIGNvbnN0IGV4ID0ge307XHJcbiAgICAvLyBjZW50ZXIgeCBhbmQgeVxyXG4gICAgZXguY3ggPSA4MCArIGNvbmZpZy5vZmZzZXRYO1xyXG4gICAgZXguY3kgPSAyMDAgKyBjb25maWcub2Zmc2V0WTtcclxuXHJcbiAgICBleC5hdmF0YXIgPSBhdmF0YXI7XHJcbiAgICAvLyBEUkFXIFBPSU5UUyBkZWZpbmVkICh4LHkpIGZvciBzcGVjaWZpYyBib2R5IHBvaW50cyBzbyB3ZSBoYXZlIHVuaWZpZWQgY2FsY3VsYXRpb25zXHJcbiAgICAvLyBwb2ludHMgYXJlIGRlZmluZWQgaW4gY21cclxuICAgIC8vIHRoZXNlIGFyZSBjYWxjdWxhdGVkIG9uY2UgaW4gYSBjb3JlIGZ1bmN0aW9uIGFuZCB0aGVuIHJlZmVyZW5jZWQgaW4gb3RoZXIgZnVuY3Rpb25zXHJcbiAgICAvLyB0aGV5IGFyZSB0aGUgZXhwb3J0ZWQgcGh5c2ljYWwgcGFyYW1ldGVycyBhbmQgYXJlIGRlZmluZWQgaW4gdGhlaXIgcmVzcGVjdGl2ZSBkcmF3XHJcbiAgICAvLyBmdW5jdGlvbnNcclxuICAgIGV4W1BhcnQuTEVGVF0gPSB7fTtcclxuICAgIGV4W1BhcnQuUklHSFRdID0ge307XHJcblxyXG5cclxuICAgIC8vIGxldCBlYWNoIGJvZHkgcGFydCBjYWxjdWxhdGUgYW5kIGV4cG9ydCBpdHMgb3duIGRyYXcgcG9pbnRzXHJcbiAgICBhdmF0YXIucGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgIGNhbGNQYXJ0KGV4LCBwYXJ0KTtcclxuICAgIH0pO1xyXG4gICAgYXZhdGFyLmZhY2VQYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XHJcbiAgICAgICAgY2FsY1BhcnQoZXgsIHBhcnQpO1xyXG4gICAgfSk7XHJcbiAgICBhdmF0YXIuZGVjb3JhdGl2ZVBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAvLyBkZWNvcmF0aXZlIHBhcnRzIHJlcXVpcmUgdGhlIGV4aXN0ZW5jZSBvZiBlaXRoZXIgYSBwYXJ0IG9yIGZhY2VQYXJ0IGluIHRoZSBzYW1lIGxvY2F0aW9uXHJcbiAgICAgICAgbGV0IGRlY29yYXRpdmVMb2NhdGlvbiA9IHBhcnQubG9jO1xyXG4gICAgICAgIGlmIChhdmF0YXIuZ2V0UGFydEluTG9jYXRpb24oZGVjb3JhdGl2ZUxvY2F0aW9uKSB8fFxyXG4gICAgICAgICAgICBhdmF0YXIuZ2V0UGFydEluTG9jYXRpb24oZGVjb3JhdGl2ZUxvY2F0aW9uLCBhdmF0YXIuZmFjZVBhcnRzKSkge1xyXG4gICAgICAgICAgICBjYWxjUGFydChleCwgcGFydCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZmlsbCBpbiBwYXJ0cyB0aGF0IGFyZSBtaXNzaW5nXHJcbiAgICBhdmF0YXIuZmlsbE1pc3NpbmdEcmF3cG9pbnRzKGV4W1BhcnQuTEVGVF0pO1xyXG4gICAgYXZhdGFyLmZpbGxNaXNzaW5nRHJhd3BvaW50cyhleFtQYXJ0LlJJR0hUXSk7XHJcblxyXG4gICAgLy8gY29udmVydCB0byBkcmF3YWJsZSB1bml0c1xyXG4gICAgY29udmVydFBvaW50c1RvQ2FudmFzVW5pdHMoZXhbUGFydC5MRUZUXSk7XHJcbiAgICBjb252ZXJ0UG9pbnRzVG9DYW52YXNVbml0cyhleFtQYXJ0LlJJR0hUXSk7XHJcblxyXG4gICAgLy8gY2FsY3VsYXRlIGJhc2UgYm9keSBjb2xvcnNcclxuICAgIGNvbmZpZ3VyZUJhc2VDb2xvcnMoZXgpO1xyXG5cclxuICAgIC8vIGFkZCBpbiByZXZlcnNlIG9yZGVyXHJcbiAgICBjb25zdCBjYW52YXNHcm91cCA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IGNhbnZhc0dyb3VwT2JqLmNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgY2FudmFzR3JvdXAucHVzaChjYW52YXNHcm91cE9iai5jaGlsZHJlbltpXSk7XHJcbiAgICB9XHJcbiAgICBleC5jYW52YXNHcm91cCA9IGNhbnZhc0dyb3VwO1xyXG4gICAgLy8gYWN0dWFsbHkgd29yayB3aXRoIHRoZSBjYW52YXNlcyBub3dcclxuICAgIGNvbnN0IGN0eEdyb3VwID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IExheWVyLk5VTV9MQVlFUlM7ICsraSkge1xyXG4gICAgICAgIGxldCBjdHggPSBuZXcgQ29udGV4dDJEVHJhY2tlZChjYW52YXNHcm91cFtpXS5nZXRDb250ZXh0KFwiMmRcIikpO1xyXG4gICAgICAgIGluaXRDYW52YXMoY2FudmFzR3JvdXBbaV0sIGN0eCwgY29uZmlnLCBhdmF0YXIsIGV4LCBpLCB0cnVlKTtcclxuICAgICAgICBjdHhHcm91cC5wdXNoKGN0eCk7XHJcbiAgICB9XHJcbiAgICBleC5oZWlnaHQgPSBjYW52YXNHcm91cFtMYXllci5CQVNFXS5oZWlnaHQ7XHJcbiAgICBleC53aWR0aCA9IGNhbnZhc0dyb3VwW0xheWVyLkJBU0VdLndpZHRoO1xyXG5cclxuXHJcbiAgICAvLyBjbGlwcGluZyBtYXNrIGZvciB0aGUgYm9keSBpbmRleGVkIGJ5IFtsYXllcl1bc2lkZV1cclxuICAgIC8vIHRvIGJlIGRlZmluZWQgaW4gcmVuZGVyQmFzZVxyXG4gICAgZXguY2xpcCA9IHt9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIC8vIHVuZGVybHlpbmcgc2tpblxyXG4gICAgICAgIHJlbmRlckJhc2UoY3R4R3JvdXAsIGV4KTtcclxuXHJcbiAgICAgICAgLy8gcmVuZGVyIGluZGl2aWR1YWwgcGFydHNcclxuICAgICAgICByZW5kZXJQYXJ0cyhjdHhHcm91cCwgZXgsIGNvbmZpZyk7XHJcblxyXG4gICAgICAgIGV4LmN0eEdyb3VwID0gY3R4R3JvdXA7XHJcbiAgICAgICAgZXguY3R4ID0gbmV3IENvbnRleHQyRFRyYWNrZWQoY2FudmFzR3JvdXBbTGF5ZXIuTlVNX0xBWUVSU10uZ2V0Q29udGV4dChcIjJkXCIpKTtcclxuICAgICAgICAvLyBzZXQgdXAgZGlzcGxheSBjYW52YXMgd2l0aCBzYW1lIHNjYWxpbmcgYW5kIHRyYW5zbGF0aW9uIGFzIHVzZWQgZm9yIGRyYXdpbmdcclxuICAgICAgICBpbml0Q2FudmFzKGNhbnZhc0dyb3VwW0xheWVyLk5VTV9MQVlFUlNdLFxyXG4gICAgICAgICAgICBleC5jdHgsXHJcbiAgICAgICAgICAgIGNvbmZpZyxcclxuICAgICAgICAgICAgYXZhdGFyLFxyXG4gICAgICAgICAgICBleCxcclxuICAgICAgICAgICAgTGF5ZXIuTlVNX0xBWUVSUyxcclxuICAgICAgICAgICAgZmFsc2UpO1xyXG4gICAgICAgIHJlc29sdmUoZXgpO1xyXG4gICAgICAgIHJldHVybiBleDtcclxuICAgIH0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY1BhcnQoZXgsIHBhcnQpIHtcclxuICAgIGNvbnN0IGF2YXRhciA9IGV4LmF2YXRhcjtcclxuXHJcbiAgICAvLyB3cmFwIHRoZSBib2R5IHBhcnQncyBjYWxjIGZ1bmN0aW9uXHJcbiAgICBpZiAocGFydC5oYXNPd25Qcm9wZXJ0eShcIk1vZHNcIikpIHtcclxuICAgICAgICBhcHBseU1vZHMoYXZhdGFyLk1vZHMsIHBhcnQuTW9kcyk7XHJcbiAgICAgICAgYXZhdGFyLmNhbGNEaW1lbnNpb25zKCk7XHJcbiAgICB9XHJcbiAgICAvLyBpbnNpZGUgZWFjaCBjYWxsLCAndGhpcycgc2hvdWxkIHJlZmVyIHRvIHRoZSBhdmF0YXIncyBkaW1lbnNpb25zXHJcbiAgICBwYXJ0LmNhbGNEcmF3UG9pbnRzLmNhbGwoYXZhdGFyLmRpbSwgZXhbcGFydC5zaWRlXSwgYXZhdGFyLl9jbGFtcGVkTW9kcyxcclxuICAgICAgICB0cnVlLCBwYXJ0KTtcclxuICAgIC8vIGFsc28gZGVmaW5lIHRoZSBwb2ludHMgZm9yIHRoZSBvdGhlciBzaWRlXHJcbiAgICBpZiAocGFydC5yZWZsZWN0KSB7XHJcbiAgICAgICAgcGFydC5jYWxjRHJhd1BvaW50cy5jYWxsKGF2YXRhci5kaW0sIGV4WzEgLSBwYXJ0LnNpZGVdLCBhdmF0YXIuX2NsYW1wZWRNb2RzLFxyXG4gICAgICAgICAgICB0cnVlLCBwYXJ0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFydC5oYXNPd25Qcm9wZXJ0eShcIk1vZHNcIikpIHtcclxuICAgICAgICByZW1vdmVNb2RzKGF2YXRhci5Nb2RzLCBwYXJ0Lk1vZHMpO1xyXG4gICAgICAgIGF2YXRhci5jYWxjRGltZW5zaW9ucygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogZ3VpTWVudUl0ZW0gc2hvdWxkIGJlIGFuIGFycmF5IG9mIHBhcnQgbmFtZXNcclxuICogd2hpbGUgZHJhd25QYXJ0cyBzaG91bGQgaGF2ZSBhbGwgdGhlIGRyYXcgcG9pbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGF0IHBhcnRcclxuICovXHJcbmZ1bmN0aW9uIHN5bnRoZXNpemVEcmF3UG9pbnRzKHBhcnROYW1lcywgZHJhd25QYXJ0cykge1xyXG4gICAgY29uc3QgZHBzID0gW107XHJcbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IHBhcnROYW1lcy5sZW5ndGg7ICsrcCkge1xyXG4gICAgICAgIGRwcy5leHRlbmQoZHJhd25QYXJ0c1twYXJ0TmFtZXNbcF1dKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkcHM7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyQmFzZShjdHhHcm91cCwgZXgpIHtcclxuXHJcbiAgICAvLyBmaXJzdCBwYXNzLCBmaWxsIGluIGJhc2UgY29sb3JcclxuICAgIGZvciAobGV0IGxheWVyID0gTGF5ZXIuQkFTRTsgbGF5ZXIgPCBMYXllci5OVU1fTEFZRVJTOyArK2xheWVyKSB7XHJcbiAgICAgICAgZXguY2xpcFtsYXllcl0gPSB7fTtcclxuICAgICAgICBsZXQgY3R4ID0gY3R4R3JvdXBbbGF5ZXJdO1xyXG5cclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIC8vIGxlZnQgc2lkZVxyXG4gICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGV4LmNsaXBbbGF5ZXJdW1BhcnQuTEVGVF0gPSBkcmF3UGFydHNMYXllcihleCwgbGF5ZXIsIFBhcnQuTEVGVCwgY3R4KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgIC8vIHJpZ2h0IHNpZGUgYW5kIGNlbnRlclxyXG4gICAgICAgIGV4LmNsaXBbbGF5ZXJdW1BhcnQuUklHSFRdID0gZHJhd1BhcnRzTGF5ZXIoZXgsIGxheWVyLCBQYXJ0LlJJR0hULCBjdHgpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0cm9rZVBhcnQoY3R4LCBkcHMpIHtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGRyYXdQb2ludHMuYXBwbHkobnVsbCwgW2N0eF0uY29uY2F0KGRwcykpO1xyXG4gICAgY3R4LnN0cm9rZSgpO1xyXG59XHJcblxyXG4vKipcclxuICogVG9wb2xvZ2ljYWxseSBzb3J0IHBhcnRzIHNvIHRoYXQgdGhleSdyZSBkcmF3biBpbiBhIHByZWZlcnJlZCBvcmRlciAoYWJvdmUgd2hhdGV2ZXIgdGhleSB3YW50KVxyXG4gKiBAcGFyYW0gYXZhdGFyXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxuZnVuY3Rpb24gb3JkZXJQYXJ0cyhhdmF0YXIpIHtcclxuICAgIGNvbnN0IHBhcnRHcm91cHMgPSBbXHJcbiAgICAgICAgXCJwYXJ0c1wiLFxyXG4gICAgICAgIFwiZmFjZVBhcnRzXCIsXHJcbiAgICAgICAgXCJkZWNvcmF0aXZlUGFydHNcIixcclxuICAgICAgICBcImhhaXJQYXJ0c1wiLFxyXG4gICAgICAgIFwiY2xvdGhpbmdQYXJ0c1wiLFxyXG4gICAgICAgIFwic2hhZGluZ1BhcnRzXCIsXHJcbiAgICAgICAgXCJ0YXR0b29zXCIsIC8vIHJlbmRlcmVkIGFzIGlmIHRoZXkgYXJlIHBhcnRzIChraW5kIG9mIGxpa2UgZGVjb3JhdGl2ZVBhcnRzKVxyXG4gICAgXTtcclxuXHJcbiAgICAvLyBpbmRleCAtPiBwYXJ0IG9iamVjdFxyXG4gICAgY29uc3QgcGFydE1hcCA9IFtdO1xyXG4gICAgLy8gcGFydCBvYmplY3QgLT4gaW5kZXhcclxuICAgIGNvbnN0IHBhcnRNYXBJbnZlcnNlID0gbmV3IE1hcCgpO1xyXG4gICAgY29uc3QgcGFydFR5cGVzID0gW107XHJcbiAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgY29uc3QgcGFydERlcGVuZGVuY3kgPSBbXTtcclxuXHJcbiAgICAvLyBpbml0aWFsaXplIG1hcCBkYXRhIHN0cnVjdHVyZXNcclxuICAgIHBhcnRHcm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcclxuICAgICAgICBhdmF0YXJbZ3JvdXBdLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAgICAgcGFydE1hcFtpbmRleF0gPSBwYXJ0O1xyXG4gICAgICAgICAgICBwYXJ0TWFwSW52ZXJzZS5zZXQocGFydCwgaW5kZXgpO1xyXG4gICAgICAgICAgICBwYXJ0VHlwZXMucHVzaChncm91cCk7XHJcbiAgICAgICAgICAgICsraW5kZXg7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgLy8gZmluZCBwYXJ0LWJhc2VkIGRlcGVuZGVuY2llc1xyXG4gICAgcGFydEdyb3Vwcy5mb3JFYWNoKChncm91cCkgPT4ge1xyXG4gICAgICAgIGF2YXRhcltncm91cF0uZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICBmaW5kRGVwZW5kZW5jaWVzKHBhcnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZmluZENsb3RoaW5nTGF5ZXJEZXBlbmRlbmNpZXMoKTtcclxuICAgIGZpbmRDbG90aGluZ1NhbWVMYXllck9yZGVyaW5nKCk7XHJcblxyXG4gICAgLy8gZmluZCBkcmF3aW5nLWxheWVyIGJhc2VkIGRlcGVuZGVuY2llc1xyXG4gICAgLy8gY2xvdGhpbmcgcGFydHMgb2NjdXB5aW5nIHNhbWUgbG9jYXRpb24gbmVlZCB0byBiZSBvcmRlcmVkIHdpdGggaW5uZXIgbGF5ZXIgZHJhd24gZmlyc3RcclxuICAgIGZ1bmN0aW9uIGZpbmRDbG90aGluZ0xheWVyRGVwZW5kZW5jaWVzKCkge1xyXG4gICAgICAgIGNvbnN0IGNsb3RoaW5nTGF5ZXJzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGxheWVyID0gMDsgbGF5ZXIgPCBDbG90aGVzLkxheWVyLk5VTV9MQVlFUlM7ICsrbGF5ZXIpIHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcnMucHVzaChbXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhdmF0YXJbXCJjbG90aGluZ1BhcnRzXCJdLmZvckVhY2goKGNsb3RoaW5nUGFydCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsYXllciA9IGNsb3RoaW5nUGFydC5fb3duZXIuY2xvdGhpbmdMYXllcjtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcnNbbGF5ZXJdLnB1c2goY2xvdGhpbmdQYXJ0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBkcmF3IGFsbCBjbG90aGVzIG9mIGEgbG93ZXIgbGF5ZXIgYmVmb3JlIG91dGVyIGxheWVyXHJcbiAgICAgICAgZm9yIChsZXQgbGF5ZXIgPSAwOyBsYXllciA8IGNsb3RoaW5nTGF5ZXJzLmxlbmd0aDsgKytsYXllcikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBvdXRlckxheWVyID0gbGF5ZXIgKyAxOyBvdXRlckxheWVyIDwgY2xvdGhpbmdMYXllcnMubGVuZ3RoOyArK291dGVyTGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXJzW2xheWVyXS5mb3JFYWNoKChpbm5lclBhcnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjbG90aGluZ0xheWVyc1tvdXRlckxheWVyXS5mb3JFYWNoKChvdXRlclBhcnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RpbGwgaGF2ZSB0byByZXNwZWN0IGRyYXdpbmcgbGF5ZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclBhcnQubGF5ZXIgPD0gb3V0ZXJQYXJ0LmxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0RGVwZW5kZW5jeS5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0TWFwSW52ZXJzZS5nZXQob3V0ZXJQYXJ0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0TWFwSW52ZXJzZS5nZXQoaW5uZXJQYXJ0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZpbmRDbG90aGluZ1NhbWVMYXllck9yZGVyaW5nKCkge1xyXG4gICAgICAgIC8vIGNhY2hlIGNsb3RoaW5nIGxheWVycyBvZiBhbGwgcGFydHMgYXMgd2VsbFxyXG4gICAgICAgIGNvbnN0IGNsb3RoaW5nUGFydExheWVycyA9IHt9O1xyXG4gICAgICAgIGF2YXRhcltcImNsb3RoaW5nUGFydHNcIl0uZm9yRWFjaCgoY2xvdGhpbmdQYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gY2xvdGhpbmdQYXJ0Ll9vd25lci5jbG90aGluZ0xheWVyO1xyXG4gICAgICAgICAgICBpZiAoY2xvdGhpbmdQYXJ0TGF5ZXJzLmhhc093blByb3BlcnR5KGxheWVyKSkge1xyXG4gICAgICAgICAgICAgICAgY2xvdGhpbmdQYXJ0TGF5ZXJzW2xheWVyXS5wdXNoKGNsb3RoaW5nUGFydCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbG90aGluZ1BhcnRMYXllcnNbbGF5ZXJdID0gW2Nsb3RoaW5nUGFydF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gYWxzbyBkZXRlcm1pbmUgb3JkZXIgaW5zaWRlIGVhY2ggY2xvdGhpbmcgbGF5ZXJcclxuICAgICAgICBmb3IgKGxldCBsYXllciBpbiBjbG90aGluZ1BhcnRMYXllcnMpIHtcclxuICAgICAgICAgICAgaWYgKGNsb3RoaW5nUGFydExheWVycy5oYXNPd25Qcm9wZXJ0eShsYXllcikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwYXJ0c0luTGF5ZXIgPSBjbG90aGluZ1BhcnRMYXllcnNbbGF5ZXJdO1xyXG4gICAgICAgICAgICBwYXJ0c0luTGF5ZXIuZm9yRWFjaCgoY2xvdGhpbmdQYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCBkb2Vzbid0IGhhdmUgYW55IG9yZGVyaW5nLCBza2lwXHJcbiAgICAgICAgICAgICAgICBpZiAoIWNsb3RoaW5nUGFydC5hYm92ZVNhbWVMYXllclBhcnRzICYmICFjbG90aGluZ1BhcnQuYmVsb3dTYW1lTGF5ZXJQYXJ0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhcnRzSW5MYXllci5mb3JFYWNoKChvdGhlckNsb3RoaW5nUGFydCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckNsb3RoaW5nUGFydCA9PT0gY2xvdGhpbmdQYXJ0IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyQ2xvdGhpbmdQYXJ0LmxheWVyICE9PSBjbG90aGluZ1BhcnQubGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlclBhcnRMb2MgPSBleHRyYWN0QmFzZUxvY2F0aW9uKGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyQ2xvdGhpbmdQYXJ0LmxvYykpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBib3RoIGhhdmUgc2FtZSBwcmVjZWRlbmNlLCBubyBzb3J0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dHVhbFNhbWVMYXllck9yZGVyaW5nKGNsb3RoaW5nUGFydC5hYm92ZVNhbWVMYXllclBhcnRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlckNsb3RoaW5nUGFydC5hYm92ZVNhbWVMYXllclBhcnRzKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdXR1YWxTYW1lTGF5ZXJPcmRlcmluZyhjbG90aGluZ1BhcnQuYmVsb3dTYW1lTGF5ZXJQYXJ0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyQ2xvdGhpbmdQYXJ0LmJlbG93U2FtZUxheWVyUGFydHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYXcgdGhlIG90aGVyIGNsb3RoaW5nIHBhcnQgZmlyc3RcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xvdGhpbmdQYXJ0LmFib3ZlU2FtZUxheWVyUGFydHMgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvdGhpbmdQYXJ0LmFib3ZlU2FtZUxheWVyUGFydHMuaW5kZXhPZihvdGhlclBhcnRMb2MpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydERlcGVuZGVuY3kucHVzaChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0TWFwSW52ZXJzZS5nZXQoY2xvdGhpbmdQYXJ0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRNYXBJbnZlcnNlLmdldChvdGhlckNsb3RoaW5nUGFydClcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyYXcgc2VsZiBmaXJzdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbG90aGluZ1BhcnQuYmVsb3dTYW1lTGF5ZXJQYXJ0cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG90aGluZ1BhcnQuYmVsb3dTYW1lTGF5ZXJQYXJ0cy5pbmRleE9mKG90aGVyUGFydExvYykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0RGVwZW5kZW5jeS5wdXNoKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRNYXBJbnZlcnNlLmdldChvdGhlckNsb3RoaW5nUGFydCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0TWFwSW52ZXJzZS5nZXQoY2xvdGhpbmdQYXJ0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbXV0dWFsU2FtZUxheWVyT3JkZXJpbmcoc2FtZUxheWVyT3JkZXJpbmcsIG90aGVyU2FtZUxheWVyT3JkZXJpbmcpIHtcclxuICAgICAgICAgICAgbGV0IHNhbWVQcmVjZWRlbmNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmIChzYW1lTGF5ZXJPcmRlcmluZyAmJiBvdGhlclNhbWVMYXllck9yZGVyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBzYW1lTGF5ZXJPcmRlcmluZy5mb3JFYWNoKChwYXJ0TG9jKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyU2FtZUxheWVyT3JkZXJpbmcuaW5kZXhPZihwYXJ0TG9jKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVQcmVjZWRlbmNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2FtZVByZWNlZGVuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZpbmREZXBlbmRlbmNpZXMocGFydCkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRJbmRleCA9IHBhcnRNYXBJbnZlcnNlLmdldChwYXJ0KTtcclxuICAgICAgICAvLyBjaGlsZCBwYXJ0cyBzaG91bGQgYWx3YXlzIGJlIGRyYXduIGFmdGVyIHBhcmVudCBwYXJ0cyBzbyBhcyBub3QgdG8gYmUgY292ZXJlZFxyXG4gICAgICAgIGlmIChwYXJ0LmNoaWxkUGFydHMpIHtcclxuICAgICAgICAgICAgcGFydC5jaGlsZFBhcnRzLmZvckVhY2goKGNoaWxkQmFzZUxvY2F0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7Y2hpbGRMb2N9ID0gZ2V0Q2hpbGRMb2NhdGlvbihwYXJ0LmxvYywgY2hpbGRCYXNlTG9jYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRQYXJ0ID0gYXZhdGFyLmdldFBhcnRJbkxvY2F0aW9uKGNoaWxkTG9jLCBhdmF0YXIucGFydHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkUGFydCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnREZXBlbmRlbmN5LnB1c2goW3BhcnRNYXBJbnZlcnNlLmdldChjaGlsZFBhcnQpLCBwYXJ0SW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFydC5hYm92ZVBhcnRzKSB7XHJcbiAgICAgICAgICAgIHBhcnQuYWJvdmVQYXJ0cy5mb3JFYWNoKChiZWxvd1BhcnRMb2MpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBncm91cENvbnN0cmFpbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGhhcyBhIGNvbnN0cmFpbnQgb24gd2hpY2ggZ3JvdXAgdGhlIGRlcGVuZGVuY3kgaXMgb25cclxuICAgICAgICAgICAgICAgIGlmIChiZWxvd1BhcnRMb2MuaW5kZXhPZihcIiBcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gYmVsb3dQYXJ0TG9jLnNwbGl0KFwiIFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXNzdW1lIHRoZXJlJ3Mgb25seSAxIHNwYWNlIGZvciBub3dcclxuICAgICAgICAgICAgICAgICAgICBncm91cENvbnN0cmFpbnQgPSB3b3Jkc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBiZWxvd1BhcnRMb2MgPSB3b3Jkc1sxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBwYXJ0R3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyb3VwQ29uc3RyYWludCAmJiBncm91cENvbnN0cmFpbnQgIT09IGdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXZhdGFyW2dyb3VwXS5mb3JFYWNoKChiZWxvd1BhcnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlbG93UGFydCA9PT0gcGFydCB8fCBiZWxvd1BhcnQubGF5ZXIgPiBwYXJ0LmxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlbG93UGFydExvYyA9PT1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RCYXNlTG9jYXRpb24oZXh0cmFjdFVubW9kaWZpZWRMb2NhdGlvbihiZWxvd1BhcnQubG9jKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnREZXBlbmRlbmN5LnB1c2goW3BhcnRJbmRleCwgcGFydE1hcEludmVyc2UuZ2V0KGJlbG93UGFydCldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcnQuYmVsb3dQYXJ0cykge1xyXG4gICAgICAgICAgICBwYXJ0LmJlbG93UGFydHMuZm9yRWFjaCgoYWJvdmVQYXJ0TG9jKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBDb25zdHJhaW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBoYXMgYSBjb25zdHJhaW50IG9uIHdoaWNoIGdyb3VwIHRoZSBkZXBlbmRlbmN5IGlzIG9uXHJcbiAgICAgICAgICAgICAgICBpZiAoYWJvdmVQYXJ0TG9jLmluZGV4T2YoXCIgXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkcyA9IGFib3ZlUGFydExvYy5zcGxpdChcIiBcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc3VtZSB0aGVyZSdzIG9ubHkgMSBzcGFjZSBmb3Igbm93XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb25zdHJhaW50ID0gd29yZHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdmVQYXJ0TG9jID0gd29yZHNbMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcGFydEdyb3Vwcy5mb3JFYWNoKChncm91cCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91cENvbnN0cmFpbnQgJiYgZ3JvdXBDb25zdHJhaW50ICE9PSBncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGF2YXRhcltncm91cF0uZm9yRWFjaCgoYWJvdmVQYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYm92ZVBhcnQgPT09IHBhcnQgfHwgcGFydC5sYXllciA+IGFib3ZlUGFydC5sYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYm92ZVBhcnRMb2MgPT09XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0QmFzZUxvY2F0aW9uKGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24oYWJvdmVQYXJ0LmxvYykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAybmQgaW5kZXggc2hvdWxkIGJlIGRyYXduIGJlZm9yZSBmaXJzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydERlcGVuZGVuY3kucHVzaChbcGFydE1hcEludmVyc2UuZ2V0KGFib3ZlUGFydCksIHBhcnRJbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdCBpbmRpY2VzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyArK2kpIHtcclxuICAgICAgICBpbmRpY2VzLnB1c2goaSk7XHJcbiAgICB9XHJcbiAgICAvLyBuZWVkIHRvIGRyYXcgdGhlIG9uZXMgXCJhYm92ZVwiIGFub3RoZXIgb25lIGFmdGVyd2FyZHMsIHNvIHJldmVyc2Ugb3JkZXJpbmdcclxuICAgIGNvbnN0IHBhcnRPcmRlciA9IHRvcG9sb2dpY2FsU29ydChpbmRpY2VzLCBwYXJ0RGVwZW5kZW5jeSkucmV2ZXJzZSgpO1xyXG4gICAgY29uc3Qgb3JkZXJlZFBhcnRzID0gW107XHJcbiAgICBjb25zdCBvcmRlcmVkUGFydFR5cGVzID0gW107XHJcbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IHBhcnRPcmRlci5sZW5ndGg7ICsrcCkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRJbmRleCA9IHBhcnRPcmRlcltwXTtcclxuICAgICAgICBvcmRlcmVkUGFydHMucHVzaChwYXJ0TWFwW3BhcnRJbmRleF0pO1xyXG4gICAgICAgIG9yZGVyZWRQYXJ0VHlwZXMucHVzaChwYXJ0VHlwZXNbcGFydEluZGV4XSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG9yZGVyZWRQYXJ0VHlwZXMsXHJcbiAgICAgICAgb3JkZXJlZFBhcnRzXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUGFydHMoY3R4R3JvdXAsIGV4LCBjb25maWcpIHtcclxuICAgIGxldCBhdmF0YXIgPSBleC5hdmF0YXI7XHJcbiAgICBjb25zdCB7b3JkZXJlZFBhcnRUeXBlcywgb3JkZXJlZFBhcnRzfSA9IG9yZGVyUGFydHMoYXZhdGFyKTtcclxuXHJcbiAgICAvLyB0byBiZSBkcmF3biBzZXBhcmF0ZWx5XHJcbiAgICBjb25zdCBzaG9lU2lkZVBhcnRzID0gW107XHJcbiAgICBsZXQgZHJhd25QYXJ0cyA9IHt9O1xyXG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPCBvcmRlcmVkUGFydHMubGVuZ3RoOyArK3ApIHtcclxuICAgICAgICBsZXQgcGFydCA9IG9yZGVyZWRQYXJ0c1twXTtcclxuICAgICAgICBpZiAocGFydC5jb3ZlckNvbmNlYWwgJiYgcGFydC5jb3ZlckNvbmNlYWwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRDb3ZlcmVkID0gYXZhdGFyLmNoZWNrUGFydENvdmVyZWRCeUNsb3RoaW5nKHBhcnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gZG9uJ3QgZHJhdyBpZiB0aGVyZSdzIGFueSBjbG90aGluZyBjb3ZlcmluZyB0aGlzIGxvY2F0aW9uXHJcbiAgICAgICAgICAgIGlmIChwYXJ0Q292ZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBvcHVsYXRlIGRyYXduIHBhcnQgZm9yIHR5cGUgaWYgbm90IGV4aXN0IHlldFxyXG4gICAgICAgIGlmIChkcmF3blBhcnRzLmhhc093blByb3BlcnR5KG9yZGVyZWRQYXJ0VHlwZXNbcF0pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBkcmF3blBhcnRzW29yZGVyZWRQYXJ0VHlwZXNbcF1dID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZXBlbmRpbmcgb24gdGhlIHBhcnQgdHlwZSwgcmVuZGVyIHVzaW5nIGRpZmZlcmVudCBtZXRob2RzXHJcbiAgICAgICAgY29uc3QgZHJhd25QYXJ0c0ZvclR5cGUgPSBkcmF3blBhcnRzW29yZGVyZWRQYXJ0VHlwZXNbcF1dO1xyXG5cclxuICAgICAgICAvLyBmb3JjZSByZWRyYXcgaWYgd2UndmUgZHJhd24gdGhpcyBwYXJ0IGFscmVhZHkgYXMgYSBjaGlsZCBwYXJ0XHJcbiAgICAgICAgLy8gKHdlIHdhbnQgQUxMIGluZGl2aWR1YWwgcGFydHMgZHJhd24pXHJcbiAgICAgICAgaWYgKGRyYXduUGFydHNGb3JUeXBlLmhhc093blByb3BlcnR5KHBhcnQubG9jKSkge1xyXG4gICAgICAgICAgICBkcmF3blBhcnRzRm9yVHlwZVtwYXJ0LmxvY10gPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChvcmRlcmVkUGFydFR5cGVzW3BdKSB7XHJcbiAgICAgICAgICAgIC8vIGRyb3AgZG93blxyXG4gICAgICAgIGNhc2UgXCJwYXJ0c1wiOlxyXG4gICAgICAgIGNhc2UgXCJmYWNlUGFydHNcIjpcclxuICAgICAgICBjYXNlIFwiZGVjb3JhdGl2ZVBhcnRzXCI6XHJcbiAgICAgICAgICAgIHJlbmRlclBhcnQocGFydCwgcCwgZHJhd25QYXJ0c0ZvclR5cGUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwic2hhZGluZ1BhcnRzXCI6XHJcbiAgICAgICAgICAgIHJlbmRlclNoYWRpbmcocGFydCwgcCwgZHJhd25QYXJ0c0ZvclR5cGUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiaGFpclBhcnRzXCI6XHJcbiAgICAgICAgICAgIHJlbmRlckhhaXJQYXJ0KHBhcnQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiY2xvdGhpbmdQYXJ0c1wiOlxyXG4gICAgICAgICAgICByZW5kZXJDbG90aGluZ1BhcnQocGFydCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0YXR0b29zXCI6XHJcbiAgICAgICAgICAgIHJlbmRlclRhdHRvbyhwYXJ0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGJlZm9yZSB0aGUgcmVuZGVyaW5nIG9mIHNoYWRpbmcgZm9yY2VzIHVzIHRvIHJlbW92ZVxyXG4gICAgcmVuZGVySXRlbXMoKTtcclxuICAgIC8vIGFsc28gcmVzZXRzIGN0eCB0cmFuc2Zvcm1hdGlvbnNcclxuICAgIHN5bnRoZXNpemVMYXllcnMoKTtcclxuICAgIGlmIChjb25maWcucmVuZGVyU2hvZVNpZGVWaWV3KSB7XHJcbiAgICAgICAgcmVuZGVyU2hvZVNpZGVWaWV3KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3ludGhlc2l6ZUxheWVycygpIHtcclxuICAgICAgICBjb25zdCBkaXNwbGF5Q2FudmFzID0gZXguY2FudmFzR3JvdXBbTGF5ZXIuTlVNX0xBWUVSU107XHJcbiAgICAgICAgY29uc3QgZGlzcGxheUN0eCA9IGRpc3BsYXlDYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIGRpc3BsYXlDdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xyXG4gICAgICAgIGRpc3BsYXlDdHguY2xlYXJSZWN0KDAsIDAsIGRpc3BsYXlDYW52YXMud2lkdGgsIGRpc3BsYXlDYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2hhZGluZ0NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgc2hhZGluZ0NhbnZhcy53aWR0aCA9IGV4LmNhbnZhc0dyb3VwWzBdLndpZHRoO1xyXG4gICAgICAgIHNoYWRpbmdDYW52YXMuaGVpZ2h0ID0gZXguY2FudmFzR3JvdXBbMF0uaGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IHNoYWRpbmdDdHggPSBzaGFkaW5nQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgbGF5ZXIgPSBMYXllci5CQVNFOyBsYXllciA8IExheWVyLk5VTV9MQVlFUlM7ICsrbGF5ZXIpIHtcclxuICAgICAgICAgICAgaWYgKFNoYWRpbmdMYXllcnMuaW5kZXhPZihsYXllcikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5Q3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIjtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlDdHguZHJhd0ltYWdlKGV4LmNhbnZhc0dyb3VwW2xheWVyXSwgMCwgMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzaGFkaW5nQ3R4LmNsZWFyUmVjdCgwLCAwLCBzaGFkaW5nQ2FudmFzLndpZHRoLCBzaGFkaW5nQ2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBzaGFkaW5nQ3R4LmRyYXdJbWFnZShleC5jYW52YXNHcm91cFtsYXllcl0sIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgLy8gY2xpcCB0byBsYXllcnMgdXAgdG8gbm93XHJcbiAgICAgICAgICAgICAgICBzaGFkaW5nQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24taW5cIjtcclxuICAgICAgICAgICAgICAgIHNoYWRpbmdDdHguZHJhd0ltYWdlKGRpc3BsYXlDYW52YXMsIDAsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgIGRpc3BsYXlDdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJtdWx0aXBseVwiO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheUN0eC5kcmF3SW1hZ2Uoc2hhZGluZ0NhbnZhcywgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICBzaGFkaW5nQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gcmVuZGVySXRlbXMoKSB7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB7XHJcbiAgICAgICAgICAgIHg6IC1leC5jeCAtIGV4Lm94ICsgNSxcclxuICAgICAgICAgICAgeTogZXguaGVpZ2h0ICogMC4xNSAvIDIuNVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYXZhdGFyLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBJdGVtcy5nZXRJdGVtUmVuZGVyKGl0ZW0pO1xyXG4gICAgICAgICAgICBsZXQgd2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgICAgICAgICAgbGV0IGhlaWdodCA9IGltYWdlLmhlaWdodDtcclxuICAgICAgICAgICAgLy8gb3ZlcnJpZGluZyB3aXRoIHdpZHRoIGFuZCB3ZSBzaG91bGQgc2NhbGUgb3VyIGhlaWdodCBzaW1pbGFybHlcclxuICAgICAgICAgICAgaWYgKGl0ZW0ud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGhlaWdodCAqPSBpdGVtLndpZHRoIC8gd2lkdGg7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCA9IGl0ZW0ud2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IGN0eEdyb3VwW2l0ZW0ubGF5ZXJdO1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyUG9zaXRpb24gPSBpdGVtLnJlbmRlckl0ZW1Mb2NhdGlvbihleCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgcmVuZGVyUG9zaXRpb24ueCwgLXJlbmRlclBvc2l0aW9uLnksIHdpZHRoLCAtaGVpZ2h0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIHBvc2l0aW9uLngsIC1wb3NpdGlvbi55LCB3aWR0aCwgLWhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbi55ICs9IGhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbmRlclRhdHRvbyh0YXR0b28pIHtcclxuICAgICAgICBjb25zdCBpbWFnZSA9IFRhdHRvb3MuZ2V0UmVuZGVyKHRhdHRvbyk7XHJcbiAgICAgICAgY29uc3QgY3R4ID0gY3R4R3JvdXBbdGF0dG9vLmxheWVyXTtcclxuICAgICAgICBjb25zdCByZW5kZXJQb3NpdGlvbiA9IHRhdHRvby5yZW5kZXJUYXR0b29Mb2NhdGlvbihleFt0YXR0b28uc2lkZV0pO1xyXG5cclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIGlmICh0YXR0b28uc2lkZSA9PT0gUGFydC5MRUZUKSB7XHJcbiAgICAgICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRhdHRvby5pZ25vcmVDbGlwKSB7XHJcbiAgICAgICAgICAgIC8vIGNsaXAganVzdCBvbiBvbmUgc2lkZVxyXG4gICAgICAgICAgICBjb25zdCBjbGlwRmlsbFBhdGggPSBleC5jbGlwW3RhdHRvby5sYXllcl1bdGF0dG9vLnNpZGVdO1xyXG4gICAgICAgICAgICBjbGlwUGFydChjdHgsIGNsaXBGaWxsUGF0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkcmF3VGF0dG9vUGF0dGVybih0YXR0b28sIGltYWdlLCBjdHgsIHJlbmRlclBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gbm90ZSB0YXR0b29zIGNhbid0IGJlIG9uIGJvdGggc2lkZXMgb2YgdGhlIGJvZHkgKHNvIGhhdmUgdG8gc3BsaXQgY2VudGVyIHRhdHRvbyBpbiAyKVxyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZHJhdyBzaWRlIHBhcnRzIG9mIHNob2VzXHJcbiAgICBmdW5jdGlvbiByZW5kZXJTaG9lU2lkZVZpZXcoKSB7XHJcbiAgICAgICAgY29uc3QgZGlzcGxheUNhbnZhcyA9IGV4LmNhbnZhc0dyb3VwW0xheWVyLk5VTV9MQVlFUlNdO1xyXG4gICAgICAgIGNvbnN0IHNob2VTaWRlQ3R4ID0gZGlzcGxheUNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgc2hvZVNpZGVDdHguc2F2ZSgpO1xyXG4gICAgICAgIHNob2VTaWRlQ3R4LnRyYW5zbGF0ZShleC5veCwgZXguaGVpZ2h0IC0gMzApO1xyXG4gICAgICAgIGNvbnN0IHNjYWxpbmcgPSBleC5zY2FsaW5nO1xyXG4gICAgICAgIHNob2VTaWRlQ3R4LnNjYWxlKHNjYWxpbmcsIC1zY2FsaW5nKTtcclxuICAgICAgICBjb25zdCBzaG9lQm94V2lkdGggPSAyMjAgLyBzY2FsaW5nO1xyXG4gICAgICAgIGNvbnN0IHNob2VCb3hIZWlnaHQgPSBleC5oZWlnaHQgKiAwLjIgLyBzY2FsaW5nO1xyXG4gICAgICAgIC8vIHRyYW5zbGF0ZSB0byBjb3JyZWN0IGxvY2F0aW9uXHJcbiAgICAgICAgc2hvZVNpZGVDdHgucmVjdCgwLCAwLCBzaG9lQm94V2lkdGgsIHNob2VCb3hIZWlnaHQpO1xyXG4gICAgICAgIHNob2VTaWRlQ3R4LmNsaXAoKTtcclxuICAgICAgICBzaG9lU2lkZVBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2lkZSA9IHBhcnQuc2lkZTtcclxuICAgICAgICAgICAgc2hvZVNpZGVDdHguc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgcGFydC5yZW5kZXJTaG9lU2lkZVBhcnQuY2FsbChwYXJ0Ll9vd25lcixcclxuICAgICAgICAgICAgICAgIGV4W3NpZGVdLFxyXG4gICAgICAgICAgICAgICAgc2hvZVNpZGVDdHgsXHJcbiAgICAgICAgICAgICAgICBhdmF0YXIuX2NsYW1wZWRNb2RzKTtcclxuICAgICAgICAgICAgc2hvZVNpZGVDdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNob2VTaWRlQ3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW5kZXJTaGFkaW5nKHBhcnQsIHBhcnRJbmRleCwgZHJhd25QYXJ0cykge1xyXG4gICAgICAgIC8vIHNoYWRpbmcgbGF5ZXJzIHNob3VsZCBiZSAxIGxheWVyIGFib3ZlXHJcbiAgICAgICAgY29uc3QgY3R4ID0gY3R4R3JvdXBbcGFydC5sYXllciArIDFdO1xyXG5cclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG5cclxuICAgICAgICAvLyBuZWVkcyB0byBiZSBkcmF3biB0d2ljZSBpZiBuZWVkIHJlZmxlY3Rpb25cclxuICAgICAgICBpZiAocGFydC5zaWRlID09PSBQYXJ0LkxFRlQgfHwgcGFydC5yZWZsZWN0ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb25maWd1cmUgc3Ryb2tlcyBhbmQgZmlsbHNcclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCwgcGFydCwgZXgpO1xyXG5cclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIC8vIGNsaXAgc28gdGhhdCBmaWxscyBkb24ndCBzcGlsbCBvdXRzaWRlIGJvZHlcclxuICAgICAgICBpZiAocGFydC5jbGlwRmlsbCkge1xyXG4gICAgICAgICAgICBjbGlwUGFydChjdHgsIHBhcnQuY2xpcEZpbGwuY2FsbChhdmF0YXIuZGltLCBleFtwYXJ0LnNpZGVdKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBnZXQgdGhlIGRyYXcgcG9pbnRzIGZvciB0aGlzIHBhcnRcclxuICAgICAgICBkcmF3UGFydChleCwgb3JkZXJlZFBhcnRzLCBwYXJ0SW5kZXgsIHBhcnQubGF5ZXIsIHBhcnQuc2lkZSwgZHJhd25QYXJ0cyk7XHJcbiAgICAgICAgLy8gZmlsbFxyXG4gICAgICAgIGZpbGxQYXJ0KGN0eCwgZHJhd25QYXJ0c1twYXJ0LmxvY10pO1xyXG4gICAgICAgIHN0cm9rZVBhcnQoY3R4LCBkcmF3blBhcnRzW3BhcnQubG9jXSk7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgaWYgKHBhcnQucmVmbGVjdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnQuY2xpcEZpbGwpIHtcclxuICAgICAgICAgICAgICAgIGNsaXBQYXJ0KGN0eCwgcGFydC5jbGlwRmlsbC5jYWxsKGF2YXRhci5kaW0sIGV4W3BhcnQuc2lkZV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmaWxsXHJcbiAgICAgICAgICAgIGZpbGxQYXJ0KGN0eCwgZHJhd25QYXJ0c1twYXJ0LmxvY10pO1xyXG4gICAgICAgICAgICBzdHJva2VQYXJ0KGN0eCwgZHJhd25QYXJ0c1twYXJ0LmxvY10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gcmVuZGVyUGFydChwYXJ0LCBwYXJ0SW5kZXgsIGRyYXduUGFydHMpIHtcclxuICAgICAgICBpZiAoIXBhcnQuY2FsY0RyYXdQb2ludHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjdHggPSBjdHhHcm91cFtwYXJ0LmxheWVyXTtcclxuXHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuXHJcbiAgICAgICAgLy8gbmVlZHMgdG8gYmUgZHJhd24gdHdpY2UgaWYgbmVlZCByZWZsZWN0aW9uXHJcbiAgICAgICAgaWYgKHBhcnQuc2lkZSA9PT0gUGFydC5MRUZUIHx8IHBhcnQucmVmbGVjdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY29uZmlndXJlIHN0cm9rZXMsIGZpbGxzLCBhbmQgbGluZVdpZHRoIGZvciB0aGlzIHBhcnRcclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCwgcGFydCwgZXgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBwYXJ0LmdldExpbmVXaWR0aChhdmF0YXIpO1xyXG5cclxuICAgICAgICAvLyBjbGlwIHNvIHRoYXQgZmlsbHMgZG9uJ3Qgc3BpbGwgb3V0c2lkZSBib2R5XHJcbiAgICAgICAgbGV0IGNsaXBGaWxsUGF0aCA9IHBhcnQuY2xpcEZpbGwgPyBwYXJ0LmNsaXBGaWxsKGV4W3BhcnQuc2lkZV0pIDpcclxuICAgICAgICAgICAgZXguY2xpcFtwYXJ0LmxheWVyXVtwYXJ0LnNpZGVdO1xyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgY2xpcFBhcnQoY3R4LCBjbGlwRmlsbFBhdGgpO1xyXG5cclxuICAgICAgICAvLyBnZXQgdGhlIGRyYXcgcG9pbnRzIGZvciB0aGlzIHBhcnRcclxuICAgICAgICBkcmF3UGFydChleCwgb3JkZXJlZFBhcnRzLCBwYXJ0SW5kZXgsIHBhcnQubGF5ZXIsIHBhcnQuc2lkZSwgZHJhd25QYXJ0cyk7XHJcbiAgICAgICAgLy8gZmlsbFxyXG4gICAgICAgIGZpbGxQYXJ0KGN0eCwgZHJhd25QYXJ0c1twYXJ0LmxvY10pO1xyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgIGxldCB0b1N0cm9rZSA9IHRydWU7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJ0LnN0cm9rZSA9PT0gXCJmdW5jdGlvblwiICYmIHBhcnQuc3Ryb2tlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0b1N0cm9rZSA9IChwYXJ0LnN0cm9rZSgpICE9PSBub25lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b1N0cm9rZSA9IChwYXJ0LnN0cm9rZSAhPT0gbm9uZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0b1N0cm9rZSkge1xyXG4gICAgICAgICAgICAvLyBzdHJva2UgKG5lZWQgdG8gcmVzdG9yZSBhbmQgYmVnaW4gdG8gcmVzZXQgY2xpcHBpbmcpXHJcbiAgICAgICAgICAgIC8vIGV4Y2VwdGlvbmFsbHkgY2xpcCBzdHJva2UgKHVzdWFsbHkgd2UgZG9uJ3QgY2xpcCBzdHJva2UpXHJcbiAgICAgICAgICAgIGlmIChwYXJ0LmNsaXBTdHJva2UpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjbGlwU3Ryb2tlUGF0aCA9IHBhcnQuY2xpcFN0cm9rZShleFtwYXJ0LnNpZGVdKTtcclxuICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICBjbGlwUGFydChjdHgsIGNsaXBTdHJva2VQYXRoKTtcclxuICAgICAgICAgICAgICAgIHN0cm9rZVBhcnQoY3R4LCBkcmF3blBhcnRzW3BhcnQubG9jXSk7XHJcbiAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlUGFydChjdHgsIGRyYXduUGFydHNbcGFydC5sb2NdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmIChwYXJ0LnJlZmxlY3QgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuXHJcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGNsaXBQYXJ0KGN0eCwgY2xpcEZpbGxQYXRoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpbGxcclxuICAgICAgICAgICAgZmlsbFBhcnQoY3R4LCBkcmF3blBhcnRzW3BhcnQubG9jXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBzdHJva2UgKG5lZWQgdG8gcmVzdG9yZSBhbmQgYmVnaW4gdG8gcmVzZXQgY2xpcHBpbmcpXHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodG9TdHJva2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJ0Lmhhc093blByb3BlcnR5KFwiY2xpcFN0cm9rZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjbGlwU3Ryb2tlUGF0aCA9IHBhcnQuY2xpcFN0cm9rZShleFtwYXJ0LnNpZGVdKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsaXBQYXJ0KGN0eCwgY2xpcFN0cm9rZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVBhcnQoY3R4LCBkcmF3blBhcnRzW3BhcnQubG9jXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlUGFydChjdHgsIGRyYXduUGFydHNbcGFydC5sb2NdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVuZGVySGFpclBhcnQocGFydCkge1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IGN0eEdyb3VwW3BhcnQubGF5ZXJdO1xyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsIHBhcnQsIGV4KTtcclxuICAgICAgICAvLyBhbHNvIHBhc3MgaW4gZXh0cmEgY29sb3Jpbmcgb3B0aW9uc1xyXG4gICAgICAgIHBhcnQucmVuZGVySGFpclBvaW50cy5jYWxsKGF2YXRhci5kaW0sIGN0eCwgZXhbcGFydC5zaWRlXSwgYXZhdGFyLl9jbGFtcGVkTW9kcywgZXgpO1xyXG4gICAgICAgIGlmIChwYXJ0LnJlZmxlY3QpIHtcclxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuICAgICAgICAgICAgcGFydC5yZW5kZXJIYWlyUG9pbnRzLmNhbGwoYXZhdGFyLmRpbSxcclxuICAgICAgICAgICAgICAgIGN0eCxcclxuICAgICAgICAgICAgICAgIGV4WzEgLSBwYXJ0LnNpZGVdLFxyXG4gICAgICAgICAgICAgICAgYXZhdGFyLl9jbGFtcGVkTW9kcyxcclxuICAgICAgICAgICAgICAgIGV4KTtcclxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW5kZXJDbG90aGluZ1BhcnQocGFydCkge1xyXG4gICAgICAgIGlmIChwYXJ0IGluc3RhbmNlb2YgU2hvZVNpZGVQYXJ0KSB7XHJcbiAgICAgICAgICAgIHNob2VTaWRlUGFydHMucHVzaChwYXJ0KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjdHggPSBjdHhHcm91cFtwYXJ0LmxheWVyXTtcclxuICAgICAgICBjb25zdCBzaWRlID0gcGFydC5zaWRlO1xyXG4gICAgICAgIGN0eC5zYXZlKCk7XHJcblxyXG4gICAgICAgIGlmIChwYXJ0LnNpZGUgPT09IFBhcnQuTEVGVCkge1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBkb24ndCBzZXQgc3Ryb2tlIGFuZCBmaWxsIGhlcmUgc2luY2Ugd2UgZG9uJ3Qga25vdyB3aGF0IHByb3BlcnRpZXMgdGhlIHBhcnRcclxuICAgICAgICAvLyByZXF1aXJlcyBmcm9tIHRoZSBjbG90aGVzXHJcbiAgICAgICAgcGFydC5yZW5kZXJDbG90aGluZ1BvaW50cy5jYWxsKHBhcnQuX293bmVyLFxyXG4gICAgICAgICAgICBleFtzaWRlXSxcclxuICAgICAgICAgICAgY3R4LFxyXG4gICAgICAgICAgICBhdmF0YXIuX2NsYW1wZWRNb2RzLCBhdmF0YXIpO1xyXG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgaWYgKHBhcnQucmVmbGVjdCkge1xyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICAgICAgICBwYXJ0LnJlbmRlckNsb3RoaW5nUG9pbnRzLmNhbGwocGFydC5fb3duZXIsXHJcbiAgICAgICAgICAgICAgICBleFsxIC0gc2lkZV0sXHJcbiAgICAgICAgICAgICAgICBjdHgsXHJcbiAgICAgICAgICAgICAgICBhdmF0YXIuX2NsYW1wZWRNb2RzLCBhdmF0YXIpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdQYXJ0KGV4LCBwYXJ0cywgcGFydEluZGV4LCBsYXllciwgc2lkZSwgZHJhd25QYXJ0cykge1xyXG4gICAgY29uc3QgcGFydCA9IHBhcnRzW3BhcnRJbmRleF07XHJcbiAgICAvLyBlcnJvciByZXBvcnRcclxuICAgIGlmICh0eXBlb2YgcGFydC5sYXllciAhPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHBhcnQubG9jLCBcImluIGxheWVyXCIsIHBhcnQubGF5ZXIsIFwibm90IGZvdW5kIHR5cGVvZlwiLFxyXG4gICAgICAgICAgICB0eXBlb2YgTGF5ZXJbcGFydC5sYXllcl0pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGRvbid0IGRyYXcgaWYgbm90IHBhcnQgb2YgbGF5ZXIsIG90aGVyd2lzZSBhbGxvdyBpZiBuZWVkcyB0byBiZSByZWZsZWN0ZWRcclxuICAgIGlmICghcGFydC5jYWxjRHJhd1BvaW50cyB8fCBwYXJ0LmxheWVyICE9PSBsYXllcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChwYXJ0LnJlZmxlY3QgPT09IGZhbHNlICYmIChwYXJ0LnNpZGUgIT09IHNpZGUgfHwgZHJhd25QYXJ0c1twYXJ0LmxvY10pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBnZXQgYWN0dWFsIGRyYXcgcG9pbnRzXHJcbiAgICBjb25zdCBhdmF0YXIgPSBleC5hdmF0YXI7XHJcbiAgICBpZiAocGFydC5oYXNPd25Qcm9wZXJ0eShcIk1vZHNcIikpIHtcclxuICAgICAgICBhcHBseU1vZHMoYXZhdGFyLk1vZHMsIHBhcnQuTW9kcyk7XHJcbiAgICAgICAgYXZhdGFyLmNhbGNEaW1lbnNpb25zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3duZXIgPSAocGFydC5fb3duZXIpID8gcGFydC5fb3duZXIgOiBhdmF0YXIuZGltO1xyXG4gICAgLy8gaW5zaWRlIGVhY2ggY2FsbCwgJ3RoaXMnIHNob3VsZCByZWZlciB0byB0aGUgYXZhdGFyJ3MgZGltZW5zaW9uc1xyXG4gICAgY29uc3QgcG9pbnRzID0gcGFydC5jYWxjRHJhd1BvaW50cy5jYWxsKG93bmVyLCBleFtzaWRlXSwgYXZhdGFyLl9jbGFtcGVkTW9kcyxcclxuICAgICAgICBmYWxzZSwgcGFydCwgYXZhdGFyKTtcclxuXHJcbiAgICBpZiAocGFydC5oYXNPd25Qcm9wZXJ0eShcIk1vZHNcIikpIHtcclxuICAgICAgICByZW1vdmVNb2RzKGF2YXRhci5Nb2RzLCBwYXJ0Lk1vZHMpO1xyXG4gICAgICAgIGF2YXRhci5jYWxjRGltZW5zaW9ucygpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBwb2ludHMgdGhhdCB3aWxsIGV2ZW50dWFsbHkgZ2V0IGRyYXduXHJcbiAgICBjb25zdCBkcmF3blBvaW50cyA9IFtdO1xyXG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPCBwb2ludHMubGVuZ3RoOyArK3ApIHtcclxuICAgICAgICAvLyBtZWFucyB3ZSBzaG91bGQgZHJhdyBhbGwgcG9pbnRzIG9mIHRoaXMgcGFydCdzIGNoaWxkIGhlcmUgKGluIGJldHdlZW4gaXRzIG90aGVyXHJcbiAgICAgICAgLy8gcG9pbnRzKVxyXG4gICAgICAgIGlmIChwb2ludHNbcF0gJiYgcG9pbnRzW3BdLmhhc093blByb3BlcnR5KFwiY2hpbGRcIikpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHtjaGlsZExvYywgY2hpbGRTaWRlfSA9IGdldENoaWxkTG9jYXRpb24ocGFydC5sb2MsIHBvaW50c1twXS5jaGlsZCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHJhd25QYXJ0cy5oYXNPd25Qcm9wZXJ0eShjaGlsZExvYykgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlbid0IGRyYXduIGNoaWxkIHBhcnQgeWV0LCB3ZSdsbCBkcmF3IGl0IG5vd1xyXG4gICAgICAgICAgICAgICAgLy8gZmlyc3QgZmluZCB0aGUgY2hpbGQgcGFydFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY2hpbGRJbmRleCA9IDA7IGNoaWxkSW5kZXggPCBwYXJ0cy5sZW5ndGg7ICsrY2hpbGRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0c1tjaGlsZEluZGV4XS5sb2MgPT09IGNoaWxkTG9jICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzW2NoaWxkSW5kZXhdIGluc3RhbmNlb2YgQm9keVBhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1BhcnQoZXgsIHBhcnRzLCBjaGlsZEluZGV4LCBsYXllciwgY2hpbGRTaWRlLCBkcmF3blBhcnRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIGNvdWxkbid0IGZpbmQgY2hpbGQsIGp1c3QgaWdub3JlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG5vdyB3ZSBrbm93IGVpdGhlciB3ZSd2ZSBkcmF3biB0aGUgY2hpbGQgYmVmb3JlIG9yIHdlJ3ZlIGp1c3QgZHJhd24gaXRcclxuICAgICAgICAgICAgZHJhd25Qb2ludHMuZXh0ZW5kKGRyYXduUGFydHNbY2hpbGRMb2NdKTtcclxuICAgICAgICAgICAgLy8gY2xlYXIgY2hpbGQgZHJhd24gcG9pbnRzIHNvIGl0IGRvZXNuJ3QgZ2V0IGRyYXduIHR3aWNlXHJcbiAgICAgICAgICAgIGRyYXduUGFydHNbY2hpbGRMb2NdID0gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gb3duIHBvaW50LCBqdXN0IHB1c2hcclxuICAgICAgICAgICAgZHJhd25Qb2ludHMucHVzaChwb2ludHNbcF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHN0b3JlIGZvciBsYXRlciB1c2FnZSAoc3ludGhlc2lzKVxyXG4gICAgZHJhd25QYXJ0c1twYXJ0LmxvY10gPSBkcmF3blBvaW50cztcclxuICAgIHJldHVybiBkcmF3blBvaW50cztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBkcmF3IGFsbCBhdmF0YXIgYm9keSBwYXJ0cyBvbiB0aGlzIGxheWVyIGFuZCBzaWRlIChidXQgbm90IHN0cm9rZSBvciBmaWxsIGl0KVxyXG4gKiByZXR1cm5zIGFsbCBkcmF3cG9pbnRzIGZvciB0aGlzIGxheWVyIGFuZCBzaWRlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJhd1BhcnRzTGF5ZXIoZXgsIGxheWVyLCBzaWRlLCBjdHgpIHtcclxuICAgIC8vIHdlIGxvYWQgcG9pbnRzIG9udG8gaGVyZSBzbyB0aGF0IHRoZXkgY2FuIGJlIGRyYXduIGluIG9yZGVyXHJcbiAgICAvLyBpbml0aWFsbHkgd2UnbGwgbG9hZCB0aGUgbmFtZSBvZiBwYXJ0cyB3ZSB3YW50LCB0aGVuIHdlIHN5bnRoZXNpemUgdGhlIHBvaW50c1xyXG4gICAgLy8gYWZ0ZXJ3YXJkc1xyXG4gICAgbGV0IGRwcyA9IFtdO1xyXG4gICAgLy8gc2hhcmVkIHN0b3JhZ2UgZm9yIGFsbCB0aGUgYWN0dWFsbHkgZHJhd24gcGFydHNcclxuICAgIGNvbnN0IGRyYXduUGFydHMgPSB7fTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXguYXZhdGFyLnBhcnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgZHJhd1BhcnQoZXgsIGV4LmF2YXRhci5wYXJ0cywgaSwgbGF5ZXIsIHNpZGUsIGRyYXduUGFydHMpO1xyXG5cclxuICAgICAgICBjb25zdCBwYXJ0ID0gZXguYXZhdGFyLnBhcnRzW2ldO1xyXG4gICAgICAgIGlmIChleC5hdmF0YXIuY2hlY2tQYXJ0Q292ZXJlZEJ5Q2xvdGhpbmcocGFydCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGRwcy5wdXNoKGV4LmF2YXRhci5wYXJ0c1tpXS5sb2MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRwcyA9IHN5bnRoZXNpemVEcmF3UG9pbnRzKGRwcywgZHJhd25QYXJ0cyk7XHJcbiAgICBkcmF3UG9pbnRzLmFwcGx5KG51bGwsIFtjdHhdLmNvbmNhdChkcHMpKTtcclxuICAgIHJldHVybiBkcHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsaXBQYXJ0KGN0eCwgY2xpcFBhdGgpIHtcclxuICAgIGlmICghY2xpcFBhdGgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBkcmF3UG9pbnRzLmFwcGx5KG51bGwsIFtjdHhdLmNvbmNhdChjbGlwUGF0aCkpO1xyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgY3R4LmNsaXAoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmlsbFBhcnQoY3R4LCBwb2ludHMpIHtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnN0IGZpbGxQb2ludHMgPSBbXTtcclxuICAgIHBvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xyXG4gICAgICAgIGlmIChwb2ludCAmJiBwb2ludC5oYXNPd25Qcm9wZXJ0eShcImZpbGxPbmx5XCIpKSB7XHJcbiAgICAgICAgICAgIGZpbGxQb2ludHMucHVzaCguLi5wb2ludC5maWxsT25seSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmlsbFBvaW50cy5wdXNoKHBvaW50KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIGV4cGFuZCBhbnkgZmlsbCBvbmx5IHBhcnRzXHJcblxyXG4gICAgZHJhd1BvaW50cy5hcHBseShudWxsLCBbY3R4XS5jb25jYXQoZmlsbFBvaW50cykpO1xyXG5cclxuICAgIGxldCBmaXJzdFBvaW50ID0gbnVsbDtcclxuICAgIGxldCBsYXN0UG9pbnQgPSBmaWxsUG9pbnRzW2ZpbGxQb2ludHMubGVuZ3RoIC0gMV07XHJcblxyXG4gICAgLy8gZm9yY2UgZW5kIHBvaW50IHRvIGJ5cGFzcyBcInNtYXJ0IGZpbGxcIiBmZWF0dXJlXHJcbiAgICBpZiAobGFzdFBvaW50ID09PSBlbmRQb2ludCkge1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyB3YW50IHRvIG1ha2UgdGhlIHBhcnQgc2VlbSAzZCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50IGFyZW4ndCBjb25uZWN0ZWRcclxuICAgIGZvciAobGV0IHAgPSAwOyBwIDwgZmlsbFBvaW50cy5sZW5ndGg7ICsrcCkge1xyXG4gICAgICAgIGlmIChmaWxsUG9pbnRzW3BdICYmIGZpbGxQb2ludHNbcF0uaGFzT3duUHJvcGVydHkoXCJ4XCIpKSB7XHJcbiAgICAgICAgICAgIGZpcnN0UG9pbnQgPSBmaWxsUG9pbnRzW3BdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBwID0gZmlsbFBvaW50cy5sZW5ndGggLSAxOyBwID49IDA7IC0tcCkge1xyXG4gICAgICAgIGlmIChmaWxsUG9pbnRzW3BdICYmIGZpbGxQb2ludHNbcF0uaGFzT3duUHJvcGVydHkoXCJ4XCIpKSB7XHJcbiAgICAgICAgICAgIGxhc3RQb2ludCA9IGZpbGxQb2ludHNbcF07XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChmaXJzdFBvaW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgZW5kUG9pbnQgPSBjb25uZWN0RW5kUG9pbnRzKGxhc3RQb2ludCwgZmlyc3RQb2ludCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIG51bGwsIGVuZFBvaW50KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdEVuZFBvaW50cyhmaXJzdFBvaW50LCBsYXN0UG9pbnQsIGRlZmxlY3Rpb24gPSAwLjI1KSB7XHJcbiAgICBsZXQgZW5kUG9pbnQgPSBleHRyYWN0UG9pbnQobGFzdFBvaW50KTtcclxuICAgIGVuZFBvaW50LmNwMSA9XHJcbiAgICAgICAgc2ltcGxlUXVhZHJhdGljKGZpcnN0UG9pbnQsIGxhc3RQb2ludCwgMC41LCBkaXN0KGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgKiBkZWZsZWN0aW9uKTtcclxuICAgIHJldHVybiBlbmRQb2ludDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvdmVyTmlwcGxlc0lmSGF2ZU5vQnJlYXN0cyhleCwgY3R4LCBwYXJ0KSB7XHJcbiAgICBpZiAoZXguaGFzT3duUHJvcGVydHkoXCJicmVhc3RcIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gMTA7XHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogbm9uZSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogcGFydC5maWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIGJyZWFrUG9pbnQsIGV4LmNoZXN0Lm5pcHBsZXMpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZHJhd0ZvY3VzZWRXaW5kb3coZm9jdXNlZENhbnZhcywgZXgsIHVzZXJDb25maWcpIHtcclxuICAgIGNvbnN0IGN0eCA9IGZvY3VzZWRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgZm9jdXNlZENhbnZhcy53aWR0aCwgZm9jdXNlZENhbnZhcy5oZWlnaHQpO1xyXG4gICAgLy8gdGhlIHJlbmRlcmluZyBjYW52YXMgaXMgdGhlIGxhc3QgY2FudmFzXHJcbiAgICBjb25zdCBjYW52YXMgPSBleC5jdHguY2FudmFzO1xyXG5cclxuICAgIC8vIGNvbnZlcnQgdGhlc2UgYmFjayB0byBjYW52YXMgY29vcmRpbmF0ZXMgc2luY2Ugd2UgYWxsb3cgdXNlcnMgdG8gc3BlY2lmeSBpbiBjbVxyXG4gICAgY29uc3Qgc3ggPSB1c2VyQ29uZmlnLmNlbnRlci54IC0gdXNlckNvbmZpZy53aWR0aCAvIDI7XHJcbiAgICBjb25zdCBzeSA9IHVzZXJDb25maWcuY2VudGVyLnkgKyB1c2VyQ29uZmlnLmhlaWdodCAvIDI7XHJcbiAgICBjb25zdCBzcHQgPSBleC5jdHgudGYubGFzdCgpLmFwcGx5VG9Qb2ludChzeCwgc3kpO1xyXG5cclxuICAgIGNvbnN0IHcgPSB1c2VyQ29uZmlnLndpZHRoICogZXguc2NhbGluZztcclxuICAgIGNvbnN0IGggPSB1c2VyQ29uZmlnLmhlaWdodCAqIGV4LnNjYWxpbmc7XHJcblxyXG4gICAgLy8gY29uc2lkZXIgc2NhbGluZyB3aGVuIGFzcGVjdCByYXRpbyBvZiB0YXJnZXQgYW5kIHNvdXJjZSBhcmUgZGlmZmVyZW50XHJcbiAgICAvLyBrZWVwIGhlaWdodCBidXQgZ2l2ZSB1cCBzb21lIHdpZHRoIGlmIGFzcGVjdCByYXRpbyBpcyBub3QgdGhlIHNhbWVcclxuICAgIGNvbnN0IGRlc3RXaWR0aCA9IE1hdGgubWluKGZvY3VzZWRDYW52YXMud2lkdGgsIGZvY3VzZWRDYW52YXMuaGVpZ2h0IC8gaCAqIHcpO1xyXG4gICAgY3R4LmRyYXdJbWFnZShjYW52YXMsXHJcbiAgICAgICAgc3B0LngsXHJcbiAgICAgICAgc3B0LnksXHJcbiAgICAgICAgdyxcclxuICAgICAgICBoLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgMCxcclxuICAgICAgICBkZXN0V2lkdGgsXHJcbiAgICAgICAgZm9jdXNlZENhbnZhcy5oZWlnaHQpO1xyXG59IiwiaW1wb3J0IHtyYWQsZGlmZn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZWQgYnkgSm9obnNvbiBvbiAyMDE3LTA2LTE3LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IElNQUdFX01BWFNJWkUgPSAxMDA7XHJcbmxldCBSRUxFQVNFX01PREUgPSBmYWxzZTtcclxuXHJcblxyXG4vLyBjYW52YXMgdXNlZCBmb3IgcGF0dGVybnNcclxuY29uc3QgcGF0dGVybkNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbnBhdHRlcm5DYW52YXMud2lkdGggPSBJTUFHRV9NQVhTSVpFO1xyXG5wYXR0ZXJuQ2FudmFzLmhlaWdodCA9IElNQUdFX01BWFNJWkU7XHJcblxyXG5jb25zdCBwYXR0ZXJuQ3R4ID0gcGF0dGVybkNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcblxyXG4vLyBjYW52YXMgdXNlZCBmb3Igc2NhbGluZyBpbWFnZXNcclxuY29uc3QgaW1hZ2VDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDYWNoZSBvZiBsb2FkZWQgcGF0dGVybnMsIGxhemlseSBjcmVhdGVkIGFzIG5lZWRlZCBieSBnZXRQYXR0ZXJuLlxyXG4gKiBFYWNoIG9uZSBpcyBlaXRoZXIgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyIGEgY29sb3IsIGdyYWRpZW50LCBwYXR0ZXJuIChhbGwgYXJlIHN0YXRpY2FsbHkgY2FjaGVkKSxcclxuICogb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyIGEgY29sb3IsIGdyYWRpZW50LCBvciBwYXR0ZXJuIChkeW5hbWljYWxseSBjYWNoZWQgc2luY2UgdGhlIHBhcmFtZXRlcnMgZGVwZW5kXHJcbiAqIG9uIGRyYXcgZXhwb3J0cykuXHJcbiAqL1xyXG5jb25zdCBjYWNoZWRQYXR0ZXJucyA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIFBhdHRlcm5zIHRvIGxvYWQgYXMgc29vbiBhcyB3ZSB3YW50IHRvIGRyYXcuIFBvcHVsYXRlZCBieSBnZXRQYXR0ZXJuIGFzIG5lY2Vzc2FyeS5cclxuICogQHR5cGUge1Byb21pc2VbXX1cclxuICovXHJcbmV4cG9ydCBjb25zdCBwYXR0ZXJuTG9hZGluZ1F1ZXVlID0gW107XHJcblxyXG5cclxuLyoqXHJcbiAqIHBhdHRlcm5OYW1lIC0+IHBhdHRlcm4gcHJvZHVjdGlvbiBmdW5jdGlvbiBtYXBcclxuICogUG9wdWxhdGVkIGJ5IGNhbGxpbmcgYWRkUGF0dGVybiwgYW5kIHF1ZXJpZWQgYnkgZ2V0UGF0dGVybiBpZiBwYXR0ZXJuIGhhc24ndCBiZWVuIGNhY2hlZCB5ZXRcclxuICovXHJcbmNvbnN0IHByb2R1Y2VQYXR0ZXJuID0ge307XHJcblxyXG5cclxuLyoqXHJcbiAqIExpc3QgbmFtZXMgb2YgYXZhaWxhYmxlIHBhdHRlcm5zIHRvIGdldHRhYmxlIGJ5IGdldFBhdHRlcm5cclxuICogQHJldHVybnMge3N0cmluZ1tdfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RBdmFpbGFibGVQYXR0ZXJucygpIHtcclxuICAgIGNvbnN0IHBhdHRlcm5zID0gW107XHJcbiAgICBmb3IgKGxldCBwYXQgaW4gcHJvZHVjZVBhdHRlcm4pIHtcclxuICAgICAgICBpZiAocHJvZHVjZVBhdHRlcm4uaGFzT3duUHJvcGVydHkocGF0KSkge1xyXG4gICAgICAgICAgICBwYXR0ZXJucy5wdXNoKHBhdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdHRlcm5zO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0dGVybkZ1bGxOYW1lKHBhdHRlcm5OYW1lLCBwYXR0ZXJuU2l6ZSkge1xyXG4gICAgcmV0dXJuIHBhdHRlcm5OYW1lICsgXCIuXCIgKyBwYXR0ZXJuU2l6ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdHRlcm5CYXNlTmFtZShwYXR0ZXJuTmFtZSkge1xyXG4gICAgY29uc3Qgc3BsaXRQb2ludCA9IHBhdHRlcm5OYW1lLmluZGV4T2YoXCIuXCIpO1xyXG4gICAgaWYgKHNwbGl0UG9pbnQgPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm5OYW1lO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhdHRlcm5OYW1lLnN1YnN0cigwLCBzcGxpdFBvaW50KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBhIGZpbGwgb3Igc3Ryb2tlIHBhdHRlcm4uIFdoZW4gdXNlZCBpbnNpZGUgZHJhdywgZ3VhcmFudGVlZCB0byBzdXBwbHkgYSB1c2FibGUgcGF0dGVybi5cclxuICogVXNlZCBvdXRzaWRlIG9mIGRyYXcgY291bGQgcmVzdWx0IGluIHVuZnVsZmlsbGVkIHByb21pc2VzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybk5hbWUgTmFtZSBvZiB0aGUgcGF0dGVyblxyXG4gKiBAcGFyYW0ge251bWJlcn0gcGF0dGVyblNpemUgSG93IGxhcmdlIHRoZSBpbWFnZSBjYW52YXMgc2hvdWxkIGJlIGZvciB0aGlzIHBhdHRlcm5cclxuICogQHJldHVybnMge0FycmF5fSBwYXR0ZXJuIG1ldGhvZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdHRlcm4ocGF0dGVybk5hbWUsIHBhdHRlcm5TaXplID0gSU1BR0VfTUFYU0laRSkge1xyXG4gIC8vICBjb25zb2xlLmxvZyhcImdldHRpbmcgcGF0dGVybiBcIiArIHBhdHRlcm5OYW1lKTtcclxuICAgIC8vIGNhY2hlIGFsb25nIHdpdGggdGhlIHNpemUgdG8gcHJldmVudCByZWxvYWRzXHJcbiAgICBjb25zdCBmdWxsTmFtZSA9IGdldFBhdHRlcm5GdWxsTmFtZShwYXR0ZXJuTmFtZSwgcGF0dGVyblNpemUpO1xyXG4gICAgaWYgKGNhY2hlZFBhdHRlcm5zLmhhc093blByb3BlcnR5KGZ1bGxOYW1lKSkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWRQYXR0ZXJuc1tmdWxsTmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHByb2R1Y2VQYXR0ZXJuLmhhc093blByb3BlcnR5KHBhdHRlcm5OYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcnlpbmcgdG8gZ2V0IHBhdHRlcm4gdGhhdCBoYXNuJ3QgYmVlbiBhZGRlZCB5ZXQ6IFwiICsgcGF0dGVybk5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNyZWF0ZSB0aGUgcHJvbWlzZVxyXG4gICAgcGF0dGVybkxvYWRpbmdRdWV1ZS5wdXNoKGxvYWRQYXR0ZXJuKHBhdHRlcm5OYW1lLFxyXG4gICAgICAgIHByb2R1Y2VQYXR0ZXJuW3BhdHRlcm5OYW1lXSwgcGF0dGVyblNpemUpKTtcclxuXHJcbiAgICAvLyByZXR1cm4gd3JhcHBlciBhcm91bmQgZGVsYXllZCBjYWxsXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIFwicGF0dGVyblwiLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGF0dGVybk5hbWU6IGZ1bGxOYW1lLFxyXG4gICAgICAgICAgICBwYXR0ZXJuU2l6ZVxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2FkZWRQYXR0ZXJuKHBhdHRlcm4sIGN0eCwgZXgpIHtcclxuICAgIGlmIChpc1BhdHRlcm4ocGF0dGVybikpIHtcclxuICAgICAgICBjb25zdCBzb3VyY2UgPSBjYWNoZWRQYXR0ZXJuc1twYXR0ZXJuWzFdLnBhdHRlcm5OYW1lXTtcclxuICAgICAgICAvLyBuZWVkIGR5bmFtaWMgcHJvZHVjdGlvblxyXG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZShjdHgsIGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIC8vIHJlY3Vyc2l2ZSBjYWxsIGluIGNhc2UgdGhlcmUgYXJlIG11bHRpcGxlIHdyYXBwaW5nIGZ1bmN0aW9uIGxheWVyc1xyXG4gICAgICAgIHJldHVybiBnZXRMb2FkZWRQYXR0ZXJuLmNhbGwodGhpcywgcGF0dGVybi5jYWxsKHRoaXMsIGN0eCwgZXgpLCBjdHgsIGV4KTtcclxuICAgIH1cclxuICAgIHJldHVybiBwYXR0ZXJuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkUGF0dGVybihwYXR0ZXJuTmFtZSwgcGF0dGVyblNvdXJjZSkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICBpZiAocHJvZHVjZVBhdHRlcm5bcGF0dGVybk5hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcHJvZHVjZVBhdHRlcm5bcGF0dGVybk5hbWVdID0gcGF0dGVyblNvdXJjZTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGREZWJ1Z1BhdHRlcm4ocGF0dGVybk5hbWUsIGRlYnVnU3JjLCByZWxlYXNlU3JjKSB7XHJcbiAgICBsZXQgc3JjID0gZGVidWdTcmM7XHJcbiAgICBpZiAoUkVMRUFTRV9NT0RFKSB7XHJcbiAgICAgICAgc3JjID0gcmVsZWFzZVNyYztcclxuICAgIH1cclxuICAgIHJldHVybiBhZGRQYXR0ZXJuKHBhdHRlcm5OYW1lLCBzcmMpO1xyXG59XHJcblxyXG4vKipcclxuICogTG9hZCBwYXR0ZXJuIGZyb20gc29tZSBzb3VyY2UgbWV0aG9kIChlaXRoZXIgZnVuY3Rpb24gb3IgYW4gaW1hZ2UgcGF0aCkgYXN5bmNocm9ub3VzbHlcclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm5OYW1lXHJcbiAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbil9IHBhdHRlcm5Tb3VyY2VcclxuICogQHBhcmFtIHtudW1iZXJ9IHBhdHRlcm5TaXplIEhvdyBsYXJnZSB0aGUgaW1hZ2UgY2FudmFzIHNob3VsZCBiZSBmb3IgdGhpcyBwYXR0ZXJuXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRvIHByb2R1Y2UgdGhpcyBwYXR0ZXJuIChhbmQgY2FjaGUgaXQpXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZFBhdHRlcm4ocGF0dGVybk5hbWUsIHBhdHRlcm5Tb3VyY2UsIHBhdHRlcm5TaXplKSB7XHJcbiAgICAvLyBkZXBlbmRpbmcgb24gd2hhdCBraW5kIG9mIHBhdHRlcm4gd2FzIHB1dCBpbiwgd2UgaGF2ZSBkaWZmZXJlbnQgcHJvbWlzZXMgdG8gZnVsZmlsbFxyXG5cclxuICAgIGNvbnN0IGZ1bGxOYW1lID0gZ2V0UGF0dGVybkZ1bGxOYW1lKHBhdHRlcm5OYW1lLCBwYXR0ZXJuU2l6ZSk7XHJcbiAgICAvKipcclxuICAgICAqIEN1c3RvbSBtZXRob2Qgb2YgY3JlYXRpbmcgdGhlIHBhdHRlcm4sIHN1Y2ggYXMgYW55dGhpbmcgcmVxdWlyaW5nIGN0eFxyXG4gICAgICovXHJcbiAgICBpZiAodHlwZW9mIHBhdHRlcm5Tb3VyY2UgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdlIGhldXJpc3RpY2FsbHkgZGVjaWRlIHdoZXRoZXIgcGF0dGVybiBjYW4gYmUgY2FjaGVkIG9yIGhhcyB0byBiZSBkeW5hbWljXHJcbiAgICAgICAgICogYnkgbG9va2luZyBhdCB0aGUgbnVtYmVyIG9mIHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIGFjY2VwdHMuXHJcbiAgICAgICAgICogSWYgaXQncyA8PSAxIHBhcmFtZXRlcnMsIHdlIGFzc3N1bWUgaXQgdGFrZXMgY3R4IG9ubHkgYW5kIGNhbiBiZSBjYWNoZWRcclxuICAgICAgICAgKiBFbHNlIHdlIGFzc3VtZSBpdCBuZWVkcyBleCBvciBzb21lIG90aGVyIHBhcmFtZXRlcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAocGF0dGVyblNvdXJjZS5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhY2hlZFBhdHRlcm5zW2Z1bGxOYW1lXSA9IHBhdHRlcm5Tb3VyY2UocGF0dGVybkN0eCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVkUGF0dGVybnNbZnVsbE5hbWVdID0gcGF0dGVyblNvdXJjZTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gbG9hZCBpbWFnZSBmb3IgdGhlIGZpcnN0IHRpbWUgYW5kIGNhY2hlIGl0XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBpbWFnZS53aWR0aCAvIHBhdHRlcm5TaXplO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5yb3VuZChpbWFnZS5oZWlnaHQgLyBzY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZUNhbnZhcy53aWR0aCA9IHBhdHRlcm5TaXplO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlQ3R4ID0gaW1hZ2VDYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VDdHguc2NhbGUoMSwgLTEpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VDdHguZHJhd0ltYWdlKGltYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZS53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm5TaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIC1oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgY2FjaGVkUGF0dGVybnNbZnVsbE5hbWVdID0gaW1hZ2VDdHguY3JlYXRlUGF0dGVybihpbWFnZUNhbnZhcywgXCJyZXBlYXRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoRXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBwYXR0ZXJuICdcIiArIHBhdHRlcm5OYW1lICsgXCInIGZyb20gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVyblNvdXJjZSkpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IHBhdHRlcm5Tb3VyY2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3VGF0dG9vUGF0dGVybih0YXR0b28sIGltYWdlLCBjdHgsIHJlbmRlclBvc2l0aW9uKSB7XHJcbiAgICAvLyAxODAgZGVncmVlcyBvZmZzZXQgYmVjYXVzZSBvdXIgY29udGV4dHMgYXJlIHZlcnRpY2FsbHkgZmxpcHBlZCBzbyBwb3NpdGl2ZSB5IGlzIHVwXHJcbiAgICBjb25zdCB0b1JvdGF0ZSA9IHJhZCh0YXR0b28ucm90YXRpb24pO1xyXG4gICAgY29uc3Qgc2NhbGUgPSAodGF0dG9vLndpZHRoKSA/IHRhdHRvby53aWR0aCAvIGltYWdlLndpZHRoIDogMTtcclxuXHJcbiAgICAvLyBuZWVkcyB0byBiZSBsYXJnZXIgc3VjaCB0aGF0IGl0IGNhbiBpbmNsdWRlIHRoZSBpbWFnZSBhdCBhbnkgcm90YXRpb25cclxuICAgIGNvbnN0IHcgPSBpbWFnZS53aWR0aDtcclxuICAgIGNvbnN0IGggPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICBsZXQgcyA9IE1hdGgubWF4KHcsIGgpICogTWF0aC5zcXJ0KDIpO1xyXG4gICAgaW1hZ2VDYW52YXMud2lkdGggPSBzICogc2NhbGU7XHJcbiAgICBpbWFnZUNhbnZhcy5oZWlnaHQgPSBzICogc2NhbGU7XHJcblxyXG4gICAgY29uc3QgaW1hZ2VDdHggPSBpbWFnZUNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICBpbWFnZUN0eC5zY2FsZShzY2FsZSwgc2NhbGUpO1xyXG4gICAgLy8gbm93IGV2ZXJ5dGhpbmcgaXMgaW4gKHcsaCkgY29vcmRpbmF0ZXNcclxuICAgIC8vIGdldCB0byB0aGUgbWlkZGxlIHNvIHJvdGF0aW9ucyBhcmUgYWJvdXQgdGhlIGNlbnRlciBvZiB0aGUgaW1hZ2VcclxuICAgIGltYWdlQ3R4LnRyYW5zbGF0ZShzIC8gMiwgcyAvIDIpO1xyXG4gICAgaW1hZ2VDdHgucm90YXRlKHRvUm90YXRlKTtcclxuXHRcclxuXHQvL2ZsaXBzIHRhdHRvbyBob3Jpem9udGFsbHlcclxuXHRcdC8vaW1hZ2VDdHguc2NhbGUoMSwgLTEpOyAvLyBNdWx0aXBseSB0aGUgeSB2YWx1ZSBieSAtMSB0byBmbGlwIHZlcnRpY2FsbHlcclxuXHRpZih0YXR0b28ubWlycm9yKSBpbWFnZUN0eC5zY2FsZSgtMSwgMSk7XHJcblx0XHJcbiAgICBpbWFnZUN0eC5kcmF3SW1hZ2UoaW1hZ2UsIC13IC8gMiwgLWggLyAyKTtcclxuXHJcbiAgICAvLyB1bmNvbW1lbnQgZm9yIGRlYnVnZ2luZ1xyXG4gICAgLy8gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbWFnZUNhbnZhcyk7XHJcblxyXG4gICAgY29uc3QgdGVtcFBvcyA9IGN0eC50cmFuc2Zvcm1Qb2ludChpbWFnZUNhbnZhcy53aWR0aCAvIDIsIGltYWdlQ2FudmFzLmhlaWdodCAvIDIpO1xyXG4gICAgY29uc3QgYmFzZVBvcyA9IGN0eC50cmFuc2Zvcm1Qb2ludCgwLCAwKTtcclxuICAgIGNvbnN0IHJlbGF0aXZlUG9zID0gZGlmZih0ZW1wUG9zLCBiYXNlUG9zKTtcclxuXHJcbiAgICAvLyBuZWVkIHRvIG9mZnNldCB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgaW1hZ2UgaXRzZWxmXHJcbiAgICBjdHguZHJhd0ltYWdlKGltYWdlQ2FudmFzLFxyXG4gICAgICAgIHJlbmRlclBvc2l0aW9uLnggKyByZWxhdGl2ZVBvcy54LFxyXG4gICAgICAgIHJlbmRlclBvc2l0aW9uLnkgKyByZWxhdGl2ZVBvcy55KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGF0dGVybihjb2xvdXIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGNvbG91cikgJiYgY29sb3VyWzBdID09PSBcInBhdHRlcm5cIjtcclxufVxyXG4iLCJpbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtnZXRTaWRlVmFsdWV9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGhhaXIgcGFydHM7IHNob3VsZCBnbyBpbiBhIFBsYXllcidzIGhhaXJQYXJ0c1xyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xyXG4gICAgICAgICAgICBsYXllciAgICAgICA6IExheWVyLkhBSVIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNvdmVyQ29uY2VhbDogW10sXHJcbiAgICAgICAgICAgIHVuY292ZXJhYmxlIDogZmFsc2UsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKGlnbm9yZSwgZXgpIHtcclxuICAgICAgICByZXR1cm4gZXguaGFpclN0cm9rZTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKGlnbm9yZSwgZXgpIHtcclxuICAgICAgICByZXR1cm4gZXguaGFpckZpbGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGluZVdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiAxLjU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogV2hlcmUgYWxsIGhhaXJzIGdvXHJcbiAqIEBuYW1lc3BhY2UgSGFpclxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSGFpciA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIEhhaXJQYXJ0IGluc3RhbmNlXHJcbiAgICAgKiBAbWVtYmVyb2YgbW9kdWxlOmRhLkhhaXJcclxuICAgICAqIEBwYXJhbSB7bW9kdWxlOmRhLkhhaXJQYXJ0fSBQYXJ0IFByb3RvdHlwZSBvZiBoYWlyIHBhcnRcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIE92ZXJyaWRpbmcgZGF0YSBmb3IgdGhpcyBwYXJ0aWN1bGFyIHBhcnRcclxuICAgICAqIEByZXR1cm5zIHttb2R1bGU6ZGEuSGFpclBhcnR9IEluc3RhbnRpYXRlZCBoYWlyIHBhcnRcclxuICAgICAqL1xyXG4gICAgY3JlYXRlKFBhcnQsIC4uLmRhdGEpIHtcclxuICAgICAgICBsZXQgcGFydCA9IG5ldyBQYXJ0KC4uLmRhdGEpO1xyXG5cclxuICAgICAgICAvLyBjb3VsZCBwb3RlbnRpYWxseSBwcm92aWRlZCBvdmVycmlkZSBpbiBkYXRhXHJcbiAgICAgICAgaWYgKHBhcnQuaGFzT3duUHJvcGVydHkoXCJzaWRlXCIpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBwYXJ0LnNpZGUgPSBnZXRTaWRlVmFsdWUobnVsbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcGFydDtcclxuICAgIH0sXHJcbiAgICBoYWlyQmFjayAgICAgOiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBsb2MgICAgICAgOiBcImJhY2sgaGFpclwiLFxyXG4gICAgICAgIGxheWVyICAgICA6IExheWVyLkJBQ0ssXHJcbiAgICAgICAgYmVsb3dQYXJ0czogW1wicGFydHMgZ3JvaW5cIl0sXHJcbiAgICB9KSxcclxuICAgIGhhaXJBYm92ZUVhcnM6XHJcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZWFycyBoYWlyXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkJFTE9XX0hBSVIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcImVhcnNcIl0sXHJcbiAgICAgICAgfSksXHJcbiAgICBoYWlyTWVkaXVtICAgOlxyXG4gICAgICAgIE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIm1lZGl1bSBoYWlyXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJjaGVzdFwiLCBcIm5lY2tcIl0sXHJcbiAgICAgICAgfSksXHJcbiAgICBoYWlyRnJvbnQgICAgOlxyXG4gICAgICAgIE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCJmcm9udCBoYWlyXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5IQUlSLFxyXG4gICAgICAgIH0pLFxyXG59O1xyXG4iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7c2hpbmV9IGZyb20gXCIuLi9kcmF3L3NoYWRpbmdfcGFydFwiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge3NldFN0cm9rZUFuZEZpbGx9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuaW1wb3J0IHtTaG9lU2lkZVBhcnR9IGZyb20gXCIuL3Nob2VzXCI7XHJcbmltcG9ydCB7XHJcbiAgICByZXZlcnNlRHJhd1BvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICBhZGp1c3QsXHJcbiAgICBjb250aW51ZUN1cnZlLFxyXG4gICAgc2NhbGUsIHNjYWxlUG9pbnRzLCByb3RhdGVQb2ludHMsIGJyZWFrUG9pbnRcclxufSBmcm9tIFwiZHJhd3BvaW50L3NyY1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhlZWxQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImZlZXRcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgZmVldFwiLCBcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICAgICAgYmVsb3dQYXJ0czogW1wic2hhZGluZ1BhcnRzIGZlZXRcIl0sXHJcbiAgICAgICAgICAvLyAgYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiZmVldFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBIZWVsQmFzZVNoaW5lIGV4dGVuZHMgSGVlbFBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLkFSTVMsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIC8vIGZhbiBzaGFwZWQgc2hpbmVcclxuICAgICAgICBjb25zdCB7Ym90LCBvdXRCb3QsIG91dH0gPSBjYWxjSGVlbHMuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgYm90LnkgKz0gMztcclxuICAgICAgICBib3QueCArPSAxO1xyXG5cclxuICAgICAgICBjb25zdCBsZWZ0ID0gYWRqdXN0KG91dEJvdCwgLTEsIDAuNSk7XHJcbiAgICAgICAgY29uc3QgdG9wID0gYWRqdXN0KG91dCwgLTAuNSwgLTQuOCk7XHJcblxyXG4gICAgICAgIGxlZnQuY3AxID0gc2ltcGxlUXVhZHJhdGljKGJvdCwgbGVmdCwgMC43LCAtMSk7XHJcbiAgICAgICAgdG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhsZWZ0LCB0b3AsIDAuNSwgLTAuNSk7XHJcbiAgICAgICAgYm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyh0b3AsIGJvdCwgMC4zLCAxKTtcclxuXHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHNoaW5lO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgYm90LCBsZWZ0LCB0b3AsIGJvdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBIZWVsQmFzZVBhcnQgZXh0ZW5kcyBIZWVsUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICBjb25zdCB0b2UgPSBleC50b2U7XHJcblxyXG4gICAgICAgIHRvZS50b2Vib3ggPSB7XHJcbiAgICAgICAgICAgIHg6IHRvZS5jZW50ZXIueCxcclxuICAgICAgICAgICAgeTogdG9lLmNlbnRlci55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qge291dCwgb3V0Qm90LCBib3QsIGluQm90LCBpblRvcCwgdG9uZ3VlfSA9IGNhbGNIZWVscy5jYWxsKHRoaXMsIGV4KTtcclxuXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgb3V0LCBvdXRCb3QsIGJvdCwgaW5Cb3QsIGluVG9wLCB0b25ndWUsIG91dCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAgICAgLy8gYmFjayBvZiB0aGUgaGVlbHNcclxuICAgICAgICBjb25zdCBiYWNrVG9wID0gZXh0cmFjdFBvaW50KGV4LmFua2xlLmluKTtcclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuNiwgZXgudG9lLmluLCBleC5hbmtsZS5pbmJvdCk7XHJcbiAgICAgICAgY29uc3QgYmFja0JvdCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgYmFja0JvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYmFja1RvcCwgYmFja0JvdCwgMC4yLCAtMy4zKTtcclxuICAgICAgICBiYWNrVG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhiYWNrQm90LCBiYWNrVG9wLCAwLjcsIDEuNCk7XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgYmFja1RvcCwgYmFja0JvdCwgYmFja1RvcCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHRcdFxyXG5cdFx0XHJcblxyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvdmVyZWRIZWVsQmFzZVBhcnQgZXh0ZW5kcyBIZWVsUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICBjb25zdCB7b3V0LCBvdXRCb3QsIGJvdCwgaW5Cb3QsIGluVG9wfSA9IGNhbGNIZWVscy5jYWxsKHRoaXMsIGV4KTtcclxuXHJcbiAgICAgICAgLy8gY292ZXJhZ2UgcGFydFxyXG4gICAgICAgIGNvbnN0IHRvcExlZnQgPSBhZGp1c3QoZXh0cmFjdFBvaW50KGV4LmFua2xlLmluKSwgMS4xLCAtMC43KTtcclxuICAgICAgICBjb25zdCB0b3BSaWdodCA9IGFkanVzdChleHRyYWN0UG9pbnQoZXguYW5rbGUub3V0KSwgLTEuMSwgLTAuNyk7XHJcbiAgICAgICAgb3V0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyh0b3BSaWdodCwgb3V0LCAwLjUsIC0xKTtcclxuICAgICAgICBvdXQuY3AyID0gbnVsbDtcclxuICAgICAgICB0b3BMZWZ0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhpblRvcCwgdG9wTGVmdCwgMC41LCAtMSk7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIG91dCwgb3V0Qm90LCBib3QsIGluQm90LCBpblRvcCwgdG9wTGVmdCwgdG9wUmlnaHQsIG91dCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSGVlbFN0cmFwUGFydCBleHRlbmRzIEhlZWxQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7c3RyYXBXaWR0aDogMS41fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDEuMDYgLSB0aGlzLnN0cmFwV2lkdGggKiAwLjAzLCBleC5jYWxmLm91dCwgZXguYW5rbGUub3V0KTtcclxuXHJcbiAgICAgICAgY29uc3QgdG9wUmlnaHQgPSBzcC5yaWdodC5wMTtcclxuICAgICAgICBjb25zdCByaWdodCA9IGV4dHJhY3RQb2ludChleC5hbmtsZS5vdXQpO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUuaW4pO1xyXG4gICAgICAgIHJpZ2h0LmNwMSA9IHNwLnJpZ2h0LmNwMTtcclxuICAgICAgICByaWdodC5jcDIgPSBzcC5yaWdodC5jcDI7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmxlY3Rpb24gPSAzO1xyXG4gICAgICAgIGxlZnQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHJpZ2h0LCBsZWZ0LCAwLjUsIGRlZmxlY3Rpb24pO1xyXG5cclxuICAgICAgICBzcCA9IHNwbGl0Q3VydmUodGhpcy5zdHJhcFdpZHRoICogMC4wMzUsIGV4LmFua2xlLmluLCBleC5jYWxmLmluKTtcclxuICAgICAgICBjb25zdCB0b3BMZWZ0ID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG4gICAgICAgIHRvcFJpZ2h0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyh0b3BMZWZ0LCB0b3BSaWdodCwgMC41LCAtZGVmbGVjdGlvbik7XHJcblxyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5maWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHRvcFJpZ2h0LCByaWdodCwgbGVmdCwgdG9wTGVmdCwgdG9wUmlnaHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblxyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjSGVlbHMoZXgpIHtcclxuICAgIGNvbnN0IHRvZSA9IGV4LnRvZTtcclxuICAgIC8vIGRyYXcgZnJvbSBvdXRzaWRlIGluXHJcbiAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuNywgZXguYW5rbGUub3V0Ym90LCB0b2Uub3V0KTtcclxuICAgIGNvbnN0IG91dCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgY29uc3Qgb3V0Qm90ID0ge1xyXG4gICAgICAgIHg6IHRvZS5vdXQueCArIDIsXHJcbiAgICAgICAgeTogdG9lLmluLnkgKyAyLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBib3QgPSB7XHJcbiAgICAgICAgeDogdG9lLm91dC54ICogMC40NSArIHRvZS5pbi54ICogMC41NSxcclxuICAgICAgICB5OiB0b2UuaW4ueSAtIHRoaXMuaGVlbFBvaW50aW5lc3NcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaW5Cb3QgPSB7XHJcbiAgICAgICAgeDogdG9lLmluLnggLSAyLjUsXHJcbiAgICAgICAgeTogdG9lLmluLnkgKyAyXHJcbiAgICB9O1xyXG5cclxuICAgIHNwID0gc3BsaXRDdXJ2ZSgwLjYsIHRvZS5pbiwgZXguYW5rbGUuaW5ib3QpO1xyXG4gICAgY29uc3QgaW5Ub3AgPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgIGNvbnN0IHRvbmd1ZSA9IHtcclxuICAgICAgICB4OiBib3QueCxcclxuICAgICAgICB5OiB0b2UuY2VudGVyLnkgLSAyLjMgKyB0aGlzLnRvZUNvdmVyYWdlICogMS4zXHJcbiAgICB9O1xyXG5cclxuICAgIGJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMob3V0Qm90LCBib3QsIDAuNiwgMik7XHJcbiAgICBpbkJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYm90LCBpbkJvdCwgMC42LCAyKTtcclxuICAgIHRvbmd1ZS5jcDEgPSBzY2FsZShpblRvcCwgMC41LCBpbkJvdCk7XHJcbiAgICB0b25ndWUuY3AyID0ge1xyXG4gICAgICAgIHg6IHRvbmd1ZS54IC0gNCxcclxuICAgICAgICB5OiB0b25ndWUueVxyXG4gICAgfTtcclxuICAgIG91dC5jcDEgPSBjb250aW51ZUN1cnZlKGluVG9wLCB0b25ndWUsIDEpO1xyXG4gICAgb3V0LmNwMiA9IHNjYWxlKG91dCwgMC41LCBvdXRCb3QpO1xyXG5cclxuICAgIG91dEJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMob3V0LCBvdXRCb3QsIDAuOCwgMC42KTtcclxuICAgIGluVG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhpbkJvdCwgaW5Ub3AsIDAuMSwgMSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBvdXQsXHJcbiAgICAgICAgb3V0Qm90LFxyXG4gICAgICAgIGJvdCxcclxuICAgICAgICBpbkJvdCxcclxuICAgICAgICBpblRvcCxcclxuICAgICAgICB0b25ndWVcclxuICAgIH07XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSGVlbFNpZGVCYXNlQ2xvc2VkUGFydCBleHRlbmRzIFNob2VTaWRlUGFydCB7XHJcbi8qICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhLCB7XHJcbiAgICAgICAgICAgIHRvZUNvdmVyYWdlOiAwLjUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiovXHJcbiAgICByZW5kZXJTaG9lU2lkZVBhcnQoZXgsIGN0eCwgbW9kcykge1xyXG4gICAgICAgLyogY29uc3Qge1xyXG4gICAgICAgICAgICB2YW1wLFxyXG4gICAgICAgICAgICB0b2VUaXAsXHJcbiAgICAgICAgICAgIHNvbGVCb3QsXHJcbiAgICAgICAgICAgIGhlZWxCYWNrLFxyXG4gICAgICAgICAgICBjb3VudGVyVGlwLFxyXG4gICAgICAgIH0gPSBjYWxjSGVlbEJhc2VTaWRlLmNhbGwodGhpcywgZXgsIG1vZHMpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5maWxsLFxyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmZpbGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICB2YW1wLFxyXG4gICAgICAgICAgICB0b2VUaXAsXHJcbiAgICAgICAgICAgIHNvbGVCb3QsXHJcbiAgICAgICAgICAgIGhlZWxCYWNrLFxyXG4gICAgICAgICAgICBjb3VudGVyVGlwLFxyXG4gICAgICAgICAgICB2YW1wKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cdFx0Ki9cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvdmVyZWRIZWVsU2lkZUJhc2VQYXJ0IGV4dGVuZHMgU2hvZVNpZGVQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhLCB7dG9lQ292ZXJhZ2U6IDAuMiwgc29sZVdpZHRoOiAzLjAsIHRvbmd1ZVNwbGl0UmF0aW86IDAuNzV9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJTaG9lU2lkZVBhcnQoZXgsIGN0eCwgbW9kcykge1xyXG5cclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIHZhbXAsXHJcbiAgICAgICAgICAgIHRvZVRpcCxcclxuICAgICAgICAgICAgc29sZUJvdCxcclxuICAgICAgICAgICAgaGVlbEJhY2ssXHJcbiAgICAgICAgICAgIGhlZWxCYWNrVG9wLFxyXG4gICAgICAgICAgICB0b25ndWVTdGFydCxcclxuICAgICAgICAgICAgdG9uZ3VlU2lkZSxcclxuICAgICAgICAgICAgdG9uZ3VlXHJcbiAgICAgICAgfSA9IGNhbGNDb3ZlcmVkSGVlbEJhc2VTaWRlLmNhbGwodGhpcywgZXgsIG1vZHMpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5maWxsLFxyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmZpbGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICB2YW1wLFxyXG4gICAgICAgICAgICB0b2VUaXAsXHJcbiAgICAgICAgICAgIHNvbGVCb3QsXHJcbiAgICAgICAgICAgIGhlZWxCYWNrLFxyXG4gICAgICAgICAgICBoZWVsQmFja1RvcCxcclxuICAgICAgICAgICAgdG9uZ3VlU3RhcnQsXHJcbiAgICAgICAgICAgIHRvbmd1ZVNpZGUsXHJcbiAgICAgICAgICAgIHRvbmd1ZSxcclxuICAgICAgICAgICAgdmFtcCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNDb3ZlcmVkSGVlbEJhc2VTaWRlKGV4LCBtb2RzKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgICAgdmFtcCxcclxuICAgICAgICB0b2VUaXAsXHJcbiAgICAgICAgc29sZUJvdCxcclxuICAgICAgICBoZWVsQmFjayxcclxuICAgICAgICBjb3VudGVyVGlwLFxyXG4gICAgfSA9IGNhbGNIZWVsQmFzZVNpZGUuY2FsbCh0aGlzLCBleCwgbW9kcyk7XHJcbiAgICB0b2VUaXAuY3AxLnkgKz0gMTtcclxuXHJcbiAgICAvLyBkb2VzIG5vdCBhY3R1YWxseSBoYXZlIGEgY291bnRlclxyXG4gICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKHRoaXMudG9uZ3VlU3BsaXRSYXRpbywgc29sZUJvdCwgaGVlbEJhY2spO1xyXG4gICAgbGV0IHRvbmd1ZVN0YXJ0ID0gc3AucmlnaHQucDE7XHJcbiAgICBjb25zdCByZXYgPSByZXZlcnNlRHJhd1BvaW50KHNwLnJpZ2h0LnAxLCBzcC5yaWdodC5wMik7XHJcbiAgICB0b25ndWVTdGFydC5jcDEgPSByZXYuY3AxO1xyXG4gICAgdG9uZ3VlU3RhcnQuY3AyID0gcmV2LmNwMjtcclxuXHJcbiAgICB0b25ndWVTdGFydCA9IGFkanVzdCh0b25ndWVTdGFydCwgMCwgdGhpcy5zb2xlV2lkdGgpO1xyXG4gICAgY29uc3QgaGVlbEJhY2tUb3AgPSBhZGp1c3QoZXh0cmFjdFBvaW50KGhlZWxCYWNrKSwgMCwgdGhpcy5zb2xlV2lkdGgpO1xyXG4gICAgaGVlbEJhY2tUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGhlZWxCYWNrLCBoZWVsQmFja1RvcCwgMC41LCAtMSk7XHJcblxyXG4gICAgY29uc3QgdG9uZ3VlU2lkZSA9IHt4OiBjb3VudGVyVGlwLnggLSAxNiwgeTogY291bnRlclRpcC55fTtcclxuICAgIHRvbmd1ZVNpZGUuY3AxID0gc2ltcGxlUXVhZHJhdGljKHRvbmd1ZVN0YXJ0LCB0b25ndWVTaWRlLCAwLjUsIDUpO1xyXG4gICAgY29uc3QgdG9uZ3VlID0ge3g6IHRvbmd1ZVNpZGUueCAtIDUsIHk6IHRvbmd1ZVNpZGUueX07XHJcbiAgICB2YW1wLmNwMSA9IHt4OiB0b25ndWUueCwgeTogdG9uZ3VlLnkgLSAxNX07XHJcbiAgICB2YW1wLmNwMiA9IHt4OiB2YW1wLnggKyA2LCB5OiB2YW1wLnl9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFtcCxcclxuICAgICAgICB0b2VUaXAsXHJcbiAgICAgICAgc29sZUJvdCxcclxuICAgICAgICBoZWVsQmFjayxcclxuICAgICAgICBoZWVsQmFja1RvcCxcclxuICAgICAgICB0b25ndWVTdGFydCxcclxuICAgICAgICB0b25ndWVTaWRlLFxyXG4gICAgICAgIHRvbmd1ZSxcclxuICAgICAgICBjb3VudGVyVGlwLFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN0aWxldHRvUGFydCBleHRlbmRzIFNob2VTaWRlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSwge1xyXG4gICAgICAgICAgICAvLyBob3cgbXVjaCBhbG9uZyB0aGUgcGF0aCAoMCB0byAxKSBmcm9tIHNvbGUgYm90dG9tIHRvIGhlZWxCYWNrIHRvIHN0YXJ0IGV4dGVuZGluZyBkb3duXHJcbiAgICAgICAgICAgIHNlcGFyYXRpb25BbG9uZ0FyY2g6IDAuODMsXHJcbiAgICAgICAgICAgIGhlZWxUaXBXaWR0aCAgICAgICA6IDMuNSxcclxuICAgICAgICAgICAgLy8gd2hpY2ggd2F5IGFuZCBob3cgbXVjaCB0aGUgYmFjayBvZiB0aGUgaGVlbCBiZW5kcyAoY2FuIGJlIG5lZ2F0aXZlKVxyXG4gICAgICAgICAgICBiYWNrSGVlbERlZmxlY3Rpb24gOiAyLFxyXG4gICAgICAgICAgICAvLyB1c2UgbnVsbCB0byBpbmhlcml0IHRoZSBiYXNlJ3MgZmlsbFxyXG4gICAgICAgICAgICBzdGlsZXR0b0ZpbGwgICAgICAgOiBcImJsYWNrXCIsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyU2hvZVNpZGVQYXJ0KGV4LCBjdHgsIG1vZHMpIHtcclxuXHJcbiAgICAgICAgY29uc3Qge2FyY2hUaXAsIGhlZWxUaXAsIGhlZWxUaXBCYWNrLCBzdGlsZXR0b0hlZWxCYWNrfSA9IGNhbGNTdGlsZXR0by5jYWxsKHRoaXMsIGV4LCBtb2RzKTtcclxuXHJcbiAgICAgICAgY29uc3QgZmlsbCA9IHRoaXMuc3RpbGV0dG9GaWxsIHx8IHRoaXMuZmlsbDtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IGZpbGwsXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IGZpbGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBhcmNoVGlwLCBoZWVsVGlwLCBoZWVsVGlwQmFjaywgc3RpbGV0dG9IZWVsQmFjaywgYXJjaFRpcCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBsYXRmb3JtU2lkZVBhcnQgZXh0ZW5kcyBTaG9lU2lkZVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEsIHtcclxuICAgICAgICAgICAgLy8gaG93IGhpZ2ggdGhlIHBsYXRmb3JtIGlzIGluIG1tXHJcbiAgICAgICAgICAgIHBsYXRmb3JtSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICBwbGF0Zm9ybUZpbGwgIDogXCJibGFja1wiLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclNob2VTaWRlUGFydChleCwgY3R4LCBtb2RzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGxhdGZvcm1IZWlnaHQgPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7dG9wTGVmdCwgbGVmdCwgYm90LCByaWdodH0gPSBjYWxjSGVlbFBsYXRmb3JtU2lkZS5jYWxsKHRoaXMsIGV4LCBtb2RzKTtcclxuXHJcbiAgICAgICAgY29uc3QgZmlsbCA9IHRoaXMucGxhdGZvcm1GaWxsIHx8IHRoaXMuZmlsbDtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IGZpbGwsXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IGZpbGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICB0b3BMZWZ0LCBsZWZ0LCBib3QsIHJpZ2h0LCB0b3BMZWZ0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSGVlbFNpZGVTaW1wbGVTdHJhcFBhcnQgZXh0ZW5kcyBTaG9lU2lkZVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlclNob2VTaWRlUGFydChleCwgY3R4LCBtb2RzKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHtjb3VudGVyVGlwfSA9IGNhbGNIZWVsQmFzZVNpZGUuY2FsbCh0aGlzLCBleCwgbW9kcyk7XHJcbiAgICAgICAgY29uc3Qgc3RyYXBSYWRpdXMgPSAxMDtcclxuICAgICAgICBjb25zdCBjZW50ZXIgPSBhZGp1c3QoY291bnRlclRpcCwgLXN0cmFwUmFkaXVzLCAwKTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5maWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5zdHJhcFdpZHRoICogMS4zMztcclxuICAgICAgICBjdHguZWxsaXBzZShjZW50ZXIueCAtIDEsXHJcbiAgICAgICAgICAgIGNlbnRlci55IC0gMixcclxuICAgICAgICAgICAgc3RyYXBSYWRpdXMsXHJcbiAgICAgICAgICAgIDMuNSxcclxuICAgICAgICAgICAgLTAuOTUgKiBNYXRoLlBJLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSGVlbFNpZGVXaWRlU3RyYXBQYXJ0IGV4dGVuZHMgU2hvZVNpZGVQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7c3RyYXBXaWR0aDogNS4wfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyU2hvZVNpZGVQYXJ0KGV4LCBjdHgsIG1vZHMpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RyYXAgPSBjYWxjV2lkZVN0cmFwU2lkZS5jYWxsKHRoaXMsIGV4LCBtb2RzKTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5maWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuXHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIHN0cmFwLmxlZnQsXHJcbiAgICAgICAgICAgIHN0cmFwLnRvcExlZnQsXHJcbiAgICAgICAgICAgIHN0cmFwLnRvcFJpZ2h0LFxyXG4gICAgICAgICAgICBzdHJhcC5yaWdodCxcclxuICAgICAgICAgICAgc3RyYXAubGVmdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNXaWRlU3RyYXBTaWRlKGV4LCBtb2RzKSB7XHJcbiAgICBjb25zdCB7dG9uZ3VlOiBsZWZ0LCBjb3VudGVyVGlwOiByaWdodH0gPSBjYWxjQ292ZXJlZEhlZWxCYXNlU2lkZS5jYWxsKHRoaXMsIGV4LCBtb2RzKTtcclxuICAgIC8vIHJlbmFtZSB0byBtYWtlIHNwYWNpYWwgc2Vuc2VcclxuXHJcbiAgICBjb25zdCB0b3BMZWZ0ID0ge3g6IGxlZnQueCwgeTogbGVmdC55ICsgdGhpcy5zdHJhcFdpZHRofTtcclxuICAgIGNvbnN0IHRvcFJpZ2h0ID0ge3g6IHJpZ2h0LnggLSAwLjUsIHk6IHJpZ2h0LnkgKyB0aGlzLnN0cmFwV2lkdGh9O1xyXG4gICAgdG9wUmlnaHQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHRvcExlZnQsIHRvcFJpZ2h0LCAwLjUsIC0yLjUpO1xyXG4gICAgbGVmdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMocmlnaHQsIGxlZnQsIDAuNSwgMi41KTtcclxuXHJcbiAgICByaWdodC5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9wUmlnaHQsIHJpZ2h0LCAwLjUsIC0wLjUpO1xyXG4gICAgcmlnaHQuY3AyID0gbnVsbDtcclxuICAgIHJldHVybiB7bGVmdCwgdG9wTGVmdCwgdG9wUmlnaHQsIHJpZ2h0fTtcclxufVxyXG5cclxuY29uc3QgYm90dG9tWSA9IDM7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY0hlZWxCYXNlU2lkZShpZ25vcmUsIG1vZHMpIHtcclxuICAgIGNvbnN0IHRvZVRpcCA9IHtcclxuICAgICAgICB4OiA1LFxyXG4gICAgICAgIHk6IDEyICsgdGhpcy5wbGF0Zm9ybUhlaWdodCxcclxuICAgIH07XHJcbiAgICBjb25zdCBzb2xlQm90ID0ge1xyXG4gICAgICAgIHg6IHRvZVRpcC54ICsgMTQgLSB0aGlzLnNob2VIZWlnaHQgKiAwLjUsXHJcbiAgICAgICAgeTogdG9lVGlwLnkgLSA5XHJcbiAgICB9O1xyXG4gICAgc29sZUJvdC5jcDEgPSB7XHJcbiAgICAgICAgeDogdG9lVGlwLngsXHJcbiAgICAgICAgeTogdG9lVGlwLnkgLSAzXHJcbiAgICB9O1xyXG4gICAgc29sZUJvdC5jcDIgPSB7XHJcbiAgICAgICAgeDogc29sZUJvdC54IC0gOCxcclxuICAgICAgICB5OiBzb2xlQm90LnlcclxuICAgIH07XHJcblxyXG4gICAgLy8gdG9wIG9mIHRoZSBhcmNoIG5lYXIgd2hlbiB0aGUgaGVlbCBleHRlbmRzIGRvd24gY2xvc2VyIHRvIHRoZSB0b2VzXHJcbiAgICBjb25zdCBhcmNoVGlwID0ge1xyXG4gICAgICAgIHg6IHRvZVRpcC54ICsgNTIgKyBtb2RzLmZlZXRMZW5ndGggKiAwLjUgLSB0aGlzLnNob2VIZWlnaHQgKiA1LFxyXG4gICAgICAgIHk6IHRvZVRpcC55ICsgdGhpcy5zaG9lSGVpZ2h0ICogNVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBoZWVsQmFjayA9IHtcclxuICAgICAgICB4OiBhcmNoVGlwLnggKyAxMCxcclxuICAgICAgICB5OiBhcmNoVGlwLnlcclxuICAgIH07XHJcbiAgICBoZWVsQmFjay5jcDEgPSB7XHJcbiAgICAgICAgeDogc29sZUJvdC54ICsgMjgsXHJcbiAgICAgICAgeTogc29sZUJvdC55XHJcbiAgICB9O1xyXG4gICAgaGVlbEJhY2suY3AyID0ge1xyXG4gICAgICAgIHg6IGFyY2hUaXAueCAtIDIwLFxyXG4gICAgICAgIHk6IGFyY2hUaXAueSAtIDEwXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvdW50ZXJUaXAgPSB7XHJcbiAgICAgICAgeDogYXJjaFRpcC54ICsgNCxcclxuICAgICAgICB5OiBoZWVsQmFjay55ICsgMTlcclxuICAgIH07XHJcbiAgICBjb3VudGVyVGlwLmNwMSA9IHtcclxuICAgICAgICB4OiBoZWVsQmFjay54ICsgMyxcclxuICAgICAgICB5OiBoZWVsQmFjay55ICsgMTBcclxuICAgIH07XHJcbiAgICBjb3VudGVyVGlwLmNwMiA9IHtcclxuICAgICAgICB4OiBjb3VudGVyVGlwLnggKyAzLFxyXG4gICAgICAgIHk6IGNvdW50ZXJUaXAueSAtIDVcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdmFtcCA9IHtcclxuICAgICAgICB4OiB0b2VUaXAueCArIDEwLjUgKyB0aGlzLnRvZUNvdmVyYWdlICogMS43IC0gdGhpcy5zaG9lSGVpZ2h0ICogMC41LFxyXG4gICAgICAgIHk6IHRvZVRpcC55ICsgNCArIHRoaXMudG9lQ292ZXJhZ2UgKiAxLjNcclxuICAgIH07XHJcbiAgICB0b2VUaXAuY3AxID0gc2ltcGxlUXVhZHJhdGljKHZhbXAsIHRvZVRpcCwgMC43LCAtMS41KTtcclxuICAgIHZhbXAuY3AxID0ge1xyXG4gICAgICAgIHg6IGNvdW50ZXJUaXAueCAtIDE5LFxyXG4gICAgICAgIHk6IGNvdW50ZXJUaXAueSAtIDVcclxuICAgIH07XHJcbiAgICB2YW1wLmNwMiA9IHtcclxuICAgICAgICB4OiB2YW1wLnggKyAxOCxcclxuICAgICAgICB5OiB2YW1wLnkgLSAxMFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbXAsXHJcbiAgICAgICAgdG9lVGlwLFxyXG4gICAgICAgIHNvbGVCb3QsXHJcbiAgICAgICAgaGVlbEJhY2ssXHJcbiAgICAgICAgY291bnRlclRpcCxcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjSGVlbFBsYXRmb3JtU2lkZShleCwgbW9kcykge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHRvZVRpcCxcclxuICAgICAgICBzb2xlQm90LFxyXG4gICAgICAgIGhlZWxCYWNrXHJcbiAgICB9ID0gY2FsY0hlZWxCYXNlU2lkZS5jYWxsKHRoaXMsIGV4LCBtb2RzKTtcclxuXHJcbiAgICBjb25zdCB0b3BMZWZ0ID0gZXh0cmFjdFBvaW50KHRvZVRpcCk7XHJcbiAgICBjb25zdCBsZWZ0ID0gYWRqdXN0KHRvcExlZnQsIHRoaXMucGxhdGZvcm1IZWlnaHQgKiAwLjIsIC10aGlzLnBsYXRmb3JtSGVpZ2h0KTtcclxuICAgIGxlZnQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHRvcExlZnQsIGxlZnQsIDAuMywgLTAuNCk7XHJcblxyXG4gICAgY29uc3QgYm90ID0gYWRqdXN0KHNvbGVCb3QsIDAsIC10aGlzLnBsYXRmb3JtSGVpZ2h0KTtcclxuICAgIGJvdC5jcDEueCArPSB0aGlzLnBsYXRmb3JtSGVpZ2h0ICogMC4yO1xyXG4gICAgLy8gYm90LmNwMSA9IG51bGw7XHJcblxyXG4gICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuNSwgc29sZUJvdCwgaGVlbEJhY2spO1xyXG4gICAgY29uc3QgcmlnaHQgPSBzcC5sZWZ0LnAyO1xyXG4gICAgcmlnaHQuY3AxLnkgLT0gdGhpcy5wbGF0Zm9ybUhlaWdodDtcclxuICAgIHJpZ2h0LmNwMi55IC09IHRoaXMucGxhdGZvcm1IZWlnaHQgKiAwLjU7XHJcblxyXG4gICAgcmV0dXJuIHt0b3BMZWZ0LCBsZWZ0LCBib3QsIHJpZ2h0fTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNTdGlsZXR0byhleCwgbW9kcykge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICAgIHNvbGVCb3QsXHJcbiAgICAgICAgaGVlbEJhY2ssXHJcbiAgICB9ID0gY2FsY0hlZWxCYXNlU2lkZS5jYWxsKHRoaXMsIGV4LCBtb2RzKTtcclxuXHJcbiAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUodGhpcy5zZXBhcmF0aW9uQWxvbmdBcmNoLCBzb2xlQm90LCBoZWVsQmFjayk7XHJcblxyXG4gICAgbGV0IGFyY2hUaXAgPSBleHRyYWN0UG9pbnQoc3AubGVmdC5wMik7XHJcblxyXG4gICAgLy8gY2xvc2VyIHRvIHRoZSBiYWNrXHJcbiAgICBjb25zdCBoZWVsVGlwQmFjayA9IHtcclxuICAgICAgICB4OiBoZWVsQmFjay54IC0gNS44LFxyXG4gICAgICAgIHk6IGJvdHRvbVlcclxuICAgIH07XHJcbiAgICBjb25zdCBoZWVsVGlwID0ge1xyXG4gICAgICAgIHg6IGhlZWxUaXBCYWNrLnggLSB0aGlzLmhlZWxUaXBXaWR0aCAqIDAuNSxcclxuICAgICAgICB5OiBib3R0b21ZXHJcbiAgICB9O1xyXG4gICAgaGVlbFRpcC5jcDEgPSB7eDogaGVlbFRpcC54LCB5OiBhcmNoVGlwLnl9O1xyXG5cclxuICAgIGxldCBzdGlsZXR0b0hlZWxCYWNrID0gZXh0cmFjdFBvaW50KGhlZWxCYWNrKTtcclxuICAgIHN0aWxldHRvSGVlbEJhY2suY3AxID0gc2ltcGxlUXVhZHJhdGljKGhlZWxUaXBCYWNrLCBzdGlsZXR0b0hlZWxCYWNrLCAwLjcsIHRoaXMuYmFja0hlZWxEZWZsZWN0aW9uKTtcclxuXHJcbiAgICBjb25zdCByZXYgPSByZXZlcnNlRHJhd1BvaW50KHNwLnJpZ2h0LnAxLCBzcC5yaWdodC5wMik7XHJcbiAgICBhcmNoVGlwLmNwMSA9IHJldi5jcDE7XHJcbiAgICBhcmNoVGlwLmNwMiA9IHJldi5jcDI7XHJcblxyXG4gICAgLy8gc2hpZnQgc2xpZ2h0bHkgc28gd2UgZG9uJ3Qgc2VlIGxpbmUgc2VwYXJhdGluZyB0aGVtXHJcbiAgICBjb25zdCBlcHNpbG9uID0gMC40O1xyXG4gICAgYXJjaFRpcCA9IGFkanVzdChhcmNoVGlwLCAwLCBlcHNpbG9uKTtcclxuICAgIHN0aWxldHRvSGVlbEJhY2sgPSBhZGp1c3Qoc3RpbGV0dG9IZWVsQmFjaywgMCwgZXBzaWxvbik7XHJcblxyXG4gICAgcmV0dXJuIHthcmNoVGlwLCBoZWVsVGlwLCBoZWVsVGlwQmFjaywgc3RpbGV0dG9IZWVsQmFja307XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxvY2soY3R4LCB0b3BQb2ludCwgc2l6ZSA9IDEsIHJvdGF0aW9uID0gMCwgaGFsZldpZHRoID0gMiwgaGVhZFN0cm9rZSA9IFwiI0QzRDNEM1wiLCBib2R5RmlsbCA9IFwiZ29sZFwiKSB7XHJcbiAgICAvLyBoZWFkIG9mIHRoZSBsb2NrXHJcbiAgICBjb25zdCBsZWZ0ID0gYWRqdXN0KHRvcFBvaW50LCAtaGFsZldpZHRoLCAtMik7XHJcbiAgICBjb25zdCByaWdodCA9IGFkanVzdCh0b3BQb2ludCwgaGFsZldpZHRoLCAtMik7XHJcbiAgICByaWdodC5jcDEgPSB7eDogbGVmdC54LCB5OiBsZWZ0LnkgKyA1fTtcclxuICAgIHJpZ2h0LmNwMiA9IHt4OiByaWdodC54LCB5OiByaWdodC55ICsgNX07XHJcblxyXG4gICAgLy8gYm9keSBvZiB0aGUgbG9ja1xyXG4gICAgY29uc3QgYm9keSA9IHt9O1xyXG4gICAgYm9keS50b3BMZWZ0ID0gYWRqdXN0KGxlZnQsIC0xLCAxKTtcclxuICAgIGJvZHkudG9wUmlnaHQgPSBhZGp1c3QoZXh0cmFjdFBvaW50KHJpZ2h0KSwgMSwgMSk7XHJcbiAgICBib2R5LnJpZ2h0ID0gYWRqdXN0KGJvZHkudG9wUmlnaHQsIDAsIC01KTtcclxuICAgIGJvZHkubGVmdCA9IGFkanVzdChib2R5LnRvcExlZnQsIDAsIC01KTtcclxuXHJcbiAgICBzY2FsZVBvaW50cyh0b3BQb2ludCwgc2l6ZSwgbGVmdCwgcmlnaHQsIGJvZHkudG9wTGVmdCwgYm9keS50b3BSaWdodCwgYm9keS5sZWZ0LCBib2R5LnJpZ2h0KTtcclxuICAgIHJvdGF0ZVBvaW50cyh0b3BQb2ludCwgcm90YXRpb24sIGxlZnQsIHJpZ2h0LCBib2R5LnRvcExlZnQsIGJvZHkudG9wUmlnaHQsIGJvZHkubGVmdCwgYm9keS5yaWdodCk7XHJcblxyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IGJvZHlGaWxsO1xyXG4gICAgZHJhd1BvaW50cyhjdHgsIGJvZHkudG9wTGVmdCwgYm9keS50b3BSaWdodCwgYm9keS5yaWdodCwgYm9keS5sZWZ0LCBib2R5LnRvcExlZnQpO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBoZWFkU3Ryb2tlO1xyXG4gICAgY3R4LmxpbmVXaWR0aCA9IHNpemU7XHJcbiAgICBjdHgubGluZUNhcCA9IFwicm91bmRcIjtcclxuXHJcbiAgICBkcmF3UG9pbnRzKGN0eCwgbGVmdCwgcmlnaHQpO1xyXG4gICAgY3R4LnN0cm9rZSgpO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3RyYXBMb2NrU2lkZVBhcnQgZXh0ZW5kcyBTaG9lU2lkZVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtsb2NrU2l6ZTogMS4wLCBhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJmZWV0XCJdfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyU2hvZVNpZGVQYXJ0KGV4LCBjdHgsIG1vZHMpIHtcclxuICAgICAgICBjb25zdCBzdHJhcCA9IGNhbGNXaWRlU3RyYXBTaWRlLmNhbGwodGhpcywgZXgsIG1vZHMpO1xyXG4gICAgICAgIGNvbnN0IGxvY2tQb2ludCA9IHt4OiBzdHJhcC5sZWZ0LnggKyA2LCB5OiBzdHJhcC5sZWZ0LnkgKiAwLjkgKyBzdHJhcC50b3BMZWZ0LnkgKiAwLjF9O1xyXG4gICAgICAgIHJlbmRlckxvY2soY3R4LCBsb2NrUG9pbnQsIHRoaXMubG9ja1NpemUsIC0wLjEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3RyYXBMb2NrUGFydCBleHRlbmRzIEhlZWxQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7bGF5ZXI6IExheWVyLkdFTklUQUxTLCBsb2NrU2l6ZTogMS4wLCBhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJmZWV0XCJdfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IGxvY2tQb2ludCA9IHt4OiBleC5hbmtsZS5vdXQueCAtIDEsIHk6IGV4LmFua2xlLm91dC55fTtcclxuICAgICAgICByZW5kZXJMb2NrKGN0eCwgbG9ja1BvaW50LCAwLjUgKiB0aGlzLmxvY2tTaXplLCAwLjMsIDAuOCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIZWVscyBleHRlbmRzIENsb3RoaW5nIHtcclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXIgOiBDbG90aGVzLkxheWVyLk1JRCxcclxuXHRcdFx0XHJcblx0XHRcdCAgYWJvdmVQYXJ0czogW1wicGFydHMgYXJtXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGFybVwiLCBcInBhcnRzIGhhbmRcIl0sXHJcblx0XHRcdFxyXG5cdFx0XHRiZWxvd1BhcnRzOiBbXCJwYXJ0cyBsZWdcIl0sIC8vVE9ETyBURVNUXHJcblx0XHRcdCAgXHJcbiAgICAgICAgICAgIHRoaWNrbmVzcyAgICAgOiAxLFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSG93IGhpZ2ggdGhlIGhlZWwgaXMgdG8gbGlmdCB0aGUgcGxheWVyJ3MgaGVpZ2h0IGluIGluY2hlc1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc2hvZUhlaWdodCAgICA6IDMsXHJcbiAgICAgICAgICAgIGJhc2VQb2ludGluZXNzOiA1LFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSG93IGNvbnN0cmFpbmVkIHRoZSB0b2VzIGFyZSB0b2dldGhlclxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc2hvZVRpZ2h0bmVzcyA6IDEwLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgICAgIC8vIHJlc29sdmUgZHluYW1pY3MgYmV0d2VlbiBtb2RpZmllcnNcclxuICAgICAgICB0aGlzLk1vZHMgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgZmVldFdpZHRoIDogLXRoaXMuc2hvZVRpZ2h0bmVzcyxcclxuICAgICAgICAgICAgZmVldExlbmd0aDogMFxyXG4gICAgICAgIH0sIHRoaXMuTW9kcyk7XHJcbiAgICAgICAgdGhpcy5Nb2RzLmZlZXRMZW5ndGggKz0gdGhpcy5zaG9lSGVpZ2h0ICogNDtcclxuICAgICAgICB0aGlzLk1vZHMuZmVldFdpZHRoIC09IHRoaXMuc2hvZUhlaWdodDtcclxuICAgICAgICB0aGlzLmhlZWxQb2ludGluZXNzID1cclxuICAgICAgICAgICAgdGhpcy5iYXNlUG9pbnRpbmVzcyAtICh0aGlzLnNob2VIZWlnaHQpICogMC41O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENsb3NlZFRvZVB1bXBzIGV4dGVuZHMgSGVlbHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0IHRvZUNvdmVyYWdlOiAwLjUsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBIZWVsQmFzZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBIZWVsQmFzZVNoaW5lXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAvKiB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbFNpZGVCYXNlQ2xvc2VkUGFydFxyXG4gICAgICAgICAgICB9LCAgKi9cclxuICAgICAgIC8qICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3RpbGV0dG9QYXJ0XHJcbiAgICAgICAgICAgIH0sKi9cclxuICAgICAgICAgIC8qICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogUGxhdGZvcm1TaWRlUGFydFxyXG4gICAgICAgICAgICB9LCovXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENsb3NlZFRvZVN0cmFwcGVkUHVtcHMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdHJhcFdpZHRoOiAxLjUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbEJhc2VQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxTdHJhcFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxTdHJhcFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbEJhc2VTaGluZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbFNpZGVCYXNlQ2xvc2VkUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3RpbGV0dG9QYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBIZWVsU2lkZVNpbXBsZVN0cmFwUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogUGxhdGZvcm1TaWRlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb3ZlcmVkRmFuY3lTdGlsZXR0b3MgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENvdmVyZWRIZWVsQmFzZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENvdmVyZWRIZWVsQmFzZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbFN0cmFwUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbFN0cmFwUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBIZWVsQmFzZVNoaW5lXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDb3ZlcmVkSGVlbFNpZGVCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbFNpZGVXaWRlU3RyYXBQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdGlsZXR0b1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFBsYXRmb3JtU2lkZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBsb2NrZWRTdHJhcHB5SGVlbFBhcnRQcm90b3R5cGVzID0gW1xyXG4gICAge1xyXG4gICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgUGFydDogU3RyYXBMb2NrU2lkZVBhcnRcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgIFBhcnQ6IFN0cmFwTG9ja1BhcnRcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICBQYXJ0OiBTdHJhcExvY2tQYXJ0XHJcbiAgICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvY2tlZENvdmVyZWRGYW5jeVN0aWxldHRvcyBleHRlbmRzIENvdmVyZWRGYW5jeVN0aWxldHRvcyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBzdXBlci5wYXJ0UHJvdG90eXBlcy5jb25jYXQobG9ja2VkU3RyYXBweUhlZWxQYXJ0UHJvdG90eXBlcyk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtjb3Zlck5pcHBsZXNJZkhhdmVOb0JyZWFzdHN9IGZyb20gXCIuLi9kcmF3L2RyYXdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbi8vaW1wb3J0IHtzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcbmltcG9ydCB7XHJcblx0ZXh0cmFjdFBvaW50LFxyXG5cdGRyYXdQb2ludHMsIFxyXG5cdHNwbGl0Q3VydmUsXHJcblx0YnJlYWtQb2ludCxcclxuXHRjbG9uZSxcclxuXHRhZGp1c3QsXHJcblx0c2ltcGxlUXVhZHJhdGljLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtcclxuXHRzdHJhaWdodGVuQ3VydmUsXHJcblx0ZmluZEJldHdlZW4sXHJcblx0bGluZUxpbmVJbnRlcnNlY3Rpb24sXHJcblx0Z2V0TGltYlBvaW50c05lZ2F0aXZlLFxyXG5cdC8vZ2V0TGFjaW5nUG9pbnRzLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuaW1wb3J0IHtEcmVzc0JyZWFzdFBhcnQsU3VwZXJTbGVldmVQYXJ0LERldGFjaGVkU2xlZXZlUGFydCxjYWxjRHJlc3NDbGVhdmFnZSxMYWNpbmdQYXJ0fSBmcm9tIFwiLi9kcmVzc1wiO1xyXG5cclxuXHJcbi8vYmFzaWNhbGx5IGNhbGNEcmVzc0Jhc2UgYnV0IG9ubHkgZ29lcyB0byB3YWlzdFxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY1RlZShleCl7XHJcblx0Ly9hcm1cclxuXHRsZXQgc2hvdWxkZXIgPSBjbG9uZShleC5jb2xsYXJib25lKTtcclxuXHRcclxuXHQvL3dhaXN0IHBvaW50c1xyXG5cdGNvbnN0IHthcm1waXQsbGF0LHdhaXN0LGhpcCxvdXQsYm90dG9tfSA9IGNhbGNUb3BCb2R5LmNhbGwodGhpcywgZXgpO1xyXG5cdFxyXG5cdC8vY2xlYXZhZ2VcclxuXHRjb25zdCB7XHJcblx0XHRjbGVhdmFnZUJvdCxjbGVhdmFnZVRvcCxuZWNrXHJcblx0fSA9IGNhbGNEcmVzc0NsZWF2YWdlLmNhbGwodGhpcyxleCk7XHJcblx0Ly9UT0RPIC0gY2hlY2tpbmcgb2YgYm90dG9tIGxpbWl0IHdhcyByZW1vdmVkIGJlY2F1c2UgRHJlc3NCcmVhc3RQYXJ0IGNhbGN1bGF0ZSBpdCBkaWZmZXJlbnRseSAoYmFzZWQgb24gbGVnQ292ZXJhZ2UpXHJcblx0Ly9pdCBpcyBhc3N1bWVkIHRoZSB0ZWUgd29uJ3QgYmUgdXNlZCB3aXRoIHN1Y2ggZGVlcCBjbGVhdmFnZSBmb3IgdGhpcyB0byBtYXR0ZXIgXHJcblx0cmV0dXJuIHtcclxuXHRcdFx0Y2xlYXZhZ2VCb3Q6IGNsZWF2YWdlQm90LFxyXG5cdFx0XHRjbGVhdmFnZVRvcDogY2xlYXZhZ2VUb3AsXHJcblx0XHRcdG5lY2s6bmVjayxcclxuXHRcdFx0c2hvdWxkZXI6c2hvdWxkZXIsXHJcblx0XHRcdFxyXG5cdFx0XHRhcm1waXQ6YXJtcGl0LFxyXG5cdFx0XHRsYXQ6bGF0LFxyXG5cdFx0XHR3YWlzdDogd2Fpc3QsXHJcblx0XHRcdGhpcDogaGlwLCBcclxuXHRcdFx0b3V0Om91dCwgXHJcblx0XHRcdGJvdHRvbTogYm90dG9tXHJcblx0XHR9O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRlZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgIC8qIGFib3ZlUGFydHMgICAgICAgICA6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXSwqL1xyXG4gICAgICAgICAgICBhYm92ZVBhcnRzXHRcdFx0OiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJwYXJ0cyBsZWdcIl0sXHJcblx0XHRcdC8qYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiZ3JvaW5cIiwgXCJwYXJ0cyBsZWdcIl0sKi9cclxuXHRcdFx0XHJcbiAgICAgICAgfSwge1xyXG5cclxuXHRcdH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcblx0XHRjb25zdCB7XHJcblx0XHRcdGNsZWF2YWdlQm90LGNsZWF2YWdlVG9wLG5lY2ssc2hvdWxkZXIsYXJtcGl0LHdhaXN0LGhpcCxvdXQsYm90dG9tLFxyXG5cdFx0fSA9IGNhbGNUZWUuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdCBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRjbGVhdmFnZUJvdCwgIFxyXG5cdFx0XHRjbGVhdmFnZVRvcCwgIFxyXG5cdFx0XHRuZWNrLCBcclxuXHRcdFx0c2hvdWxkZXIsIFxyXG5cdFx0XHRhcm1waXQsICBcclxuXHRcdFx0d2Fpc3QsXHJcblx0XHRcdGhpcCxcclxuXHRcdFx0b3V0LFxyXG5cdFx0XHRib3R0b21cclxuXHRcdFx0XHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vYmFzaWNhbGx5IFRlZStTdXBlclBhbnRpZXNcclxuZXhwb3J0IGNsYXNzIExlb3RhcmRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgLyogYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLCovXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHNcdFx0XHQ6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLCBcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0LyphYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcInBhcnRzIGxlZ1wiXSwqL1xyXG5cdFx0XHRcclxuICAgICAgICB9LCB7XHJcblxyXG5cdFx0fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsY2xlYXZhZ2VUb3AsbmVjayxzaG91bGRlcixhcm1waXQsd2Fpc3QsaGlwLG91dCxib3R0b20sXHJcblx0XHR9ID0gY2FsY1RlZS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvL2JvdHRvbVxyXG5cdFx0bGV0IGJvdCA9IGFkanVzdChjbG9uZShleC5ncm9pbiksLTAuMiwwKTtcdFx0XHJcblx0XHRcclxuXHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmdlbkNvdmVyYWdlLGV4Lmdyb2luLGV4dHJhY3RQb2ludChleC50aGlnaC50b3ApKTtcdFxyXG5cdFx0bGV0IGJvdE91dCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0XHJcblx0XHQvL2JvdHRvbSBjdXJ2ZSAoaGlwID8gaGlwIDogd2Fpc3QpXHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgwLjUsIG91dCwgYm90T3V0ICk7XHRcclxuXHRcdGJvdE91dC5jcDEgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdGJvdE91dC5jcDEueCs9dGhpcy5jdXJ2ZUJvdFgtOTtcclxuXHRcdGJvdE91dC5jcDEueSs9dGhpcy5jdXJ2ZUJvdFkrNTtcclxuXHRcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGNsZWF2YWdlQm90LCAgXHJcblx0XHRcdGNsZWF2YWdlVG9wLCAgXHJcblx0XHRcdG5lY2ssIFxyXG5cdFx0XHRzaG91bGRlciwgXHJcblx0XHRcdGFybXBpdCwgIFxyXG5cdFx0XHR3YWlzdCxcclxuXHRcdFx0aGlwLFxyXG5cdFx0XHRvdXQsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHQvL291dCxcclxuXHRcdFx0Ly9ib3R0b21cclxuXHRcdFx0XHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSGFsdGVyVG9wQnJlYXN0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJjaGVzdFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0Ly9jaGVjayBhbmQgcmVjYWxjdWxhdGUgY2xlYXZhZ2UgaWYgZGVlcCBiZXlvbmQgbGltaXRcclxuXHRcdGZ1bmN0aW9uIGNoZWNrQ2xlYXZhZ2UoY29udGV4dCxib3R0b20pe1xyXG5cdFx0XHRpZihjbGVhdmFnZS55PGJvdHRvbS55KXtcclxuXHRcdFx0XHRjbGVhdmFnZS55ID0gYm90dG9tLnkrMztcclxuXHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0c3AgPSBzcGxpdEN1cnZlKDAuNSxjbGVhdmFnZSx0b3BJbik7XHJcblx0XHRcdHRvcEluLmNwMSA9IHtcclxuXHRcdFx0XHR4OiBzcC5sZWZ0LnAyLngrY29udGV4dC5jdXJ2ZUNsZWF2YWdlWCxcclxuXHRcdFx0XHR5OiBzcC5sZWZ0LnAyLnkrY29udGV4dC5jdXJ2ZUNsZWF2YWdlWSxcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly9DTEVBVkFHRVxyXG5cdFx0bGV0IHNwID0gc3BsaXRDdXJ2ZSh0aGlzLmNsZWF2YWdlQ292ZXJhZ2UsZXgubmVjay5jdXNwLCBleC5ncm9pbik7XHJcblx0XHRsZXQgY2xlYXZhZ2UgPSB7XHJcblx0XHRcdHggOiAtMC4yLFxyXG5cdFx0XHR5IDogc3AubGVmdC5wMi55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLm91dGVyTmVja0NvdmVyYWdlPHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2Upe1xyXG5cdFx0XHR0aGlzLm91dGVyTmVja0NvdmVyYWdlID0gdGhpcy5pbm5lck5lY2tDb3ZlcmFnZTtcclxuXHRcdH1cclxuXHRcdGlmKHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2U+dGhpcy5vdXRlck5lY2tDb3ZlcmFnZSl7XHJcblx0XHRcdHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2UgPSB0aGlzLm91dGVyTmVja0NvdmVyYWdlO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRjb25zdCBjdXNwID0gZXgudHJhcGV6aXVzID8gZXgudHJhcGV6aXVzIDogZXgubmVjay5jdXNwO1xyXG5cdFx0c3AgPSBzcGxpdEN1cnZlKHRoaXMub3V0ZXJOZWNrQ292ZXJhZ2UsY3VzcCwgZXguY29sbGFyYm9uZSk7XHJcblx0XHRjb25zdCB0b3BPdXQgPSB0aGlzLm91dGVyTmVja0NvdmVyYWdlID4gMSA/IGV4LmNvbGxhcmJvbmUgOiBzcC5sZWZ0LnAyO1xyXG5cdFx0XHRcdFxyXG5cdFx0aWYodGhpcy5pbm5lck5lY2tDb3ZlcmFnZTwwKXtcclxuXHRcdFx0c3AgPSBzcGxpdEN1cnZlKDErdGhpcy5pbm5lck5lY2tDb3ZlcmFnZSwgZXgubmVjay50b3AsIGN1c3ApO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHNwID0gc3BsaXRDdXJ2ZSh0aGlzLmlubmVyTmVja0NvdmVyYWdlLCBjdXNwLCBleC5jb2xsYXJib25lKTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IHRvcEluID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG5cdFx0XHRcdFxyXG5cdFx0Y29uc3QgdG9wTWlkID0gdGhpcy5pbm5lck5lY2tDb3ZlcmFnZSA8IDAgPyBjdXNwIDogdm9pZCAwO1xyXG5cdFx0XHJcblx0XHRjb25zdCBhcm1waXQgPSBleHRyYWN0UG9pbnQoZXguYXJtcGl0KTtcclxuXHRcdFxyXG5cdFx0Ly9OTyBCUkVBU1RTXHJcblx0XHRpZiAoZXguaGFzT3duUHJvcGVydHkoXCJicmVhc3RcIikgPT09IGZhbHNlKSB7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgYm90dG9tID0ge1xyXG5cdFx0XHRcdHg6IC0wLjIsXHJcblx0XHRcdFx0eTogYXJtcGl0LnktMVxyXG5cdFx0XHR9O1x0XHRcclxuXHRcdFx0Ly9pZihjbGVhdmFnZS55PGJvdHRvbS55KWNsZWF2YWdlLnk9Ym90dG9tLnkrMztcclxuXHRcdFx0Y2hlY2tDbGVhdmFnZSh0aGlzLGJvdHRvbSk7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdGNsZWF2YWdlLFxyXG5cdFx0XHRcdHRvcEluLFxyXG5cdFx0XHRcdHRvcE1pZCxcclxuXHRcdFx0XHR0b3BPdXQsXHJcblx0XHRcdFx0YXJtcGl0LFxyXG5cdFx0XHRcdGJvdHRvbVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0XHR0b3BJbixcclxuXHRcdFx0XHR0b3BNaWQsXHJcblx0XHRcdFx0dG9wT3V0LFxyXG5cdFx0XHRcdGFybXBpdCxcclxuXHRcdFx0KTtcdFxyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFxyXG5cdFx0XHRjb3Zlck5pcHBsZXNJZkhhdmVOb0JyZWFzdHMoZXgsIGN0eCwgdGhpcylcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly9CUkVBU1RTXHRcdFxyXG5cdFx0Ly9jYWxjdWxhdGUgcG9pbnRzIC0gSSByZWFsbHkgZHVubm8gaG93LCBidXQgaXQgZG8gXHJcblx0XHRjb25zdCB0aXAgPSBhZGp1c3QoZXguYnJlYXN0LnRpcCwgMC4xLCAwKTtcclxuXHRcdGNvbnN0IGJvdCA9IGFkanVzdChleC5icmVhc3QuYm90LCAwLCAtMC4xKTtcclxuXHRcdFxyXG5cdFx0bGV0IGJvdHRvbSA9IHtcclxuXHRcdFx0eDogLTAuMixcclxuXHRcdFx0eTogYm90LnlcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdC8vaWYoY2xlYXZhZ2UueTxib3R0b20ueSljbGVhdmFnZS55PWJvdHRvbS55KzM7XHJcblx0XHRjaGVja0NsZWF2YWdlKHRoaXMsYm90dG9tKTtcclxuXHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdGNsZWF2YWdlLFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0dG9wTWlkLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdC8vdG9wLFxyXG5cdFx0XHR0aXAsXHJcblx0XHRcdGJvdCxcclxuXHRcdFx0Ym90dG9tXHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdGNsZWF2YWdlLFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0dG9wTWlkLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdC8vdG9wLFxyXG5cdFx0XHR0aXAsXHJcblx0XHRcdGJvdFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFR1YmVUb3BCcmVhc3RQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl1cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGlmIChjb3Zlck5pcHBsZXNJZkhhdmVOb0JyZWFzdHMoZXgsIGN0eCwgdGhpcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRsZXQgdG9wT3V0ID0gW107XHJcblx0XHQvL2ZvciB0cmFuc2Zvcm1hdGlvbnM6XHJcblx0XHRpZih0aGlzLmNoZXN0Q292ZXJhZ2U+MSl7XHJcblx0XHRcdGlmKHRoaXMuY2hlc3RDb3ZlcmFnZT4yKXRoaXMuY2hlc3RDb3ZlcmFnZT0xLjk7XHJcblx0XHRcdGxldCBjb3ZlcmFnZSA9IDEtKHRoaXMuY2hlc3RDb3ZlcmFnZS0xKVxyXG5cdFx0XHR0b3BPdXQgPSBnZXRMaW1iUG9pbnRzTmVnYXRpdmUoZXgubmVjay50b3AsZXguYnJlYXN0LnRvcCwxLSh0aGlzLmNoZXN0Q292ZXJhZ2UtMSksZXgubmVjay50b3AsZXgubmVjay5jdXNwLGV4LmNvbGxhcmJvbmUsIGV4dHJhY3RQb2ludChleC5icmVhc3QudG9wKSApO1x0XHRcclxuXHRcdFx0dG9wT3V0WzBdID0gZXh0cmFjdFBvaW50KHRvcE91dFswXSk7XHJcblx0XHRcdHRvcE91dFt0b3BPdXQubGVuZ3RoXSA9IGFkanVzdChleC5icmVhc3QudGlwLCAwLjEsIDApOyBcclxuXHRcdC8vbm9ybWFsOlxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSgxLXRoaXMuY2hlc3RDb3ZlcmFnZSxleC5icmVhc3QudG9wLGV4LmJyZWFzdC50aXApO1xyXG5cdFx0XHR0b3BPdXRbMF0gPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdFx0dG9wT3V0WzFdID0gYWRqdXN0KHRlbXAucmlnaHQucDIsIDAuMSwgMCk7IC8vdGlwXHJcblx0XHRcdFxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRjb25zdCB0b3BJbiA9IHtcclxuXHRcdFx0eCA6IC0wLjIsXHJcblx0XHRcdHkgOiB0b3BPdXRbMF0ueSArIDEsXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHR0b3BPdXRbMF0uY3AxID0ge1xyXG5cdFx0XHR4OiAodG9wT3V0WzBdLngrdG9wSW4ueCkgKiAwLjgsXHJcblx0XHRcdHk6IHRvcEluLnlcclxuXHRcdH07XHJcblx0XHJcblx0XHRjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuMSk7XHJcblx0XHRcclxuXHRcdGNvbnN0IGJvdHRvbSA9IHtcclxuXHRcdFx0eDogLTAuMixcclxuXHRcdFx0eTogYm90LnlcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0Li4udG9wT3V0LFxyXG5cdFx0XHRib3QsXHJcblx0XHRcdGJvdHRvbVxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0Li4udG9wT3V0LFxyXG5cdFx0XHRib3RcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUb3BDaGVzdFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgIC8qIGFib3ZlUGFydHMgICAgICAgICA6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXSwqL1xyXG4gICAgICAgICAgICBhYm92ZVBhcnRzXHRcdFx0OiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJwYXJ0cyBsZWdcIl0sXHJcblx0XHRcdC8qYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiZ3JvaW5cIiwgXCJwYXJ0cyBsZWdcIl0qL1xyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLndhaXN0Q292ZXJhZ2U+PTIpcmV0dXJuO1xyXG5cdFx0XHJcblx0XHQvL3dhaXN0IHBvaW50c1xyXG5cdFx0Y29uc3Qge2FybXBpdCxsYXQsd2Fpc3QsaGlwLG91dCxib3R0b219ID0gY2FsY1RvcEJvZHkuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHRvcCA9IHt4OiAtMC4yfVxyXG5cdFx0dG9wLnkgPSBleC5icmVhc3QgPyBleC5icmVhc3QuaW4ueSA6IGV4LmFybXBpdC55O1xyXG5cdFx0XHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRhcm1waXQsICBcclxuXHRcdFx0bGF0LFxyXG5cdFx0XHR3YWlzdCxcclxuXHRcdFx0aGlwLFxyXG5cdFx0XHRvdXQsXHJcblx0XHRcdGJvdHRvbSxcclxuXHRcdFx0dG9wLFxyXG5cdFx0XHRleHRyYWN0UG9pbnQoYXJtcGl0KVxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0YXJtcGl0LCBcclxuXHRcdFx0bGF0LFxyXG5cdFx0XHR3YWlzdCxcclxuXHRcdFx0aGlwLFxyXG5cdFx0XHRvdXQsXHJcblx0XHRcdGJvdHRvbVxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVG9wR3JvaW5QYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgLyogYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLCovXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHNcdFx0XHQ6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLCBcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0LyphYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcInBhcnRzIGxlZ1wiXSovXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMud2Fpc3RDb3ZlcmFnZT49MilyZXR1cm47XHJcblx0XHRcclxuXHRcdC8vd2Fpc3QgcG9pbnRzXHJcblx0XHRjb25zdCB7YXJtcGl0LGxhdCx3YWlzdCxoaXAsb3V0LGJvdHRvbX0gPSBjYWxjVG9wQm9keS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgdG9wID0ge3g6IC0wLjJ9XHJcblx0XHR0b3AueSA9IGV4LmJyZWFzdCA/IGV4LmJyZWFzdC5pbi55IDogZXguYXJtcGl0Lnk7XHJcblx0XHRcclxuXHRcdC8vYm90dG9tXHJcblx0XHRsZXQgYm90ID0gYWRqdXN0KGNsb25lKGV4Lmdyb2luKSwtMC4yLDApO1x0XHRcclxuXHRcdFxyXG5cdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMuZ2VuQ292ZXJhZ2UsZXguZ3JvaW4sZXh0cmFjdFBvaW50KGV4LnRoaWdoLnRvcCkpO1x0XHJcblx0XHRsZXQgYm90T3V0ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcclxuXHRcdC8vYm90dG9tIGN1cnZlIChoaXAgPyBoaXAgOiB3YWlzdClcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuNSwgb3V0LCBib3RPdXQgKTtcdFxyXG5cdFx0Ym90T3V0LmNwMSA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0Ym90T3V0LmNwMS54Kz10aGlzLmN1cnZlQm90WC05O1xyXG5cdFx0Ym90T3V0LmNwMS55Kz10aGlzLmN1cnZlQm90WSs1O1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGFybXBpdCwgIFxyXG5cdFx0XHRsYXQsXHJcblx0XHRcdHdhaXN0LFxyXG5cdFx0XHRoaXAsXHJcblx0XHRcdG91dCxcclxuXHRcdFx0Ym90T3V0LFxyXG5cdFx0XHRib3QsXHJcblx0XHRcdHRvcCxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KGFybXBpdClcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGFybXBpdCwgXHJcblx0XHRcdGxhdCxcclxuXHRcdFx0d2Fpc3QsXHJcblx0XHRcdGhpcCxcclxuXHRcdFx0b3V0LFxyXG5cdFx0XHRib3RPdXQsXHJcblx0XHRcdGJvdCxcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNUb3BCb2R5KGV4KXtcclxuXHRsZXQgYXJtcGl0ID0gY2xvbmUoZXguYXJtcGl0KTtcclxuXHRsZXQgbGF0ID0gY2xvbmUoZXgubGF0KTtcclxuXHQvL2xvb3NlbmVzcyBvZiB3YWlzdCBwb2ludHMgXHJcblx0bGV0IGhpcCA9IGFkanVzdChleC5oaXAsIDAsIDApO1xyXG5cdGxldCB3YWlzdCA9IGFkanVzdChleC53YWlzdCwodGhpcy50aGlja25lc3MgKiAwLjgpLCAwKTsgLy9sYXN0IHJlbW5hbnQgb2Ygc3dlYXRlclxyXG5cdFxyXG5cdFxyXG5cdC8vdG8gaGF2ZSB0b3AgbG9vc2UgYXJvdW5kIHRoZSB3YWlzdCAodGhlIHNhbWUgZnVuY3Rpb24gYXMgZm9yIGRyZXNzKVxyXG5cdHtcclxuXHRcdGxldCB0b3AgPSBhcm1waXQ7XHJcblx0XHRpZihsYXQpdG9wID0gbGF0O1xyXG5cdFx0bGV0IG1pZCA9IGxpbmVMaW5lSW50ZXJzZWN0aW9uKHRvcCxoaXAse3g6MCx5OndhaXN0Lnl9LHt4OjEwMCx5OndhaXN0Lnl9KTtcclxuXHRcdGlmKG1pZC54PndhaXN0Lngpe1xyXG5cdFx0XHR3YWlzdC54ID0gZmluZEJldHdlZW4od2Fpc3QueCwgbWlkLngsdGhpcy5zaWRlTG9vc2UpO1xyXG5cdFx0XHRzdHJhaWdodGVuQ3VydmUoYXJtcGl0LHdhaXN0LHRoaXMuc2lkZUxvb3NlKTtcclxuXHRcdFx0c3RyYWlnaHRlbkN1cnZlKHdhaXN0LGhpcCx0aGlzLnNpZGVMb29zZSk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRsZXQgb3V0O1xyXG5cdC8vY292ZXJhZ2Ugb2Ygd2Fpc3RcclxuXHRpZiAodGhpcy53YWlzdENvdmVyYWdlID4gMSl7XHJcblx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKDEtKHRoaXMud2Fpc3RDb3ZlcmFnZS0xKSxleC5hcm1waXQsd2Fpc3QpOyAvL1RISVM/Pz8/Pz8/P1xyXG5cdFx0d2Fpc3QgPSB2b2lkIDA7XHJcblx0XHRoaXAgPSB2b2lkIDA7XHJcblx0XHRvdXQgPSBzcC5sZWZ0LnAyO1xyXG5cdH1lbHNlIGlmICh0aGlzLndhaXN0Q292ZXJhZ2UgPj0gMCl7XHJcblx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKDEtdGhpcy53YWlzdENvdmVyYWdlLHdhaXN0LGhpcCk7XHJcblx0XHQvL3dhaXN0ID0gIGFkanVzdChleC5oaXAsIDAsIDApO1xyXG5cdFx0aGlwID0gdm9pZCAwO1xyXG5cdFx0b3V0ID0gc3AubGVmdC5wMjtcclxuICAgIH1lbHNle1xyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy53YWlzdENvdmVyYWdlKSxoaXAsZXgudGhpZ2gub3V0KTtcclxuXHRcdG91dCA9IHNwLmxlZnQucDI7XHJcbiAgICB9XHJcblx0XHJcblx0Ly9ib3R0b21cclxuXHRsZXQgYm90dG9tID0ge1xyXG5cdFx0XHR5Om91dC55LTMsXHJcblx0XHRcdHg6LTAuMixcclxuXHRcdH07XHJcblx0XHJcblx0Ym90dG9tLmNwMSA9IHtcclxuXHRcdHg6IGJvdHRvbS54ICogMC41ICsgb3V0LnggKiAwLjUsXHJcblx0XHR5OiBib3R0b20ueVxyXG5cdH07XHJcblx0XHJcblx0cmV0dXJuIHtcclxuXHRcdGFybXBpdDphcm1waXQsXHJcblx0XHRsYXQ6bGF0LFxyXG5cdFx0d2Fpc3Q6IHdhaXN0LFxyXG5cdFx0aGlwOiBoaXAsIFxyXG5cdFx0b3V0Om91dCwgXHJcblx0XHRib3R0b206IGJvdHRvbVxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCaWtpbmlUb3BCcmVhc3RQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl1cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5vdXRlck5lY2tDb3ZlcmFnZTx0aGlzLmlubmVyTmVja0NvdmVyYWdlKXRoaXMub3V0ZXJOZWNrQ292ZXJhZ2U9dGhpcy5pbm5lck5lY2tDb3ZlcmFnZTtcclxuXHRcdGlmKHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2U+dGhpcy5vdXRlck5lY2tDb3ZlcmFnZSl0aGlzLmlubmVyTmVja0NvdmVyYWdlPXRoaXMub3V0ZXJOZWNrQ292ZXJhZ2U7XHJcblx0XHRcclxuXHRcdGxldCBjdXNwID0gZXgubmVjay5jdXNwO1xyXG5cdFx0aWYoZXgudHJhcGV6aXVzKWN1c3A9ZXgudHJhcGV6aXVzO1xyXG5cdFx0bGV0IHNwID0gc3BsaXRDdXJ2ZSh0aGlzLm91dGVyTmVja0NvdmVyYWdlLGN1c3AsIGV4LmNvbGxhcmJvbmUpO1xyXG5cdFx0bGV0IHRvcE91dCA9IHNwLmxlZnQucDI7XHJcblx0XHRcdFx0XHJcblx0XHRpZih0aGlzLmlubmVyTmVja0NvdmVyYWdlPDApe1xyXG5cdFx0XHRzcCA9IHNwbGl0Q3VydmUoMSt0aGlzLmlubmVyTmVja0NvdmVyYWdlLCBleC5uZWNrLnRvcCwgY3VzcCk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0c3AgPSBzcGxpdEN1cnZlKHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2UsIGN1c3AsIGV4LmNvbGxhcmJvbmUpO1xyXG5cdFx0fVxyXG5cdFx0bGV0IHRvcEluID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHJcblx0XHQvL05PIEJSRUFTVFNcclxuXHRcdGlmIChleC5oYXNPd25Qcm9wZXJ0eShcImJyZWFzdFwiKSA9PT0gZmFsc2UpIHtcclxuXHRcdFx0bGV0IGFybXBpdCA9IGFkanVzdChleC5hcm1waXQsMCwwKTtcclxuXHRcdFx0bGV0IGJvdHRvbSA9IHtcclxuXHRcdFx0XHR4OiAtMC4yLFxyXG5cdFx0XHRcdHk6IGFybXBpdC55LTFcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGxldCBjbGVhdmFnZSA9IHtcclxuXHRcdFx0XHR4IDogLTAuMixcclxuXHRcdFx0XHR5IDogYm90dG9tLnkgKyAodGhpcy5yYWRpdXMqMilcclxuXHRcdFx0fTtcclxuXHRcdFx0Y2xlYXZhZ2UuY3AxID0ge1xyXG5cdFx0XHRcdHg6IGJvdHRvbS54ICsgKHRoaXMucmFkaXVzKjIpLFxyXG5cdFx0XHRcdHk6IGJvdHRvbS55ICsgdGhpcy5yYWRpdXNcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdHNwID0gc3BsaXRDdXJ2ZSgwLjUsY2xlYXZhZ2UsdG9wSW4pO1xyXG5cdFx0XHR0b3BJbi5jcDEgPSB7XHJcblx0XHRcdFx0eDogc3AubGVmdC5wMi54K3RoaXMuY3VydmVDbGVhdmFnZVgsXHJcblx0XHRcdFx0eTogc3AubGVmdC5wMi55K3RoaXMuY3VydmVDbGVhdmFnZVksXHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdGNsZWF2YWdlLFxyXG5cdFx0XHRcdHRvcEluLFxyXG5cdFx0XHRcdHRvcE91dCxcclxuXHRcdFx0XHRleHRyYWN0UG9pbnQoYXJtcGl0KSxcclxuXHRcdFx0XHRib3R0b21cclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0Y2xlYXZhZ2UsXHJcblx0XHRcdFx0dG9wSW4sXHJcblx0XHRcdFx0dG9wT3V0LFxyXG5cdFx0XHRcdGV4dHJhY3RQb2ludChhcm1waXQpXHJcblx0XHRcdCk7XHRcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzKGV4LCBjdHgsIHRoaXMpXHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vQlJFQVNUU1x0XHRcclxuXHRcdC8vY2FsY3VsYXRlIHBvaW50cyAtIEkgcmVhbGx5IGR1bm5vIGhvdywgYnV0IGl0IGRvIFxyXG5cdFx0Y29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcblx0XHRjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuMSk7XHJcblx0XHRcclxuXHRcdGxldCBib3R0b20gPSB7XHJcblx0XHRcdHg6IC0wLjIsXHJcblx0XHRcdHk6IGJvdC55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRsZXQgY2xlYXZhZ2UgPSB7XHJcblx0XHRcdHggOiAtMC4yLFxyXG5cdFx0XHR5IDogYm90dG9tLnkgKyAodGhpcy5yYWRpdXMqMilcclxuXHRcdH07XHJcblx0XHRjbGVhdmFnZS5jcDEgPSB7XHJcblx0XHRcdHg6IGJvdHRvbS54ICsgKHRoaXMucmFkaXVzKjIpLFxyXG5cdFx0XHR5OiBib3R0b20ueSArIHRoaXMucmFkaXVzXHJcblx0XHR9XHJcblx0XHRcdFxyXG5cdFx0c3AgPSBzcGxpdEN1cnZlKDAuNSxjbGVhdmFnZSx0b3BJbik7XHJcblx0XHR0b3BJbi5jcDEgPSB7XHJcblx0XHRcdFx0eDogc3AubGVmdC5wMi54K3RoaXMuY3VydmVDbGVhdmFnZVgsXHJcblx0XHRcdFx0eTogc3AubGVmdC5wMi55K3RoaXMuY3VydmVDbGVhdmFnZVksXHJcblx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0dG9wSW4sXHJcblx0XHRcdHRvcE91dCxcclxuXHRcdFx0Ly90b3AsXHJcblx0XHRcdHRpcCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHRib3R0b20sXHJcblx0XHRcdGNsZWF2YWdlLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0dG9wSW4sXHJcblx0XHRcdHRvcE91dCxcclxuXHRcdFx0Ly90b3AsXHJcblx0XHRcdHRpcCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHRib3R0b20sXHJcblx0XHRcdGNsZWF2YWdlLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQmFzZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG4gXHJcbmV4cG9ydCBjbGFzcyBUb3AgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcblx0XHRzdXBlcih7XHJcblx0XHRcdGNsb3RoaW5nTGF5ZXIgIDogQ2xvdGhlcy5MYXllci5NSUQsXHJcblx0XHRcdHRoaWNrbmVzczogMC42LFxyXG5cdFx0fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMzM1LCA4MDAlLCAzMCUsIDEpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzNSwgMTAwJSwgNDIlLCAxKVwiO1xyXG4gICAgfVxyXG59XHJcblx0XHJcbiBcclxuZXhwb3J0IGNsYXNzIFRlZSBleHRlbmRzIFRvcCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbGVhdmFnZU9wZW5lc3M6IDAuMyxcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xNixcclxuXHRcdFx0c2lkZUxvb3NlOiAwLFxyXG5cdFx0XHR3YWlzdENvdmVyYWdlOiAwLFxyXG5cdFx0XHRjdXJ2ZUNsZWF2YWdlWDowLFxyXG5cdFx0XHRjdXJ2ZUNsZWF2YWdlWTowLFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMSwgLy91c2VkIG9ubHkgYnkgRHJlc3NCcmVhc3RQYXJ0IGJ1dCBpbXBvcnRhbnRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0eyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExhY2luZ1BhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogVGVlUGFydFxyXG4gICAgICAgICAgICB9LHsgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLCAgXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBEcmVzc0JyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJTbGVldmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHRcclxuZXhwb3J0IGNsYXNzIExlb3RhcmQgZXh0ZW5kcyBUb3Age1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Y2xlYXZhZ2VPcGVuZXNzOiAwLjIsXHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMSxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC41LFxyXG5cdFx0XHRjdXJ2ZUNsZWF2YWdlWDogMixcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVk6IC0yLFxyXG5cdFx0XHRhcm1Db3ZlcmFnZTogMC44LFxyXG5cdFx0XHRzaWRlTG9vc2U6IDAsXHJcblx0XHRcdGdlbkNvdmVyYWdlOiAxLFxyXG5cdFx0XHRjdXJ2ZUJvdFg6IDYsXHJcblx0XHRcdGN1cnZlQm90WTogNixcclxuXHRcdFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMSwgLy91c2VkIG9ubHkgYnkgRHJlc3NCcmVhc3RQYXJ0IGJ1dCBpbXBvcnRhbnRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExlb3RhcmRQYXJ0XHJcbiAgICAgICAgICAgIH0seyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IERyZXNzQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhhbHRlclRvcCBleHRlbmRzIFRvcCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjMsXHJcblx0XHRcdG91dGVyTmVja0NvdmVyYWdlOiAwLjM1LFxyXG5cdFx0XHRpbm5lck5lY2tDb3ZlcmFnZTogMC4xNSxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVg6IDksXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VZOiAtOSxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC42NixcclxuXHRcdFx0c2lkZUxvb3NlOiAwLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhhbHRlclRvcEJyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSx7IFxyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogVG9wQ2hlc3RQYXJ0XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cdFxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUdWJlVG9wIGV4dGVuZHMgVG9wIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNoZXN0Q292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4zLFxyXG5cdFx0XHRzaWRlTG9vc2U6IDAsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBUdWJlVG9wQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9LHsgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLCAgXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBUb3BDaGVzdFBhcnRcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUdWJlVG9wU2xlZXZlcyBleHRlbmRzIFRvcCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjaGVzdENvdmVyYWdlOiAwLjMsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0c2lkZUxvb3NlOiAwLFxyXG5cdFx0XHRcclxuXHRcdFx0c2hvdWxkZXJDb3ZlcmFnZTogMCxcclxuXHRcdFx0YXJtQ292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0YXJtTG9vc2U6IDAuNSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFR1YmVUb3BCcmVhc3RQYXJ0XHJcbiAgICAgICAgICAgIH0seyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFRvcENoZXN0UGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IERldGFjaGVkU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBEZXRhY2hlZFNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJpa2luaVRvcCBleHRlbmRzIFRvcCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRyYWRpdXM6IDMuNixcclxuXHRcdFx0b3V0ZXJOZWNrQ292ZXJhZ2U6IDAuMzUsXHJcblx0XHRcdGlubmVyTmVja0NvdmVyYWdlOiAwLjAzLFxyXG5cdFx0XHRjdXJ2ZUNsZWF2YWdlWDogMTQsXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VZOiAtMTQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQmlraW5pVG9wQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN3aW1zdWl0IGV4dGVuZHMgVG9wIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0b3V0ZXJOZWNrQ292ZXJhZ2U6IDAuMzUsXHJcblx0XHRcdGlubmVyTmVja0NvdmVyYWdlOiAwLjE1LFxyXG5cdFx0XHRjdXJ2ZUNsZWF2YWdlWDogOSxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVk6IC05LFxyXG5cdFx0XHR3YWlzdENvdmVyYWdlOiAwLjIsXHJcblx0XHRcdHNpZGVMb29zZTogMCxcclxuXHRcdFx0Z2VuQ292ZXJhZ2U6IDEsXHJcblx0XHRcdGN1cnZlQm90WDogNixcclxuXHRcdFx0Y3VydmVCb3RZOiA2LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhhbHRlclRvcEJyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSx7IFxyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogVG9wR3JvaW5QYXJ0XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cdFxyXG4iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7Y29ubmVjdEVuZFBvaW50c30gZnJvbSBcIi4uL2RyYXcvZHJhd1wiO1xyXG5pbXBvcnQge3NlYW1XaWR0aCwgTGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge3NldFN0cm9rZUFuZEZpbGx9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuaW1wb3J0IHtnZXRQYXR0ZXJufSBmcm9tIFwiLi4vdXRpbC9wYXR0ZXJuXCI7XHJcbmltcG9ydCB7XHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNsYW1wLFxyXG4gICAgY2xvbmUsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJyYVRvcFN0cmFwUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBicmEgPSBjYWxjQnJhKGV4KTtcclxuICAgICAgICBpZiAoYnJhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZSgwLjIsIGV4Lm5lY2suY3VzcCwgZXguY29sbGFyYm9uZSk7XHJcbiAgICAgICAgY29uc3Qgc3RyYXAgPSB7fTtcclxuICAgICAgICBzdHJhcC50b3AgPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgICAgICBicmEudG9wLmNwMSA9IHtcclxuICAgICAgICAgICAgeDogc3RyYXAudG9wLnggLSAyLFxyXG4gICAgICAgICAgICB5OiBzdHJhcC50b3AueSAtIDE1XHJcbiAgICAgICAgfTtcclxuICAgICAgICBicmEudG9wLmNwMiA9IHtcclxuICAgICAgICAgICAgeDogYnJhLnRvcC54LFxyXG4gICAgICAgICAgICB5OiBicmEudG9wLnkgKyA1XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5zdHJva2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLnN0cmFwV2lkdGg7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgc3RyYXAudG9wLFxyXG4gICAgICAgICAgICBicmEudG9wKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEJyYUJvdFN0cmFwUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93UGFydHM6IFtcInBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBicmEgPSBjYWxjQnJhKGV4KTtcclxuICAgICAgICBpZiAoYnJhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHN0cmFwID0ge307XHJcbiAgICAgICAgc3RyYXAub3V0ID0ge1xyXG4gICAgICAgICAgICB4OiBleC5icmVhc3QuYm90LngsXHJcbiAgICAgICAgICAgIHk6IGV4LmJyZWFzdC5jbGVhdmFnZS55XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzdHJhcC5vdXRib3QgPSB7XHJcbiAgICAgICAgICAgIHg6IGV4LmJyZWFzdC5ib3QueCxcclxuICAgICAgICAgICAgeTogZXguYnJlYXN0LmJvdC55ICsgMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3RyYXAuYm90ID0ge1xyXG4gICAgICAgICAgICB4OiAtc2VhbVdpZHRoLFxyXG4gICAgICAgICAgICB5OiBleC5icmVhc3QuYm90LnkgKyAzXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzdHJhcC5taWQgPSB7XHJcbiAgICAgICAgICAgIHg6IC1zZWFtV2lkdGgsXHJcbiAgICAgICAgICAgIHk6IGV4LmJyZWFzdC5jbGVhdmFnZS55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5maWxsLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLnN0cm9rZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleCk7XHJcblxyXG4gICAgICAgIC8vIGJvdHRvbSBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgc3RyYXAub3V0LCBzdHJhcC5vdXRib3QsIHN0cmFwLmJvdCwgc3RyYXAubWlkLCBzdHJhcC5vdXQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCcmFQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgY29uc3QgYnJhID0gY2FsY0JyYShleCk7XHJcbiAgICAgICAgaWYgKGJyYSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBicmEub3V0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhicmEudG9wLCBicmEub3V0LCAwLjQsIDEpO1xyXG4gICAgICAgIGJyYS50b3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGV4LmJyZWFzdC5jbGVhdmFnZSwgYnJhLnRvcCwgMC42LCAyKTtcclxuXHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5maWxsLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLnN0cm9rZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleCk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBicmEudG9wLFxyXG4gICAgICAgICAgICBicmEub3V0LFxyXG4gICAgICAgICAgICBicmEudGlwLFxyXG4gICAgICAgICAgICBleC5icmVhc3QuYm90LFxyXG4gICAgICAgICAgICBleC5icmVhc3QuaW4sXHJcbiAgICAgICAgICAgIGV4LmJyZWFzdC5jbGVhdmFnZSxcclxuICAgICAgICAgICAgYnJhLnRvcCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY0JyYShleCkge1xyXG4gICAgaWYgKGV4Lmhhc093blByb3BlcnR5KFwiYnJlYXN0XCIpID09PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuNywgZXguYnJlYXN0LnRvcCwgZXguYnJlYXN0LnRpcCk7XHJcbiAgICBjb25zdCBicmEgPSB7XHJcbiAgICAgICAgb3V0OiBjbG9uZShzcC5yaWdodC5wMSksXHJcbiAgICAgICAgdGlwOiBjbG9uZShzcC5yaWdodC5wMilcclxuICAgIH07XHJcbiAgICBicmEudG9wID0ge1xyXG4gICAgICAgIHg6IGV4LmJyZWFzdC5ib3QueCxcclxuICAgICAgICB5OiBicmEub3V0LnkgKyAyXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGJyYTtcclxufVxyXG5cclxuY2xhc3MgQnJlYXN0V3JhcFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCwgaWdub3JlLCBhdmF0YXIpIHtcclxuICAgICAgICBpZiAoIWV4LmJyZWFzdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0b3AgPSBjbG9uZShleC5icmVhc3QudG9wKTtcclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKGNsYW1wKC0wLjI1ICsgYXZhdGFyLmdldERpbShcImJyZWFzdFNpemVcIikgKiAwLjAxLCAwLCAxKSwgZXguYnJlYXN0LnRvcCxcclxuICAgICAgICAgICAgZXguYnJlYXN0LnRpcCk7XHJcbiAgICAgICAgY29uc3QgdG9wU3Ryb2tlID0gc3AubGVmdC5wMjtcclxuICAgICAgICBjb25zdCB0aXBTdHJva2UgPSBzcC5yaWdodC5wMjtcclxuXHJcbiAgICAgICAgLy8gZG9uJ3QgZGlzcGxheSBuaXBwbGVzIGFuZCBvdGhlciBjaGVzdCBkZWNvcmF0aW9uc1xyXG4gICAgICAgIGxldCBjaGVzdERlY29yYXRpdmVJbmRleCA9IDA7XHJcbiAgICAgICAgbGV0IHBhcnQgPSBhdmF0YXIuZ2V0UGFydEluTG9jYXRpb24oXCJjaGVzdFwiLFxyXG4gICAgICAgICAgICBhdmF0YXIuZGVjb3JhdGl2ZVBhcnRzLFxyXG4gICAgICAgICAgICBjaGVzdERlY29yYXRpdmVJbmRleCk7XHJcbiAgICAgICAgd2hpbGUgKHBhcnQpIHtcclxuICAgICAgICAgICAgcGFydC5jb3ZlckNvbmNlYWwgPSBbXCJjaGVzdFwiXTtcclxuICAgICAgICAgICAgcGFydCA9IGF2YXRhci5nZXRQYXJ0SW5Mb2NhdGlvbihcImNoZXN0XCIsXHJcbiAgICAgICAgICAgICAgICBhdmF0YXIuZGVjb3JhdGl2ZVBhcnRzLFxyXG4gICAgICAgICAgICAgICAgKytjaGVzdERlY29yYXRpdmVJbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmZpbGwsXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuc3Ryb2tlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIHRvcCxcclxuICAgICAgICAgICAgZXguYnJlYXN0LnRpcCxcclxuICAgICAgICAgICAgZXguYnJlYXN0LmJvdCxcclxuICAgICAgICAgICAgZXguYnJlYXN0LmluLFxyXG4gICAgICAgICAgICBjb25uZWN0RW5kUG9pbnRzKGV4LmJyZWFzdC5pbiwgdG9wKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICB0b3BTdHJva2UsXHJcbiAgICAgICAgICAgIHRpcFN0cm9rZSxcclxuICAgICAgICAgICAgZXguYnJlYXN0LmJvdFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEJyZWFzdFdyYXBTdHJhcFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2NoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1BhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4LCBpZ25vcmUsIGF2YXRhcikge1xyXG4gICAgICAgIGxldCB0b3AgPSB7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IGV4LmFybXBpdC55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IG91dFRvcDtcclxuICAgICAgICBjb25zdCBhcm1waXQgPSBleHRyYWN0UG9pbnQoZXguYXJtcGl0KTtcclxuICAgICAgICBpZiAoZXguYnJlYXN0KSB7XHJcbiAgICAgICAgICAgIHRvcC55ID0gZXguYnJlYXN0LnRvcC55IC0gMjtcclxuICAgICAgICAgICAgb3V0VG9wID0gZXh0cmFjdFBvaW50KGV4LmJyZWFzdC50b3ApO1xyXG4gICAgICAgICAgICBvdXRUb3AuY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogb3V0VG9wLnggKiAwLjUsXHJcbiAgICAgICAgICAgICAgICB5OiB0b3AueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhcm1waXQuY3AxID0gc2ltcGxlUXVhZHJhdGljKG91dFRvcCwgYXJtcGl0LCAwLjUsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoXHJcbiAgICAgICAgICAgIGNsYW1wKHRoaXMuY2hlc3RDb3ZlcmFnZSArIGF2YXRhci5nZXREaW0oXCJicmVhc3RTaXplXCIpICogMC4wMSwgMCwgMSksXHJcbiAgICAgICAgICAgIGV4LmFybXBpdCxcclxuICAgICAgICAgICAgZXgud2Fpc3QpO1xyXG4gICAgICAgIGNvbnN0IG91dEJvdCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvdCA9IHtcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogb3V0Qm90LnkgLSAxXHJcbiAgICAgICAgfTtcclxuICAgICAgICBib3QuY3AxID0ge1xyXG4gICAgICAgICAgICB4OiBvdXRCb3QueCAqIDAuNSxcclxuICAgICAgICAgICAgeTogYm90LnlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIGJvdHRvbSBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgdG9wLCBvdXRUb3AsIGFybXBpdCwgb3V0Qm90LCBib3QpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFBhbnRpZXNQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImdyb2luXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGdyb2luXCIsIFwicGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93UGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgaWYgKGV4Lmhhc093blByb3BlcnR5KFwiZ3JvaW5cIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhbnRpZXMgPSB7fTtcclxuICAgICAgICBwYW50aWVzLnRvcCA9IHtcclxuICAgICAgICAgICAgeDogLXNlYW1XaWR0aCxcclxuICAgICAgICAgICAgeTogZXgucGVsdmlzLnlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUoMC45LCBleC53YWlzdCwgZXguaGlwKTtcclxuICAgICAgICBwYW50aWVzLm91dCA9IHNwLnJpZ2h0LnAxO1xyXG4gICAgICAgIHBhbnRpZXMub3V0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhwYW50aWVzLnRvcCwgcGFudGllcy5vdXQsIDAuNCwgLTMpO1xyXG4gICAgICAgIHBhbnRpZXMub3V0Ym90ID0gc3AucmlnaHQucDI7XHJcblxyXG4gICAgICAgIHBhbnRpZXMuYm90ID0ge1xyXG4gICAgICAgICAgICB4OiAtc2VhbVdpZHRoLFxyXG4gICAgICAgICAgICB5OiBleC5ncm9pbi55XHJcbiAgICAgICAgfTtcclxuICAgICAgICBwYW50aWVzLmJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IHBhbnRpZXMub3V0Ym90LngsXHJcbiAgICAgICAgICAgIHk6IHBhbnRpZXMub3V0Ym90LnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHBhbnRpZXMuYm90LmNwMiA9IHtcclxuICAgICAgICAgICAgeDogcGFudGllcy5ib3QueCArIDUsXHJcbiAgICAgICAgICAgIHk6IHBhbnRpZXMuYm90LnlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBwYW50aWVzLnRvcCxcclxuICAgICAgICAgICAgcGFudGllcy5vdXQsXHJcbiAgICAgICAgICAgIHBhbnRpZXMub3V0Ym90LFxyXG4gICAgICAgICAgICBwYW50aWVzLmJvdCxcclxuICAgICAgICAgICAgcGFudGllcy50b3ApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblxyXG4gICAgICAgIC8vIG9ubHkgZHJhdyBvdXRsaW5lIGZvciB0b3AgYW5kIGJvdHRvbVxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgcGFudGllcy50b3AsIHBhbnRpZXMub3V0LCBwYW50aWVzLm91dGJvdCwgcGFudGllcy5ib3QpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVW5kZXJ3ZWFyIGV4dGVuZHMgQ2xvdGhpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLkJBU0V9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQnJhIGV4dGVuZHMgVW5kZXJ3ZWFyIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdHJva2UoKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIFwiaHNsKDAsMzAlLDMwJSlcIjtcclxuICAgIC8vIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgwLDUwJSw1MCUpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCcmFCb3RTdHJhcFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJyYVBhcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCcmVhc3RXcmFwIGV4dGVuZHMgVW5kZXJ3ZWFyIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNoZXN0Q292ZXJhZ2U6IDAuNixcclxuICAgICAgICAgICAgdGhpY2tuZXNzICAgIDogMC41LFxyXG4gICAgICAgICAgICB3cmFwU2l6ZSAgICAgOiAzMCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgICAgICB0aGlzLmZpbGwgPSBnZXRQYXR0ZXJuKFwiYmFuZGFnZXNcIiwgdGhpcy53cmFwU2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCcmVhc3RXcmFwUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQnJlYXN0V3JhcFN0cmFwUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYW50aWVzIGV4dGVuZHMgVW5kZXJ3ZWFyIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgwLDUwJSw1MCUpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBQYW50aWVzUGFydFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7Y29ubmVjdEVuZFBvaW50cywgY292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG4vL2ltcG9ydCB7c2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uL3V0aWwvZHJhd1wiO1xyXG5pbXBvcnQge1xyXG4gICAgZXh0cmFjdFBvaW50LFxyXG5cdGRyYXdQb2ludHMsIFxyXG5cdHNwbGl0Q3VydmUsXHJcblx0YnJlYWtQb2ludCxcclxuXHRjbG9uZSxcclxuXHQvL25vbmUsXHJcblx0YWRqdXN0LFxyXG5cdHJlZmxlY3QsXHJcblx0aW50ZXJwb2xhdGVDdXJ2ZSxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7XHJcblx0Z2V0TGltYlBvaW50cyxcclxuXHRnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCxcclxuXHRzdHJhaWdodGVuQ3VydmUsXHJcblx0ZmluZEJldHdlZW4sXHJcblx0bGluZUxpbmVJbnRlcnNlY3Rpb24sXHJcblx0bGluZUN1YmljSW50ZXJzZWN0aW9uLFxyXG5cdHBvaW50TGluZUludGVyc2VjdGlvbixcclxuXHRnZXRMYWNpbmdQb2ludHMsXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRHJlc3NCcmVhc3RQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl1cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge1xyXG5cdFx0XHRjbGVhdmFnZUJvdCxjbGVhdmFnZVRvcFxyXG5cdFx0fSA9IGNhbGNEcmVzc0Jhc2UuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuICAgICAgICAvLyBjbGlwIGRyYXdpbmcgdG8gaW5zaWRlIHRoZSBkcmVzc1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCx7eDowLHk6MH0sYWRqdXN0KGNsZWF2YWdlQm90LC10aGlzLnRoaWNrbmVzcyowLjM4LDApLGFkanVzdChjbGVhdmFnZVRvcCwtdGhpcy50aGlja25lc3MqMC4zOCwwKSx7eDoxMDAseToyNTB9LHt4OjEwMCx5OjB9KTtcclxuICAgICAgICBjdHguY2xpcCgpOyAvL1RPIERPIC0gcXVpY2tmaXgsIHRoZSBhZGp1c3RtZW50IG5lZWRzIHRvIGJlIGxvb2tlZCBpbnRvIHByb3Blcmx5XHJcblxyXG4gICAgICAgIC8vbmlwcGxlcyB3aXRoIG5vIGJyZWFzdHNcclxuICAgICAgICBpZiAoY292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzKGV4LCBjdHgsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG5cdFx0Y29uc3QgdG9wID0gYWRqdXN0KGV4LmJyZWFzdC50b3AsIDAuNSwgMC43KTtcclxuICAgICAgICBjb25zdCB0aXAgPSBhZGp1c3QoZXguYnJlYXN0LnRpcCwgMC4xLCAwKTtcclxuICAgICAgICBjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuNik7XHJcbiAgICAgICAgY29uc3QgaW5uZXIgPSBhZGp1c3QoZXguYnJlYXN0LmluLCAtMC45LCAtMC41KTtcclxuICAgICAgICBjb25zdCBjbGVhdmFnZSA9IGFkanVzdChleC5icmVhc3QuY2xlYXZhZ2UsIC0wLjYsIDApO1xyXG5cdFx0XHJcblx0XHQvKlxyXG5cdFx0Y29uc3QgdG9wID0gYWRqdXN0KGV4LmJyZWFzdC50b3AsIDAuMSwgMC4yKTtcclxuICAgICAgICBjb25zdCB0aXAgPSBhZGp1c3QoZXguYnJlYXN0LnRpcCwgMC4xLCAwKTtcclxuICAgICAgICBjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuMSk7XHJcbiAgICAgICAgY29uc3QgaW5uZXIgPSBhZGp1c3QoZXguYnJlYXN0LmluLCAtMC40LCAwKTtcclxuICAgICAgICBjb25zdCBjbGVhdmFnZSA9IGFkanVzdChleC5icmVhc3QuY2xlYXZhZ2UsIC0wLjEsIDApO1xyXG5cdFx0Ki9cclxuXHRcdFxyXG5cdFx0Y29uc3QgdG9wQWdhaW4gPSBhZGp1c3QoY29ubmVjdEVuZFBvaW50cyhjbGVhdmFnZSwgdG9wKSwgMCwgMC4yKTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCB0b3AsdGlwLGJvdCxpbm5lciwgY2xlYXZhZ2UsIHRvcEFnYWluKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgICAvL2xpbmUgc2hvd2luZyBjb250dXJlIG9mIGJyZWFzdHNcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHRvcCwgdGlwLCBib3QpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbi8vVEhJUyBORUVEUyBUTyBCRSBGSVhFRCFcclxuICAgICAgICAvL3JlcGFpciBjbGVhdmFnZSBsaW5lXHJcbiBcclxuIFxyXG4vLyBGQUkhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhXHJcbiBcclxuIFxyXG4gXHJcbiBcclxuIFxyXG4gXHJcbiBcclxuIFxyXG4vLyBGQUkhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVxyXG4gXHJcbiBcclxuIFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LGNsZWF2YWdlQm90LGNsZWF2YWdlVG9wKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERyZXNzQmFzZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzXHRcdFx0OiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJwYXJ0cyBsZWdcIixcImRlY29yYXRpdmVQYXJ0cyBsZWdcIl0sIFxyXG5cdFx0XHRhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcImxlZ1wiXSwgXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgY2xlYXZhZ2VPcGVuZXNzOiAwLjMsXHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0c2lkZUxvb3NlOiAwLFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC40LFxyXG5cdFx0XHRsZWdMb29zZTogMCxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVg6MCxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVk6MCxcclxuXHRcdFx0YnVzdGxlOiBmYWxzZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG5cdFx0Y29uc3Qge1xyXG5cdFx0XHRjbGVhdmFnZUJvdCxjbGVhdmFnZVRvcCxuZWNrLGNvbGxhcmJvbmUsYXJtcGl0LHdhaXN0LGhpcCxvdXRlclBvaW50cyxzaG91bGRlcixwaXQsYm90dG9tLFxyXG5cdFx0fSA9IGNhbGNEcmVzc0Jhc2UuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcdFx0XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsICBcclxuXHRcdFx0Y2xlYXZhZ2VUb3AsICBcclxuXHRcdFx0bmVjaywgXHJcblx0XHRcdHNob3VsZGVyLCBcclxuXHRcdFx0cGl0LCAgXHJcblx0XHRcdC4uLm91dGVyUG9pbnRzLCBcclxuXHRcdFx0Ym90dG9tXHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsICBcclxuXHRcdFx0Y2xlYXZhZ2VUb3AsIFxyXG5cdFx0XHRuZWNrLCBcclxuXHRcdFx0c2hvdWxkZXIsIFxyXG5cdFx0XHRicmVha1BvaW50LCBcclxuXHRcdFx0cGl0LCAgIFxyXG5cdFx0XHQuLi5vdXRlclBvaW50cyxcclxuXHRcdFx0Ym90dG9tXHJcblx0XHQpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNEcmVzc0NsZWF2YWdlKGV4LGJvdHRvbSl7XHJcblx0Ly9jbGVhdmFnZSBsb3dlc3QgcG9pbnRcclxuXHRsZXQgY2xlYXZhZ2VCb3Q7XHJcblx0bGV0IGNsZWF2YWdlVG9wO1xyXG5cdGxldCBuZWNrO1xyXG5cdHtcclxuXHRcdGxldCBzcCA9IHNwbGl0Q3VydmUodGhpcy5jbGVhdmFnZUNvdmVyYWdlLGV4Lm5lY2suY3VzcCwgZXguZ3JvaW4pO1xyXG5cdFx0Y2xlYXZhZ2VCb3QgPSB7eDotMC4yLCB5OiBzcC5sZWZ0LnAyLnl9O1xyXG5cdH1cclxuXHJcblx0Ly9jbGVhdmFnZSBoaWdoZXN0IHBvaW50XHJcblx0aWYodGhpcy5jbGVhdmFnZU9wZW5lc3M8MCl7Ly90dXJ0bGVuZWNrXHJcblx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKDErdGhpcy5jbGVhdmFnZU9wZW5lc3MsZXgubmVjay50b3AsZXgubmVjay5jdXNwKTtcclxuXHRcdGNsZWF2YWdlVG9wID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG5cdFx0bmVjayA9IGNsb25lKGV4Lm5lY2suY3VzcCk7XHJcblx0fWVsc2UgaWYodGhpcy5jbGVhdmFnZU9wZW5lc3M+MSl7IC8vZXZlbiB0byBzaG91bGRlcnMsIG1lc3N5IHdpcFxyXG5cdFx0bGV0IHNwID0gc3BsaXRDdXJ2ZSh0aGlzLmNsZWF2YWdlT3BlbmVzcy0xLGV4LmNvbGxhcmJvbmUsIGV4LnNob3VsZGVyKTtcclxuXHRcdGNsZWF2YWdlVG9wPWV4dHJhY3RQb2ludChzcC5sZWZ0LnAyKTtcdFx0XHRcclxuXHR9ZWxzZXtcclxuXHRcdGxldCBzcCA9IHNwbGl0Q3VydmUodGhpcy5jbGVhdmFnZU9wZW5lc3MsZXgubmVjay5jdXNwLCBleC5jb2xsYXJib25lKTtcclxuXHRcdGNsZWF2YWdlVG9wID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG5cdH1cclxuXHRcclxuXHQvL2NoZWNrIGlmIGNsZWF2YWdlIGdvZXMgYmVsbG93IHRoZSBib3R0b20gb2YgdGhlIGdhcm1lbnQsIGZpeGVzIGl0IGlmIHNvXHJcblx0aWYoIXRoaXMubGFjaW5nJiZib3R0b20pe1xyXG5cdFx0aWYoY2xlYXZhZ2VCb3QueTxib3R0b20ueSljbGVhdmFnZUJvdC55PWJvdHRvbS55KzM7XHJcblx0fVxyXG5cdFxyXG5cdC8vYW5kIGNhbGN1bGF0ZXMgdGhlIGNsZWF2YWdlIGN1cnZlXHJcblx0bGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjUsY2xlYXZhZ2VCb3QsY2xlYXZhZ2VUb3ApOyAvL2NsZWF2YWdlIGN1cnZlXHJcblx0Y2xlYXZhZ2VUb3AuY3AxID0ge1xyXG5cdFx0eDogc3AubGVmdC5wMi54K3RoaXMuY3VydmVDbGVhdmFnZVgsXHJcblx0XHR5OiBzcC5sZWZ0LnAyLnkrdGhpcy5jdXJ2ZUNsZWF2YWdlWSxcclxuXHR9O1xyXG5cdFxyXG5cdHJldHVybiB7XHJcblx0XHRjbGVhdmFnZUJvdDogY2xlYXZhZ2VCb3QsXHJcblx0XHRjbGVhdmFnZVRvcDogY2xlYXZhZ2VUb3AsXHJcblx0XHRuZWNrOiBuZWNrLFxyXG5cdH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjRHJlc3NCYXNlKGV4KXtcclxuXHQvL2FybVxyXG5cdGxldCBzaG91bGRlciA9IGNsb25lKGV4LmNvbGxhcmJvbmUpO1xyXG5cdGxldCBwaXQgPSBjbG9uZShleC5hcm1waXQpO1xyXG5cdFxyXG5cdC8vd2Fpc3RcclxuXHRsZXQgY29sbGFyYm9uZSA9IGNsb25lKGV4LmNvbGxhcmJvbmUpO1xyXG5cdGxldCBhcm1waXQgPSBjbG9uZShleC5hcm1waXQpO1xyXG5cdGxldCBsYXQgPSBjbG9uZShleC5sYXQpO1xyXG5cdGxldCBoaXAgPSBhZGp1c3QoZXguaGlwLCAwLCAwKTtcclxuXHRsZXQgd2Fpc3QgPSBhZGp1c3QoZXgud2Fpc3QsIDAsIDApOyAvL2FkanVzdChleC53YWlzdCwodGhpcy50aGlja25lc3MgKiAwLjgpLCAwKTsgLy9sYXN0IHJlbW5hbnQgb2Ygc3dlYXRlclxyXG5cdFxyXG5cdC8vdG8gaGF2ZSBkcmVzcyBsb29zZSBhcm91bmQgdGhlIHdhaXN0XHJcblx0e1xyXG5cdFx0Y29uc3QgdG9wID0gbGF0ID8gbGF0IDogYXJtcGl0O1xyXG5cdFx0bGV0IG1pZCA9IGxpbmVMaW5lSW50ZXJzZWN0aW9uKHRvcCxoaXAse3g6MCx5OndhaXN0Lnl9LHt4OjEwMCx5OndhaXN0Lnl9KTtcclxuXHRcdGlmKG1pZC54PndhaXN0Lngpe1xyXG5cdFx0XHR3YWlzdC54ID0gZmluZEJldHdlZW4od2Fpc3QueCwgbWlkLngsdGhpcy5zaWRlTG9vc2UpO1xyXG5cdFx0XHRzdHJhaWdodGVuQ3VydmUoYXJtcGl0LHdhaXN0LHRoaXMuc2lkZUxvb3NlKTtcclxuXHRcdFx0c3RyYWlnaHRlbkN1cnZlKHdhaXN0LGhpcCx0aGlzLnNpZGVMb29zZSk7XHJcblx0XHR9LyplbHNle1xyXG5cdFx0XHRoaXAgPSBleHRyYWN0UG9pbnQoaGlwKTtcclxuXHRcdH0qL1xyXG5cdH1cclxuXHQvL2lmKHdhaXN0Lng8YXJtcGl0Lngpd2Fpc3QueCA9IGZpbmRCZXR3ZWVuKHdhaXN0LngsIGZpbmRCZXR3ZWVuKGFybXBpdC54LGhpcC54LDAuNSksdGhpcy5zaWRlTG9vc2UpO1xyXG5cclxuXHRcclxuXHRcclxuXHQvL2xvd2VyIHdhaXN0IGFuZCBsZWdzXHJcblx0bGV0IG91dGVyUG9pbnRzO1xyXG5cdGlmKHRoaXMubGVnQ292ZXJhZ2U8MCl7XHJcblx0XHRvdXRlclBvaW50cyA9IGdldExpbWJQb2ludHMoYXJtcGl0LGhpcCwxK3RoaXMubGVnQ292ZXJhZ2UsYXJtcGl0LGxhdCx3YWlzdCxoaXApO1xyXG5cdH1lbHNlIGlmKHRoaXMubGVnQ292ZXJhZ2U9PTApe1xyXG5cdFx0b3V0ZXJQb2ludHMgPSBbYXJtcGl0LGxhdCx3YWlzdCxoaXBdO1xyXG5cdH1lbHNle1xyXG5cdFx0bGV0IHdhaXN0UG9pbnRzID0gW2FybXBpdCxsYXQsd2Fpc3RdO1xyXG5cdFx0bGV0IGxlZ1BvaW50cztcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5sZWdMb29zZT4wKXtcclxuXHRcdFx0bGVnUG9pbnRzID0gZ2V0TGltYlBvaW50cyhoaXAsZXguYW5rbGUub3V0LHRoaXMubGVnQ292ZXJhZ2UsaGlwLGV4LnRoaWdoLm91dCk7XHJcblx0XHRcdGxldCB0b3RhbExlZ0xlbmd0aCA9IGhpcC55LSggKGhpcC55LWV4LmFua2xlLm91dC55KSp0aGlzLmxlZ0NvdmVyYWdlICk7XHJcblx0XHRcdGlmICh0b3RhbExlZ0xlbmd0aDxleC5ncm9pbi55KXsgXHJcblx0XHRcdFx0bGVnUG9pbnRzID0gW107XHJcblx0XHRcdFx0bGVnUG9pbnRzW2xlZ1BvaW50cy5sZW5ndGhdID0gY2xvbmUoaGlwKTtcclxuXHRcdFx0XHRsZWdQb2ludHNbbGVnUG9pbnRzLmxlbmd0aF0gPSBjbG9uZShleC50aGlnaC5vdXQpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKHRoaXMuYnVzdGxlKXtcclxuXHRcdFx0XHRcdGxlZ1BvaW50c1tsZWdQb2ludHMubGVuZ3RoXSA9IGV4dHJhY3RQb2ludChleC50aGlnaC5vdXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRsZWdQb2ludHNbbGVnUG9pbnRzLmxlbmd0aC0xXS55ID0gdG90YWxMZWdMZW5ndGg7XHJcblx0XHRcdFx0bGVnUG9pbnRzW2xlZ1BvaW50cy5sZW5ndGgtMV0ueCArPSB0aGlzLmxlZ0xvb3NlKjMwKnRoaXMubGVnQ292ZXJhZ2U7XHJcblx0XHRcdFx0XHJcblx0XHRcdH0gXHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bGVnUG9pbnRzID0gZ2V0TGltYlBvaW50cyhoaXAsZXguYW5rbGUub3V0LHRoaXMubGVnQ292ZXJhZ2UsaGlwLGV4LnRoaWdoLm91dCxleC5rbmVlLm91dCxleC5jYWxmLm91dCxleC5hbmtsZS5vdXQpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRvdXRlclBvaW50cyA9IHdhaXN0UG9pbnRzLmNvbmNhdChsZWdQb2ludHMpO1xyXG5cdH1cclxuXHRcclxuXHQvL2JvdHRvbVxyXG5cdGxldCBib3R0b20gPSB7XHJcblx0XHRcdHk6b3V0ZXJQb2ludHNbb3V0ZXJQb2ludHMubGVuZ3RoLTFdLnksXHJcblx0XHRcdHg6LTAuMSxcclxuXHRcdH07XHJcblx0XHJcblx0Ly9jbGVhdmFnZVxyXG5cdGNvbnN0IHtcclxuXHRcdGNsZWF2YWdlQm90LGNsZWF2YWdlVG9wLG5lY2tcclxuXHR9ID0gY2FsY0RyZXNzQ2xlYXZhZ2UuY2FsbCh0aGlzLGV4LGJvdHRvbSk7XHJcblx0XHJcblx0Ly9ib3R0b20gY3VydmVcclxuXHRvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0ueSArPSAyO1xyXG5cdGJvdHRvbS55ICs9IC0yO1xyXG5cdGJvdHRvbS5jcDEgPSB7XHJcblx0XHR4OiBib3R0b20ueCAqIDAuNSArIG91dGVyUG9pbnRzW291dGVyUG9pbnRzLmxlbmd0aC0xXS54ICogMC41LFxyXG5cdFx0eTogYm90dG9tLnlcclxuXHR9O1xyXG5cdFxyXG5cdHJldHVybiB7XHJcblx0XHRcdGNsZWF2YWdlQm90OiBjbGVhdmFnZUJvdCxcclxuXHRcdFx0Y2xlYXZhZ2VUb3A6IGNsZWF2YWdlVG9wLFxyXG5cdFx0XHRuZWNrOm5lY2ssXHJcblx0XHRcdGNvbGxhcmJvbmU6IGNvbGxhcmJvbmUsXHJcblx0XHRcdGFybXBpdDphcm1waXQsXHJcblx0XHRcdHdhaXN0OiB3YWlzdCxcclxuXHRcdFx0aGlwOiBoaXAsIFxyXG5cdFx0XHRcclxuXHRcdFx0b3V0ZXJQb2ludHM6b3V0ZXJQb2ludHMsXHJcblx0XHRcdFxyXG5cdFx0XHRzaG91bGRlcjpzaG91bGRlcixcclxuXHRcdFx0cGl0OnBpdCxcclxuXHRcdFx0IFxyXG5cdFx0XHRib3R0b206IGJvdHRvbVxyXG5cdFx0fTtcclxuXHRcclxuXHRcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBEZXRhY2hlZFNsZWV2ZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQVJNUyxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJhcm1cIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgYXJtXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGFybVwiLCBcInBhcnRzIGhhbmRcIl0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBzaG91bGRlckNvdmVyYWdlOiAtMC4xLFxyXG5cdFx0XHRcclxuXHRcdFx0YXJtQ292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0YXJtTG9vc2U6IDAsXHJcblx0XHRcdH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGlmKHRoaXMuYXJtQ292ZXJhZ2U8PTApcmV0dXJuO1xyXG5cdFx0XHJcbiAgICAgICAgbGV0IHtcclxuICAgICAgICAgICBvdXRlckFybVBvaW50cyxcclxuXHRcdCAgIGlubmVyQXJtUG9pbnRzXHJcbiAgICAgICAgfSA9IGNhbGNTdXBlclNsZWV2ZS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuXHRcdGlmKHRoaXMuc2hvdWxkZXJDb3ZlcmFnZT49MSl7XHJcblx0XHRcdGNvbnN0IGNvbl9jb2xsYXJib25lID0gYWRqdXN0KGV4LmNvbGxhcmJvbmUsLTAuNSwwKTtcclxuXHRcdFx0Y29uc3QgY29uX2FybXBpdCA9IGFkanVzdChleC5hcm1waXQsLTAuNSwwKTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLCBcclxuXHRcdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0XHRjb25uZWN0RW5kUG9pbnRzKGNvbl9hcm1waXQsY29uX2NvbGxhcmJvbmUpXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsIFxyXG5cdFx0XHRcdC4uLmlubmVyQXJtUG9pbnRzXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRpZih0aGlzLnNob3VsZGVyQ292ZXJhZ2U+MCl7XHRcdFx0XHJcblx0XHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDEtdGhpcy5zaG91bGRlckNvdmVyYWdlLGV4LmNvbGxhcmJvbmUsZXguc2hvdWxkZXIpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0Ly9ERUxUT0lEUyEhISFcdFx0XHJcblx0XHRcdFx0aWYoZXguZGVsdG9pZHMgJiYgZXguY29sbGFyYm9uZS55IT1leC5kZWx0b2lkcy55KXtcclxuXHRcdFx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKDEtdGhpcy5zaG91bGRlckNvdmVyYWdlLGV4LmNvbGxhcmJvbmUsZXguZGVsdG9pZHMpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0b3V0ZXJBcm1Qb2ludHNbMF09ZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7IFxyXG5cdFx0XHRcdG91dGVyQXJtUG9pbnRzWzFdPXRlbXAucmlnaHQucDI7IFxyXG5cdFx0XHRcdFxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy5zaG91bGRlckNvdmVyYWdlKSxleC5zaG91bGRlcixleC5lbGJvdy5vdXQpO1xyXG5cdFx0XHRcdG91dGVyQXJtUG9pbnRzLnNwbGljZSgwLCAxKTtcclxuXHRcdFx0XHRpZihleC5kZWx0b2lkcyAmJiBleC5jb2xsYXJib25lLnkhPWV4LmRlbHRvaWRzLnkpIG91dGVyQXJtUG9pbnRzLnNwbGljZSgwLCAxKTtcclxuXHRcdFx0XHRvdXRlckFybVBvaW50c1swXT1leHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTsgXHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsIFxyXG5cdFx0XHRcdC4uLmlubmVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdG91dGVyQXJtUG9pbnRzWzBdXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN1cGVyU2xlZXZlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImFybVwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGFybUNvdmVyYWdlOiAwLjUsXHJcblx0XHRcdGFybUxvb3NlOiAwLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGlmKHRoaXMuYXJtQ292ZXJhZ2U8PTApcmV0dXJuO1xyXG5cdFx0XHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgIG91dGVyQXJtUG9pbnRzLFxyXG5cdFx0ICAgaW5uZXJBcm1Qb2ludHNcclxuICAgICAgICB9ID0gY2FsY1N1cGVyU2xlZXZlLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcblx0XHRjb25zdCBjb25fY29sbGFyYm9uZSA9IGFkanVzdChleC5jb2xsYXJib25lLC0wLjUsMCk7XHJcblx0XHRjb25zdCBjb25fYXJtcGl0ID0gYWRqdXN0KGV4LmFybXBpdCwtMC41LDApO1xyXG5cdFx0XHRcdFxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsIFxyXG5cdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0Y29ubmVjdEVuZFBvaW50cyhjb25fYXJtcGl0LGNvbl9jb2xsYXJib25lKVxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblxyXG5cdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHQuLi5vdXRlckFybVBvaW50cywgXHJcblx0XHRcdC4uLmlubmVyQXJtUG9pbnRzXHJcblx0XHQpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY1N1cGVyU2xlZXZlKGV4KSB7XHJcblx0bGV0IG91dGVyQXJtUG9pbnRzID0gW107XHJcblx0bGV0IGlubmVyQXJtUG9pbnRzID0gW107XHJcblx0XHJcblx0Ly9sb29zZSAvL1xyXG5cdGlmICh0aGlzLmFybUxvb3NlPjApe1xyXG5cdFx0bGV0IGlubmVyRW5kUG9pbnQgPSBhZGp1c3QoZXgud3Jpc3QuaW4sMCwwKTtcclxuXHRcdGlubmVyRW5kUG9pbnQueSA9IGV4LmhhbmQudGlwLnk7XHJcblxyXG5cdFx0bGV0IHNob3VsZGVyID0gYWRqdXN0KGV4LnNob3VsZGVyLDAuNzUqKDUqdGhpcy5hcm1Mb29zZSksMCk7XHJcblx0XHRsZXQgZGVsdG9pZDsgLy9ERUxUT0lEISEhXHJcblx0XHRpZihleC5kZWx0b2lkcyAmJiBleC5kZWx0b2lkcy55ICE9IGV4LmNvbGxhcmJvbmUueSlkZWx0b2lkID0gYWRqdXN0KGV4LmRlbHRvaWRzLDEqKDUqdGhpcy5hcm1Mb29zZSksMCk7XHJcblx0XHRsZXQga251Y2tsZSA9IGFkanVzdChleC5oYW5kLmtudWNrbGUsMS41Kig1KnRoaXMuYXJtTG9vc2UpLDApO1xyXG5cdFx0bGV0IHRpcD1hZGp1c3QoZXguaGFuZC50aXAsMSooNSp0aGlzLmFybUxvb3NlKSwwKTtcclxuXHRcclxuXHRcdG91dGVyQXJtUG9pbnRzID0gZ2V0TGltYlBvaW50cyhleC5jb2xsYXJib25lLGV4LmhhbmQucGFsbSx0aGlzLmFybUNvdmVyYWdlLGV4LmNvbGxhcmJvbmUsZGVsdG9pZCxzaG91bGRlcixrbnVja2xlLHRpcCk7XHJcbiBcdFx0XHJcblx0XHRpbm5lckFybVBvaW50cyA9IGdldExpbWJQb2ludHNBYm92ZVBvaW50KG91dGVyQXJtUG9pbnRzW291dGVyQXJtUG9pbnRzLmxlbmd0aC0xXSx0cnVlLGV4LmFybXBpdCxpbm5lckVuZFBvaW50KTtcclxuXHRcdGlmKHR5cGVvZiBpbm5lckFybVBvaW50c1swXSAhPT0gXCJ1bmRlZmluZWRcIil7aW5uZXJBcm1Qb2ludHNbMF0ueCAtPTEqKDUqdGhpcy5hcm1Mb29zZSl9IFxyXG5cdFx0aWYodHlwZW9mIGlubmVyQXJtUG9pbnRzWzFdICE9PSBcInVuZGVmaW5lZFwiKXtpbm5lckFybVBvaW50c1sxXS54IC09MSooNSp0aGlzLmFybUxvb3NlKX1cclxuXHQvL2ZpdHRpbmdcclxuXHR9ZWxzZXtcclxuXHRcdGxldCBkZWx0b2lkOyAvL0RFTFRPSUQhISFcclxuXHRcdGlmKGV4LmRlbHRvaWRzICYmIGV4LmRlbHRvaWRzLnkgIT0gZXguY29sbGFyYm9uZS55KWRlbHRvaWQgPSBleC5kZWx0b2lkcztcclxuXHRcdG91dGVyQXJtUG9pbnRzID0gZ2V0TGltYlBvaW50cyhleC5jb2xsYXJib25lLGV4LmhhbmQucGFsbSx0aGlzLmFybUNvdmVyYWdlLGV4LmNvbGxhcmJvbmUsZGVsdG9pZCxleC5zaG91bGRlcixleC5lbGJvdy5vdXQsZXgud3Jpc3Qub3V0LGV4LmhhbmQua251Y2tsZSxleC5oYW5kLmZpc3QsZXguaGFuZC50aXApO1x0XHJcblx0XHQvL3RoaXMgd2lsbCB0dXJuIHRoZSBzbGVldmUgaW50byBnbG92ZVxyXG5cdFx0aWYob3V0ZXJBcm1Qb2ludHNbb3V0ZXJBcm1Qb2ludHMubGVuZ3RoLTFdLnk8PWV4LnRodW1iLnRpcC55KXsgXHJcblx0XHRcdG91dGVyQXJtUG9pbnRzW291dGVyQXJtUG9pbnRzLmxlbmd0aF09ZXguaGFuZC5wYWxtO1xyXG5cdFx0XHRpbm5lckFybVBvaW50cyA9IFtleC5hcm1waXQsZXguZWxib3cuaW4sZXgud3Jpc3QuaW4sZXgudGh1bWIub3V0LGV4LnRodW1iLnRpcF07XHJcblx0XHRcdGlubmVyQXJtUG9pbnRzLnJldmVyc2UoKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRpbm5lckFybVBvaW50cyA9IGdldExpbWJQb2ludHNBYm92ZVBvaW50KG91dGVyQXJtUG9pbnRzW291dGVyQXJtUG9pbnRzLmxlbmd0aC0xXSx0cnVlLGV4LmFybXBpdCxleC5lbGJvdy5pbixleC53cmlzdC5pbixleC50aHVtYi5vdXQsZXgudGh1bWIudGlwKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHRcclxuXHRpZih0aGlzLmFybUNvdmVyYWdlPDEpeyAvL3RvIGhhdmUgdGhlIGJvdHRvbSBvZiB0aGUgc2xlZXZlIHN0cmFpZ2h0LCBub3QgZGVzaXJhYmxlIGlmIGdsb3ZlXHJcblx0XHRpbm5lckFybVBvaW50c1swXSA9IGV4dHJhY3RQb2ludChpbm5lckFybVBvaW50c1swXSk7XHJcblx0fVxyXG5cdFxyXG5cdHJldHVybiB7XHJcblx0XHRvdXRlckFybVBvaW50czpvdXRlckFybVBvaW50cyxcclxuXHRcdGlubmVyQXJtUG9pbnRzOmlubmVyQXJtUG9pbnRzXHJcblx0fTtcclxufVxyXG5cdFxyXG5cdFxyXG5cdFxyXG5leHBvcnQgY2xhc3MgTGFjaW5nUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllcjogTGF5ZXIuR0VOSVRBTFMsXHJcblx0XHRcdGxvYzogXCJjaGVzdFwiLFxyXG5cdFx0XHRyZWZsZWN0OiBmYWxzZSxcclxuXHRcdFx0YWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl1cclxuXHRcdFx0XHJcbiAgICAgICAgfSwge1xyXG5cdFx0XHRsYWNpbmc6ZmFsc2UsXHJcblx0XHRcdGNyb3NzZXM6MFxyXG5cdFx0fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0aWYoIXRoaXMubGFjaW5nKXJldHVybjtcclxuXHRcdFxyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRjb25zdCB7XHJcblx0XHRcdGNsZWF2YWdlQm90LGNsZWF2YWdlVG9wXHJcblx0XHR9ID0gY2FsY0RyZXNzQ2xlYXZhZ2UuY2FsbCh0aGlzLGV4KTtcclxuXHRcdFxyXG5cdFx0bGV0IGNyb3NzZXM9dGhpcy5jcm9zc2VzOyAvL2Nyb3NzZXMgPDAgPSBhdXRvbWF0aWMgbnVtYmVyIFxyXG5cdFx0aWYoY3Jvc3Nlczw9MCljcm9zc2VzID0gdGhpcy5jbGVhdmFnZUNvdmVyYWdlKjEzO1xyXG5cdFx0XHJcblx0XHRsZXQgdG9wID0gcmVmbGVjdChjbGVhdmFnZVRvcCk7XHJcblx0XHR0b3AuY3AxID0gcmVmbGVjdChjbGVhdmFnZVRvcC5jcDEpO1xyXG5cdFx0dG9wLmNwMiA9IHJlZmxlY3QoY2xlYXZhZ2VUb3AuY3AyKTtcclxuXHRcdFxyXG5cdFx0bGV0IHBvaW50cyA9IGdldExhY2luZ1BvaW50cyhjbGVhdmFnZUJvdCxjbGVhdmFnZVRvcCxyZWZsZWN0KGNsZWF2YWdlQm90KSx0b3AsY3Jvc3NlcywwKTtcclxuXHRcclxuXHRcdGN0eC5saW5lV2lkdGggPSAxO1xyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIC4uLnBvaW50cy5pbm5lciwgYnJlYWtQb2ludCwgLi4ucG9pbnRzLm91dGVyKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdH1cclxufVxyXG5cclxuLyogVE9ET1xyXG5leHBvcnQgY2xhc3MgU2xlZXZlSGVtUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImFybVwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcblx0XHRcdGhlbUFybUhlaWdodDogNSxcclxuXHRcdFx0aGVtQXJtV2lkdGg6IDUsXHJcblx0XHRcdGhlbUNvbG9yOiBcIlwiLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGlmKHRoaXMuaGVtQXJtSGVpZ2h0PT0wfHx0aGlzLmhlbUFybVdpZHRoPT0wKXJldHVyblxyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG4gICAgICAgIGlmKHRoaXMuaGVtQ29sb3Ipe1xyXG5cdFx0XHRjdHguZmlsbFN0eWxlPXRoaXMuaGVtQ29sb3JcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRjdHguZmlsbFN0eWxlPWN0eC5zdHJva2VTdHlsZVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge1xyXG4gICAgICAgICAgIG91dGVyQXJtUG9pbnRzLFxyXG5cdFx0ICAgaW5uZXJBcm1Qb2ludHNcclxuICAgICAgICB9ID0gY2FsY1N1cGVyU2xlZXZlLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vdmFyIHRlbXAgPSBleHRyYWN0UG9pbnQob3V0ZXJBcm1Qb2ludHNbb3V0ZXJBcm1Qb2ludHMubGVuZ3RoLTFdKTtcclxuXHRcdC8vaGVtT3V0ID0gYWRqdXN0KHRlbXAsNSwtNSkgO1xyXG5cdFx0XHJcblx0XHR2YXIgaGVtT3V0ID0gYWRqdXN0KGV4dHJhY3RQb2ludChvdXRlckFybVBvaW50c1tvdXRlckFybVBvaW50cy5sZW5ndGgtMV0pLHRoaXMuaGVtQXJtV2lkdGgsLXRoaXMuaGVtQXJtSGVpZ2h0KTtcclxuXHRcdHZhclx0aGVtSW4gPSBhZGp1c3QoZXh0cmFjdFBvaW50KGlubmVyQXJtUG9pbnRzWzBdKSwtdGhpcy5oZW1Bcm1XaWR0aCwtdGhpcy5oZW1Bcm1IZWlnaHQpIDtcclxuXHRcdFxyXG5cdFx0IC8vYm90dG9tIGN1cnZlXHJcblx0XHRoZW1Jbi5jcDEgPSB7XHJcblx0XHRcdHg6IDAuNSooaGVtT3V0LngraGVtSW4ueCksXHJcblx0XHRcdHk6IGhlbUluLnktMVxyXG5cdFx0fTtcclxuXHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0b3V0ZXJBcm1Qb2ludHNbb3V0ZXJBcm1Qb2ludHMubGVuZ3RoLTFdLFxyXG5cdFx0XHRoZW1PdXQsXHJcblx0XHRcdGhlbUluLFxyXG5cdFx0XHRleHRyYWN0UG9pbnQoaW5uZXJBcm1Qb2ludHNbMF0pXHJcblx0XHQpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHR9XHJcbn1cclxuKi9cclxuXHJcbi8qKlxyXG4gKiBCYXNlIENsb3RoaW5nIGNsYXNzZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEcmVzcyBleHRlbmRzIENsb3RoaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXIgIDogQ2xvdGhlcy5MYXllci5NSUQsXHJcbiAgICAgICAgICAgIGFybUNvdmVyYWdlOiAwLjUsXHJcblx0XHRcdGFybUxvb3NlOiAwLFxyXG5cdFx0XHR0aGlja25lc3M6IDEsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHRcclxuXHJcbmV4cG9ydCBjbGFzcyBTdXBlckRyZXNzIGV4dGVuZHMgRHJlc3Mge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMzM1LCA4MCUsIDMwJSwgMSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMzM1LCAxMDAlLCA0MiUsIDEpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcblx0XHRcdHsgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLCAgXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMYWNpbmdQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IERyZXNzQmFzZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgIHsgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLCAgXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBEcmVzc0JyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSxcclxuXHRcdFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge25vbmV9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgcGFydHMgdGhhdCBhcmUgb24gdGhlIGZhY2UgKGhlYWQpXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICovXHJcbmV4cG9ydCBjbGFzcyBGYWNlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgY292ZXJDb25jZWFsOiBbXSxcclxuICAgICAgICAgICAgdW5jb3ZlcmFibGUgOiBmYWxzZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJpbmhlcml0XCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaG93IHRoaWNrIHRoZSBzdHJva2UgbGluZSBzaG91bGQgYmVcclxuICAgIGdldExpbmVXaWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gMS41O1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmcsIHByb2Nlc3NDbG90aGluZ1BhcnRMb2NhdGlvbn0gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7bG9jYXRlUmVsYXRpdmVUb0RyYXdwb2ludCwgTG9jYXRpb259IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQge1xyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIHJhZCxcclxuICAgIHBvaW50LFxyXG4gICAgbm9ybSxcclxuICAgIGRpZmZcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIENsb3RoaW5nUGFydCBkcmF3biBjbGFzc2VzL2NvbXBvbmVudHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSaW5nQm90UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBgJHtMb2NhdGlvbi5FQVJ9YCxcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGJlbG93UGFydHM6IFtgZmFjZVBhcnRzICR7TG9jYXRpb24uRUFSfWBdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgcmFkaXVzOiAyLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgY29uc3QgY2VudGVyID0gbG9jYXRlUmVsYXRpdmVUb0RyYXdwb2ludChleCwgdGhpcy5yZWxhdGl2ZUxvY2F0aW9uKTtcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmMoY2VudGVyLngsIGNlbnRlci55LCB0aGlzLnJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJpbmdUb3BQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkJFTE9XX0hBSVIsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IGAke0xvY2F0aW9uLkVBUn1gLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW2BmYWNlUGFydHMgJHtMb2NhdGlvbi5FQVJ9YF0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBjZW50ZXIgPSBsb2NhdGVSZWxhdGl2ZVRvRHJhd3BvaW50KGV4LCB0aGlzLnJlbGF0aXZlTG9jYXRpb24pO1xyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29uc3Qgcm90ID0gcmFkKHRoaXMucm90YXRpb24pO1xyXG4gICAgICAgIGN0eC5hcmMoY2VudGVyLngsIGNlbnRlci55LCB0aGlzLnJhZGl1cywgcm90LCBNYXRoLlBJICsgcm90KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHVkUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBgJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbYGZhY2VQYXJ0cyAke0xvY2F0aW9uLk5PU0V9YF0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICByYWRpdXM6IDAuMyxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgY29uc3QgY2VudGVyID0gbG9jYXRlUmVsYXRpdmVUb0RyYXdwb2ludChleCwgdGhpcy5yZWxhdGl2ZUxvY2F0aW9uKTtcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnN0IGRwcyA9IGRhLmRyYXdDaXJjbGUoY2VudGVyLCB0aGlzLnJhZGl1cyk7XHJcbiAgICAgICAgLy8gY3R4LmFyYyhjZW50ZXIueCwgY2VudGVyLnksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJKjIpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCAuLi5kcHMpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGFpblBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuSEFJUixcclxuICAgICAgICAgICAgbG9jICAgICAgIDogYCske0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICB0aGlja25lc3M6IDAuNyxcclxuICAgICAgICAgICAgc2xhY2sgICAgOiAxLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IGxvY2F0ZVJlbGF0aXZlVG9EcmF3cG9pbnQoZXgsIHRoaXMucmVsYXRpdmVMb2NhdGlvbik7XHJcbiAgICAgICAgY29uc3QgZW5kID0gbG9jYXRlUmVsYXRpdmVUb0RyYXdwb2ludChleCwgdGhpcy5lbmRSZWxhdGl2ZUxvY2F0aW9uKTtcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcbiAgICAgICAgLy8gbWlkZGxlIHBvaW50IGlzIHNvbWV3aGVyZSBpbiBiZXR3ZWVuXHJcbiAgICAgICAgZW5kLmNwMSA9IHBvaW50KChzdGFydC54ICsgZW5kLngpIC8gMixcclxuICAgICAgICAgICAgKHN0YXJ0LnkgKyBlbmQueSkgLyAyIC0gdGhpcy5zbGFjayAqIG5vcm0oZGlmZihzdGFydCwgZW5kKSkpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHguc2V0TGluZURhc2goWzEsMV0pO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCBzdGFydCwgZW5kKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LnNldExpbmVEYXNoKFtdKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBCYXNlIENsb3RoaW5nIGNsYXNzZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBKZXdlbHJ5IGV4dGVuZHMgQ2xvdGhpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5JTk5FUixcclxuICAgICAgICAgICAgcm90YXRpb24gICAgIDogMCxcclxuICAgICAgICAgICAgc3Ryb2tlICAgICAgIDogXCJyZ2IoMjU1LDIyMywwKVwiLFxyXG4gICAgICAgICAgICBmaWxsICAgICAgICAgOiBcInJnYigyNTUsMjIzLDApXCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICAgICAgLy8gc2hvdWxkIGFsc28gYXBwbHkgbG9jYXRpb24gYW5kIHNpZGUgcHJvcGVydGllcyB0byBwYXJ0IHByb3RvdHlwZXNcclxuICAgICAgICAvLyBtb3JlIGNvbnZlbmllbnQgdGhhbiByZXF1aXJpbmcgdXNlcnMgdG8gYXBwbHkgdGhlIHNhbWUgcHJvcGVydGllcyB0byBib3RoIHRoZSBqZXdlbHJ5XHJcbiAgICAgICAgLy8gYW5kIGFsbCB0aGUgcGFydHNcclxuICAgICAgICB0aGlzLnBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAgICAgcGFydC5sb2MgPSB0aGlzLmxvYztcclxuICAgICAgICAgICAgcHJvY2Vzc0Nsb3RoaW5nUGFydExvY2F0aW9uKHRoaXMuc2lkZSwgcGFydCk7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gY29uc2lkZXIgYWxzbyBhcHBseWluZyBsb2NhdGlvbiBvbiBhYm92ZVBhcnRzIGFuZCBiZWxvd1BhcnRzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQaWVyY2luZyBleHRlbmRzIEpld2Vscnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ29uY3JldGUgQ2xvdGhpbmcgY2xhc3Nlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJpbmdQaWVyY2luZyBleHRlbmRzIFBpZXJjaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHJlbGF0aXZlTG9jYXRpb246IHtcclxuICAgICAgICAgICAgICAgIGRyYXdwb2ludDogXCJlYXIubWlkXCIsXHJcbiAgICAgICAgICAgICAgICBkeCAgICAgICA6IDAsXHJcbiAgICAgICAgICAgICAgICBkeSAgICAgICA6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgIDogYCR7TG9jYXRpb24uRUFSfWAsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkUGFydHMgICA6IFwiZmFjZVBhcnRzXCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBSaW5nQm90UGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFJpbmdUb3BQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHVkUGllcmNpbmcgZXh0ZW5kcyBQaWVyY2luZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICByZWxhdGl2ZUxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBkcmF3cG9pbnQ6IFwibm9zZS5vdXRcIixcclxuICAgICAgICAgICAgICAgIGR4ICAgICAgIDogMCxcclxuICAgICAgICAgICAgICAgIGR5ICAgICAgIDogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgOiBgJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkUGFydHMgICA6IFwiZmFjZVBhcnRzXCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdHVkUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hhaW5KZXdlbHJ5IGV4dGVuZHMgSmV3ZWxyeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICByZWxhdGl2ZUxvY2F0aW9uICAgOiB7XHJcbiAgICAgICAgICAgICAgICBkcmF3cG9pbnQ6IFwibm9zZS5vdXRcIixcclxuICAgICAgICAgICAgICAgIGR4ICAgICAgIDogMCxcclxuICAgICAgICAgICAgICAgIGR5ICAgICAgIDogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbmRSZWxhdGl2ZUxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBkcmF3cG9pbnQ6IFwiZWFyLm1pZFwiLFxyXG4gICAgICAgICAgICAgICAgZHggICAgICAgOiAwLFxyXG4gICAgICAgICAgICAgICAgZHkgICAgICAgOiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IGAke0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVxdWlyZWRQYXJ0cyAgICAgIDogXCJmYWNlUGFydHNcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENoYWluUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge2NvdmVyTmlwcGxlc0lmSGF2ZU5vQnJlYXN0c30gZnJvbSBcIi4uL2RyYXcvZHJhd1wiO1xyXG5pbXBvcnQge1xyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBhZGp1c3QsXHJcblx0YnJlYWtQb2ludCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbi8vaW1wb3J0IHtjYWxjQmVsdH0gZnJvbSBcIi4vYWNjZXNzb3J5XCI7XHJcbmltcG9ydCB7Y2FsY0dsb3ZlfSBmcm9tIFwiLi9nbG92ZXNcIjtcclxuaW1wb3J0IHtcclxuXHRnZXRMaW1iUG9pbnRzTmVnYXRpdmUsXHJcblx0Z2V0TGltYlBvaW50c0JlbGxvd1BvaW50LFxyXG5cdGZpbmRCZXR3ZWVuLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuaW1wb3J0IHtjYWxjVGVlfSBmcm9tIFwiLi90b3BzXCI7XHJcblxyXG5cdFx0XHQgXHJcbmV4cG9ydCBjbGFzcyBDdWlyYXNzUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgLyogYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLCovXHJcblx0XHRcdGFib3ZlUGFydHNcdFx0XHQ6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLCBcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0LyphYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcInBhcnRzIGxlZ1wiXSwqL1xyXG5cdFx0XHRcclxuICAgICAgICB9LCB7XHJcblxyXG5cdFx0fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRsZXQge1xyXG5cdFx0XHRjbGVhdmFnZUJvdCxjbGVhdmFnZVRvcCxuZWNrLHNob3VsZGVyLGFybXBpdCx3YWlzdCxoaXAsb3V0LGJvdHRvbSxcclxuXHRcdH0gPSBjYWxjVGVlLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcblx0XHRjbGVhdmFnZVRvcCA9IGFkanVzdChjbGVhdmFnZVRvcCwwLDAuNSk7XHJcblx0XHRzaG91bGRlciA9IGFkanVzdChzaG91bGRlciwtMSwwLjUpO1xyXG5cdFx0XHJcblx0XHRhcm1waXQuY3AxID0ge1xyXG5cdFx0XHR4OiAoc2hvdWxkZXIueC01KSxcclxuXHRcdFx0eTogKDAuNSooc2hvdWxkZXIueS1hcm1waXQueSkpK2FybXBpdC55LFxyXG5cdFx0fVxyXG5cdFx0YXJtcGl0LmNwMiA9IHZvaWQgMDtcclxuXHRcdFxyXG5cdFx0Ym90dG9tID0ge1xyXG5cdFx0XHR5Om91dC55LTYsXHJcblx0XHRcdHg6LTAuMixcclxuXHRcdH07XHJcblx0XHRib3R0b20uY3AxID0ge1xyXG5cdFx0XHR4OiBib3R0b20ueCAqIDAuNSArIG91dC54ICogMC41LFxyXG5cdFx0XHR5OiBib3R0b20ueVxyXG5cdFx0fTtcclxuXHRcclxuXHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsICBcclxuXHRcdFx0Y2xlYXZhZ2VUb3AsICBcclxuXHRcdFx0bmVjaywgXHJcblx0XHRcdHNob3VsZGVyLCBcclxuXHRcdFx0Ly9leC5jaGVzdC5uaXBwbGVzLFxyXG5cdFx0XHRhcm1waXQsICBcclxuXHRcdFx0d2Fpc3QsXHJcblx0XHRcdGhpcCxcclxuXHRcdFx0b3V0LFxyXG5cdFx0XHRib3R0b21cclxuXHRcdFx0XHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ3VpcmFzc0JyZWFzdFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG5cdFx0XHQgLyogYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLCovXHJcblx0Ly9cdGFib3ZlUGFydHNcdFx0XHQ6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLCBcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0LyphYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcInBhcnRzIGxlZ1wiXSwqL1xyXG5cdFx0XHRcclxuICAgICAgICB9LCB7XHJcblxyXG5cdFx0fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHQvL25pcHBsZXMgd2l0aCBubyBicmVhc3RzXHJcbiAgICAgICAgaWYgKGNvdmVyTmlwcGxlc0lmSGF2ZU5vQnJlYXN0cyhleCwgY3R4LCB0aGlzKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cdFx0XHJcblx0XHRjb25zdCBicmVhc3QgPSBleC5icmVhc3Q7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0YnJlYXN0LnRvcCxicmVhc3QudGlwLGJyZWFzdC5ib3QsYnJlYXN0LmluLGJyZWFzdC5jbGVhdmFnZSxicmVhc3QudG9wXHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0YnJlYXN0LnRvcCxicmVhc3QudGlwLGJyZWFzdC5ib3RcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHRcdGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGJyZWFzdC5ib3QsYnJlYXN0LmluLGJyZWFzdC5jbGVhdmFnZSxicmVhc3QudG9wXHJcblx0XHQpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHQgXHJcbi8vVE9ETyB0byBjb3ZlciByZXBhcGFpcmVkIGNsZWF2ZSBsaW5lIG9mIHRoZSBzdXBlciBkcmVzcywgbmVlZHMgdG8gYmUgYWRyZXNzZWRcclxuIFxyXG4gICAgfVxyXG59XHJcbiBcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmVhdmVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyOlx0XHRMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jOlx0XHRcImZlZXRcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgZmVldFwiLCBcInBhcnRzIGxlZ1wiXSwgLy8/PyBjb3B5IG9mIHNvY2tzXHJcblx0XHRcdHJlZmxlY3Q6XHRmYWxzZVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRjb25zdCBhZGRQb2ludHNNaWQgPSBbXTtcclxuXHRcdGlmKHR5cGVvZiBleC5xdWFkcyAhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdGFkZFBvaW50c01pZFswXSA9ICBkYS5jbG9uZShleC5xdWFkcy50b3ApO1xyXG5cdFx0XHRhZGRQb2ludHNNaWRbMF0ueCA9ICBleC50aGlnaC5vdXQueDtcclxuXHRcdFx0YWRkUG9pbnRzTWlkWzFdID0gZGEuY2xvbmUoZXgucXVhZHMub3V0KTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Y29uc3Qgb3V0ZXJQb2ludHMgPSAgZ2V0TGltYlBvaW50c05lZ2F0aXZlKGV4LmhpcCxleC5hbmtsZS5vdXQsdGhpcy5sZWdDb3ZlcmFnZSxleC5oaXAsZXgudGhpZ2gub3V0LCAuLi5hZGRQb2ludHNNaWQsIGV4LmtuZWUub3V0LGV4LmNhbGYub3V0LGV4LmFua2xlLm91dCk7XHJcblx0XHRjb25zdCBpbm5lclBvaW50cyA9IGdldExpbWJQb2ludHNCZWxsb3dQb2ludChvdXRlclBvaW50c1swXSx0cnVlLGV4Lmdyb2luLGV4LnRoaWdoLmluLGV4LmtuZWUuaW50b3AsZXgua25lZS5pbixleC5jYWxmLmluLGV4LmFua2xlLmluKTtcclxuXHJcblx0XHRpZihvdXRlclBvaW50c1sxXSl7XHJcblx0XHRcdG91dGVyUG9pbnRzWzFdPSBleHRyYWN0UG9pbnQoIG91dGVyUG9pbnRzWzFdKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly90b3AgY3VydmVcclxuXHRcdG91dGVyUG9pbnRzWzBdID0gZXh0cmFjdFBvaW50KCBvdXRlclBvaW50c1swXSk7XHJcblx0XHRvdXRlclBvaW50c1swXS5jcDEgPSB7XHJcblx0XHRcdHg6ZmluZEJldHdlZW4oaW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoLTFdLngsb3V0ZXJQb2ludHNbMF0ueCwwLjUpLFxyXG5cdFx0XHR5Om91dGVyUG9pbnRzWzBdLnkrMTZcclxuXHRcdH07XHJcblx0IFx0XHRcclxuXHRcdC8vYm90IGN1cnZlXHJcblx0XHRpbm5lclBvaW50c1swXSA9IGRhLmV4dHJhY3RQb2ludCggaW5uZXJQb2ludHNbMF0pO1xyXG5cdFx0aW5uZXJQb2ludHNbMF0uY3AxID0ge1xyXG5cdFx0XHR4OmZpbmRCZXR3ZWVuKG91dGVyUG9pbnRzW291dGVyUG9pbnRzLmxlbmd0aC0xXS54LGlubmVyUG9pbnRzWzBdLngsMC41KSxcclxuXHRcdFx0eTppbm5lclBvaW50c1swXS55KzZcclxuXHRcdH07XHJcblx0XHRcdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgIC4uLm91dGVyUG9pbnRzLCAuLi5pbm5lclBvaW50cywgb3V0ZXJQb2ludHNbMF0pO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBWYW1icmFjZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQVJNUyxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJhcm1cIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgYXJtXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGFybVwiLCBcInBhcnRzIGhhbmRcIl0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBhcm1Db3ZlcmFnZTogMC41LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge291dGVyQXJtUG9pbnRzLGlubmVyQXJtUG9pbnRzfSA9IGNhbGNHbG92ZS5jYWxsKHRoaXMsZXgpO1xyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHQuLi5vdXRlckFybVBvaW50cyxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KGV4LndyaXN0Lm91dCksXHJcblx0XHRcdGV4LndyaXN0LmluLFxyXG5cdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KG91dGVyQXJtUG9pbnRzWzBdKVxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQmFzZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXJtb3IgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyICA6IENsb3RoZXMuTGF5ZXIuT1VURVIsLy9UT0RPXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0IHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCIjMjUyNTM5XCI7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjOGI4ZTkxXCI7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEN1aXJhc3MgZXh0ZW5kcyBBcm1vciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbGVhdmFnZU9wZW5lc3M6IDAuMDU1LFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjEsXHJcblx0XHRcdHNpZGVMb29zZTogMC4zLFxyXG5cdFx0XHR3YWlzdENvdmVyYWdlOiAwLjUsXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VYOjEsXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VZOi00LFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMSwgLy91c2VkIG9ubHkgYnkgRHJlc3NCcmVhc3RQYXJ0IGJ1dCBpbXBvcnRhbnRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEN1aXJhc3NCcmVhc3RQYXJ0XHJcbiAgICAgICAgICAgIH0seyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEN1aXJhc3NQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHcmVhdmVzIGV4dGVuZHMgQXJtb3Ige1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0bGVnQ292ZXJhZ2U6IDAuNTQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBHcmVhdmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBHcmVhdmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZhbWJyYWNlcyBleHRlbmRzIEFybW9yIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6MC42MCxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCl7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICBcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFZhbWJyYWNlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFZhbWJyYWNlUGFydCxcclxuICAgICAgICAgICAgfSxcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICByZWZsZWN0LFxyXG4gICAgYnJlYWtQb2ludCwgc3BsaXRDdXJ2ZSwgc2ltcGxlUXVhZHJhdGljLCBhZGp1c3QsIGRyYXdDaXJjbGUsXHJcblx0aW50ZXJwb2xhdGVDdXJ2ZSxcclxufSBmcm9tIFwiZHJhd3BvaW50L3NyY1wiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIHBlcnBlbmRpY3VsYXJQb2ludCxcclxufSBmcm9tIFwiLi4vdXRpbC9hdXhpbGlhcnlcIjtcclxuaW1wb3J0IHtzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGYWNlQWNjZXNzb3J5UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2hlYWRcIixcclxuICAgICAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcImV5ZWxpZFwiLCBcImJyb3dcIiwgXCJleWVsYXNoXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGhlYWRcIl1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHYWdTdHJhcFBhcnQgZXh0ZW5kcyBGYWNlQWNjZXNzb3J5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgcmVmbGVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gZXh0cmFjdFBvaW50KGV4LmNoaW4ub3V0KTtcclxuXHJcbiAgICAgICAgY29uc3QgWywgbGVmdCwgLCAsXSA9IGNhbGNHYWcoZXgpO1xyXG4gICAgICAgIC8vIGNvbnN0IGxlZnQgPSBhZGp1c3QoZXh0cmFjdFBvaW50KGV4LmxpcHMub3V0KSwgLTEsIC0wLjcpO1xyXG5cclxuICAgICAgICBsZWZ0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhyaWdodCwgbGVmdCwgMC41LCAxKTtcclxuICAgICAgICBsZWZ0LmNwMiA9IG51bGw7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHJpZ2h0LCBsZWZ0KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUb3BUcmlhbmd1bGFyU3RyYXAgZXh0ZW5kcyBGYWNlQWNjZXNzb3J5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICA6IExheWVyLkFCT1ZFX0hBSVIsXHJcbiAgICAgICAgICAgICAgICByZWZsZWN0ICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGJyYW5jaE91dERpc3RhbmNlOiAxOCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gZXh0cmFjdFBvaW50KGV4LmNoaW4ub3V0KTtcclxuICAgICAgICBjb25zdCBsZWZ0ID0ge3g6IDAsIHk6IGV4LnNrdWxsLnkgLSB0aGlzLmJyYW5jaE91dERpc3RhbmNlfTtcclxuICAgICAgICBsZWZ0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhyaWdodCwgbGVmdCwgMC41LCAxKTtcclxuXHJcbiAgICAgICAgY29uc3QgdG9wID0gZXh0cmFjdFBvaW50KGV4LnNrdWxsKTtcclxuXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgcmlnaHQsIGxlZnQsIHRvcCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmluZ0dhZ1BhcnQgZXh0ZW5kcyBGYWNlQWNjZXNzb3J5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgcmluZ1N0cm9rZSAgIDogXCIjMzkzOTM5XCIsXHJcbiAgICAgICAgICAgICAgICByaW5nVGhpY2tuZXNzOiAwLjUsXHJcbiAgICAgICAgICAgICAgICBzcGlkZXJMZWdzICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMucmluZ1N0cm9rZSxcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5yaW5nU3Ryb2tlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5yaW5nVGhpY2tuZXNzO1xyXG5cclxuICAgICAgICAvLyB3YW50IHRvIGRyYXcgYSBjaXJjbGUsIG5lZWQgdG8gbWVhc3VyZSBkaXN0YW5jZXMgYmV0d2VlbiBtb3V0aFxyXG4gICAgICAgIGNvbnN0IHB0cyA9IGNhbGNHYWcoZXgpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIC4uLnB0cyk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zcGlkZXJMZWdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwaWRlclB0cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHB0cy5sZW5ndGggLSAxOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZSgwLjUsIHB0c1tpXSwgcHRzW2kgKyAxXSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG1pZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAlIDIgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBtaWQgPSB7eDogcHRzW2kgKyAxXS54ICogMS4yLCB5OiBwdHNbaV0ueX07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pZCA9IHt4OiBwdHNbaV0ueCAqIDEuMiwgeTogcHRzW2kgKyAxXS55fTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZW5kID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChpIGluIFswLCAxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHt4OiBtaWQueCArIDEsIHk6IG1pZC55fTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kID0ge3g6IG1pZC54IC0gMSwgeTogbWlkLnl9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNwaWRlclB0cy5wdXNoKHN0YXJ0LCBtaWQsIGVuZCwgYnJlYWtQb2ludCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRzKGN0eCwgLi4uc3BpZGVyUHRzKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJhbGxHYWdQYXJ0IGV4dGVuZHMgRmFjZUFjY2Vzc29yeVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgICAgIGJhbGxGaWxsOiBcInJlZFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5iYWxsRmlsbCxcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5iYWxsRmlsbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleCk7XHJcblxyXG4gICAgICAgIC8vIHdhbnQgdG8gZHJhdyBhIGNpcmNsZSwgbmVlZCB0byBtZWFzdXJlIGRpc3RhbmNlcyBiZXR3ZWVuIG1vdXRoXHJcbiAgICAgICAgY29uc3QgW3RvcCwgcmlnaHQsIGJvdCwgbGVmdCwgX10gPSBjYWxjR2FnKGV4KTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCB0b3AsIHJpZ2h0LCBib3QsIGxlZnQsIHRvcCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY0dhZyhleCkge1xyXG4gICAgY29uc3QgY2VudGVyID0ge3g6IDAsIHk6IGV4LmxpcHMudG9wLnkgKiAwLjUzICsgZXgubGlwcy5ib3QueSAqIDAuNDd9O1xyXG4gICAgLy8gd2FudCB0byBkcmF3IGEgY2lyY2xlLCBuZWVkIHRvIG1lYXN1cmUgZGlzdGFuY2VzIGJldHdlZW4gbW91dGhcclxuICAgIGNvbnN0IHJhZGl1cyA9IDAuNyAqIE1hdGgubWluKChleC5saXBzLnRvcC55IC0gZXgubGlwcy5ib3QueSkgLyAyLCBleC5saXBzLm91dC54KTtcclxuICAgIHJldHVybiBkcmF3Q2lyY2xlKGNlbnRlciwgcmFkaXVzKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJsaW5kRm9sZFBhcnQgZXh0ZW5kcyBGYWNlQWNjZXNzb3J5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgcmVmbGVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgd2lkdGggICAgICAgICAgICA6IDYsXHJcbiAgICAgICAgICAgICAgICBzcGxpdEFsb25nU2t1bGwgIDogMC45LFxyXG4gICAgICAgICAgICAgICAgZnJvbVNrdWxsRGlzdGFuY2U6IDE2LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjk2LCBleC5za3VsbCwgZXguc2t1bGwuc2lkZSk7XHJcbiAgICAgICAgY29uc3QgcmlnaHQgPSBleHRyYWN0UG9pbnQoc3AucmlnaHQucDEpO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSB7eDogMCwgeTogZXguc2t1bGwueSAtIHRoaXMuZnJvbVNrdWxsRGlzdGFuY2V9O1xyXG4gICAgICAgIGxlZnQuY3AxID0ge3g6cmlnaHQueC0wLjUsIHk6cmlnaHQueS0yfTtcclxuICAgICAgICBsZWZ0LmNwMiA9IHt4OmxlZnQueCsyLCB5OmxlZnQueX07XHJcblxyXG4gICAgICAgIGNvbnN0IGJvdExlZnQgPSB7eDogMCwgeTogbGVmdC55IC0gdGhpcy53aWR0aH07XHJcblxyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZSh0aGlzLnNwbGl0QWxvbmdTa3VsbCwgZXguc2t1bGwuc2lkZSwgZXguc2t1bGwuYm90KTtcclxuICAgICAgICBjb25zdCBib3RSaWdodCA9IHNwLnJpZ2h0LnAxO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCByaWdodCwgbGVmdCwgYm90TGVmdCwgYm90UmlnaHQsIHJpZ2h0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdsYXNzZXNQYXJ0IGV4dGVuZHMgRmFjZUFjY2Vzc29yeVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgICAgIHJlZmxlY3Q6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGVjY2VudHJpY2l0eTogNSxcclxuICAgICAgICAgICAgICAgIGhlaWdodCAgICAgIDogMyxcclxuICAgICAgICAgICAgICAgIHRoaWNrbmVzcyAgIDogMC41LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICBsZXQgZWFyID0gZXh0cmFjdFBvaW50KGV4LmVhci5taWQpO1xyXG4gICAgICAgIGVhci55ICs9IDE7XHJcbiAgICAgICAgZWFyLnggLT0gMTtcclxuXHJcbiAgICAgICAgbGV0IG91dGVyQ29udHJvbFBvaW50ID0gZXh0cmFjdFBvaW50KGV4LmV5ZXMub3V0KTtcclxuICAgICAgICBvdXRlckNvbnRyb2xQb2ludC54ICs9IDE7XHJcblxyXG4gICAgICAgIGxldCB0b0VhciA9IGV4dHJhY3RQb2ludChleC5lYXIubWlkKTtcclxuICAgICAgICB0b0Vhci54IC09IDI7XHJcbiAgICAgICAgdG9FYXIueSArPSAyO1xyXG5cclxuICAgICAgICBsZXQgaW5uZXJDb250cm9sUG9pbnQgPSBleHRyYWN0UG9pbnQoZXguZXllcy5pbik7XHJcbiAgICAgICAgaW5uZXJDb250cm9sUG9pbnQueCAtPSAxLjg7XHJcblxyXG4gICAgICAgIGNvbnN0IGVjY2VudHJpY2l0eSA9IHRoaXMuZWNjZW50cmljaXR5O1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgICAgIC8vbGV0IGhhbGZDb250cm9sUG9pbnQgPSB7eDpmaW5kQmV0d2Vlbihpbm5lckNvbnRyb2xQb2ludC54LG91dGVyQ29udHJvbFBvaW50LngpLHk6ZmluZEJldHdlZW4oaW5uZXJDb250cm9sUG9pbnQueSxvdXRlckNvbnRyb2xQb2ludC55KSB9O1xyXG5cclxuICAgICAgICBsZXQgaW5uZXJDb250cm9sUG9pbnRUb3AgPSB7eDogaW5uZXJDb250cm9sUG9pbnQueCwgeTogaW5uZXJDb250cm9sUG9pbnQueX07XHJcbiAgICAgICAgaW5uZXJDb250cm9sUG9pbnRUb3AuY3AxID0gcGVycGVuZGljdWxhclBvaW50KGlubmVyQ29udHJvbFBvaW50LCBvdXRlckNvbnRyb2xQb2ludCwgMC41LCBoZWlnaHQpO1xyXG4gICAgICAgIGlubmVyQ29udHJvbFBvaW50VG9wLmNwMS54ICs9IGVjY2VudHJpY2l0eTtcclxuICAgICAgICBpbm5lckNvbnRyb2xQb2ludFRvcC5jcDIgPSBwZXJwZW5kaWN1bGFyUG9pbnQoaW5uZXJDb250cm9sUG9pbnQsIG91dGVyQ29udHJvbFBvaW50LCAwLjUsIGhlaWdodCk7XHJcbiAgICAgICAgaW5uZXJDb250cm9sUG9pbnRUb3AuY3AyLnggKz0gLWVjY2VudHJpY2l0eTtcclxuXHJcbiAgICAgICAgbGV0IGlubmVyQ29udHJvbFBvaW50Qm90ID0ge3g6IGlubmVyQ29udHJvbFBvaW50LngsIHk6IGlubmVyQ29udHJvbFBvaW50Lnl9O1xyXG4gICAgICAgIGlubmVyQ29udHJvbFBvaW50Qm90LmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludChpbm5lckNvbnRyb2xQb2ludCwgb3V0ZXJDb250cm9sUG9pbnQsIDAuNSwgLWhlaWdodCk7XHJcbiAgICAgICAgaW5uZXJDb250cm9sUG9pbnRCb3QuY3AxLnggKz0gZWNjZW50cmljaXR5O1xyXG4gICAgICAgIGlubmVyQ29udHJvbFBvaW50Qm90LmNwMiA9IHBlcnBlbmRpY3VsYXJQb2ludChpbm5lckNvbnRyb2xQb2ludCwgb3V0ZXJDb250cm9sUG9pbnQsIDAuNSwgLWhlaWdodCk7XHJcbiAgICAgICAgaW5uZXJDb250cm9sUG9pbnRCb3QuY3AyLnggKz0gLWVjY2VudHJpY2l0eTtcclxuXHJcbiAgICAgICAgbGV0IHRvTm9zZSA9IHJlZmxlY3QoaW5uZXJDb250cm9sUG9pbnQpO1xyXG5cclxuICAgICAgICB0b05vc2UuY3AxID0ge1xyXG4gICAgICAgICAgICB5OiBpbm5lckNvbnRyb2xQb2ludC55ICsgMixcclxuICAgICAgICAgICAgeDogMFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgb3V0ZXJDb250cm9sUG9pbnQsIGlubmVyQ29udHJvbFBvaW50VG9wLCBicmVha1BvaW50LCBvdXRlckNvbnRyb2xQb2ludCwgaW5uZXJDb250cm9sUG9pbnRCb3QpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgdG9FYXIsIG91dGVyQ29udHJvbFBvaW50LCBpbm5lckNvbnRyb2xQb2ludFRvcCwgYnJlYWtQb2ludCwgb3V0ZXJDb250cm9sUG9pbnQsIGlubmVyQ29udHJvbFBvaW50Qm90LCB0b05vc2UpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuLypcclxuZXhwb3J0IGNsYXNzIEJlbHRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIit0b3Jzb1wiLFxyXG5cdFx0XHRyZWZsZWN0XHRcdDp0cnVlLCBcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wiY2xvdGhpbmdQYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIl0sXHJcblx0XHR9LFxyXG5cdFx0e1x0XHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuMzMsXHJcblx0XHRcdHdpZHRoOjQsXHJcblx0XHRcdGN1cnZlOi01LFxyXG5cdFx0XHRidWNrbGU6MixcclxuXHRcdFx0aGlnaGxpZ2h0OlwiI2NkYzMzMVwiLFxyXG4gICAgICAgIH0sXHJcblx0XHQuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRsZXQgdGVtcDtcclxuXHRcdFxyXG5cdFx0Ly9UT1BcclxuXHRcdGxldCB0b3BPdXQ7XHJcblx0XHRpZih0aGlzLndhaXN0Q292ZXJhZ2U+MCl7XHJcblx0XHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSgoMS10aGlzLndhaXN0Q292ZXJhZ2UpLGV4LndhaXN0LGV4LmhpcCk7XHRcclxuXHRcdFx0dG9wT3V0ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKE1hdGguYWJzKHRoaXMud2Fpc3RDb3ZlcmFnZSksZXguaGlwLGV4LnRoaWdoLm91dCk7XHRcclxuXHRcdFx0dG9wT3V0ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvL0JPVFxyXG5cdFx0bGV0IGJvdE91dDtcclxuXHRcdGlmKHRvcE91dC55LXRoaXMud2lkdGg+ZXguaGlwLnkpe1xyXG5cdFx0XHRib3RPdXQgPSBpbnRlcnBvbGF0ZUN1cnZlKGV4LndhaXN0LCBleC5oaXAse1xyXG5cdFx0XHRcdHg6IG51bGwsXHJcblx0XHRcdFx0eTogdG9wT3V0LnktdGhpcy53aWR0aFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0Ym90T3V0PWJvdE91dFswXTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRib3RPdXQgPSBpbnRlcnBvbGF0ZUN1cnZlKGV4LmhpcCwgZXgudGhpZ2gub3V0LHtcclxuXHRcdFx0XHR4OiBudWxsLFxyXG5cdFx0XHRcdHk6IHRvcE91dC55LXRoaXMud2lkdGhcclxuXHRcdFx0fSk7XHJcblx0XHRcdGJvdE91dD1ib3RPdXRbMF07XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGxldCB0b3BJbiA9IHtcclxuXHRcdFx0eDogLTAuMSwgIFxyXG5cdFx0XHR5OiB0b3BPdXQueSArIHRoaXMuY3VydmVcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGxldCBib3RJbiA9IHtcclxuXHRcdFx0eDogLTAuMSwgIFxyXG5cdFx0XHR5Olx0dG9wSW4ueSAtIHRoaXMud2lkdGhcclxuXHRcdH07XHJcblxyXG5cdFx0XHJcblx0XHQvL0JVQ0tMRVxyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmJ1Y2tsZS8xMCx0b3BJbix0b3BPdXQpO1x0XHJcblx0XHRsZXQgdG9wTWlkID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHR0b3BJbiA9IHtcclxuXHRcdFx0eDp0b3BJbi54LFxyXG5cdFx0XHR5OnRvcE1pZC55XHJcblx0XHR9O1xyXG5cdFxyXG5cdCBcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy5idWNrbGUvMTAsYm90SW4sYm90T3V0KTtcdFxyXG5cdFx0bGV0IGJvdE1pZCA9IHtcclxuXHRcdFx0eDp0b3BNaWQueCxcclxuXHRcdFx0eTp0ZW1wLmxlZnQucDIueVxyXG5cdFx0fTtcclxuXHRcdGJvdEluID0ge1xyXG5cdFx0XHR5OmJvdE1pZC55LFxyXG5cdFx0XHR4OnRvcEluLngsXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0dG9wTWlkLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90TWlkLFxyXG5cdFx0XHRib3RJblxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Y3R4LmZpbGxTdHlsZT10aGlzLmhpZ2hsaWdodDtcclxuXHRcdGNvbnN0IGFkanVzdGVtZW50PTE7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRhZGp1c3QodG9wSW4sLTAuMixhZGp1c3RlbWVudCksXHJcblx0XHRcdGFkanVzdCh0b3BNaWQsMCxhZGp1c3RlbWVudCksXHJcblx0XHRcdGFkanVzdChib3RNaWQsMCwtYWRqdXN0ZW1lbnQpLFxyXG5cdFx0XHRhZGp1c3QoYm90SW4sLTAuMiwtYWRqdXN0ZW1lbnQpXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cdH1cclxufVxyXG4qL1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTaW1wbGVCZWx0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5HRU5JVEFMUywgLy9URU1QIEZJWCEgYmVjYXVzZSBmYWxsZW4gaGFzIHRvIGJlIGdlbml0YWwgYmVjYXVzZSBib29icyBhbmQgYXJtcyBcclxuICAgICAgICAgICAgLy9sYXllciAgICAgOiBMYXllci5NSURSSUZULCAvL3Nob3VsZCBiZSBcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuXHRcdFx0cmVmbGVjdFx0XHQ6dHJ1ZSwgXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFsgXCJwYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyBjaGVzdFwiLCBcImNsb3RoaW5nUGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIiAgLypcImNsb3RoaW5nUGFydHMgbGVnXCIsXCJjbG90aGluZ1BhcnRzIGdyb2luXCIqL10sXHJcblx0XHRcdGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImNsb3RoaW5nUGFydHMgdG9yc29cIl0sXHJcbi8vXHRcdFx0IGFib3ZlUGFydHM6IFsgXCJwYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiICwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIixcInBhcnRzIGNoZXN0XCIsIFwiY2xvdGhpbmdQYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiICAvKlwiY2xvdGhpbmdQYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiovXSxcclxuXHRcdH0sXHJcblx0XHR7XHRcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4yLFxyXG5cdFx0XHRiZWx0V2lkdGg6NCxcclxuXHRcdFx0YmVsdEN1cnZlOi0xLFxyXG5cdFx0XHRoaWdobGlnaHQ6XCIjY2RjMzMxXCIsXHJcbiAgICAgICAgfSxcclxuXHRcdC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge2luVG9wLG91dFRvcCxvdXRNaWQsb3V0Qm90LGluQm90fSA9IGNhbGNCZWx0LmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRpblRvcCxcclxuXHRcdFx0b3V0VG9wLFxyXG5cdFx0XHRvdXRNaWQsXHJcblx0XHRcdG91dEJvdCxcclxuXHRcdFx0aW5Cb3QsXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY0JlbHQoZXgpIHtcclxuXHRsZXQgb3V0VG9wO1xyXG5cdGxldCBvdXRNaWRcclxuXHRsZXQgb3V0Qm90O1xyXG5cdGxldCBpblRvcDtcclxuXHRsZXQgaW5Cb3Q7XHJcblx0bGV0IHRlbXA7XHJcblx0XHJcblx0aWYodGhpcy5iZWx0V2lkdGggPCAwKXRoaXMuYmVsdFdpZHRoID0gMDtcclxuXHRcclxuXHQvL1RPUFxyXG5cdGlmKHRoaXMud2Fpc3RDb3ZlcmFnZT4wKXtcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKCgxLXRoaXMud2Fpc3RDb3ZlcmFnZSksZXgud2Fpc3QsZXguaGlwKTtcdFxyXG5cdFx0b3V0VG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0fWVsc2V7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZShNYXRoLmFicyh0aGlzLndhaXN0Q292ZXJhZ2UpLGV4LmhpcCxleC50aGlnaC5vdXQpO1x0XHJcblx0XHRvdXRUb3AgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHR9O1xyXG5cdFxyXG5cdC8vQk9UXHJcblx0Ly9ib3RoIG91dFRvcCBhbmQgb3V0Qm90IGFib3ZlIGhpcFxyXG5cdGlmKG91dFRvcC55LXRoaXMuYmVsdFdpZHRoPmV4LmhpcC55KXtcclxuXHRcdG91dEJvdCA9IGludGVycG9sYXRlQ3VydmUodGVtcC5sZWZ0LnAyLCB0ZW1wLnJpZ2h0LnAyLHtcclxuXHRcdFx0eDogbnVsbCxcclxuXHRcdFx0eTogb3V0VG9wLnkgLSB0aGlzLmJlbHRXaWR0aFxyXG5cdFx0fSk7XHJcblx0XHRvdXRCb3QgPSBzcGxpdEN1cnZlKG91dEJvdFswXS50LHRlbXAubGVmdC5wMiwgdGVtcC5yaWdodC5wMik7XHJcblx0XHRvdXRCb3QgPSBvdXRCb3QubGVmdC5wMjtcclxuXHQvL291dFRvcCBhYm92ZSwgb3V0Qm90IGJlbGxvd1xyXG5cdH1lbHNlIGlmKG91dFRvcC55ID4gZXguaGlwLnkpe1xyXG5cdFx0b3V0TWlkID0gdGVtcC5yaWdodC5wMjsgXHJcblx0XHRvdXRCb3QgPSBpbnRlcnBvbGF0ZUN1cnZlKGV4LmhpcCwgZXgudGhpZ2gub3V0LHtcclxuXHRcdFx0eDogbnVsbCxcclxuXHRcdFx0eTogb3V0VG9wLnkgLSB0aGlzLmJlbHRXaWR0aFxyXG5cdFx0fSk7XHJcblx0XHRvdXRCb3QgPSBzcGxpdEN1cnZlKG91dEJvdFswXS50LGV4LmhpcCxleC50aGlnaC5vdXQpO1xyXG5cdFx0b3V0Qm90ID0gb3V0Qm90LmxlZnQucDI7XHJcblx0Ly9ib3RoIGFyZSBiZWxsb3dcclxuXHR9ZWxzZXtcclxuXHRcdG91dEJvdCA9IGludGVycG9sYXRlQ3VydmUodGVtcC5sZWZ0LnAyLCB0ZW1wLnJpZ2h0LnAyLHtcclxuXHRcdFx0eDogbnVsbCxcclxuXHRcdFx0eTogb3V0VG9wLnkgLSB0aGlzLmJlbHRXaWR0aFxyXG5cdFx0fSk7XHJcblx0XHRvdXRCb3QgPSBzcGxpdEN1cnZlKG91dEJvdFswXS50LHRlbXAubGVmdC5wMiwgdGVtcC5yaWdodC5wMik7XHJcblx0XHRvdXRCb3QgPSBvdXRCb3QubGVmdC5wMjtcclxuXHR9O1xyXG5cdFxyXG5cdC8vSU5cclxuXHRjb25zdCB3YWlzdEN1cnZlID0gb3V0VG9wLnkgLSBleC5oaXAueTtcclxuXHRpblRvcCA9IHtcclxuXHRcdHg6IC0wLjIsICBcclxuXHRcdHk6IGV4LnBlbHZpcy55ICsgd2Fpc3RDdXJ2ZSAqIDEuMiArIHRoaXMuYmVsdEN1cnZlLFxyXG5cdH07XHJcblx0XHRcclxuXHRpbkJvdCA9IHtcclxuXHRcdHg6IC0wLjIsICBcclxuXHRcdHk6XHRpblRvcC55IC0gdGhpcy5iZWx0V2lkdGhcclxuXHR9O1xyXG5cclxuXHQvL0NVUlZFXHJcblx0b3V0VG9wLmNwMSA9IHtcclxuXHRcdHg6IChvdXRUb3AueCArIGluVG9wLngpICogMC41LFxyXG5cdFx0eTogaW5Ub3AueVxyXG5cdH07XHJcblx0XHJcblx0aW5Cb3QuY3AxID0ge1xyXG5cdFx0eDogKGluQm90LnggKyBvdXRCb3QueCkgKiAwLjUsXHJcblx0XHR5OiBpbkJvdC55XHJcblx0fTtcclxuXHRcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5Ub3AsXHJcblx0XHRvdXRUb3AsXHJcblx0XHRvdXRNaWQsXHJcblx0XHRvdXRCb3QsXHJcblx0XHRpbkJvdCxcclxuXHR9O1xyXG5cdFxyXG59O1xyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEFwcm9uUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIit0b3Jzb1wiLFxyXG5cdFx0XHRyZWZsZWN0XHRcdDp0cnVlLCBcclxuICAgICAgICAgICAgYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiY2xvdGhpbmdQYXJ0cyB0b3Jzb1wiXSxcclxuXHRcdFx0YWJvdmVQYXJ0czogWyBcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiLCAgXCJwYXJ0cyBjaGVzdFwiLCBcImNsb3RoaW5nUGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIiAgLypcImNsb3RoaW5nUGFydHMgbGVnXCIsXCJjbG90aGluZ1BhcnRzIGdyb2luXCIqL10sXHJcblx0XHR9LFxyXG5cdFx0e1x0XHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0YmVsdFdpZHRoOjMsXHJcblx0XHRcdGJlbHRDdXJ2ZTotMSxcclxuXHRcdFx0Y292ZXJhZ2U6MC45LFxyXG5cdFx0XHRsZW5ndGg6NTAsXHJcblx0XHRcdGN1cnZlWDoyMCxcclxuXHRcdFx0Y3VydmVZOjAsXHJcblx0XHRcdGhpZ2hsaWdodDpcIiNjZGMzMzFcIixcclxuICAgICAgICB9LFxyXG5cdFx0Li4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRjb25zdCB7aW5Ub3Asb3V0VG9wLG91dE1pZCxvdXRCb3QsaW5Cb3R9ID0gY2FsY0JlbHQuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUodGhpcy5jb3ZlcmFnZSwgaW5Ub3AsIG91dFRvcCk7XHJcblx0XHRjb25zdCB0b3AgPSAgdGVtcC5sZWZ0LnAyO1xyXG5cdFx0bGV0IGJvdHRvbSA9IHtcclxuXHRcdFx0eDppbkJvdC54LFxyXG5cdFx0XHR5OmluQm90LnkgLSB0aGlzLmxlbmd0aFxyXG5cdFx0fVxyXG5cdFx0Ym90dG9tLmNwMSA9IHtcclxuXHRcdFx0eDogdG9wLnggKyB0aGlzLmN1cnZlWCxcclxuXHRcdFx0eTogYm90dG9tLnkgKyB0aGlzLmN1cnZlWVxyXG5cdFx0fVxyXG5cdFx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGluVG9wLFxyXG5cdFx0XHR0b3AsXHJcblx0XHRcdGJvdHRvbVxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcblxyXG5cdH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBCYXNlIENsb3RoaW5nIGNsYXNzZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBY2Nlc3NvcnkgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk1JRCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb25jcmV0ZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2xhc3NlcyBleHRlbmRzIEFjY2Vzc29yeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjYTJhMmEyXCI7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMxZTFlMWVcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdsYXNzZXNQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR2FnIGV4dGVuZHMgQWNjZXNzb3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBIb3cgbXVjaCB0aGUgZ2FnIGZvcmNlcyB0aGUgbGlwcyB0byBwYXJ0LCBzaW1pbGFyIGluIGVmZmVjdCB0byBzb21lIGZhY2lhbCBleHByZXNzaW9uc1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgbGlwUGFydGluZzogNjAsXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBDb250cm9scyB0aGUgd2lkdGggb2YgdGhlIHN0cmFwc1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpY2tuZXNzIDogMS41LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgICAgIC8vIHJlc29sdmUgZHluYW1pY3MgYmV0d2VlbiBtb2RpZmllcnNcclxuICAgICAgICB0aGlzLk1vZHMgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgbGlwUGFydGluZzogdGhpcy5saXBQYXJ0aW5nLFxyXG4gICAgICAgIH0sIHRoaXMuTW9kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjYTJhMmEyXCI7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMxZTFlMWVcIjtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaW1wbGVSaW5nR2FnIGV4dGVuZHMgR2FnIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdhZ1N0cmFwUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFJpbmdHYWdQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaW1wbGVCYWxsR2FnIGV4dGVuZHMgR2FnIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdhZ1N0cmFwUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJhbGxHYWdQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNZWRpdW1SaW5nR2FnIGV4dGVuZHMgR2FnIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdhZ1N0cmFwUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFRvcFRyaWFuZ3VsYXJTdHJhcCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFJpbmdHYWdQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNZWRpdW1CYWxsR2FnIGV4dGVuZHMgR2FnIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdhZ1N0cmFwUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFRvcFRyaWFuZ3VsYXJTdHJhcCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJhbGxHYWdQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCbGluZEZvbGQgZXh0ZW5kcyBBY2Nlc3Nvcnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzFlMWUxZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQmxpbmRGb2xkUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2ltcGxlQmVsdCBleHRlbmRzIEFjY2Vzc29yeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk9VVEVSX0ZBUiwgLy9PVVRFUixcclxuICAgICAgICB9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiM0NjQ2NDZcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCIjMWUxZTFlXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFNpbXBsZUJlbHRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQXByb24gZXh0ZW5kcyBBY2Nlc3Nvcnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5FVkVOX0ZBUkVSLCAvL09VVEVSLCAgLy8gISEhXHJcbiAgICAgICAgfSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjZmZmZmZmXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgcmV0dXJuIFwiIzFlMWUxZVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTaW1wbGVCZWx0UGFydCxcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQXByb25QYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtjb25uZWN0RW5kUG9pbnRzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgZXh0cmFjdFBvaW50LFxyXG5cdGRyYXdQb2ludHMsIFxyXG5cdHNwbGl0Q3VydmUsXHJcblx0Ly9jbG9uZSxcclxuXHQvL2FkanVzdCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdGdldExpbWJQb2ludHNOZWdhdGl2ZSxcclxuXHRnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQsXHJcblx0Ly9nZXRMYWNpbmdQb2ludHMsXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5cclxuLy9UTyBETyBXSVBcclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNHbG92ZShleCkge1xyXG5cdGNvbnN0IG91dGVyQXJtUG9pbnRzID0gZ2V0TGltYlBvaW50c05lZ2F0aXZlKGV4LmNvbGxhcmJvbmUsZXguaGFuZC5wYWxtLHRoaXMuYXJtQ292ZXJhZ2UsZXguY29sbGFyYm9uZSxleC5kZWx0b2lkcyxleC5zaG91bGRlcixleC5lbGJvdy5vdXQsZXgud3Jpc3Qub3V0KTtcclxuXHRjb25zdCBpbm5lckFybVBvaW50cyA9IGdldExpbWJQb2ludHNCZWxsb3dQb2ludCh7eTpvdXRlckFybVBvaW50c1swXS55LTMseDpvdXRlckFybVBvaW50c1swXS54fSx0cnVlLGV4LmFybXBpdCxleC5lbGJvdy5pbixleC53cmlzdC5pbik7XHJcblx0cmV0dXJuIHtcclxuXHRcdG91dGVyQXJtUG9pbnRzOm91dGVyQXJtUG9pbnRzLFxyXG5cdFx0aW5uZXJBcm1Qb2ludHM6aW5uZXJBcm1Qb2ludHNcclxuXHR9O1xyXG59O1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR2xvdmVTbGVldmVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYXJtQ292ZXJhZ2U6IDAuNSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRjb25zdCB7XHJcbiAgICAgICAgICAgb3V0ZXJBcm1Qb2ludHMsXHJcblx0XHQgICBpbm5lckFybVBvaW50c1xyXG4gICAgICAgIH0gPSBjYWxjR2xvdmUuY2FsbCh0aGlzLCBleCk7XHJcbiBcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRpZih0aGlzLmFybUNvdmVyYWdlPjApe1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0XHQuLi5vdXRlckFybVBvaW50cyxcclxuXHRcdFx0XHRleHRyYWN0UG9pbnQoZXguaGFuZC5wYWxtKSxcclxuXHRcdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0XHRleHRyYWN0UG9pbnQob3V0ZXJBcm1Qb2ludHNbMF0pXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1lbHNleyAvL2ZvciB0cmFuc2Zvcm1hdGlvbnMsIGZvciBnbG92ZSB0byBmaWxsIHRoZSB3aG9sZSBhcm0gc3BhY2UgbGlrZSBhIHNsZWV2ZSBcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KGV4LmhhbmQucGFsbSksXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0Y29ubmVjdEVuZFBvaW50cyhpbm5lckFybVBvaW50c1tpbm5lckFybVBvaW50cy5sZW5ndGgtMV0sb3V0ZXJBcm1Qb2ludHNbMF0pXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdsb3ZlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImFybVwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGFybUNvdmVyYWdlOiAwLjUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRjb25zdCB7b3V0ZXJBcm1Qb2ludHMsaW5uZXJBcm1Qb2ludHN9ID0gY2FsY0dsb3ZlLmNhbGwodGhpcyxleCk7XHJcblx0XHRjb25zdCBtaWRBcm1Qb2ludHMgPSBbZXguaGFuZC5rbnVja2xlLGV4LmhhbmQudGlwLGV4LmhhbmQucGFsbSxleC50aHVtYi50aXAsZXgudGh1bWIub3V0XTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5hcm1Db3ZlcmFnZT4wKXtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0Li4ubWlkQXJtUG9pbnRzLFxyXG5cdFx0XHRcdC4uLmlubmVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdGV4dHJhY3RQb2ludChvdXRlckFybVBvaW50c1swXSlcclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fWVsc2V7IC8vZm9yIHRyYW5zZm9ybWF0aW9ucywgZm9yIGdsb3ZlIHRvIGZpbGwgdGhlIHdob2xlIGFybSBzcGFjZSBsaWtlIGEgc2xlZXZlIFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0XHQuLi5vdXRlckFybVBvaW50cyxcclxuXHRcdFx0XHQuLi5taWRBcm1Qb2ludHMsXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0Y29ubmVjdEVuZFBvaW50cyhpbm5lckFybVBvaW50c1tpbm5lckFybVBvaW50cy5sZW5ndGgtMV0sb3V0ZXJBcm1Qb2ludHNbMF0pXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBGaW5nZXJsZXNzR2xvdmVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYXJtQ292ZXJhZ2U6IDAuNSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHQgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0ICBcclxuXHRcdGxldCB0ZW1wO1xyXG5cdFx0bGV0IG91dGVyQXJtUG9pbnRzID0gZ2V0TGltYlBvaW50c05lZ2F0aXZlKGV4LmNvbGxhcmJvbmUsZXguaGFuZC5wYWxtLHRoaXMuYXJtQ292ZXJhZ2UsZXguY29sbGFyYm9uZSxleC5kZWx0b2lkcyxleC5zaG91bGRlcixleC5lbGJvdy5vdXQsZXgud3Jpc3Qub3V0LGV4LmhhbmQua251Y2tsZSk7XHJcblx0XHRsZXQgaW5uZXJBcm1Qb2ludHMgPSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQoe3k6b3V0ZXJBcm1Qb2ludHNbMF0ueS0zLHg6b3V0ZXJBcm1Qb2ludHNbMF0ueH0sdHJ1ZSxleC5hcm1waXQsZXguZWxib3cuaW4sZXgud3Jpc3QuaW4sZXgudGh1bWIub3V0KTtcclxuXHRcdFxyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgwLjMsIGV4LmhhbmQua251Y2tsZSxleC5oYW5kLnRpcCk7IFxyXG5cdFx0bGV0IG91dEluZGV4ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUoMC44LCBleC5oYW5kLnRpcCxleC5oYW5kLnBhbG0pOyBcclxuXHRcdGxldCBpbkluZGV4ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUoMC4zLGV4LnRodW1iLnRpcCxleC50aHVtYi5vdXQpO1xyXG5cdFx0bGV0IG91dFRodW1iID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuYXJtQ292ZXJhZ2U+MCl7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdG91dEluZGV4LFxyXG5cdFx0XHRcdGluSW5kZXgsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KGV4LmhhbmQucGFsbSksXHJcblx0XHRcdFx0b3V0VGh1bWIsXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KG91dGVyQXJtUG9pbnRzWzBdKVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHR9ZWxzZXsgLy9mb3IgdHJhbnNmb3JtYXRpb25zXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdG91dEluZGV4LFxyXG5cdFx0XHRcdGluSW5kZXgsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KGV4LmhhbmQucGFsbSksXHJcblx0XHRcdFx0b3V0VGh1bWIsXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0Y29ubmVjdEVuZFBvaW50cyhpbm5lckFybVBvaW50c1tpbm5lckFybVBvaW50cy5sZW5ndGgtMV0sb3V0ZXJBcm1Qb2ludHNbMF0pXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQnJhY2VsZXRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2FybVwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGFybUNvdmVyYWdlOiAwLjUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRjb25zdCB7b3V0ZXJBcm1Qb2ludHMsaW5uZXJBcm1Qb2ludHN9ID0gY2FsY0dsb3ZlLmNhbGwodGhpcyxleCk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuYXJtQ292ZXJhZ2U+MCl7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdGV4dHJhY3RQb2ludChleC53cmlzdC5vdXQpLFxyXG5cdFx0XHRcdGV4LndyaXN0LmluLFxyXG5cdFx0XHRcdC4uLmlubmVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdGV4dHJhY3RQb2ludChvdXRlckFybVBvaW50c1swXSlcclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fWVsc2V7IC8vZm9yIHRyYW5zZm9ybWF0aW9uc1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0XHQuLi5vdXRlckFybVBvaW50cyxcclxuXHRcdFx0XHRleC53cmlzdC5vdXQsXHJcblx0XHRcdFx0ZXgud3Jpc3QuaW4sXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0Y29ubmVjdEVuZFBvaW50cyhpbm5lckFybVBvaW50c1tpbm5lckFybVBvaW50cy5sZW5ndGgtMV0sb3V0ZXJBcm1Qb2ludHNbMF0pXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2xvdmUgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLkJBU0UsXHJcbiAgICAgICAgICAgIHRoaWNrbmVzcyAgICA6IDAuOCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLCAwJSwgMjglLCAxKVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHbG92ZVNsZWV2ZSBleHRlbmRzIEdsb3ZlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGFybUNvdmVyYWdlOiAwLjUsXHJcblx0XHRcdHRoaWNrbmVzczogMC42LFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogR2xvdmVTbGVldmVQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogR2xvdmVTbGVldmVQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb25nR2xvdmVzIGV4dGVuZHMgR2xvdmUge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSl7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRhcm1Db3ZlcmFnZTowLjUsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLCAwJSwgMjglLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCl7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICBcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdsb3ZlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdsb3ZlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRmluZ2VybGVzc0dsb3ZlcyBleHRlbmRzIEdsb3ZlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6MC45LFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMCwgMCUsIDI4JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgXHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBGaW5nZXJsZXNzR2xvdmVQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogRmluZ2VybGVzc0dsb3ZlUGFydCxcclxuICAgICAgICAgICAgfSxcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCcmFjZWxldCBleHRlbmRzIEdsb3ZlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6MC43NSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKXtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsIDAlLCAyOCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKXtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgIFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogQnJhY2VsZXRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogQnJhY2VsZXRQYXJ0LFxyXG4gICAgICAgICAgICB9LFx0XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCcmFjZWxldExlZnQgZXh0ZW5kcyBHbG92ZSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGFybUNvdmVyYWdlOjAuNzUsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLCAwJSwgMjglLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCl7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJyYWNlbGV0UGFydCxcclxuICAgICAgICAgICAgfVx0XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJyYWNlbGV0UmlnaHQgZXh0ZW5kcyBHbG92ZSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGFybUNvdmVyYWdlOjAuNzUsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLCAwJSwgMjglLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCl7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICBcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJyYWNlbGV0UGFydCxcclxuICAgICAgICAgICAgfSxcclxuXHRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3Igbm9uLWNvbWJhdCBwYXJ0cyBmb3Igc2hvd1xyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGVjb3JhdGl2ZVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xyXG4gICAgICAgICAgICBsb2MgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgICAgIGxheWVyICAgICAgIDogTGF5ZXIuQkFTRSxcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgY292ZXJDb25jZWFsOiBbXSxcclxuICAgICAgICAgICAgdW5jb3ZlcmFibGUgOiBmYWxzZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaW5oZXJpdFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaW5oZXJpdFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGhvdyB0aGljayB0aGUgc3Ryb2tlIGxpbmUgc2hvdWxkIGJlXHJcbiAgICBnZXRMaW5lV2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIDEuNTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvY2tQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImZlZXRcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgZmVldFwiLCBcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTaG9ydFNvY2tQYXJ0IGV4dGVuZHMgU29ja1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgb3V0VG9wID0gZXh0cmFjdFBvaW50KGV4LmFua2xlLm91dCk7XHJcbiAgICAgICAgY29uc3Qgb3V0ID0gZXguYW5rbGUub3V0Ym90O1xyXG4gICAgICAgIGNvbnN0IG91dEJvdCA9IGV4LnRvZS5vdXQ7XHJcbiAgICAgICAgY29uc3QgaW5Cb3QgPSBleC50b2UuaW47XHJcbiAgICAgICAgY29uc3QgaW5uZXIgPSBleC5hbmtsZS5pbmJvdDtcclxuICAgICAgICBjb25zdCBpblRvcCA9IGV4LmFua2xlLmluO1xyXG5cclxuICAgICAgICBvdXRUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGluVG9wLCBvdXRUb3AsIDAuNSwgLTMpO1xyXG5cclxuICAgICAgICAvLyBzY2FsZSB0byBzaW11bGF0ZSBjbG90aGluZyB0aGlja25lc3NcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cclxuICAgICAgICAvLyB0b3Agc3RyYXBcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIG91dFRvcCwgb3V0LCBvdXRCb3QsIGluQm90LCBpbm5lciwgaW5Ub3AsIG91dFRvcFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWVkaXVtU29ja1BhcnQgZXh0ZW5kcyBTb2NrUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGxldCBvdXRUID0gMSAtIHRoaXMubGVuZ3RoO1xyXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDAuNzUpIHtcclxuICAgICAgICAgICAgb3V0VCArPSAodGhpcy5sZW5ndGggLSAwLjc1KSAqIDAuMztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUob3V0VCwgZXguY2FsZi5vdXQsIGV4LmFua2xlLm91dCk7XHJcbiAgICAgICAgY29uc3Qgb3V0VG9wID0gc3AubGVmdC5wMjtcclxuICAgICAgICBjb25zdCBvdXQgPSBzcC5yaWdodC5wMjtcclxuXHJcbiAgICAgICAgc3AgPSBzcGxpdEN1cnZlKHRoaXMubGVuZ3RoLCBleC5hbmtsZS5pbiwgZXguY2FsZi5pbik7XHJcbiAgICAgICAgY29uc3QgaW5Ub3AgPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgICAgICBvdXRUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGluVG9wLCBvdXRUb3AsIDAuNSwgLTIuNSArIHRoaXMubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyB0b3Agc3RyYXBcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIG91dFRvcCxcclxuICAgICAgICAgICAgb3V0LFxyXG4gICAgICAgICAgICBleC5hbmtsZS5vdXRib3QsXHJcbiAgICAgICAgICAgIGV4LnRvZS5vdXQsXHJcbiAgICAgICAgICAgIGV4LnRvZS5pbixcclxuICAgICAgICAgICAgZXguYW5rbGUuaW5ib3QsXHJcbiAgICAgICAgICAgIGV4LmFua2xlLmluLFxyXG4gICAgICAgICAgICBpblRvcCxcclxuICAgICAgICAgICAgb3V0VG9wXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb25nU29ja1BhcnQgZXh0ZW5kcyBTb2NrUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGxldCBvdXRUID0gMSAtIHRoaXMubGVuZ3RoO1xyXG5cclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKG91dFQsIGV4LmtuZWUub3V0LCBleC5jYWxmLm91dCk7XHJcbiAgICAgICAgY29uc3Qgb3V0VG9wID0gc3AubGVmdC5wMjtcclxuICAgICAgICBjb25zdCBvdXQgPSBzcC5yaWdodC5wMjtcclxuXHJcbiAgICAgICAgbGV0IGluVCA9IHRoaXMubGVuZ3RoO1xyXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA8IDAuNykge1xyXG4gICAgICAgICAgICBpblQgKz0gKDAuNyAtIHRoaXMubGVuZ3RoKSAqIDAuMztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3AgPSBzcGxpdEN1cnZlKGluVCwgZXguY2FsZi5pbiwgZXgua25lZS5pbik7XHJcbiAgICAgICAgY29uc3QgaW5Ub3AgPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgICAgICBvdXRUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGluVG9wLCBvdXRUb3AsIDAuNSwgLTIuNSArIHRoaXMubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyB0b3Agc3RyYXBcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIG91dFRvcCxcclxuICAgICAgICAgICAgb3V0LFxyXG4gICAgICAgICAgICBleC5hbmtsZS5vdXQsXHJcbiAgICAgICAgICAgIGV4LmFua2xlLm91dGJvdCxcclxuICAgICAgICAgICAgZXgudG9lLm91dCxcclxuICAgICAgICAgICAgZXgudG9lLmluLFxyXG4gICAgICAgICAgICBleC5hbmtsZS5pbmJvdCxcclxuICAgICAgICAgICAgZXguYW5rbGUuaW4sXHJcbiAgICAgICAgICAgIGV4LmNhbGYuaW4sXHJcbiAgICAgICAgICAgIGluVG9wLFxyXG4gICAgICAgICAgICBvdXRUb3BcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRoaWdoSGlnaFBhcnQgZXh0ZW5kcyBTb2NrUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGxldCBvdXRUID0gMC41IC0gdGhpcy5sZW5ndGggKiAwLjU7XHJcblxyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUob3V0VCwgZXgudGhpZ2gub3V0LCBleC5rbmVlLm91dCk7XHJcbiAgICAgICAgY29uc3Qgb3V0VG9wID0gc3AubGVmdC5wMjtcclxuICAgICAgICBjb25zdCBvdXQgPSBzcC5yaWdodC5wMjtcclxuXHJcbiAgICAgICAgbGV0IGluVCA9IHRoaXMubGVuZ3RoICogMC41O1xyXG4gICAgICAgIC8vIGlmICh0aGlzLmxlbmd0aCA8IDAuNykge1xyXG4gICAgICAgIC8vICAgICBpblQgKz0gKDAuNyAtIHRoaXMubGVuZ3RoKSAqIDAuMztcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgc3AgPSBzcGxpdEN1cnZlKGluVCwgZXgudGhpZ2guaW4sIGV4LnRoaWdoLnRvcCk7XHJcbiAgICAgICAgY29uc3QgaW5Ub3AgPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgICAgICBvdXRUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGluVG9wLCBvdXRUb3AsIDAuNSwgMi41ICsgdGhpcy5sZW5ndGgpO1xyXG5cclxuICAgICAgICAvLyBzY2FsZSB0byBzaW11bGF0ZSBjbG90aGluZyB0aGlja25lc3NcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgb3V0VG9wLFxyXG4gICAgICAgICAgICBvdXQsXHJcbiAgICAgICAgICAgIGV4LmNhbGYub3V0LFxyXG4gICAgICAgICAgICBleC5hbmtsZS5vdXQsXHJcbiAgICAgICAgICAgIGV4LmFua2xlLm91dGJvdCxcclxuICAgICAgICAgICAgZXgudG9lLm91dCxcclxuICAgICAgICAgICAgZXgudG9lLmluLFxyXG4gICAgICAgICAgICBleC5hbmtsZS5pbmJvdCxcclxuICAgICAgICAgICAgZXguYW5rbGUuaW4sXHJcbiAgICAgICAgICAgIGV4LmNhbGYuaW4sXHJcbiAgICAgICAgICAgIGV4LmtuZWUuaW4sXHJcbiAgICAgICAgICAgIGV4LmtuZWUuaW50b3AsXHJcbiAgICAgICAgICAgIGluVG9wXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIG51bGwsIG91dFRvcCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUaGlnaEhpZ2hCYW5kUGFydCBleHRlbmRzIFNvY2tQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImZlZXRcIl1cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgbGV0IG91dFQgPSAwLjUgLSB0aGlzLmxlbmd0aCAqIDAuNSAtIHRoaXMuYmFuZFdpZHRoICogMC4wMztcclxuXHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZShvdXRULCBleC50aGlnaC5vdXQsIGV4LmtuZWUub3V0KTtcclxuICAgICAgICBjb25zdCBvdXRUb3AgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZSgwLjEgKiB0aGlzLmJhbmRXaWR0aCwgb3V0VG9wLCBleC5rbmVlLm91dCk7XHJcbiAgICAgICAgY29uc3Qgb3V0ID0gc3AubGVmdC5wMjtcclxuXHJcbiAgICAgICAgbGV0IGluVCA9IHRoaXMubGVuZ3RoICogMC41ICsgdGhpcy5iYW5kV2lkdGggKiAwLjAzO1xyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZShpblQsIGV4LnRoaWdoLmluLCBleC50aGlnaC50b3ApO1xyXG4gICAgICAgIGNvbnN0IGluVG9wID0gc3AubGVmdC5wMjtcclxuICAgICAgICBzcCA9IHNwbGl0Q3VydmUoMC4yICogdGhpcy5iYW5kV2lkdGgsIGV4LnRoaWdoLmluLCBpblRvcCk7XHJcbiAgICAgICAgY29uc3QgaW5Cb3QgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIGluVG9wLmNwMSA9IHNwLnJpZ2h0LnAyLmNwMTtcclxuICAgICAgICBpblRvcC5jcDIgPSBzcC5yaWdodC5wMi5jcDI7XHJcblxyXG4gICAgICAgIGluQm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhvdXQsIGluQm90LCAwLjUsIC0yLjUgLSB0aGlzLmxlbmd0aCk7XHJcbiAgICAgICAgb3V0VG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhpblRvcCwgb3V0VG9wLCAwLjUsIDIuNSArIHRoaXMubGVuZ3RoKTtcclxuXHJcbiAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCxcclxuICAgICAgICAgICAgZXgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5iYW5kUGF0dGVybixcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5iYW5kUGF0dGVyblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gdG9wIHN0cmFwXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBvdXRUb3AsXHJcbiAgICAgICAgICAgIG91dCxcclxuICAgICAgICAgICAgaW5Cb3QsIGluVG9wLCBvdXRUb3BcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTb2NrIGV4dGVuZHMgQ2xvdGhpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5CQVNFLFxyXG4gICAgICAgICAgICBsZW5ndGggICAgICAgOiAwLjUsXHJcbiAgICAgICAgICAgIHRoaWNrbmVzcyAgICA6IDEsXHJcbiAgICAgICAgICAgIHN0cm9rZSAgICAgICA6IFwiI2IxYTY5M1wiLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNob3J0U29ja3MgZXh0ZW5kcyBTb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU2hvcnRTb2NrUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU2hvcnRTb2NrUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTWVkaXVtU29ja3MgZXh0ZW5kcyBTb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTWVkaXVtU29ja1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IE1lZGl1bVNvY2tQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMb25nU29ja3MgZXh0ZW5kcyBTb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTG9uZ1NvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTG9uZ1NvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVGhpZ2hIaWdocyBleHRlbmRzIFNvY2sge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgYmFuZFdpZHRoICA6IDIsXHJcbiAgICAgICAgICAgIGJhbmRQYXR0ZXJuOiBcIiMwMDBcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogVGhpZ2hIaWdoUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFRoaWdoSGlnaFBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBUaGlnaEhpZ2hCYW5kUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNsYW1wLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvdmVyZWRCdXR0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CQUNLLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImJ1dHRcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgYnV0dFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9XHJcbiAgICAgICAgICAgIGFkanVzdENvbG9yKGN0eC5zdHJva2VTdHlsZSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzOiAtNSxcclxuICAgICAgICAgICAgICAgICAgICBsOiAtNVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgZXguYnV0dC5pbiwgZXguYnV0dC5vdXQsIGV4LmJ1dHQuaW4pO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMb25nUGFudHNQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImxlZ1wiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBsZWdcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGxldCBzcCA9XHJcbiAgICAgICAgICAgIHNwbGl0Q3VydmUodGhpcy5sZWdDb3ZlcmFnZSwgZXguY2FsZi5vdXQsIGV4LmFua2xlLm91dCk7XHJcbiAgICAgICAgY29uc3Qgb3V0Qm90ID0gc3AubGVmdC5wMjtcclxuXHJcbiAgICAgICAgc3AgPSBzcGxpdEN1cnZlKDEgLSB0aGlzLmxlZ0NvdmVyYWdlLFxyXG4gICAgICAgICAgICBleC5hbmtsZS5pbiwgZXguY2FsZi5pbik7XHJcbiAgICAgICAgY29uc3Qgb3V0SW4gPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIGNvbnN0IGNhbGZJbiA9IHNwLnJpZ2h0LnAyO1xyXG5cclxuICAgICAgICBvdXRJbi5jcDEgPSBzaW1wbGVRdWFkcmF0aWMob3V0Qm90LCBvdXRJbiwgMC41LCAxKTtcclxuXHJcbiAgICAgICAgY29uc3Qga25lZU91dCA9IGV4LmtuZWUub3V0O1xyXG4gICAgICAgIGNvbnN0IGtuZWVJbiA9IGV4LmtuZWUuaW47XHJcbiAgICAgICAgY29uc3Qga25lZUluVG9wID0gZXgua25lZS5pbnRvcDtcclxuICAgICAgICBjb25zdCBjYWxmT3V0ID0gZXguY2FsZi5vdXQ7XHJcbiAgICAgICAgY29uc3QgdGhpZ2hUb3AgPSBleC50aGlnaC50b3A7XHJcbiAgICAgICAgY29uc3QgdGhpZ2hJbiA9IGV4LnRoaWdoLmluO1xyXG5cclxuICAgICAgICBjb25zdCB7b3V0LCBoaXAsIHRvcCwgdGhpZ2hPdXQsIGdyb2lufSA9XHJcbiAgICAgICAgICAgIGNhbGNQYW50c1RvcChleCwgdGhpcy53YWlzdENvdmVyYWdlKTtcclxuXHJcbiAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyB0b3Agc3RyYXBcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhcclxuICAgICAgICAgICAgY3R4LCB0b3AsIG91dCwgaGlwLCB0aGlnaE91dCwga25lZU91dCwgY2FsZk91dCwgb3V0Qm90LFxyXG4gICAgICAgICAgICBvdXRJbiwgY2FsZkluLCBrbmVlSW4sIGtuZWVJblRvcCwgdGhpZ2hJbiwgdGhpZ2hUb3AsIGdyb2luKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNZWRpdW1QYW50c1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgbGV0IHNwID1cclxuICAgICAgICAgICAgc3BsaXRDdXJ2ZSh0aGlzLmxlZ0NvdmVyYWdlLCBleC5rbmVlLm91dCwgZXguY2FsZi5vdXQpO1xyXG4gICAgICAgIGNvbnN0IG91dEJvdCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZSgxIC0gdGhpcy5sZWdDb3ZlcmFnZSxcclxuICAgICAgICAgICAgZXguY2FsZi5pbiwgZXgua25lZS5pbik7XHJcbiAgICAgICAgY29uc3Qgb3V0SW4gPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIGNvbnN0IGtuZWVJbiA9IHNwLnJpZ2h0LnAyO1xyXG5cclxuICAgICAgICBvdXRJbi5jcDEgPSBzaW1wbGVRdWFkcmF0aWMob3V0Qm90LCBvdXRJbiwgMC43NSwgMik7XHJcblxyXG4gICAgICAgIGNvbnN0IGtuZWVPdXQgPSBleC5rbmVlLm91dDtcclxuICAgICAgICBjb25zdCBrbmVlSW5Ub3AgPSBleC5rbmVlLmludG9wO1xyXG4gICAgICAgIGNvbnN0IHRoaWdoVG9wID0gZXgudGhpZ2gudG9wO1xyXG4gICAgICAgIGNvbnN0IHRoaWdoSW4gPSBleC50aGlnaC5pbjtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IHtvdXQsIGhpcCwgdG9wLCB0aGlnaE91dCwgZ3JvaW59ID1cclxuICAgICAgICAgICAgY2FsY1BhbnRzVG9wKGV4LCB0aGlzLndhaXN0Q292ZXJhZ2UpO1xyXG5cclxuICAgICAgICAvLyBzY2FsZSB0byBzaW11bGF0ZSBjbG90aGluZyB0aGlja25lc3NcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKFxyXG4gICAgICAgICAgICBjdHgsIHRvcCwgb3V0LCBoaXAsIHRoaWdoT3V0LCBrbmVlT3V0LCBvdXRCb3QsIG91dEluLFxyXG4gICAgICAgICAgICBrbmVlSW4sIGtuZWVJblRvcCwgdGhpZ2hJbiwgdGhpZ2hUb3AsIGdyb2luKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU2hvcnRQYW50c1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjM1ICsgdGhpcy5sZWdDb3ZlcmFnZSAqIDAuNixcclxuICAgICAgICAgICAgZXgudGhpZ2gub3V0LCBleC5rbmVlLm91dCk7XHJcbiAgICAgICAgY29uc3Qgb3V0Qm90ID0gc3AubGVmdC5wMjtcclxuXHJcbiAgICAgICAgc3AgPSBzcGxpdEN1cnZlKDEgLSB0aGlzLmxlZ0NvdmVyYWdlLFxyXG4gICAgICAgICAgICBleC5rbmVlLmludG9wLCBleC50aGlnaC5pbik7XHJcbiAgICAgICAgY29uc3Qgb3V0SW4gPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIGNvbnN0IHRoaWdoSW4gPSBzcC5yaWdodC5wMjtcclxuICAgICAgICBjb25zdCB0aGlnaFRvcCA9IGV4LnRoaWdoLnRvcDtcclxuXHJcbiAgICAgICAgb3V0SW4uY3AxID0gc2ltcGxlUXVhZHJhdGljKFxyXG4gICAgICAgICAgICBvdXRCb3QsIG91dEluLCAwLjUsIDEgLyBjbGFtcCh0aGlzLmxlZ0NvdmVyYWdlLCAwLjMsIDEpKTtcclxuXHJcbiAgICAgICAgY29uc3Qge291dCwgaGlwLCB0b3AsIHRoaWdoT3V0LCBncm9pbn0gPVxyXG4gICAgICAgICAgICBjYWxjUGFudHNUb3AoZXgsIHRoaXMud2Fpc3RDb3ZlcmFnZSk7XHJcblxyXG4gICAgICAgIC8vIHNjYWxlIHRvIHNpbXVsYXRlIGNsb3RoaW5nIHRoaWNrbmVzc1xyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gdG9wIHN0cmFwXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoXHJcbiAgICAgICAgICAgIGN0eCwgdG9wLCBvdXQsIGhpcCwgdGhpZ2hPdXQsIG91dEJvdCwgb3V0SW4sIHRoaWdoSW4sXHJcbiAgICAgICAgICAgIHRoaWdoVG9wLCBncm9pbik7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNob3J0c1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHMgICAgICAgICA6IFtcInBhcnRzIGxlZ1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjQgKyB0aGlzLmxlZ0NvdmVyYWdlICogMC41NSxcclxuICAgICAgICAgICAgZXguaGlwLCBleC50aGlnaC5vdXQpO1xyXG4gICAgICAgIGNvbnN0IG91dEJvdCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZShjbGFtcCgxLjI1IC0gdGhpcy5sZWdDb3ZlcmFnZSAqIDAuNzUsIDAsIDEpLFxyXG4gICAgICAgICAgICBleC50aGlnaC5pbiwgZXgudGhpZ2gudG9wXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBvdXRJbiA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgY29uc3QgdGhpZ2hUb3AgPSBzcC5yaWdodC5wMjtcclxuXHJcbiAgICAgICAgb3V0SW4uY3AxID0gc2ltcGxlUXVhZHJhdGljKFxyXG4gICAgICAgICAgICBvdXRCb3QsIG91dEluLCAwLjYsIC0zIC8gY2xhbXAodGhpcy5sZWdDb3ZlcmFnZSwgMC4zLCAxKSk7XHJcblxyXG5cclxuICAgICAgICBjb25zdCB7b3V0LCBoaXAsIHRvcCwgZ3JvaW59ID1cclxuICAgICAgICAgICAgY2FsY1BhbnRzVG9wKGV4LCB0aGlzLndhaXN0Q292ZXJhZ2UpO1xyXG5cclxuICAgICAgICAvLyBzY2FsZSB0byBzaW11bGF0ZSBjbG90aGluZyB0aGlja25lc3NcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKFxyXG4gICAgICAgICAgICBjdHgsIHRvcCwgb3V0LCBoaXAsIG91dEJvdCwgb3V0SW4sIHRoaWdoVG9wLCBncm9pbik7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjUGFudHNUb3AoZXgsIHdhaXN0Q292ZXJhZ2UpIHtcclxuICAgIGxldCBvdXQsIGhpcCwgdGhpZ2hPdXQ7XHJcbiAgICBpZiAod2Fpc3RDb3ZlcmFnZSA+PSAtMC4xKSB7XHJcbiAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuOSAtIHdhaXN0Q292ZXJhZ2UsIGV4LndhaXN0LCBleC5oaXApO1xyXG4gICAgICAgIG91dCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgaGlwID0gc3AucmlnaHQucDI7XHJcbiAgICAgICAgdGhpZ2hPdXQgPSBleC50aGlnaC5vdXQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHNwID1cclxuICAgICAgICAgICAgc3BsaXRDdXJ2ZSgtMC4xIC0gd2Fpc3RDb3ZlcmFnZSwgZXguaGlwLCBleC50aGlnaC5vdXQpO1xyXG4gICAgICAgIG91dCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgdGhpZ2hPdXQgPSBzcC5yaWdodC5wMjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB3YWlzdEN1cnZlID0gKG91dC55IC0gZXguaGlwLnkpO1xyXG4gICAgY29uc3QgdG9wID0ge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogZXgucGVsdmlzLnkgKyB3YWlzdEN1cnZlICogMS4yXHJcbiAgICB9O1xyXG4gICAgb3V0LmNwMSA9IHtcclxuICAgICAgICB4OiBvdXQueCAqIDAuNSArIHRvcC54ICogMC41LFxyXG4gICAgICAgIHk6IHRvcC55XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGdyb2luID0gZXh0cmFjdFBvaW50KGV4Lmdyb2luKTtcclxuICAgIGdyb2luLmNwMSA9IHtcclxuICAgICAgICB4OiBncm9pbi54ICogMC41ICsgZXgudGhpZ2gudG9wLnggKiAwLjUsXHJcbiAgICAgICAgeTogZ3JvaW4ueVxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgb3V0LFxyXG4gICAgICAgIGhpcCxcclxuICAgICAgICB0b3AsXHJcbiAgICAgICAgdGhpZ2hPdXQsXHJcbiAgICAgICAgZ3JvaW5cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYW50cyBleHRlbmRzIENsb3RoaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSG93IGZhciB0byBleHRlbmQgdGhlIHBhbnQgbGVnc1xyXG4gICAgICAgICAgICAgKiAxIGdvZXMgYWxsIHRoZSB3YXkgZG93biB0byBhbmtsZXNcclxuICAgICAgICAgICAgICogMC41IGdvZXMgdG8ga25lZXNcclxuICAgICAgICAgICAgICogYW55dGhpbmcgZWxzZSBpcyBzaG9ydGVyXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBsZWdDb3ZlcmFnZSAgOiAxLFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogV2hlcmUgYWxvbmcgd2Fpc3QtaGlwcyBkb2VzIHRoZSB0b3Agb2YgdGhlIGhpcHMgc2l0XHJcbiAgICAgICAgICAgICAqIFBvc2l0aXZlIHZhbHVlcyBtZWFucyBmdXJ0aGVyIHRvd2FyZHMgdGhlIHdhaXN0LCAwIGlzIGF0IHRoZVxyXG4gICAgICAgICAgICAgKiBoaXBzLFxyXG4gICAgICAgICAgICAgKiBuZWdhdGl2ZSB2YWx1ZXMgbWVhbnMgYWxvbmcgaGlwcyB0byBpbm5lciBrbmVlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB3YWlzdENvdmVyYWdlOiAwLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgyMDAsIDY1JSwgMTAlKVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExvbmdUaWdodFBhbnRzIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ292ZXJlZEJ1dHRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMb25nUGFudHNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMb25nUGFudHNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNZWRpdW1UaWdodFBhbnRzIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ292ZXJlZEJ1dHRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBNZWRpdW1QYW50c1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IE1lZGl1bVBhbnRzUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU2hvcnRUaWdodFBhbnRzIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ292ZXJlZEJ1dHRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTaG9ydFBhbnRzUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU2hvcnRQYW50c1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRpZ2h0U2hvcnRzIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ292ZXJlZEJ1dHRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTaG9ydHNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTaG9ydHNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiLyoqXHJcbiAqIENvcmUgc3RhdHMgKHdoZXJlIHVzZXIgd291bGQgZGVmaW5lIHRoZWlyIGdhbWVwbGF5IHN0YXRzKVxyXG4gKiBFYWNoIGFyZSBzdGF0aXN0aWMgZGVzY3JpcHRpb25zIHdpdGggbG93LCBoaWdoLCBhdmVyYWdlLCBhbmQgc3RkZXYgKGFzc3VtZSBub3JtYWwpXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICovXHJcbmV4cG9ydCBjb25zdCBzdGF0TGltaXRzID0ge1xyXG4gICAgYWdlOiB7XHJcbiAgICAgICAgbG93ICA6IDAsXHJcbiAgICAgICAgaGlnaCA6IDFlOSxcclxuICAgICAgICBhdmcgIDogMzAsXHJcbiAgICAgICAgc3RkZXY6IDYsXHJcbiAgICAgICAgYmlhcyA6IDAsXHJcbiAgICB9LFxyXG4gICAgZmVtOiB7XHJcbiAgICAgICAgbG93ICA6IDAsXHJcbiAgICAgICAgaGlnaCA6IDExLFxyXG4gICAgICAgIGF2ZyAgOiA1LFxyXG4gICAgICAgIHN0ZGV2OiAxLFxyXG4gICAgICAgIGJpYXMgOiAyLFxyXG4gICAgfSxcclxuICAgIHN1Yjoge1xyXG4gICAgICAgIGxvdyAgOiAwLFxyXG4gICAgICAgIGhpZ2ggOiAxMSxcclxuICAgICAgICBhdmcgIDogNCxcclxuICAgICAgICBzdGRldjogMSxcclxuICAgICAgICBiaWFzIDogMSxcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIFN0YWdlcyBvZiBwcmVnbmFuY3lcclxuICAgICAqL1xyXG4gICAgcHJlZ25hbmN5OiB7XHJcbiAgICAgICAgbG93ICA6IDAsXHJcbiAgICAgICAgaGlnaCA6IDEwLFxyXG4gICAgICAgIGF2ZyAgOiAwLFxyXG4gICAgICAgIHN0ZGV2OiAwLFxyXG4gICAgICAgIGJpYXMgOiAwLFxyXG4gICAgfSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEaXNjcmV0ZSBjb3JlIHN0YXRzXHJcbiAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICovXHJcbmV4cG9ydCBjb25zdCBzdGF0RGlzY3JldGVQb29sID0ge1xyXG4gICAgLy8gcG9vbCBvZiBhdmFpbGFibGUgdmFsdWVzIGZvciBkaXNjcmV0ZSBwcm9wZXJ0aWVzXHJcbiAgICBza2VsZXRvbjogW1wiaHVtYW5cIl0sICAvLyB1bmRlcmx5aW5nIHJhY2lhbCBzdHJ1Y3R1cmUgb2YgcGxheWVyXHJcbn07XHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtTaGFkaW5nUGFydH0gZnJvbSBcIi4uL2RyYXcvc2hhZGluZ19wYXJ0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgY2xvbmUsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMZWZ0QmFzZVNob2VTaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICA6IFwibGVmdCBmZWV0XCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5GUk9OVCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGNvbnN0IHRvZUJveCA9IGV4LnRvZS50b2Vib3g7XHJcblxyXG4gICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZSgwLjUsIGV4LnRvZS5vdXQsIGV4LnRvZS5pbik7XHJcbiAgICAgICAgY29uc3QgaW5uZXIgPSBzcC5yaWdodC5wMjtcclxuICAgICAgICBjb25zdCBib3QgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIGJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9lQm94LCBib3QsIDAuNSwgMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFua2xlSW5Cb3QgPSBjbG9uZShleC5hbmtsZS5pbmJvdCk7XHJcbiAgICAgICAgdG9lQm94LmNwMSA9IHtcclxuICAgICAgICAgICAgeDogYW5rbGVJbkJvdC54IC0gMSxcclxuICAgICAgICAgICAgeTogYW5rbGVJbkJvdC55IC0gNVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdG9lQm94LmNwMiA9IHtcclxuICAgICAgICAgICAgeDogdG9lQm94LnggLSAzLFxyXG4gICAgICAgICAgICB5OiB0b2VCb3gueVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBbdG9lQm94LCBib3QsIGlubmVyLCBhbmtsZUluQm90LCB0b2VCb3hdO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBSaWdodEJhc2VTaG9lU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgOiBcInJpZ2h0IGZlZXRcIixcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLkZST05ULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4KSB7XHJcbiAgICAgICAgY29uc3QgdG9lQm94ID0gZXgudG9lLnRvZWJveDtcclxuXHJcbiAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuOCwgZXgudG9lLm91dCwgZXgudG9lLmluKTtcclxuICAgICAgICBjb25zdCBib3QgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIGJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9lQm94LCBib3QsIDAuNSwgLTEpO1xyXG5cclxuICAgICAgICBjb25zdCBhbmtsZU91dEJvdCA9IGV4dHJhY3RQb2ludChleC5hbmtsZS5vdXRib3QpO1xyXG4gICAgICAgIGFua2xlT3V0Qm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhib3QsIGFua2xlT3V0Qm90LCAwLjUsIC0xMCk7XHJcblxyXG4gICAgICAgIHRvZUJveC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYW5rbGVPdXRCb3QsIHRvZUJveCwgMC43LCAzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFthbmtsZU91dEJvdCwgdG9lQm94LCBib3QsIGFua2xlT3V0Qm90XTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU2hvZVNpZGVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5CQUNLLFxyXG4gICAgICAgICAgICBsb2MgIDogXCJmZWV0XCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU2hvZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZmVldFwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBmZWV0XCIsIFwicGFydHMgbGVnXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1BhcnRzOiBbXCJzaGFkaW5nUGFydHMgZmVldFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTaG9lQmFzZVBhcnQgZXh0ZW5kcyBTaG9lUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICA6IFwiZmVldFwiLFxyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtMZWZ0QmFzZVNob2VTaGFkaW5nLCBSaWdodEJhc2VTaG9lU2hhZGluZ11cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG4gICAgICAgIGV4LnRvZS50b2Vib3ggPSB7XHJcbiAgICAgICAgICAgIHg6IGV4LnRvZS5jZW50ZXIueCxcclxuICAgICAgICAgICAgeTogZXgudG9lLmNlbnRlci55ICsgdGhpcy50b2VIZWlnaHRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBvdXRUb3AgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUub3V0KTtcclxuICAgICAgICBjb25zdCBvdXQgPSBleC5hbmtsZS5vdXRib3Q7XHJcbiAgICAgICAgY29uc3Qgb3V0Qm90ID0gZXgudG9lLm91dDtcclxuICAgICAgICBjb25zdCBpbkJvdCA9IGV4LnRvZS5pbjtcclxuICAgICAgICBjb25zdCBpbm5lciA9IGNsb25lKGV4LmFua2xlLmluYm90KTtcclxuICAgICAgICBjb25zdCBpblRvcCA9IGV4LmFua2xlLmluO1xyXG5cclxuICAgICAgICBpbm5lci5jcDIueCAtPSAyO1xyXG4gICAgICAgIG91dFRvcC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoaW5Ub3AsIG91dFRvcCwgMC41LCB0aGlzLnRvbmd1ZURlZmxlY3Rpb24pO1xyXG5cclxuICAgICAgICAvLyBzY2FsZSB0byBzaW11bGF0ZSBjbG90aGluZyB0aGlja25lc3NcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cclxuICAgICAgICAvLyB0b3Agc3RyYXBcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIG91dFRvcCwgb3V0LCBvdXRCb3QsIGluQm90LCBpbm5lciwgaW5Ub3AsIG91dFRvcFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNob2UgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyICAgOiBDbG90aGVzLkxheWVyLk1JRCxcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEhvdyBoaWdoIHRoZSBoZWVsIGlzIHRvIGxpZnQgdGhlIHBsYXllcidzIGhlaWdodFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgc2hvZUhlaWdodCAgICAgIDogMCxcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEhvdyBoaWdoIHRoZSB0b25ndWUgb2YgdGhlIHNob2UgKGFzc3VtaW5nIGl0IGhhcyBvbmUpIGdvZXMgdXBcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRvbmd1ZURlZmxlY3Rpb246IDIsXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBIb3cgaGlnaCB0aGUgdG9lLWJveCBvZiB0aGUgc2hvZSBpc1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdG9lSGVpZ2h0ICAgICAgIDogMCxcclxuICAgICAgICAgICAgTW9kcyAgICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgZmVldExlbmd0aDogLTEwLFxyXG4gICAgICAgICAgICAgICAgZmVldFdpZHRoIDogLTJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEZsYXRTaG9lcyBleHRlbmRzIFNob2Uge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc2hvZUhlaWdodDogMCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDAsMTAlLDIwJSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU2hvZUJhc2VQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTaG9lQmFzZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1VuZGVyd2VhcixjYWxjQnJhfSBmcm9tIFwiLi91bmRlcndlYXJcIjtcclxuaW1wb3J0IHtzZWFtV2lkdGgsIExheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcbmltcG9ydCB7XHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNsb25lLFxyXG5cdGFkanVzdCxcclxuXHRicmVha1BvaW50LFxyXG5cdGludGVycG9sYXRlQ3VydmUsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRsaW5lTGluZUludGVyc2VjdGlvbixcclxuXHRwb2ludExpbmVJbnRlcnNlY3Rpb24sXHJcblx0Y2FydGVzaWFuMnBvbGFyLFxyXG5cdHBlcnBlbmRpY3VsYXJQb2ludCxcclxufSBmcm9tIFwiLi4vdXRpbC9hdXhpbGlhcnlcIjtcclxuXHJcbmltcG9ydCB7Y2FsY0JlbHR9IGZyb20gXCIuL2FjY2Vzc29yeVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNTdXBlckJyYShleCkge1xyXG4gICAgLy9mcm9tIGNhbGNCcmFcclxuXHRpZiAoZXguaGFzT3duUHJvcGVydHkoXCJicmVhc3RcIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUoMC43LCBleC5icmVhc3QudG9wLCBleC5icmVhc3QudGlwKTtcclxuICAgIGNvbnN0IGJyYSA9IHtcclxuICAgICAgICBvdXQ6IGNsb25lKGV4dHJhY3RQb2ludChzcC5yaWdodC5wMSkpLFxyXG4gICAgICAgIHRpcDogY2xvbmUoZXh0cmFjdFBvaW50KHNwLnJpZ2h0LnAyKSlcclxuICAgIH07XHJcbiAgICBicmEudG9wID0ge1xyXG4gICAgICAgIHg6IGV4LmJyZWFzdC5ib3QueCxcclxuICAgICAgICB5OiBicmEub3V0LnkgKyAyXHJcbiAgICB9O1xyXG5cdFxyXG5cdC8vZnJvbSBCcmFQYXJ0XHJcblx0YnJhLm91dC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYnJhLnRvcCwgYnJhLm91dCwgMC40LCAxKTtcclxuXHRicmEudG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhleC5icmVhc3QuY2xlYXZhZ2UsIGJyYS50b3AsIDAuNiwgMik7XHJcblx0XHRcclxuXHRcdFxyXG5cdC8vd2lwXHJcblx0YnJhLmJvdCA9IGFkanVzdChleC5icmVhc3QuYm90LCAwLDApO1xyXG5cdGJyYS5jbGVhdmFnZSA9IGFkanVzdChleC5icmVhc3QuY2xlYXZhZ2UsIDAsIDApO1xyXG5cdGJyYS5pbm5lciA9IGFkanVzdChleC5icmVhc3QuaW4sIDAsIDApO1x0XHJcblxyXG5cdHJldHVybiBicmE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjU3VwZXJCcmFTdHJhcChleCkge1xyXG5cdC8vQk9UVE9NIFNUUkFQXHJcblx0Y29uc3QgYnJhID0gY2FsY0JyYShleCk7XHJcblx0bGV0IHN0cmFwID0ge307XHJcblx0c3RyYXAub3V0ID0ge1xyXG5cdFx0eDogZXguYnJlYXN0LmJvdC54LFxyXG5cdFx0eTogZXguYnJlYXN0LmNsZWF2YWdlLnlcclxuXHR9O1xyXG5cdHN0cmFwLm91dGJvdCA9IHtcclxuXHRcdHg6IGV4LmJyZWFzdC5ib3QueCxcclxuXHRcdHk6IGV4LmJyZWFzdC5ib3QueSArIDMgLSB0aGlzLmJvdFN0cmFwV2lkdGgsXHJcblx0fTtcclxuXHRzdHJhcC5ib3QgPSB7XHJcblx0XHR4OiAtc2VhbVdpZHRoLFxyXG5cdFx0eTogZXguYnJlYXN0LmJvdC55ICsgNCAtIHRoaXMuYm90U3RyYXBXaWR0aCxcclxuXHR9O1xyXG5cdHN0cmFwLm1pZCA9IHtcclxuXHRcdHg6IC1zZWFtV2lkdGgsXHJcblx0XHR5OiBleC5icmVhc3QuY2xlYXZhZ2UueVxyXG5cdH07XHJcbiAgXHJcblx0XHJcblx0Ly9UT1AgU1RSQVAgXHJcblx0bGV0IHNwID0gc3BsaXRDdXJ2ZSgoMS10aGlzLm5lY2tDb3ZlcmFnZSksIGV4Lm5lY2suY3VzcCwgZXguY29sbGFyYm9uZSApO1xyXG5cdHN0cmFwLnN0cmFwVG9wID0gc3AubGVmdC5wMjtcclxuXHRzdHJhcC5zdHJhcFRvcC55LT0odGhpcy5zdHJhcFdpZHRoLzIpO1xyXG5cdFxyXG5cdHN0cmFwLmJyZWFzdFRvcCA9IGFkanVzdChleC5icmVhc3QudG9wLC0wLjUqdGhpcy5zdHJhcFdpZHRoLC0wLjUqdGhpcy5zdHJhcFdpZHRoKTtcclxuXHRzdHJhcC5icmVhc3RUb3AuY3AxID0ge1xyXG5cdFx0eDogc3RyYXAuYnJlYXN0VG9wLnggLSA1ICsgdGhpcy50b3BTdHJhcEN1cnZlWCxcclxuXHRcdHk6IHN0cmFwLmJyZWFzdFRvcC55ICsgMTAgKyB0aGlzLnRvcFN0cmFwQ3VydmVZLFxyXG5cdH07XHJcblx0XHJcblx0c3RyYXAuYnJlYXN0T3V0ID0gZXh0cmFjdFBvaW50KGFkanVzdChicmEub3V0LC0wLjUqdGhpcy5zdHJhcFdpZHRoLDApKTtcclxuXHRcdFxyXG5cdHJldHVybiBzdHJhcDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdXBlckJyYUdlbml0YWxQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBicmEgPSBjYWxjU3VwZXJCcmEoZXgpO1xyXG4gICAgICAgIGlmIChicmEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHRcdFxyXG5cdFx0Y29uc3Qgc3RyYXAgPSBjYWxjU3VwZXJCcmFTdHJhcC5jYWxsKHRoaXMsZXgpO1xyXG5cdFx0XHJcblx0XHQvL1RPUCBTVFJBUFxyXG5cdFx0aWYodGhpcy5zaG93U3RyYXApe1xyXG5cdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5zdHJhcFdpZHRoOyAvLyB0b3Agc3RyYXBcclxuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsc3RyYXAuYnJlYXN0VG9wLHN0cmFwLmJyZWFzdE91dCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdHNldFN0cm9rZUFuZEZpbGwoY3R4LCB7XHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5zdHJva2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBleCk7XHJcblx0XHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRcclxuXHRcdC8vQlJBXHJcblx0XHQvL25vdCBzdXJlIHdoeSB0aGV5IGFyZSBhZGp1c3RlZCB0aGlzIHdheSBidXQgZHJlc3MgaXMgdXNpbmcgdGhpcyBcclxuXHRcdGNvbnN0IHRvcCA9IGFkanVzdChleC5icmVhc3QudG9wLCAwLjEsIDAuMik7XHJcblx0XHRjb25zdCB0aXAgPSBhZGp1c3QoZXguYnJlYXN0LnRpcCwgMC4xLCAwKTtcclxuXHRcdGNvbnN0IGJvdCA9IGFkanVzdChleC5icmVhc3QuYm90LCAwLCAtMC4xKTtcclxuXHRcdGNvbnN0IGlubmVyID0gYWRqdXN0KGV4LmJyZWFzdC5pbiwgLTAuNCwgMCk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRicmEudG9wLFxyXG5cdFx0XHRicmEub3V0LFxyXG5cdFx0XHRicmEudGlwLFxyXG5cdFx0XHRicmEuYm90LFxyXG5cdFx0XHRicmEuaW5uZXIsXHJcblx0XHRcdGJyYS5jbGVhdmFnZSxcclxuXHRcdFx0YnJhLnRvcFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdXBlckJyYUNoZXN0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgdG9yc29cIl0sXHJcblx0XHRcdGJlbG93UGFydHM6IFtcInBhcnRzIGNoZXN0XCJdXHJcblx0XHRcdC8vYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBicmEgPSBjYWxjU3VwZXJCcmEoZXgpO1xyXG4gICAgICAgIGlmIChicmEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHRcdGNvbnN0IHN0cmFwID0gY2FsY1N1cGVyQnJhU3RyYXAuY2FsbCh0aGlzLGV4KTtcclxuXHRcdFxyXG5cdFx0c2V0U3Ryb2tlQW5kRmlsbChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5maWxsLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLnN0cm9rZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIGV4KTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnRoaWNrbmVzcztcclxuXHRcdFxyXG5cdFx0Ly9CT1RUT00gU1RSQVBcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBzdHJhcC5vdXQsIHN0cmFwLm91dGJvdCwgc3RyYXAuYm90LCBzdHJhcC5taWQsIHN0cmFwLm91dCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcdFxyXG5cdFx0Ly9UT1AgU1RSQVBcclxuXHRcdGlmKHRoaXMuc2hvd1N0cmFwKXtcclxuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuc3RyYXBXaWR0aDsgLy8gdG9wIHN0cmFwXHJcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0O1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCBzdHJhcC5zdHJhcFRvcCwgc3RyYXAuYnJlYXN0VG9wKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjUGFudGllcyhleCl7XHJcblx0bGV0IHRlbXA7XHJcblx0Y29uc3QgcGFudGllcyA9IHt9O1xyXG5cdFx0XHJcblx0Ly90b3AgYWx3YXlzIGFib3ZlIGJvdCBcclxuXHRpZih0aGlzLndhaXN0Q292ZXJhZ2VMb3dlcj50aGlzLndhaXN0Q292ZXJhZ2Upe1xyXG5cdFx0dGhpcy53YWlzdENvdmVyYWdlTG93ZXI9dGhpcy53YWlzdENvdmVyYWdlO1xyXG5cdH1cclxuXHRcclxuXHRpZih0aGlzLndhaXN0Q292ZXJhZ2U+MCAmJiB0aGlzLndhaXN0Q292ZXJhZ2VMb3dlcj4wKXtcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKCgxLXRoaXMud2Fpc3RDb3ZlcmFnZSksIGV4LndhaXN0LGV4LmhpcCk7XHJcblx0XHRwYW50aWVzLnNpZGVUb3AgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRsZXQgaGlwID0gdGVtcC5yaWdodC5wMjtcclxuXHRcdFxyXG5cdFx0bGV0IHdhQ28gPSAodGhpcy53YWlzdENvdmVyYWdlIC0gdGhpcy53YWlzdENvdmVyYWdlTG93ZXIpIC8gdGhpcy53YWlzdENvdmVyYWdlO1xyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUod2FDbyxwYW50aWVzLnNpZGVUb3AsaGlwKTtcclxuXHRcdHBhbnRpZXMuc2lkZUJvdCA9IHRlbXAubGVmdC5wMjtcclxuXHRcdHBhbnRpZXMuc2lkZVRvcCA9IGV4dHJhY3RQb2ludChwYW50aWVzLnNpZGVUb3ApO1xyXG5cclxuXHR9ZWxzZSBpZih0aGlzLndhaXN0Q292ZXJhZ2U8MCAmJiB0aGlzLndhaXN0Q292ZXJhZ2VMb3dlcjwwKXtcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKE1hdGguYWJzKHRoaXMud2Fpc3RDb3ZlcmFnZSksZXguaGlwLGV4LnRoaWdoLm91dCk7XHJcblx0XHRwYW50aWVzLnNpZGVUb3AgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRsZXQgdGhpZ2ggPSB0ZW1wLnJpZ2h0LnAyO1xyXG5cdFx0XHJcblx0XHRsZXQgd2FDbyA9IE1hdGguYWJzKCAgKCAoMSt0aGlzLndhaXN0Q292ZXJhZ2UpIC0gKDErdGhpcy53YWlzdENvdmVyYWdlTG93ZXIpICkgLyAoMSt0aGlzLndhaXN0Q292ZXJhZ2UpICApO1xyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUod2FDbyxwYW50aWVzLnNpZGVUb3AsdGhpZ2gpO1xyXG5cdFx0cGFudGllcy5zaWRlQm90ID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0cGFudGllcy5zaWRlVG9wID0gZXh0cmFjdFBvaW50KHBhbnRpZXMuc2lkZVRvcCk7XHJcblx0fWVsc2V7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgoMS10aGlzLndhaXN0Q292ZXJhZ2UpLCBleC53YWlzdCxleC5oaXApO1xyXG5cdFx0cGFudGllcy5zaWRlVG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcclxuXHRcdHBhbnRpZXMuaGlwID0gdGVtcC5yaWdodC5wMjtcclxuXHRcdFxyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy53YWlzdENvdmVyYWdlTG93ZXIpLGV4LmhpcCxleC50aGlnaC5vdXQpO1x0XHJcblx0XHRwYW50aWVzLnNpZGVCb3QgPSB0ZW1wLmxlZnQucDI7XHJcblx0fTtcclxuXHJcblx0Ly90b3AgJiBjdXJ2ZVxyXG5cdHBhbnRpZXMudG9wID0ge3g6LTAuMSx5OihwYW50aWVzLnNpZGVUb3AueSt0aGlzLnRvcFktOCl9OyBcclxuXHRcclxuXHRwYW50aWVzLnNpZGVUb3AuY3AxID0ge1xyXG5cdFx0eDogKHBhbnRpZXMuc2lkZVRvcC54ICogMC41KSArIChwYW50aWVzLnRvcC54ICogMC41KSxcclxuXHRcdHk6IHBhbnRpZXMuc2lkZVRvcC55LFxyXG5cdH07XHJcblx0cGFudGllcy5zaWRlVG9wLmNwMS54Kz10aGlzLmN1cnZlVG9wWDtcclxuXHRwYW50aWVzLnNpZGVUb3AuY3AxLnkrPXRoaXMuY3VydmVUb3BZLTk7XHJcblx0XHJcblx0Ly9ib3R0b21cclxuXHRwYW50aWVzLmJvdCA9IGFkanVzdChjbG9uZShleC5ncm9pbiksLTAuMSwwKTtcdFx0XHJcblx0XHJcblx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy5nZW5Db3ZlcmFnZSxleC5ncm9pbixleHRyYWN0UG9pbnQoZXgudGhpZ2gudG9wKSk7XHRcclxuXHRwYW50aWVzLmJvdE91dCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFxyXG5cdC8vYm90dG9tIGN1cnZlXHJcblx0dGVtcCA9IHNwbGl0Q3VydmUoMC41LHBhbnRpZXMuc2lkZUJvdCxwYW50aWVzLmJvdE91dCk7XHRcclxuXHRwYW50aWVzLmJvdE91dC5jcDEgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRwYW50aWVzLmJvdE91dC5jcDEueCs9dGhpcy5jdXJ2ZUJvdFgtOTtcclxuXHRwYW50aWVzLmJvdE91dC5jcDEueSs9dGhpcy5jdXJ2ZUJvdFkrNTtcclxuXHJcblx0cmV0dXJuIHBhbnRpZXM7XHJcblx0XHJcblx0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjUGFudGllczIoZXgpe1xyXG5cdGxldCB0ZW1wO1xyXG5cdFxyXG5cdGNvbnN0IHBhbnRpZXMgPSBjYWxjUGFudGllcy5jYWxsKHRoaXMsIGV4KTtcclxuXHRcclxuXHQvL2NpcmNsZVxyXG5cdC8vbGV0IHJhZGl1cyA9IDMuNjtcclxuXHRwYW50aWVzLmNlbnRlciA9IHt4OiAtMC4xLCB5OiBwYW50aWVzLnRvcC55LSgyKnRoaXMucmFkaXVzKX07XHJcblx0cGFudGllcy50b3AuY3AxID0ge3g6IHRoaXMucmFkaXVzKjIsIHk6IHBhbnRpZXMudG9wLnktdGhpcy5yYWRpdXMgfVxyXG5cdFxyXG5cdC8vc2lkZSBjaXJjbGVcclxuXHRsZXQgcmFkaXVzID0gY2FydGVzaWFuMnBvbGFyKHBhbnRpZXMuc2lkZVRvcCxwYW50aWVzLnNpZGVCb3QpLnRoZXRhO1xyXG5cdHBhbnRpZXMuc2lkZUJvdC5jcDEgPSBwZXJwZW5kaWN1bGFyUG9pbnQocGFudGllcy5zaWRlVG9wLHBhbnRpZXMuc2lkZUJvdCwwLjUsLTIqcmFkaXVzKTtcclxuXHRwYW50aWVzLnNpZGVCb3QuY3AgPSB2b2lkIDA7XHJcblx0XHJcblx0cmV0dXJuIHBhbnRpZXM7XHJcblx0XHJcblx0XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFN1cGVyUGFudGllc1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZ3JvaW5cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyB0b3Jzb1wiLFwicGFydHMgbGVnXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJjbG90aGluZ1BhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgaWYgKGV4Lmhhc093blByb3BlcnR5KFwiZ3JvaW5cIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblx0XHRcclxuXHRcdGNvbnN0IHBhbnRpZXMgPSBjYWxjUGFudGllcy5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgcGFudGllcy50b3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCxcclxuXHRcdFx0cGFudGllcy5oaXAsXHJcblx0XHRcdHBhbnRpZXMuc2lkZUJvdCxcclxuXHRcdFx0cGFudGllcy5ib3RPdXQsXHJcblx0XHRcdHBhbnRpZXMuYm90ICAgICBcclxuICAgICAgICAgICAvLyBwYW50aWVzLnRvcFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cdFx0LypcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgcGFudGllcy50b3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCxcclxuXHRcdFx0cGFudGllcy5zaWRlQm90LFxyXG5cdFx0XHRwYW50aWVzLmJvdE91dCxcclxuXHRcdFx0cGFudGllcy5ib3QsXHJcbiAgICAgICAgICAgLy9wYW50aWVzLnRvcFxyXG5cdFx0KTtcclxuXHRcdCovXHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblxyXG5cclxuXHRcdGlmKHRoaXMuYm93KXtcclxuXHRcdFx0Y29uc3QgY2VudGVyID0gYWRqdXN0KHBhbnRpZXMudG9wLCAwLCAtMik7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgdG9wSW4gPSBhZGp1c3QoY2VudGVyLCAwLCAxKTtcclxuXHRcdFx0bGV0IGJvdEluID0gYWRqdXN0KGNlbnRlciwgMCwgLTEpO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IHRvcE91dCA9IGFkanVzdChjZW50ZXIsIDMsIDIpO1xyXG5cdFx0XHRsZXQgYm90T3V0ID0gYWRqdXN0KGNlbnRlciwgMywgLTIpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGRhLmFkanVzdENvbG9yKGN0eC5maWxsU3R5bGUse3M6IC0xMCwgbDogLTE1fSk7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdHRvcEluLFxyXG5cdFx0XHRcdHRvcE91dCxcclxuXHRcdFx0XHRib3RPdXQsXHJcblx0XHRcdFx0Ym90SW4sXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENoYXN0aXR5QmVsdFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnR7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJncm9pblwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBncm9pblwiLCBcInBhcnRzIHRvcnNvXCIsXCJwYXJ0cyBsZWdcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXSxcclxuICAgICAgICAgICAgYmVsb3dTYW1lTGF5ZXJQYXJ0czogW1wiY2xvdGhpbmdQYXJ0cyBsZWdcIl0sXHJcblx0XHR9LHtcdFxyXG5cdFx0XHR3YWlzdENvdmVyYWdlOiAwLjcyLFxyXG5cdFx0XHRiZWx0V2lkdGg6IDYsXHJcblx0XHRcdGJlbHRDdXJ2ZTotMixcclxuXHRcdFx0aGlnaGxpZ2h0OlwiI2NkYzMzMVwiLFxyXG5cdFx0XHRcclxuXHRcdFx0Y292ZXJhZ2U6IDAuMixcclxuICAgICAgICB9LFxyXG5cdFx0Li4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRjb25zdCB7aW5Ub3Asb3V0VG9wLG91dE1pZCxvdXRCb3QsaW5Cb3R9ID0gY2FsY0JlbHQuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGluVG9wLFxyXG5cdFx0XHRvdXRUb3AsXHJcblx0XHRcdG91dE1pZCxcclxuXHRcdFx0b3V0Qm90LFxyXG5cdFx0XHRpbkJvdCxcclxuXHRcdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG5cdFx0XHJcblx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUodGhpcy5jb3ZlcmFnZSwgaW5Ub3AsIG91dFRvcCk7XHJcblx0XHRjb25zdCB0b3AgPSAgdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGluVG9wLFxyXG5cdFx0XHR0b3AsXHJcblx0XHRcdGV4LnZhZ2luYS5zaWRlLFxyXG5cdFx0XHRleC5ncm9pblxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3VwZXJQYW50aWVzMlBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZ3JvaW5cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyB0b3Jzb1wiLFwicGFydHMgbGVnXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJjbG90aGluZ1BhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgaWYgKGV4Lmhhc093blByb3BlcnR5KFwiZ3JvaW5cIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblx0XHRcclxuXHRcdGNvbnN0IHBhbnRpZXMgPSBjYWxjUGFudGllczIuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgcGFudGllcy5jZW50ZXIsXHJcblx0XHRcdHBhbnRpZXMudG9wLFxyXG5cdFx0XHRwYW50aWVzLnNpZGVUb3AsXHJcblx0XHQvL1x0cGFudGllcy5oaXAsXHJcblx0XHRcdHBhbnRpZXMuc2lkZUJvdCxcclxuXHRcdFx0cGFudGllcy5ib3RPdXQsXHJcblx0XHRcdHBhbnRpZXMuYm90ICAgICBcclxuICAgICAgICAgICAvLyBwYW50aWVzLnRvcFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cdFx0LypcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgcGFudGllcy50b3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCxcclxuXHRcdFx0cGFudGllcy5zaWRlQm90LFxyXG5cdFx0XHRwYW50aWVzLmJvdE91dCxcclxuXHRcdFx0cGFudGllcy5ib3QsXHJcbiAgICAgICAgICAgLy9wYW50aWVzLnRvcFxyXG5cdFx0KTtcclxuXHRcdCovXHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qXHJcblxyXG4qL1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdXBlckJyYSBleHRlbmRzIFVuZGVyd2VhciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRzaG93U3RyYXA6ZmFsc2UsXHJcblx0XHRcdHN0cmFwV2lkdGg6MixcclxuXHRcdFx0bmVja0NvdmVyYWdlOjAuNyxcclxuXHRcdFx0dGhpY2tuZXNzOjAuNSxcclxuXHRcdFx0Ym90U3RyYXBXaWR0aDogMCxcclxuXHRcdFx0dG9wU3RyYXBDdXJ2ZVg6IDAsXHJcblx0XHRcdHRvcFN0cmFwQ3VydmVZOiAwLFxyXG5cdFx0XHRoaWdobGlnaHQ6XCJoc2woMzQ2LCA1MCUsIDcwJSlcIixcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0LypcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDM0NiwgNTAlLCA3MCUpXCI7XHJcbiAgICB9XHJcblx0Ki9cclxuIFxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDM0NiwgNTclLCA4MiUpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0Z2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyQnJhQ2hlc3RQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlckJyYUdlbml0YWxQYXJ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3VwZXJQYW50aWVzIGV4dGVuZHMgVW5kZXJ3ZWFyIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHdhaXN0Q292ZXJhZ2U6MC4xMSxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZUxvd2VyOi0wLjA1LFxyXG5cdFx0XHRnZW5Db3ZlcmFnZToxLFxyXG5cdFx0XHR0b3BZOjAsXHJcblx0XHRcdGN1cnZlVG9wWDowLFxyXG5cdFx0XHRjdXJ2ZVRvcFk6MCxcclxuXHRcdFx0Y3VydmVCb3RYOjAsXHJcblx0XHRcdGN1cnZlQm90WTowLFxyXG5cdFx0XHRib3c6IHRydWUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2woMzQ2LCA1NyUsIDgyJSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyUGFudGllc1BhcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCaWtpbmlCb3R0b20gZXh0ZW5kcyBVbmRlcndlYXIge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgd2Fpc3RDb3ZlcmFnZTogMC4xMSxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZUxvd2VyOiAtMC4wNSxcclxuXHRcdFx0Z2VuQ292ZXJhZ2U6IDEsXHJcblx0XHRcdHRvcFk6IDAsXHJcblx0XHRcdGN1cnZlVG9wWDogMCxcclxuXHRcdFx0Y3VydmVUb3BZOiAwLFxyXG5cdFx0XHRjdXJ2ZUJvdFg6IDAsXHJcblx0XHRcdGN1cnZlQm90WTogMCxcclxuXHRcdFx0cmFkaXVzOiAyLjgsXHJcblx0XHRcdHRoaWNrbmVzczogMC42LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzNSwgODAwJSwgMzAlLCAxKVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgzMzUsIDEwMCUsIDQyJSwgMSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyUGFudGllczJQYXJ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4gZXhwb3J0IGNsYXNzIENoYXN0aXR5QmVsdCBleHRlbmRzIFVuZGVyd2VhciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiM1MGE5Y2NcIjtcclxuICAgIH1cclxuXHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMzNDM1NzBcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ2hhc3RpdHlCZWx0UGFydFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsIi8vIGZvciBiaWFzLCBpZiBub3QgZGVmaW5lZCB0aGVuIGRlZmF1bHQgdG8gMSAtIGl0IG1lYW5zIGZlbWFsZXMgdGVuZCB0byBnZXQgaGlnaGVyIHZhbHVlc1xyXG4vLyBvdGhlcndpc2UsIDAgbWVhbnMgdW5pc2V4LCBhbmQgYSBuZWdhdGl2ZSBudW1iZXIgbWVhbnMgbW9yZSBhZmZlY3RlZCBieSBoaWdoIG1hc2N1bGluaXR5XHJcbmV4cG9ydCBjb25zdCBmZW1CaWFzID0ge1xyXG4gICAgLy8gY29yZSBzdGF0c1xyXG4gICAgYWdlICAgICAgIDogMCxcclxuICAgIHN0ciAgICAgICA6IC0wLjUsXHJcbiAgICBkZXggICAgICAgOiAtMC4zLFxyXG4gICAgY29uICAgICAgIDogLTAuMixcclxuICAgIHdpbCAgICAgICA6IDAsXHJcbiAgICBleWVzICAgICAgOiA1LFxyXG4gICAgYnJlYXN0ICAgIDogMixcclxuICAgIHNraW4gICAgICA6IDIsXHJcbiAgICBmZW0gICAgICAgOiAyLFxyXG4gICAgc3ViICAgICAgIDogMixcclxuICAgIC8vIHBoeXNpcXVlc1xyXG4gICAgaGFpcmMgICAgIDogMCxcclxuICAgIGhlaWdodCAgICA6IC0zLFxyXG4gICAgZ2VuaXRhbHMgIDogMCxcclxuICAgIGZhY2UgICAgICA6IDMsXHJcbiAgICBsaXBzICAgICAgOiAyLFxyXG4gICAgaGFpcmxlbmd0aDogMyxcclxuICAgIHNob3VsZGVycyA6IDEuNSxcclxuICAgIGJyZWFzdHMgICA6IDUsXHJcbiAgICB0ZXN0ZXMgICAgOiAyLFxyXG4gICAgcGVuaXMgICAgIDogMixcclxuICAgIHdhaXN0ICAgICA6IDIsXHJcbiAgICBsZWdzICAgICAgOiAzLFxyXG4gICAgLy8gaWRpb3N5bmNyYWNpZXNcclxuICAgIHNraW5jICAgICA6IC0zLFxyXG4gICAgbGlwdyAgICAgIDogMCxcclxuICAgIGxpcHQgICAgICA6IDQsXHJcbiAgICBsaXBoICAgICAgOiAwLFxyXG4gICAgbGlwYyAgICAgIDogMCxcclxuICAgIGxpcGEgICAgICA6IDAsXHJcbiAgICBsZWdsICAgICAgOiAwLFxyXG4gICAgZXllYyAgICAgIDogMCxcclxuICAgIG5vc2Vza2V3ICA6IDAsXHJcbiAgICBwZW5pc3QgICAgOiAtMixcclxuICAgIGJyb3doICAgICA6IDAsXHJcbn07XHJcbiIsImltcG9ydCB7ZmVtQmlhc30gZnJvbSBcIi4uL3BsYXllci9iaWFzXCI7XHJcblxyXG4vKipcclxuICogR2V0IGEgZGVmYXVsdCBwcm9wZXJ0aWVzIGZhY3RvcnlcclxuICogQHBhcmFtIHtPYmplY3R9IGxpbWl0cyBEZXNjcmlwdG9ycyBvZiBwcm9wZXJ0aWVzLCBlYWNoIHdpdGggYXZnLCBsb3csIGhpZ2gsIHN0ZGV2LCBiaWFzXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkaXNjcmV0ZVBvb2wgTGlzdCBvZiB2YWxpZCB2YWx1ZXMgZm9yIGRpc2NyZXRlIHZhbHVlZCBwcm9wZXJ0aWVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdChsaW1pdHMsIGRpc2NyZXRlUG9vbCkge1xyXG4gICAgZnVuY3Rpb24gcnVuKCkge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgcCBpbiBsaW1pdHMpIHtcclxuICAgICAgICAgICAgaWYgKGxpbWl0cy5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdHNbcF0gPSBsaW1pdHNbcF0uYXZnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGlzY3JldGVQb29sKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHAgaW4gZGlzY3JldGVQb29sKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzY3JldGVQb29sLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHNbcF0gPSBkaXNjcmV0ZVBvb2xbcF1bMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBydW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBcHBseSBhZGRpdGlvbmFsIG1vZGlmaWVyc1xyXG4gKiBAcGFyYW0gc291cmNlTW9kcyBNb2RpZmllcnMgdG8gYmUgbW9kaWZpZWRcclxuICogQHBhcmFtIGFkZE1vZHMgTW9kaWZpZXJzIHRvIGFkZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TW9kcyhzb3VyY2VNb2RzLCBhZGRNb2RzKSB7XHJcbiAgICBmb3IgKGxldCBtb2QgaW4gYWRkTW9kcykge1xyXG4gICAgICAgIGlmIChhZGRNb2RzLmhhc093blByb3BlcnR5KG1vZCkpIHtcclxuICAgICAgICAgICAgaWYgKHNvdXJjZU1vZHMuaGFzT3duUHJvcGVydHkobW9kKSkge1xyXG4gICAgICAgICAgICAgICAgc291cmNlTW9kc1ttb2RdICs9IGFkZE1vZHNbbW9kXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZU1vZHNbbW9kXSA9IGFkZE1vZHNbbW9kXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBtb2RpZmllcnNcclxuICogQHBhcmFtIHNvdXJjZU1vZHMgTW9kaWZpZXJzIHRvIGJlIG1vZGlmaWVkXHJcbiAqIEBwYXJhbSBhZGRNb2RzIE1vZGlmaWVycyB0byByZW1vdmVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVNb2RzKHNvdXJjZU1vZHMsIGFkZE1vZHMpIHtcclxuICAgIGZvciAobGV0IG1vZCBpbiBhZGRNb2RzKSB7XHJcbiAgICAgICAgaWYgKGFkZE1vZHMuaGFzT3duUHJvcGVydHkobW9kKSkge1xyXG4gICAgICAgICAgICBpZiAoc291cmNlTW9kcy5oYXNPd25Qcm9wZXJ0eShtb2QpKSB7XHJcbiAgICAgICAgICAgICAgICBzb3VyY2VNb2RzW21vZF0gLT0gYWRkTW9kc1ttb2RdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDUkVBVEUgQ0hBUkFDVEVSXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZSBmZW1hbGUgYmlhcyB3aXRoIGdsb2JhbCBsb29rdXAgZmFsbGJhY2tcclxuICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnR5RGVzY3JpcHRvciBTdGF0aXN0aWNhbCBkZXNjcmlwdGlvbiBvZiBwcm9wZXJ0eSBpbmNsdWRpbmcgYXZnLCBsb3csIGhpZ2hcclxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5TmFtZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBGZW1hbGUgYmlhc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEJpYXNNb2QocHJvcGVydHlEZXNjcmlwdG9yLCBwcm9wZXJ0eU5hbWUpIHtcclxuICAgIC8vIG93biBkZWZpbmVkIHByb3BlcnR5IHRha2VzIHByZWNpZGVuY2Ugb3ZlciB0aGUgZ2xvYmFsbHkgZGVmaW5lZCBvbmVcclxuICAgIGlmIChwcm9wZXJ0eURlc2NyaXB0b3IuaGFzT3duUHJvcGVydHkoXCJiaWFzXCIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5RGVzY3JpcHRvci5iaWFzO1xyXG4gICAgfVxyXG4gICAgaWYgKGZlbUJpYXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xyXG4gICAgICAgIHJldHVybiBmZW1CaWFzW3Byb3BlcnR5TmFtZV07XHJcbiAgICB9XHJcbiAgICAvLyBkZWZhdWx0IHRvIDEgKGhpZ2hlciB2YWx1ZXMgY29ycmVsYXRlZCB3aXRoIGhpZ2hlciBmZW1pbmluaXR5KVxyXG4gICAgcmV0dXJuIDE7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhbnNmb3JtYXRpb24ob2JqZWN0LCBzaG93VHJhbnNmb3JtYXRpb24sIHRyYW5zZm9ybUJ5KSB7XHJcbiAgICBsZXQgY29tcGxldGlvblBlcmNlbnQgPSAwO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShwZXJjZW50KSB7XHJcbiAgICAgICAgbGV0IHN0ZXBQZXJjZW50ID0gcGVyY2VudDtcclxuICAgICAgICBpZiAoY29tcGxldGlvblBlcmNlbnQgKyBwZXJjZW50ID4gMSkge1xyXG4gICAgICAgICAgICBzdGVwUGVyY2VudCA9IDEgLSBjb21wbGV0aW9uUGVyY2VudDtcclxuICAgICAgICAgICAgY29tcGxldGlvblBlcmNlbnQgPSAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbXBsZXRpb25QZXJjZW50ICs9IHBlcmNlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwZXJmb3JtVHJhbnNmb3JtYXRpb24ob2JqZWN0LCB0cmFuc2Zvcm1CeSwgc3RlcFBlcmNlbnQpO1xyXG4gICAgICAgIHJldHVybiBjb21wbGV0aW9uUGVyY2VudDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwZXJmb3JtVHJhbnNmb3JtYXRpb24oZW50aXR5LCBtb2RpZmljYXRpb25zLCBzdGVwUGVyY2VudCkge1xyXG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gbW9kaWZpY2F0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAobW9kaWZpY2F0aW9ucy5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiBlbnRpdHkuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIG1vZGlmaWNhdGlvbnNbcHJvcF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcclxuICAgICAgICAgICAgICAgICAgICBwZXJmb3JtVHJhbnNmb3JtYXRpb24oZW50aXR5W3Byb3BdLCBtb2RpZmljYXRpb25zW3Byb3BdLCBzdGVwUGVyY2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZW50aXR5W3Byb3BdICs9IG1vZGlmaWNhdGlvbnNbcHJvcF0gKiBzdGVwUGVyY2VudDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYHVucmVjb2duaXplZCB0cmFuc2Zvcm1hdGlvbiBwcm9wZXJ0eSB0eXBlICR7dHlwZW9mIG1vZGlmaWNhdGlvbnNbcHJvcF19IGZvciAke3Byb3B9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdHJhbnNmb3JtYXRpb24gb2JqZWN0XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG9iamVjdCxcclxuICAgICAgICB0cmFuc2Zvcm0sXHJcbiAgICAgICAgc2hvd1RyYW5zZm9ybWF0aW9uXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQW5kU2hvdyh0cmFuc2Zvcm1hdGlvbiwgZHVyYXRpb24gPSA1MDAwKSB7XHJcbiAgICBsZXQgbGFzdCA9IG51bGw7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgZnVuY3Rpb24gZG9UcmFuc2Zvcm0odGltZXN0YW1wKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gKGxhc3QgPT09IG51bGwpID8gMCA6IHRpbWVzdGFtcCAtIGxhc3Q7XHJcbiAgICAgICAgICAgIGxhc3QgPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ZXBQZXJjZW50ID0gZGVsdGEgLyBkdXJhdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWF0aW9uQ29tcGxldGlvbiA9IHRyYW5zZm9ybWF0aW9uLnRyYW5zZm9ybShzdGVwUGVyY2VudCk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybWF0aW9uLnNob3dUcmFuc2Zvcm1hdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWF0aW9uQ29tcGxldGlvbiA8IDEpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZG9UcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRvVHJhbnNmb3JtKTtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge2Nvbm5lY3RFbmRQb2ludHMsY292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge3NldFN0cm9rZUFuZEZpbGx9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxuXHRkcmF3UG9pbnRzLCBcclxuXHRzcGxpdEN1cnZlLFxyXG5cdGJyZWFrUG9pbnQsXHJcblx0Y2xvbmUsXHJcblx0bm9uZSxcclxuXHRhZGp1c3QsXHJcblx0cmVmbGVjdCxcclxuXHRpbnRlcnBvbGF0ZUN1cnZlLFxyXG59IGZyb20gXCJkcmF3cG9pbnQvc3JjXCI7XHJcbmltcG9ydCB7XHJcblx0Z2V0TGltYlBvaW50cyxcclxuXHRnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCxcclxuXHRzdHJhaWdodGVuQ3VydmUsXHJcblx0ZmluZEJldHdlZW4sXHJcblx0bGluZUxpbmVJbnRlcnNlY3Rpb24sXHJcblx0bGluZUN1YmljSW50ZXJzZWN0aW9uLFxyXG5cdHBvaW50TGluZUludGVyc2VjdGlvbixcclxuXHRnZXRMYWNpbmdQb2ludHMsXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdGNhbGNEcmVzc0Jhc2UsXHJcblx0RHJlc3MsXHJcblx0Y2FsY1N1cGVyU2xlZXZlLFxyXG5cdGNhbGNEcmVzc0NsZWF2YWdlLFxyXG5cdExhY2luZ1BhcnRcclxufSBmcm9tIFwiLi9kcmVzc1wiO1xyXG5cclxuaW1wb3J0IHtcclxuXHROaXBwbGVQYXJ0LFxyXG5cdHd3YmJfZnR3LFxyXG5cdHdDb3Zlck5pcHBsZXNcclxufSBmcm9tIFwiLi93d2JiXCI7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3RGV0YWNoZWRTbGVldmVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgc2hvdWxkZXJDb3ZlcmFnZTogMC41LFxyXG5cdFx0XHRcclxuXHRcdFx0YXJtQ292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0YXJtTG9vc2U6IDAsXHJcblx0XHRcdH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGlmKHRoaXMuYXJtQ292ZXJhZ2U8PTApcmV0dXJuO1xyXG5cdFx0XHJcbiAgICAgICAgbGV0IHtcclxuICAgICAgICAgICBvdXRlckFybVBvaW50cyxcclxuXHRcdCAgIGlubmVyQXJtUG9pbnRzXHJcbiAgICAgICAgfSA9IGNhbGNTdXBlclNsZWV2ZS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuXHRcdGlmKHRoaXMuc2hvdWxkZXJDb3ZlcmFnZT49MSl7XHJcblx0XHRcdGNvbnN0IGNvbl9jb2xsYXJib25lID0gYWRqdXN0KGV4LmNvbGxhcmJvbmUsLTAuNSwwKTtcclxuXHRcdFx0Y29uc3QgY29uX2FybXBpdCA9IGFkanVzdChleC5hcm1waXQsLTAuNSwwKTtcclxuXHRcdFx0XHJcblx0XHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLCBcclxuXHRcdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0XHRjb25uZWN0RW5kUG9pbnRzKGNvbl9hcm1waXQsY29uX2NvbGxhcmJvbmUpXHJcblx0XHRcdF0sW1xyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLCBcclxuXHRcdFx0XHQuLi5pbm5lckFybVBvaW50c1xyXG5cdFx0XHRdKVxyXG5cdFx0XHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRpZih0aGlzLnNob3VsZGVyQ292ZXJhZ2U+MCl7XHRcdFx0XHJcblx0XHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDEtdGhpcy5zaG91bGRlckNvdmVyYWdlLGV4LmNvbGxhcmJvbmUsZXguc2hvdWxkZXIpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0Ly9ERUxUT0lEUyEhISFcdFx0XHJcblx0XHRcdFx0aWYoZXguZGVsdG9pZHMgJiYgZXguY29sbGFyYm9uZS55IT1leC5kZWx0b2lkcy55KXtcclxuXHRcdFx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKDEtdGhpcy5zaG91bGRlckNvdmVyYWdlLGV4LmNvbGxhcmJvbmUsZXguZGVsdG9pZHMpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0b3V0ZXJBcm1Qb2ludHNbMF09ZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7IFxyXG5cdFx0XHRcdG91dGVyQXJtUG9pbnRzWzFdPXRlbXAucmlnaHQucDI7IFxyXG5cdFx0XHRcdFxyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy5zaG91bGRlckNvdmVyYWdlKSxleC5zaG91bGRlcixleC5lbGJvdy5vdXQpO1xyXG5cdFx0XHRcdG91dGVyQXJtUG9pbnRzLnNwbGljZSgwLCAxKTtcclxuXHRcdFx0XHRpZihleC5kZWx0b2lkcyAmJiBleC5jb2xsYXJib25lLnkhPWV4LmRlbHRvaWRzLnkpIG91dGVyQXJtUG9pbnRzLnNwbGljZSgwLCAxKTtcclxuXHRcdFx0XHRvdXRlckFybVBvaW50c1swXT1leHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTsgXHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLCBcclxuXHRcdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0XHRvdXRlckFybVBvaW50c1swXVxyXG5cdFx0XHRdLFtcclxuXHRcdFx0XHQuLi5vdXRlckFybVBvaW50cywgXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0b3V0ZXJBcm1Qb2ludHNbMF1cclxuXHRcdFx0XSlcclxuXHRcdH1cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyU2xlZXZlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImFybVwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGFybUNvdmVyYWdlOiAwLjUsXHJcblx0XHRcdGFybUxvb3NlOiAwLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGlmKHRoaXMuYXJtQ292ZXJhZ2U8PTApcmV0dXJuO1xyXG5cdFx0XHRcdFxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICBvdXRlckFybVBvaW50cyxcclxuXHRcdCAgIGlubmVyQXJtUG9pbnRzXHJcbiAgICAgICAgfSA9IGNhbGNTdXBlclNsZWV2ZS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgY29uX2NvbGxhcmJvbmUgPSBhZGp1c3QoZXguY29sbGFyYm9uZSwtMC41LDApO1xyXG5cdFx0Y29uc3QgY29uX2FybXBpdCA9IGFkanVzdChleC5hcm1waXQsLTAuNSwwKTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsIFxyXG5cdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0Y29ubmVjdEVuZFBvaW50cyhjb25fYXJtcGl0LGNvbl9jb2xsYXJib25lKVxyXG5cdFx0XSxbXHJcblx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLCBcclxuXHRcdFx0Li4uaW5uZXJBcm1Qb2ludHNcclxuXHRcdF0pXHJcblx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0RyZXNzQnJlYXN0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJjaGVzdFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsY2xlYXZhZ2VUb3BcclxuXHRcdH0gPSBjYWxjRHJlc3NCYXNlLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcbiAgICAgICAgLy8gY2xpcCBkcmF3aW5nIHRvIGluc2lkZSB0aGUgZHJlc3NcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgse3g6MCx5OjB9LGFkanVzdChjbGVhdmFnZUJvdCwtdGhpcy50aGlja25lc3MqMC4zOCwwKSxhZGp1c3QoY2xlYXZhZ2VUb3AsLXRoaXMudGhpY2tuZXNzKjAuMzgsMCkse3g6MTAwLHk6MjUwfSx7eDoxMDAseTowfSk7XHJcbiAgICAgICAgY3R4LmNsaXAoKTsgLy9UTyBETyAtIHF1aWNrZml4LCB0aGUgYWRqdXN0bWVudCBuZWVkcyB0byBiZSBsb29rZWQgaW50byBwcm9wZXJseVxyXG5cclxuICAgICAgICAvL25pcHBsZXMgd2l0aCBubyBicmVhc3RzXHJcblx0XHRpZiAod0NvdmVyTmlwcGxlcyhleCwgY3R4LCB0aGlzKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGNvbnN0IHRvcCA9IGFkanVzdChleC5icmVhc3QudG9wLCAwLjUsIDAuNyk7XHJcbiAgICAgICAgY29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcbiAgICAgICAgY29uc3QgYm90ID0gYWRqdXN0KGV4LmJyZWFzdC5ib3QsIDAsIC0wLjYpO1xyXG4gICAgICAgIGNvbnN0IGlubmVyID0gYWRqdXN0KGV4LmJyZWFzdC5pbiwgLTAuOSwgLTAuNSk7XHJcbiAgICAgICAgY29uc3QgY2xlYXZhZ2UgPSBhZGp1c3QoZXguYnJlYXN0LmNsZWF2YWdlLCAtMC42LCAwKTtcclxuXHRcdFxyXG5cdFx0LypcclxuXHRcdGNvbnN0IHRvcCA9IGFkanVzdChleC5icmVhc3QudG9wLCAwLjEsIDAuMik7XHJcbiAgICAgICAgY29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcbiAgICAgICAgY29uc3QgYm90ID0gYWRqdXN0KGV4LmJyZWFzdC5ib3QsIDAsIC0wLjEpO1xyXG4gICAgICAgIGNvbnN0IGlubmVyID0gYWRqdXN0KGV4LmJyZWFzdC5pbiwgLTAuNCwgMCk7XHJcbiAgICAgICAgY29uc3QgY2xlYXZhZ2UgPSBhZGp1c3QoZXguYnJlYXN0LmNsZWF2YWdlLCAtMC4xLCAwKTtcclxuXHRcdCovXHJcblxyXG4vKlxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgdG9wLHRpcCxib3QsaW5uZXIsIGNsZWF2YWdlLCB0b3BBZ2Fpbik7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHRcdFxyXG5cdFx0Ly9saW5lIHNob3dpbmcgY29udHVyZSBvZiBicmVhc3RzXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCB0b3AsIHRpcCwgYm90KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIC8vcmVwYWlyIGNsZWF2YWdlIGxpbmVcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcblx0XHQvL2N0eC5saW5lV2lkdGggPSAxOy8vZmZcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxjbGVhdmFnZUJvdCxjbGVhdmFnZVRvcCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcbiovXHJcblx0XHRjb25zdCB0b3BBZ2FpbiA9IGFkanVzdChjb25uZWN0RW5kUG9pbnRzKGNsZWF2YWdlLCB0b3ApLCAwLCAwLjIpO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHR0b3AsdGlwLGJvdCxpbm5lciwgY2xlYXZhZ2UsIHRvcEFnYWluXHJcblx0XHRdLFtcclxuXHRcdFx0XHJcblx0XHRcdHRvcCx0aXAsYm90LFxyXG5cdFx0XHRicmVha1BvaW50LFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBGQUkhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVxyXG5cdFx0XHRcclxuXHRcdFx0Ly9jbGVhdmFnZUJvdCxjbGVhdmFnZVRvcFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHQvLyBGQUkhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhISEhIVx0XHJcblx0XHRdKVxyXG5cdFx0XHJcblx0XHJcblx0XHRcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0RyZXNzQmFzZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzXHRcdFx0OiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJwYXJ0cyBsZWdcIixcImRlY29yYXRpdmVQYXJ0cyBsZWdcIl0sIFxyXG5cdFx0XHRhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcImxlZ1wiXSwgXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgY2xlYXZhZ2VPcGVuZXNzOiAwLjMsXHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0c2lkZUxvb3NlOiAwLFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC40LFxyXG5cdFx0XHRsZWdMb29zZTogMCxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVg6MCxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVk6MCxcclxuXHRcdFx0YnVzdGxlOiBmYWxzZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG5cdFx0Y29uc3Qge1xyXG5cdFx0XHRjbGVhdmFnZUJvdCxjbGVhdmFnZVRvcCxuZWNrLGNvbGxhcmJvbmUsYXJtcGl0LHdhaXN0LGhpcCxvdXRlclBvaW50cyxzaG91bGRlcixwaXQsYm90dG9tLFxyXG5cdFx0fSA9IGNhbGNEcmVzc0Jhc2UuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcdFx0XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRjbGVhdmFnZUJvdCwgIFxyXG5cdFx0XHRjbGVhdmFnZVRvcCwgIFxyXG5cdFx0XHRuZWNrLCBcclxuXHRcdFx0c2hvdWxkZXIsIFxyXG5cdFx0XHRwaXQsICBcclxuXHRcdFx0Li4ub3V0ZXJQb2ludHMsIFxyXG5cdFx0XHRib3R0b21cclxuXHRcdF0sW1xyXG5cdFx0XHRjbGVhdmFnZUJvdCwgIFxyXG5cdFx0XHRjbGVhdmFnZVRvcCwgIFxyXG5cdFx0XHRuZWNrLCBcclxuXHRcdFx0c2hvdWxkZXIsIFxyXG5cdFx0XHRwaXQsICBcclxuXHRcdFx0Li4ub3V0ZXJQb2ludHMsIFxyXG5cdFx0XHRib3R0b20sXHJcblx0XHRcdHRydWVcclxuXHRcdF0pXHJcblx0XHRcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyRHJlc3MgZXh0ZW5kcyBEcmVzcyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRodWU6IDEwMCxcclxuXHRcdFx0c2F0dXI6IDEwMCxcclxuXHRcdFx0bGlnaHQ6IDQyLFxyXG5cdFx0XHRhbHBoYTogMSxcclxuXHRcdFx0XHJcblx0XHRcdGZpc2huZXNzOiAwLFxyXG5cdFx0XHRwYXQ6IFwiZmlzaG5ldFwiLFxyXG5cdFx0XHRwYXRfc2l6ZTogNzUsXHJcblx0XHRcdFxyXG5cdFx0XHRib2R5c3VpdDpmYWxzZSxcclxuXHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMzM1LCA4MCUsIDMwJSwgMSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMzM1LCAxMDAlLCA0MiUsIDEpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcblx0XHRcdHsgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLCAgXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMYWNpbmdQYXJ0XHJcblx0XHRcdH0se1xyXG5cdFx0XHRcdHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IE5pcHBsZVBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RyZXNzQmFzZVBhcnRcclxuICAgICAgICAgICAgfSx7IFxyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RyZXNzQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlclNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge3N0eWxlc30gZnJvbSBcIi4uL2hhaXJfcGFydHMvc3R5bGVzXCI7XHJcbmltcG9ydCB7TG9jYXRpb259IGZyb20gXCIuLi91dGlsL3BhcnRcIjtcclxuXHJcbi8qKlxyXG4gKiBBbnkgcGh5c2ljYWwgcHJvcGVydHkgdGhhdCBuZWVkcyBjYWxjdWxhdGlvbiBhbmQgaXMgdGFuZ2libGUgc2hvdWxkIGdvIGluIGhlcmVcclxuICovXHJcbmV4cG9ydCBjb25zdCBiYXNlRGltRGVzYyA9IHtcclxuICAgIGh1bWFuOiB7XHJcblxyXG4gICAgICAgIC8vV1dCQlxyXG5cdFx0LypcclxuXHRcdHRlc3Q6IHtcclxuXHRcdFx0bGlua2VkUGFydDogXCJoZWFkXCIsXHJcblx0XHRcdGRlc2MgICAgICA6IFwiRG9lcyB0aGUgY2hhcmFjdGVyIGhhdmUgaG9ybnNcIixcclxuXHRcdFx0dW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuXHRcdFx0bG93ICAgICAgIDogLTkwLFxyXG5cdFx0XHRoaWdoICAgICAgOiA5MCxcclxuXHRcdFx0YXZnICAgICAgIDogMSwgLy9UTyBETyBSRU1PVkUgVEVTVElOR1xyXG5cdFx0XHRzdGRldiAgICAgOiAwLFxyXG5cdFx0XHRiaWFzICAgICAgOiAwLFxyXG5cdFx0fSxcclxuXHJcblx0XHR0ZXN0Mjoge1xyXG5cdFx0XHRsaW5rZWRQYXJ0OiBcImhlYWRcIixcclxuXHRcdFx0ZGVzYyAgICAgIDogXCJEb2VzIHRoZSBjaGFyYWN0ZXIgaGF2ZSBob3Juc1wiLFxyXG5cdFx0XHR1bml0cyAgICAgOiBcImFyYml0cmFyeVwiLFxyXG5cdFx0XHRsb3cgICAgICAgOiAtOTAsXHJcblx0XHRcdGhpZ2ggICAgICA6IDkwLFxyXG5cdFx0XHRhdmcgICAgICAgOiAxLCAvL1RPIERPIFJFTU9WRSBURVNUSU5HXHJcblx0XHRcdHN0ZGV2ICAgICA6IDAsXHJcblx0XHRcdGJpYXMgICAgICA6IDAsXHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdHRlc3QzOiB7XHJcblx0XHRcdGxpbmtlZFBhcnQ6IFwiaGVhZFwiLFxyXG5cdFx0XHRkZXNjICAgICAgOiBcIkRvZXMgdGhlIGNoYXJhY3RlciBoYXZlIGhvcm5zXCIsXHJcblx0XHRcdHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcblx0XHRcdGxvdyAgICAgICA6IC05MCxcclxuXHRcdFx0aGlnaCAgICAgIDogOTAsXHJcblx0XHRcdGF2ZyAgICAgICA6IDEsIC8vVE8gRE8gUkVNT1ZFIFRFU1RJTkdcclxuXHRcdFx0c3RkZXYgICAgIDogMCxcclxuXHRcdFx0YmlhcyAgICAgIDogMCxcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdHRlc3Q0OiB7XHJcblx0XHRcdGxpbmtlZFBhcnQ6IFwiaGVhZFwiLFxyXG5cdFx0XHRkZXNjICAgICAgOiBcIkRvZXMgdGhlIGNoYXJhY3RlciBoYXZlIGhvcm5zXCIsXHJcblx0XHRcdHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcblx0XHRcdGxvdyAgICAgICA6IC05MCxcclxuXHRcdFx0aGlnaCAgICAgIDogOTAsXHJcblx0XHRcdGF2ZyAgICAgICA6IDEsIC8vVE8gRE8gUkVNT1ZFIFRFU1RJTkdcclxuXHRcdFx0c3RkZXYgICAgIDogMCxcclxuXHRcdFx0YmlhcyAgICAgIDogMCxcclxuXHRcdH0sXHJcblx0XHQqL1xyXG5cdFx0Ly9XV0JCXHJcblx0XHRob3JueW5lc3M6IHtcclxuXHRcdFx0bGlua2VkUGFydDogXCJoZWFkXCIsXHJcblx0XHRcdGRlc2MgICAgICA6IFwiRG9lcyB0aGUgY2hhcmFjdGVyIGhhdmUgaG9ybnNcIixcclxuXHRcdFx0dW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuXHRcdFx0bG93ICAgICAgIDogMCxcclxuXHRcdFx0aGlnaCAgICAgIDogMixcclxuXHRcdFx0YXZnICAgICAgIDogMSwgLy9UTyBETyBSRU1PVkUgVEVTVElOR1xyXG5cdFx0XHRzdGRldiAgICAgOiAwLFxyXG5cdFx0XHRiaWFzICAgICAgOiAwLFxyXG5cdFx0fSxcclxuXHRcdHRhaWw6IHtcclxuXHRcdFx0bGlua2VkUGFydDogXCJidXR0XCIsXHJcblx0XHRcdGRlc2MgICAgICA6IFwiRG9lcyB0aGUgY2hhcmFjdGVyIGhhdmUgaG9ybnNcIixcclxuXHRcdFx0dW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuXHRcdFx0bG93ICAgICAgIDogMCxcclxuXHRcdFx0aGlnaCAgICAgIDogMixcclxuXHRcdFx0YXZnICAgICAgIDogMSwgLy9UTyBETyBSRU1PVkUgVEVTVElOR1xyXG5cdFx0XHRzdGRldiAgICAgOiAwLFxyXG5cdFx0XHRiaWFzICAgICAgOiAwLFxyXG5cdFx0fSxcclxuXHRcdHdpbmdzOiB7XHJcblx0XHRcdGxpbmtlZFBhcnQ6IFwiY2hlc3RcIixcclxuXHRcdFx0ZGVzYyAgICAgIDogXCJEb2VzIHRoZSBjaGFyYWN0ZXIgaGF2ZSBob3Juc1wiLFxyXG5cdFx0XHR1bml0cyAgICAgOiBcImFyYml0cmFyeVwiLFxyXG5cdFx0XHRsb3cgICAgICAgOiAwLFxyXG5cdFx0XHRoaWdoICAgICAgOiAyLFxyXG5cdFx0XHRhdmcgICAgICAgOiAxLCAvL1RPIERPIFJFTU9WRSBURVNUSU5HXHJcblx0XHRcdHN0ZGV2ICAgICA6IDAsXHJcblx0XHRcdGJpYXMgICAgICA6IDAsXHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHRhcmVvbGFTaXplICAgICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uQ0hFU1R9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiA1MCxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogMjAsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IDMsXHJcbiAgICAgICAgICAgIGNhbGMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREaW0oXCJhcmVvbGFTaXplXCIpICsgdGhpcy5nZXQoXCJwcmVnbmFuY3lcIik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcm1UaGlja25lc3MgICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uQVJNfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogNDUsXHJcbiAgICAgICAgICAgIGhpZ2ggICAgICA6IDk1LFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiA2NSxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogMyxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogLTcsXHJcbiAgICAgICAgICAgIGNhbGMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlID0gdGhpcy5nZXREaW0oXCJhcm1UaGlja25lc3NcIikgLSB0aGlzLmdldChcImZlbVwiKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgIC8vIHNjYWxlIGJ5IGhlaWdodCBzbyB0aGF0IHNob3J0ZXIgcGVvcGxlIGhhdmUgc2hvcnRlciBhcm0gbGVuZ3RoXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRqdXN0TGVuZ3RoQnlIZWlnaHQoYmFzZSwgdGhpcy5nZXREaW0oXCJoZWlnaHRcIiksIDAuMik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcm1MZW5ndGggICAgICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uQVJNfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwiY21cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMzAsXHJcbiAgICAgICAgICAgIGhpZ2ggICAgICA6IDgwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiA0NSxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgICAgICAgICAgY2FsYygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLmdldERpbShcImFybUxlbmd0aFwiKTtcclxuICAgICAgICAgICAgICAgIC8vIHNjYWxlIGJ5IGhlaWdodCBzbyB0aGF0IHNob3J0ZXIgcGVvcGxlIGhhdmUgc2hvcnRlciBhcm0gbGVuZ3RoXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRqdXN0TGVuZ3RoQnlIZWlnaHQoYmFzZSwgdGhpcy5nZXREaW0oXCJoZWlnaHRcIikpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmVsbHlQcm90cnVzaW9uOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLlRPUlNPfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwiY21cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogNjAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDAsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICAgICAgICAgIGNhbGMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREaW0oXCJiZWxseVByb3RydXNpb25cIikgKyB0aGlzLmdldChcInByZWduYW5jeVwiKSAqIDU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBicmVhc3RTaXplICAgICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uQ0hFU1R9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJjbVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgICAgLy9XV0JCIERBSEFLTUEgLSBib29zdGVkIHRvIGFsbG93IGJpZ2dlciBib29ic1xyXG5cdFx0XHRoaWdoICAgICAgOiA4MCxcclxuXHRcdFx0Ly9oaWdoOiA1MCwgXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IC0xLFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiA1LFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiAyMCxcclxuICAgICAgICAgICAgY2FsYygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERpbShcImJyZWFzdFNpemVcIikgKyB0aGlzLmdldChcImZlbVwiKSAqIDAuMSArIHRoaXMuZ2V0KFwicHJlZ25hbmN5XCIpICogMC43O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYnV0dEZ1bGxuZXNzICAgOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkJVVFR9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogNDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDEwLFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiA0LFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGltKFwiYnV0dEZ1bGxuZXNzXCIpICsgdGhpcy5nZXQoXCJmZW1cIikgKiAwLjI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaGluV2lkdGggICAgICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uSEVBRH1gLFxyXG4gICAgICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgICAgIGxvdyAgICAgICA6IDMwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiAxNDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDcwLFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiAtMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXllbGFzaExlbmd0aCAgOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkVZRUxBU0h9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiAxNSxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogMyxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogMyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV5ZVNpemUgICAgICAgIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5FWUVTfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogNDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDE1LFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiAzLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFjZUZlbSAgICAgICAgOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkhFQUR9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogNDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDE1LFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiAxNCxcclxuICAgICAgICAgICAgY2FsYygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERpbShcImZhY2VGZW1cIikgKyB0aGlzLmdldChcImZlbVwiKSAqIDAuNTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIGhvdyBsb25nIGlzIHlvdXIgZmFjZVxyXG4gICAgICAgIGZhY2VMZW5ndGggICAgIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5IRUFEfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMTgwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiAyNzAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDIzMCxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogNSxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogLTIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvLyBkZWZpbmVkIGFzIHJlbGF0aXZlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIGZhY2UgKHNvIGZhY2UgaGFsZiB3aWR0aClcclxuICAgICAgICBmYWNlV2lkdGggICAgICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uSEVBRH1gLFxyXG4gICAgICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgICAgIGxvdyAgICAgICA6IDc1LFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiAxMDUsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDkzLFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiAtMixcclxuICAgICAgICAgICAgY2FsYygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERpbShcImZhY2VXaWR0aFwiKSAtIHRoaXMuZ2V0KFwiZmVtXCIpICogMC41O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICBoYWlyTGVuZ3RoOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkhBSVJ9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJjbVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiAxMTAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDYsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IDEwLFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGltKFwiaGFpckxlbmd0aFwiKSArIHRoaXMuZ2V0KFwiZmVtXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFpclN0eWxlIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5IQUlSfWAsXHJcbiAgICAgICAgICAgIGRlc2MgICAgICA6IFwiSW5kZXggb2YgYmFzZSBoYWlyIHN0eWxlIHRvIGJlIHdvcm4gKGluZGl2aWR1YWwgcGFydHMgY2FuIGJlIHN3YXBwZWQgYWZ0ZXJ3YXJkcylcIixcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJpbmRleFwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiBzdHlsZXMubGVuZ3RoIC0gMSxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogMSxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogMSxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgICAgICAgICAgLy8gbmVlZHMgdG8gYmUgaW50ZWdlclxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5nZXREaW0oXCJoYWlyU3R5bGVcIikpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICBoYWlySHVlICAgICAgIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5IQUlSfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwiZGVncmVlXCIsXHJcbiAgICAgICAgICAgIGxvdyAgICAgICA6IDAsXHJcbiAgICAgICAgICAgIGhpZ2ggICAgICA6IDM2MCxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogMzAsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDMwLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFpclNhdHVyYXRpb246IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uSEFJUn1gLFxyXG4gICAgICAgICAgICB1bml0cyAgICAgOiBcIiVcIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogMTAwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiA1MCxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogMTAsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYWlyTGlnaHRuZXNzIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5IQUlSfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwiJVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiAxMDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDMwLFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAxMCxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhbmRTaXplICAgICAgOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkhBTkR9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiAyMDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDEwMCxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogNSxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogLTEwLFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuZ2V0RGltKFwiaGFuZFNpemVcIikgLSB0aGlzLmdldChcImZlbVwiKSAqIDAuMztcclxuICAgICAgICAgICAgICAgIHJldHVybiBhZGp1c3RMZW5ndGhCeUhlaWdodChiYXNlLCB0aGlzLmdldERpbShcImhlaWdodFwiKSwgMC40KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGVpZ2h0ICAgICAgICA6IHtcclxuICAgICAgICAgICAgdW5pdHM6IFwiY21cIixcclxuICAgICAgICAgICAgbG93ICA6IDUwLFxyXG4gICAgICAgICAgICBoaWdoIDogMjcwLFxyXG4gICAgICAgICAgICBhdmcgIDogMTY3LFxyXG4gICAgICAgICAgICBzdGRldjogMyxcclxuICAgICAgICAgICAgYmlhcyA6IC01LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGlwV2lkdGggICAgICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uVE9SU099YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiA3MCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogMjAwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiAxMjUsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDIuNSxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogMyxcclxuICAgICAgICAgICAgY2FsYygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERpbShcImhpcFdpZHRoXCIpICsgdGhpcy5nZXQoXCJmZW1cIikgKiAyO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICBsZWdGZW0gICAgIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5MRUd9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogNDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDEzLFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiA5LFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGltKFwibGVnRmVtXCIpICsgdGhpcy5nZXQoXCJmZW1cIikgKiAwLjY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxlZ0Z1bGxuZXNzOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkxFR31gLFxyXG4gICAgICAgICAgICBkZXNjICAgICAgOiBcIkFwcHJveGltYXRlbHkgaG93IHRoaWNrIHRoZSBsZWcgaXMgYXMgYSBjb21iaW5hdGlvbiBvZiBmYXQgYW5kIG11c2NsZVwiLFxyXG4gICAgICAgICAgICB1bml0cyAgICAgOiBcImFyYml0cmFyeVwiLFxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiA0MCxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogMTAsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDMsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IDIsXHJcbiAgICAgICAgICAgIGNhbGMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREaW0oXCJsZWdGdWxsbmVzc1wiKSArIHRoaXMuZ2V0KFwiZmVtXCIpICogMC41O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGVnTGVuZ3RoICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uTEVHfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwiY21cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMjAsXHJcbiAgICAgICAgICAgIGhpZ2ggICAgICA6IDIwMCxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogOTUsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDIuNSxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogNCxcclxuICAgICAgICAgICAgY2FsYygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLmdldERpbShcImxlZ0xlbmd0aFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhZGp1c3RMZW5ndGhCeUhlaWdodChiYXNlLCB0aGlzLmdldERpbShcImhlaWdodFwiKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaXBTaXplICAgIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5MSVBTfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogNDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDE0LFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAxLjUsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IDIsXHJcbiAgICAgICAgICAgIGNhbGMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREaW0oXCJsaXBTaXplXCIpICsgdGhpcy5nZXQoXCJmZW1cIikgKiAwLjA1O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG93ZXJNdXNjbGU6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uTEVHfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgICAgIGxvdyAgICAgICA6IDAsXHJcbiAgICAgICAgICAgIGhpZ2ggICAgICA6IDQwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiAxNixcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogMyxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogLTE3LFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGltKFwibG93ZXJNdXNjbGVcIikgLSB0aGlzLmdldChcImZlbVwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgbmVja0xlbmd0aDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5ORUNLfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogMTIwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiA3MixcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogNSxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIG5lY2tXaWR0aCA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uTkVDS31gLFxyXG4gICAgICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgICAgIGxvdyAgICAgICA6IDM1LFxyXG4gICAgICAgICAgICBoaWdoICAgICAgOiA3NSxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogNDUsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IC0yLFxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICBwZW5pc1NpemUgICAgOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkdFTklUQUxTfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogMjAwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiAyMCxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogNSxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogLTIwLFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZVNpemUgPSB0aGlzLmdldERpbShcInBlbmlzU2l6ZVwiKSAtIHRoaXMuZ2V0KFwiZmVtXCIpICogMC41O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VTaXplICsgdGhpcy5nZXRNb2QoXCJhcm91c2FsXCIpICogMC41O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaG91bGRlcldpZHRoOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkNIRVNUfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogMjAwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiA3MyxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogLTcsXHJcbiAgICAgICAgICAgIGNhbGMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlID0gdGhpcy5nZXREaW0oXCJzaG91bGRlcldpZHRoXCIpIC0gdGhpcy5nZXQoXCJmZW1cIikgKiAwLjM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRqdXN0TGVuZ3RoQnlIZWlnaHQoYmFzZSwgdGhpcy5nZXREaW0oXCJoZWlnaHRcIiksIDAuNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIHRyYW5zbHVjZW50ICgtMjApIHRvIHBvcmNlbGVpbiAoLTEwKSB0byBmYWlyICgtNSkgdG8gdGFubmVkICg1KSB0byBicm93biAoMTUpIHB1cmVcclxuICAgICAgICAvLyBibGFjayAoNTApXHJcbiAgICAgICAgc2tpbiAgICAgICAgIDoge1xyXG4gICAgICAgICAgICB1bml0czogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICAgICAgbG93ICA6IC0yMCxcclxuICAgICAgICAgICAgaGlnaCA6IDUwLFxyXG4gICAgICAgICAgICBhdmcgIDogNyxcclxuICAgICAgICAgICAgc3RkZXY6IDUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZXN0aWNsZVNpemUgOiB7XHJcbiAgICAgICAgICAgIGxpbmtlZFBhcnQ6IGAke0xvY2F0aW9uLkdFTklUQUxTfWAsXHJcbiAgICAgICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogMTAwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiAzNSxcclxuICAgICAgICAgICAgc3RkZXYgICAgIDogNCxcclxuICAgICAgICAgICAgYmlhcyAgICAgIDogLTIwLFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGltKFwidGVzdGljbGVTaXplXCIpIC0gdGhpcy5nZXQoXCJmZW1cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHVwcGVyTXVzY2xlICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uQ0hFU1R9YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogNDAsXHJcbiAgICAgICAgICAgIGF2ZyAgICAgICA6IDE0LFxyXG4gICAgICAgICAgICBzdGRldiAgICAgOiAzLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiAtMTUsXHJcbiAgICAgICAgICAgIGNhbGMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREaW0oXCJ1cHBlck11c2NsZVwiKSAtIHRoaXMuZ2V0KFwiZmVtXCIpICogMC41O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmFnaW5hU2l6ZSAgIDoge1xyXG4gICAgICAgICAgICBsaW5rZWRQYXJ0OiBgJHtMb2NhdGlvbi5HRU5JVEFMU31gLFxyXG4gICAgICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgICAgIGxvdyAgICAgICA6IDAsXHJcbiAgICAgICAgICAgIGhpZ2ggICAgICA6IDEwMCxcclxuICAgICAgICAgICAgYXZnICAgICAgIDogNDAsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDEwLFxyXG4gICAgICAgICAgICBiaWFzICAgICAgOiA1LFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGltKFwidmFnaW5hU2l6ZVwiKSArIHRoaXMuTW9kcy5sYWJpYUZ1bGxuZXNzICtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk1vZHMuYXJvdXNhbCAqIDAuMjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhaXN0V2lkdGggICA6IHtcclxuICAgICAgICAgICAgbGlua2VkUGFydDogYCR7TG9jYXRpb24uVE9SU099YCxcclxuICAgICAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLCAgLy8oY2VudGVyIHRvIGNsb3Nlc3QgcG9pbnQgaG9yaXpvbnRhbGx5KVxyXG4gICAgICAgICAgICBsb3cgICAgICAgOiA3MCxcclxuICAgICAgICAgICAgaGlnaCAgICAgIDogMTUwLFxyXG4gICAgICAgICAgICBhdmcgICAgICAgOiAxMjAsXHJcbiAgICAgICAgICAgIHN0ZGV2ICAgICA6IDMsXHJcbiAgICAgICAgICAgIGJpYXMgICAgICA6IC0zLFxyXG4gICAgICAgICAgICBjYWxjKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuZ2V0RGltKFwid2Fpc3RXaWR0aFwiKSAtIHRoaXMuZ2V0KFwiZmVtXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2UgKyB0aGlzLmdldERpbShcInVwcGVyTXVzY2xlXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59O1xyXG5cclxuXHJcbmZ1bmN0aW9uIGFkanVzdExlbmd0aEJ5SGVpZ2h0KGJhc2UsIGhlaWdodCwgd2VpZ2h0ID0gMSkge1xyXG4gICAgcmV0dXJuIGJhc2UgKiAoMSAtIHdlaWdodCkgKyBiYXNlICogd2VpZ2h0ICogaGVpZ2h0IC8gMTcwO1xyXG59XHJcblxyXG4vLyBmaXJzdCBlbGVtZW50IG9mIGRpc2NyZXRlIHBvb2xzIGlzIHRoZSBkZWZhdWx0XHJcbmV4cG9ydCBjb25zdCBiYXNlZGltRGlzY3JldGVQb29sID0ge1xyXG4gICAgZXllY29sb3I6IFtcIndoaXRlXCJdLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIERpbWVuc2lvbiBjYWxjdWxhdGlvbiBiYXNlZCBvbiBhdmF0YXIgc3RhdGlzdGljcy4gVGhlc2UgYXJlIGNhbGxiYWNrIG1ldGhvZHMgdGhhdFxyXG4gKiB0aGUgdXNlciBzaG91bGQgZGVmaW5lIHRvIGxpbmsgZXh0ZW5kZWQgZ2FtZXBsYXkgc3RhdHMgb24gdGhlIFBsYXllciB0byBwaHlzaWNhbCBkaW1lbnNpb25zLlxyXG4gKiBAY2FsbGJhY2sgZGltZW5zaW9uQ2FsY3VsYXRpb25cclxuICogQHRoaXMge21vZHVsZTpkYS5QbGF5ZXJ9IGF2YXRhciBvYmplY3RcclxuICogQHBhcmFtIHtudW1iZXJ9IGJhc2UgdGhpcyBkaW1lbnNpb24gYXMgY2FsY3VsYXRlZCBieSBhbGwgcHJldmlvdXMgY2FsY3VsYXRpb25zXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEV4dGVuZCB0aGUgd2F5IGEgZGltZW5zaW9uIGlzIGNhbGN1bGF0ZWQgdG8gcGx1ZyBpbiBhIHVzZXIgc3RhdGlzdGljcyBzeXN0ZW1cclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKiBAcGFyYW0geyhPYmplY3R8c3RyaW5nKX0gZGltRGVzYyBFaXRoZXIgdGhlIGRpbWVuc2lvbiBkZXNjcmlwdG9yIG9iamVjdCwgb3JcclxuICogYSBzdHJpbmcgaW4gdGhlIGZvcm1hdCBvZiBcInNrZWxldG9uLmRpbWVuc2lvblwiXHJcbiAqIEBwYXJhbSB7ZGltZW5zaW9uQ2FsY3VsYXRpb259IG5ld0NhbGMgVXNlciBtZXRob2QgZm9yIGNhbGN1bGF0aW5nIGRpbWVuc2lvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZERpbWVuc2lvbkNhbGMoZGltRGVzYywgbmV3Q2FsYykge1xyXG4gICAgaWYgKHR5cGVvZiBkaW1EZXNjID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgY29uc3QgW3NrZWxldG9uLCBkaW1dID0gZGltRGVzYy5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgZGltRGVzYyA9IGJhc2VEaW1EZXNjW3NrZWxldG9uXVtkaW1dO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9sZENhbGMgPSBkaW1EZXNjLmNhbGM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAndGhpcycgYXJndW1lbnQgc2hvdWxkIGJlIHRoZSBhdmF0YXJcclxuICAgICAqIEBwYXJhbSBhcmdzXHJcbiAgICAgKi9cclxuICAgIGRpbURlc2MuY2FsYyA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgbGV0IGJhc2U7XHJcbiAgICAgICAgaWYgKG9sZENhbGMpIHtcclxuICAgICAgICAgICAgYmFzZSA9IG9sZENhbGMuY2FsbCh0aGlzLCAuLi5hcmdzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBiYXNlID0gdGhpcy5nZXREaW0oZGltRGVzYy5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld0NhbGMuY2FsbCh0aGlzLCBiYXNlLCAuLi5hcmdzKTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkRGltZW5zaW9uRGVzY3JpcHRpb25zKCkge1xyXG4gICAgZm9yIChsZXQgc2tlbGV0b24gaW4gYmFzZURpbURlc2MpIHtcclxuICAgICAgICBpZiAoYmFzZURpbURlc2MuaGFzT3duUHJvcGVydHkoc2tlbGV0b24pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBiYXNlRGltRGVzY1tza2VsZXRvbl07XHJcbiAgICAgICAgZm9yIChsZXQgZGltIGluIGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbi5oYXNPd25Qcm9wZXJ0eShkaW0pKSB7XHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbltkaW1dLm5hbWUgPSBkaW07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuXHRkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNsb25lLFxyXG5cdGFkanVzdCxcclxuXHRpbnRlcnBvbGF0ZUN1cnZlLFxyXG5cdHRyYW5zZm9ybUN1cnZlLFxyXG5cdHJlZmxlY3QsXHJcblx0YnJlYWtQb2ludCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7YWRqdXN0Q29sb3J9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuaW1wb3J0IHtQYW50cyxDb3ZlcmVkQnV0dFBhcnR9IGZyb20gXCIuL3BhbnRzXCI7XHJcbmltcG9ydCB7XHJcblx0ZmluZEJldHdlZW4sXHJcblx0Z2V0TGltYlBvaW50cyxcclxuXHRnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCxcclxuXHRnZXRMYWNpbmdQb2ludHMsXHJcblx0cG9sYXIyY2FydGVzaWFuLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5pbXBvcnQge2NhbGNCZWx0fSBmcm9tIFwiLi9hY2Nlc3NvcnlcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjU3VwZXJQYW50c1RvcChleCl7XHJcblx0bGV0IG91dDtcclxuXHRsZXQgaGlwO1xyXG5cdGxldCB0aGlnaE91dDtcclxuXHRcdFxyXG5cdC8vVE9QXHJcblx0aWYodGhpcy53YWlzdENvdmVyYWdlPjApeyAvL2llIGluY2x1ZGVzIHRoZSBoaXBcclxuXHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSgoMS10aGlzLndhaXN0Q292ZXJhZ2UpLGV4LndhaXN0LGV4LmhpcCk7XHRcclxuXHRcdG91dCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0aGlwID0gdGVtcC5yaWdodC5wMjtcclxuICAgICAgICB0aGlnaE91dCA9IGV4LnRoaWdoLm91dDtcclxuXHR9ZWxzZXtcclxuXHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZShNYXRoLmFicyh0aGlzLndhaXN0Q292ZXJhZ2UpLGV4LmhpcCxleC50aGlnaC5vdXQpO1x0XHJcblx0XHRvdXQgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdC8vaGlwO1xyXG5cdFx0dGhpZ2hPdXQgPSB0ZW1wLnJpZ2h0LnAyO1xyXG5cdH1cclxuXHRcclxuXHRjb25zdCB3YWlzdEN1cnZlID0gb3V0LnkgLSBleC5oaXAueTtcclxuXHRsZXQgdG9wID0ge1xyXG5cdFx0eDogLTAuMiwgIFxyXG5cdFx0eTogZXgucGVsdmlzLnkgKyB3YWlzdEN1cnZlICogMS4yXHJcblx0fTtcclxuXHJcblx0b3V0LmNwMSA9IHtcclxuXHRcdHg6IG91dC54ICogMC41ICsgdG9wLnggKiAwLjUsXHJcblx0XHR5OiB0b3AueVxyXG5cdH07XHJcblx0XHJcblx0cmV0dXJuIHtcclxuXHRcdHRvcCxcclxuXHRcdG91dCwgXHJcblx0XHRoaXAsXHJcblx0XHR0aGlnaE91dCxcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjU3VwZXJQYW50cyhleCl7XHJcblx0Y29uc3QgbWF4X3NraXJ0X3dpZHRoID0gNTA7XHJcblx0Y29uc3Qge3RvcCxvdXQsaGlwLHRoaWdoT3V0fSA9IGNhbGNTdXBlclBhbnRzVG9wLmNhbGwodGhpcyxleCk7XHJcblx0XHJcblx0bGV0IGdyb2luID0gYWRqdXN0KGV4Lmdyb2luLC0wLjIsMCk7XHJcblx0aWYodGhpcy5pbm5lckxvb3NlPDEpe1xyXG5cdFx0Z3JvaW4uY3AxID0ge1xyXG5cdFx0XHR4OiBncm9pbi54ICogMC41ICsgZXgudGhpZ2gudG9wLnggKiAwLjUsXHJcblx0XHRcdHk6IGdyb2luLnlcclxuXHRcdH07XHJcblx0fVxyXG5cdFx0XHJcblx0Ly9PVVRFUjpcdFxyXG5cdGxldCBvdXRlclBvaW50cyA9IFtdO1xyXG5cdFx0XHRcclxuXHRjb25zdCBhZGRQb2ludHNTdGFydCA9IFtdOyAvL2llIHNob3VsZCBiZSBoaXAgaW5jbHVkZWQ/XHJcblx0XHRhZGRQb2ludHNTdGFydFswXSA9IG91dDtcclxuXHRcdGFkZFBvaW50c1N0YXJ0WzFdID0gKG91dC55PmV4LmhpcC55KSA/IGhpcCA6IHZvaWQgMDtcclxuXHRcdFx0XHJcblx0Y29uc3QgYWRkUG9pbnRzTWlkID0gW107IC8vaWUgc2hvdWxkIGJlIG11c2NsZXMgaW5jbHVkZWQ/XHJcblx0XHRpZih0eXBlb2YgZXgucXVhZHMgIT09IFwidW5kZWZpbmVkXCIpe1xyXG5cdFx0XHRhZGRQb2ludHNNaWRbMF0gPSAgY2xvbmUoZXgucXVhZHMudG9wKTtcclxuXHRcdFx0YWRkUG9pbnRzTWlkWzBdLnggPSAgZXgudGhpZ2gub3V0Lng7XHJcblx0XHRcdGFkZFBvaW50c01pZFsxXSA9IGNsb25lKGV4LnF1YWRzLm91dCk7XHJcblx0XHR9XHJcblx0XHRcdFx0XHJcblx0aWYodGhpcy5vdXRlckxvb3NlPj0xKXsgLy9TS0lSVFxyXG5cdFx0bGV0IHRvdGFsTGVnTGVuZ3RoID0gZXguaGlwLnktKCAoZXguaGlwLnktZXguYW5rbGUub3V0LnkpKnRoaXMubGVnQ292ZXJhZ2UgKTtcclxuXHRcdGlmICh0b3RhbExlZ0xlbmd0aDxleC50aGlnaC5vdXQueSl7IC8vbG9uZyBza2lydFxyXG5cdFx0XHRvdXRlclBvaW50cyA9IGdldExpbWJQb2ludHMoZXguaGlwLGV4LmFua2xlLm91dCx0aGlzLmxlZ0NvdmVyYWdlLC4uLmFkZFBvaW50c1N0YXJ0LHRoaWdoT3V0KTtcclxuXHRcdFx0XHJcblx0XHRcdGxldCBpbmRleDtcclxuXHRcdFx0aWYodGhpcy5idXN0bGUpe1xyXG5cdFx0XHRcdGluZGV4PW91dGVyUG9pbnRzLmxlbmd0aDtcclxuXHRcdFx0XHRvdXRlclBvaW50c1tpbmRleF0gPSBleHRyYWN0UG9pbnQoZXgudGhpZ2gub3V0KTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0aW5kZXg9b3V0ZXJQb2ludHMubGVuZ3RoLTE7XHJcblx0XHRcdFx0b3V0ZXJQb2ludHNbaW5kZXhdID0gY2xvbmUoZXgudGhpZ2gub3V0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdG91dGVyUG9pbnRzW2luZGV4XS55ID0gdG90YWxMZWdMZW5ndGg7XHJcblx0XHRcdG91dGVyUG9pbnRzW2luZGV4XS54ICs9ICh0aGlzLm91dGVyTG9vc2UtMSkqKG1heF9za2lydF93aWR0aCp0aGlzLmxlZ0NvdmVyYWdlKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKCF0aGlzLmJ1c3RsZSl7XHQvL2ZvciBtYWxlcyB3aXRoIGxvdyBsZWdGZW0sIHF1aWNrZml4LCBhd2Z1bCwgc2hvdWxkIGJlIGRvbmUgc2ltcGxlciB3YXlcclxuXHRcdFx0XHRsZXQgdGVtcCA9IGludGVycG9sYXRlQ3VydmUob3V0ZXJQb2ludHNbaW5kZXgtMV0sb3V0ZXJQb2ludHNbaW5kZXhdLHt4Om51bGwseTpleC50aGlnaC5vdXQueX0pO1xyXG5cdFx0XHRcdGlmKHRlbXBbMF0ueDxleC50aGlnaC5vdXQueCl7XHJcblx0XHRcdFx0XHRvdXRlclBvaW50c1tpbmRleCsxXSA9IGV4dHJhY3RQb2ludChvdXRlclBvaW50c1tpbmRleF0pO1xyXG5cdFx0XHRcdFx0b3V0ZXJQb2ludHNbaW5kZXhdID0gZXgudGhpZ2gub3V0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFxyXG5cdFx0fWVsc2V7IC8vc2hvcnQgc2tpcnRcclxuXHRcdFx0b3V0ZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzKGV4LmhpcCxleC5hbmtsZS5vdXQsdGhpcy5sZWdDb3ZlcmFnZSwuLi5hZGRQb2ludHNTdGFydCx0aGlnaE91dCk7XHJcblx0XHRcdG91dGVyUG9pbnRzW291dGVyUG9pbnRzLmxlbmd0aC0xXS55ID0gdG90YWxMZWdMZW5ndGg7XHJcblx0XHRcdG91dGVyUG9pbnRzW291dGVyUG9pbnRzLmxlbmd0aC0xXS54ICs9ICh0aGlzLm91dGVyTG9vc2UtMSkqKG1heF9za2lydF93aWR0aCp0aGlzLmxlZ0NvdmVyYWdlKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1lbHNlIGlmKHRoaXMub3V0ZXJMb29zZT4wKXsgLy9MT09TRVxyXG5cdFx0bGV0IG1heDtcclxuXHRcdGlmKHR5cGVvZiBleC5xdWFkcyAhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdG1heCA9IGZpbmRCZXR3ZWVuKGV4LnF1YWRzLm91dC54LGV4LnF1YWRzLm91dC5jcDEueCwwLjUpO1xyXG5cdFx0fWVsc2V7IFxyXG5cdFx0XHRtYXggPSBleC50aGlnaC5vdXQueDtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0b3V0ZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzKGV4LmhpcCxleC5hbmtsZS5vdXQsdGhpcy5sZWdDb3ZlcmFnZSwuLi5hZGRQb2ludHNTdGFydCx0aGlnaE91dCwuLi5hZGRQb2ludHNNaWQsZXgua25lZS5vdXQsZXguY2FsZi5vdXQsZXguYW5rbGUub3V0KTtcclxuXHRcdFxyXG5cdFx0Ly9hZGp1c3QgWCBidXQgbm90IG1vcmUgdGhhbiBtYXggJiBzbW9vdGggY29udHJvbCBwb2ludHMgXHJcblx0XHRsZXQgc2tpcHBlZF9wb2ludHM9YWRkUG9pbnRzU3RhcnQubGVuZ3RoKzE7IC8vaGlwK3RoaWdoO1xyXG5cdFx0aWYoYWRkUG9pbnRzTWlkLmxlbmd0aD4wKXtcclxuXHRcdFx0c2tpcHBlZF9wb2ludHMrKzsvLyttdXNjbGVzXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGZvcihsZXQgaWk9c2tpcHBlZF9wb2ludHM7aWk8b3V0ZXJQb2ludHMubGVuZ3RoO2lpKyspe1xyXG5cdFx0XHRvdXRlclBvaW50c1tpaV0ueCA9IGZpbmRCZXR3ZWVuKG91dGVyUG9pbnRzW2lpXS54LG1heCx0aGlzLm91dGVyTG9vc2UpO1xyXG5cdFx0XHRpZihvdXRlclBvaW50c1tpaV0uY3AxKXsgXHJcblx0XHRcdFx0b3V0ZXJQb2ludHNbaWldLmNwMS54ID0gZmluZEJldHdlZW4ob3V0ZXJQb2ludHNbaWldLmNwMS54LG1heCx0aGlzLm91dGVyTG9vc2UpIFxyXG5cdFx0XHR9XHJcblx0XHRcdGlmKG91dGVyUG9pbnRzW2lpXS5jcDIpeyBcclxuXHRcdFx0XHRvdXRlclBvaW50c1tpaV0uY3AyLnggPSBmaW5kQmV0d2VlbihvdXRlclBvaW50c1tpaV0uY3AyLngsbWF4LHRoaXMub3V0ZXJMb29zZSkgXHJcblx0XHRcdH1cclxuXHRcdH1cdFxyXG5cdH1lbHNley8vVElHSFRcclxuXHRcdG91dGVyUG9pbnRzID0gZ2V0TGltYlBvaW50cyhleC5oaXAsZXguYW5rbGUub3V0LHRoaXMubGVnQ292ZXJhZ2Usb3V0LGhpcCx0aGlnaE91dCwuLi5hZGRQb2ludHNNaWQsZXgua25lZS5vdXQsZXguY2FsZi5vdXQsZXguYW5rbGUub3V0KTtcclxuXHR9XHRcdFxyXG5cdFx0XHJcblx0Ly9JTk5FUlxyXG5cdGxldCBpbm5lclBvaW50cyA9IFtdO1xyXG5cdFx0Ly8/PyB1c2UgY2FsdWN1bGF0ZWQgZ3JvaW5cclxuXHRpZih0aGlzLmlubmVyTG9vc2U+PTEpe1xyXG5cdFx0aW5uZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludChvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0sdHJ1ZSx0b3AsZXgudGhpZ2guaW4sZXgua25lZS5pbnRvcCxleC5rbmVlLmluLGV4LmNhbGYuaW4sZXguYW5rbGUuaW4pO1xyXG5cdH1lbHNle1xyXG5cdFx0aW5uZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludChvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0sdHJ1ZSxncm9pbixleC50aGlnaC5pbixleC5rbmVlLmludG9wLGV4LmtuZWUuaW4sZXguY2FsZi5pbixleC5hbmtsZS5pbik7XHJcblx0fVxyXG5cclxuXHRpbm5lclBvaW50c1swXSA9IGV4dHJhY3RQb2ludChpbm5lclBvaW50c1swXSk7XHJcblx0XHJcblx0Ly9BREpVU1QgSU5ORVIgUE9JTlRTIHRvIG5vdCByZWFjaCBpbnRvIG5lZ2F0aXZlIHZhbHVlcyBcclxuIFx0aWYodGhpcy5pbm5lckxvb3NlPjApe1xyXG5cdFx0aW5uZXJQb2ludHNbMF0ueCAtPSAgaW5uZXJQb2ludHNbMF0ueCAqIHRoaXMuaW5uZXJMb29zZTtcclxuXHRcdFxyXG5cdFx0Zm9yIChsZXQgaWk9MTsgaWk8aW5uZXJQb2ludHMubGVuZ3RoOyBpaSsrKXsgXHJcblx0XHRcdC8vdHJhbnNmb3JtQ3VydmUodCwgcDEsIGluaXRQMiwgZW5kUDIpXHJcblx0XHRcdGlubmVyUG9pbnRzW2lpXSA9IHRyYW5zZm9ybUN1cnZlKHRoaXMuaW5uZXJMb29zZSwgaW5uZXJQb2ludHNbaWktMV0sIGlubmVyUG9pbnRzW2lpXSwge3g6MCx5OmlubmVyUG9pbnRzW2lpXS55fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8vQ1VSVkVEIEJPVFRPTVxyXG5cdGlmKHRoaXMuaW5uZXJMb29zZTwxJiZpbm5lclBvaW50c1swXS55PGV4Lmdyb2luLnkpeyAvL3BhbnRzXHJcblx0XHRpbm5lclBvaW50c1swXS5jcDEgPSB7XHJcblx0XHRcdHggOiBmaW5kQmV0d2VlbihvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0ueCxpbm5lclBvaW50c1swXS54LDAuNSksXHJcblx0XHRcdHkgOiBpbm5lclBvaW50c1swXS55KzMsXHJcblx0XHR9O1x0XHJcblx0fWVsc2UgaWYodGhpcy5pbm5lckxvb3NlPj0xKXsgLy9za2lydFxyXG5cdFx0b3V0ZXJQb2ludHNbb3V0ZXJQb2ludHMubGVuZ3RoLTFdLnkgKz0gMjtcclxuXHRcdGlubmVyUG9pbnRzWzBdLnkgLT0gMjtcclxuXHRcdGlubmVyUG9pbnRzWzBdLnggLT0gMC4yO1xyXG5cdFx0aW5uZXJQb2ludHNbMF0uY3AxID0ge1xyXG5cdFx0XHR4OiBpbm5lclBvaW50c1swXS54ICogMC41ICsgb3V0ZXJQb2ludHNbb3V0ZXJQb2ludHMubGVuZ3RoLTFdLnggKiAwLjUsXHJcblx0XHRcdHk6IGlubmVyUG9pbnRzWzBdLnkgXHJcblx0XHR9O1xyXG5cdH1cdFxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9wLFxyXG5cdFx0b3V0LFxyXG4gICAgICAgIGhpcCxcclxuICAgICAgICB0aGlnaE91dCxcclxuICAgICAgICBncm9pbixcclxuXHRcdG91dGVyUG9pbnRzLFxyXG5cdFx0aW5uZXJQb2ludHMsXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY1N1cGVyUGFudHNaaXAoZXgpIHtcclxuXHRsZXQge3RvcCwgb3V0LCBoaXAsIHRoaWdoT3V0LCBncm9pbiwgb3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzfSA9IGNhbGNTdXBlclBhbnRzLmNhbGwodGhpcyxleCk7IFxyXG5cdFxyXG5cdC8vWklQXHJcblx0bGV0IHRlbXA7XHJcblx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy56aXBPcGVuLHRvcCxvdXQpO1x0XHJcblx0bGV0IG1pZCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdG91dCA9IHRlbXAucmlnaHQucDI7XHJcblx0XHJcblx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy56aXBEZWVwLHRvcCxncm9pbik7XHRcclxuXHRsZXQgemlwID0ge3g6LTAuMix5OnRlbXAubGVmdC5wMi55fTtcclxuXHRcclxuICAgIHJldHVybiB7XHJcblx0XHR6aXAsXHJcbiAgICAgICAgdG9wLFxyXG5cdFx0bWlkLFxyXG5cdFx0b3V0LFxyXG4gICAgICAgIGhpcCxcclxuICAgICAgICB0aGlnaE91dCxcclxuICAgICAgICBncm9pbixcclxuXHRcdG91dGVyUG9pbnRzLFxyXG5cdFx0aW5uZXJQb2ludHMsXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY1N1cGVyUGFudHMyKGV4LG9wZW4sZGVlcCx3YWlzdENvdmVyYWdlLGxlZ0NvdmVyYWdlLG91dGVyTG9vc2UsaW5uZXJMb29zZSxidXN0bGUpIHtcclxuXHRjb25zdCBtYXhfc2tpcnRfd2lkdGggPSA1MDtcclxuXHJcblx0bGV0IG91dDtcclxuXHRsZXQgaGlwO1xyXG5cdGxldCB0aGlnaE91dDtcclxuXHRsZXQgdGVtcDtcclxuXHRcclxuXHQvL1RPUFxyXG5cdGlmKHdhaXN0Q292ZXJhZ2U+MCl7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgoMS13YWlzdENvdmVyYWdlKSxleC53YWlzdCxleC5oaXApO1x0XHJcblx0XHRvdXQgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdGhpcCA9IHRlbXAucmlnaHQucDI7XHJcbiAgICAgICAgdGhpZ2hPdXQgPSBleC50aGlnaC5vdXQ7XHJcblx0fWVsc2V7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZShNYXRoLmFicyh3YWlzdENvdmVyYWdlKSxleC5oaXAsZXgudGhpZ2gub3V0KTtcdFxyXG5cdFx0b3V0ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHQvL2hpcDtcclxuXHRcdHRoaWdoT3V0ID0gdGVtcC5yaWdodC5wMjtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0Y29uc3Qgd2Fpc3RDdXJ2ZSA9IG91dC55IC0gZXguaGlwLnk7XHJcblx0bGV0IHRvcCA9IHtcclxuXHRcdHg6IC0wLjEsICBcclxuXHRcdHk6IGV4LnBlbHZpcy55ICsgd2Fpc3RDdXJ2ZSAqIDEuMlxyXG5cdH07XHJcblxyXG5cdG91dC5jcDEgPSB7XHJcblx0XHR4OiBvdXQueCAqIDAuNSArIHRvcC54ICogMC41LFxyXG5cdFx0eTogdG9wLnlcclxuXHR9O1xyXG5cdFxyXG5cdGxldCBncm9pbiA9IGFkanVzdChleC5ncm9pbiwtMC4xLDApO1xyXG5cdGlmKGlubmVyTG9vc2U8MSl7XHJcblx0XHRncm9pbi5jcDEgPSB7XHJcblx0XHRcdHg6IGdyb2luLnggKiAwLjUgKyBleC50aGlnaC50b3AueCAqIDAuNSxcclxuXHRcdFx0eTogZ3JvaW4ueVxyXG5cdFx0fTtcclxuXHR9XHJcblx0XHJcblx0Ly9aSVBcclxuXHRcclxuXHR0ZW1wID0gc3BsaXRDdXJ2ZShvcGVuLHRvcCxvdXQpO1x0XHJcblx0bGV0IG1pZCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdG91dCA9IHRlbXAucmlnaHQucDI7XHJcblx0XHJcblx0dGVtcCA9IHNwbGl0Q3VydmUoZGVlcCx0b3AsZ3JvaW4pO1x0XHJcblx0bGV0IGNlbnRlciA9IHt4OjAseTp0ZW1wLmxlZnQucDIueX07XHJcblx0XHJcblx0Lyp0b3AgPSBhZGp1c3QodG9wLDAsLWRlZXApO1xyXG5cdGxldCBtaWQ7XHJcblx0Ki9cclxuXHQvL09VVEVSOlx0XHJcblx0bGV0IG91dGVyUG9pbnRzID0gW107XHJcblx0XHRcdFxyXG5cdGNvbnN0IGFkZFBvaW50c1N0YXJ0ID0gW107IC8vaWUgc2hvdWxkIGJlIGhpcCBpbmNsdWRlZD9cclxuXHRcdGFkZFBvaW50c1N0YXJ0WzBdID0gb3V0O1xyXG5cdFx0aWYob3V0Lnk+ZXguaGlwLnkpYWRkUG9pbnRzU3RhcnRbMV09aGlwO1xyXG5cdFx0XHRcclxuXHRjb25zdCBhZGRQb2ludHNNaWQgPSBbXTsgLy9pZSBzaG91bGQgYmUgbXVzY2xlcyBpbmNsdWRlZD9cclxuXHRcdGlmKHR5cGVvZiBleC5xdWFkcyAhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdGFkZFBvaW50c01pZFswXSA9ICBjbG9uZShleC5xdWFkcy50b3ApO1xyXG5cdFx0XHRhZGRQb2ludHNNaWRbMF0ueCA9ICBleC50aGlnaC5vdXQueDtcclxuXHRcdFx0YWRkUG9pbnRzTWlkWzFdID0gY2xvbmUoZXgucXVhZHMub3V0KTtcclxuXHRcdH1cclxuXHRcdFx0XHRcclxuXHRpZihvdXRlckxvb3NlPj0xKXsgLy9TS0lSVFxyXG5cdFx0bGV0IHRvdGFsTGVnTGVuZ3RoID0gZXguaGlwLnktKCAoZXguaGlwLnktZXguYW5rbGUub3V0LnkpKmxlZ0NvdmVyYWdlICk7XHJcblx0XHRpZiAodG90YWxMZWdMZW5ndGg8ZXgudGhpZ2gub3V0LnkpeyAvL2xvbmcgc2tpcnRcclxuXHRcdFx0b3V0ZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzKGV4LmhpcCxleC5hbmtsZS5vdXQsbGVnQ292ZXJhZ2UsLi4uYWRkUG9pbnRzU3RhcnQsdGhpZ2hPdXQpO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IGluZGV4O1xyXG5cdFx0XHRpZihidXN0bGUpe1xyXG5cdFx0XHRcdGluZGV4PW91dGVyUG9pbnRzLmxlbmd0aDtcclxuXHRcdFx0XHRvdXRlclBvaW50c1tpbmRleF0gPSBleHRyYWN0UG9pbnQoZXgudGhpZ2gub3V0KTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0aW5kZXg9b3V0ZXJQb2ludHMubGVuZ3RoLTE7XHJcblx0XHRcdFx0b3V0ZXJQb2ludHNbaW5kZXhdID0gY2xvbmUoZXgudGhpZ2gub3V0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdG91dGVyUG9pbnRzW2luZGV4XS55ID0gdG90YWxMZWdMZW5ndGg7XHJcblx0XHRcdG91dGVyUG9pbnRzW2luZGV4XS54ICs9IChvdXRlckxvb3NlLTEpKihtYXhfc2tpcnRfd2lkdGgqbGVnQ292ZXJhZ2UpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoIWJ1c3RsZSl7XHQvL2ZvciBtYWxlcyB3aXRoIGxvdyBsZWdGZW0sIHF1aWNrZml4LCBhd2Z1bCwgc2hvdWxkIGJlIGRvbmUgc2ltcGxlciB3YXlcclxuXHRcdFx0XHRsZXQgdGVtcCA9IGludGVycG9sYXRlQ3VydmUob3V0ZXJQb2ludHNbaW5kZXgtMV0sb3V0ZXJQb2ludHNbaW5kZXhdLHt4Om51bGwseTpleC50aGlnaC5vdXQueX0pO1xyXG5cdFx0XHRcdGlmKHRlbXBbMF0ueDxleC50aGlnaC5vdXQueCl7XHJcblx0XHRcdFx0XHRvdXRlclBvaW50c1tpbmRleCsxXSA9IGV4dHJhY3RQb2ludChvdXRlclBvaW50c1tpbmRleF0pO1xyXG5cdFx0XHRcdFx0b3V0ZXJQb2ludHNbaW5kZXhdID0gZXgudGhpZ2gub3V0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFxyXG5cdFx0fWVsc2V7IC8vc2hvcnQgc2tpcnRcclxuXHRcdFx0b3V0ZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzKGV4LmhpcCxleC5hbmtsZS5vdXQsbGVnQ292ZXJhZ2UsLi4uYWRkUG9pbnRzU3RhcnQsdGhpZ2hPdXQpO1xyXG5cdFx0XHRvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0ueSA9IHRvdGFsTGVnTGVuZ3RoO1xyXG5cdFx0XHRvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0ueCArPSAob3V0ZXJMb29zZS0xKSoobWF4X3NraXJ0X3dpZHRoKmxlZ0NvdmVyYWdlKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdH1lbHNlIGlmKG91dGVyTG9vc2U+MCl7IC8vTE9PU0VcclxuXHRcdGxldCBtYXg7XHJcblx0XHRpZih0eXBlb2YgZXgucXVhZHMgIT09IFwidW5kZWZpbmVkXCIpe1xyXG5cdFx0XHRtYXggPSBmaW5kQmV0d2VlbihleC5xdWFkcy5vdXQueCxleC5xdWFkcy5vdXQuY3AxLngsMC41KTtcclxuXHRcdH1lbHNleyBcclxuXHRcdFx0bWF4ID0gZXgudGhpZ2gub3V0Lng7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdG91dGVyUG9pbnRzID0gZ2V0TGltYlBvaW50cyhleC5oaXAsZXguYW5rbGUub3V0LGxlZ0NvdmVyYWdlLC4uLmFkZFBvaW50c1N0YXJ0LHRoaWdoT3V0LC4uLmFkZFBvaW50c01pZCxleC5rbmVlLm91dCxleC5jYWxmLm91dCxleC5hbmtsZS5vdXQpO1xyXG5cdFx0XHJcblx0XHQvL2FkanVzdCBYIGJ1dCBub3QgbW9yZSB0aGFuIG1heCAmIHNtb290aCBjb250cm9sIHBvaW50cyBcclxuXHRcdGxldCBza2lwcGVkX3BvaW50cz1hZGRQb2ludHNTdGFydC5sZW5ndGgrMTsgLy9oaXArdGhpZ2g7XHJcblx0XHRpZihhZGRQb2ludHNNaWQubGVuZ3RoPjApc2tpcHBlZF9wb2ludHMrKzsvLyttdXNjbGVzXHJcblx0XHRcclxuXHRcdGZvcihsZXQgaWk9c2tpcHBlZF9wb2ludHM7aWk8b3V0ZXJQb2ludHMubGVuZ3RoO2lpKyspe1xyXG5cdFx0XHRvdXRlclBvaW50c1tpaV0ueCA9IGZpbmRCZXR3ZWVuKG91dGVyUG9pbnRzW2lpXS54LG1heCxvdXRlckxvb3NlKTtcclxuXHRcdFx0aWYob3V0ZXJQb2ludHNbaWldLmNwMSl7IG91dGVyUG9pbnRzW2lpXS5jcDEueCA9IGZpbmRCZXR3ZWVuKG91dGVyUG9pbnRzW2lpXS5jcDEueCxtYXgsb3V0ZXJMb29zZSkgfVxyXG5cdFx0XHRpZihvdXRlclBvaW50c1tpaV0uY3AyKXsgb3V0ZXJQb2ludHNbaWldLmNwMi54ID0gZmluZEJldHdlZW4ob3V0ZXJQb2ludHNbaWldLmNwMi54LG1heCxvdXRlckxvb3NlKSB9XHJcblx0XHR9XHRcclxuXHR9ZWxzZXsvL1RJR0hUXHJcblx0XHRvdXRlclBvaW50cyA9IGdldExpbWJQb2ludHMoZXguaGlwLGV4LmFua2xlLm91dCxsZWdDb3ZlcmFnZSxvdXQsaGlwLHRoaWdoT3V0LC4uLmFkZFBvaW50c01pZCxleC5rbmVlLm91dCxleC5jYWxmLm91dCxleC5hbmtsZS5vdXQpO1xyXG5cdH1cdFx0XHJcblx0XHRcclxuXHQvL0lOTkVSXHJcblx0bGV0IGlubmVyUG9pbnRzID0gW107XHJcblx0XHQvLz8/IHVzZSBjYWx1Y3VsYXRlZCBncm9pblxyXG5cdGlmKGlubmVyTG9vc2U+PTEpe1xyXG5cdFx0aW5uZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludChvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0sdHJ1ZSx0b3AsZXgudGhpZ2guaW4sZXgua25lZS5pbnRvcCxleC5rbmVlLmluLGV4LmNhbGYuaW4sZXguYW5rbGUuaW4pO1xyXG5cdH1lbHNle1xyXG5cdFx0aW5uZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludChvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0sdHJ1ZSxncm9pbixleC50aGlnaC5pbixleC5rbmVlLmludG9wLGV4LmtuZWUuaW4sZXguY2FsZi5pbixleC5hbmtsZS5pbik7XHJcblx0fVxyXG5cclxuXHRpbm5lclBvaW50c1swXSA9IGV4dHJhY3RQb2ludChpbm5lclBvaW50c1swXSk7XHJcblx0XHJcblx0Ly9BREpVU1QgSU5ORVIgUE9JTlRTIHRvIG5vdCByZWFjaCBpbnRvIG5lZ2F0aXZlIHZhbHVlcyBcclxuIFx0aWYoaW5uZXJMb29zZT4wKXtcclxuXHRcdGlubmVyUG9pbnRzWzBdLnggLT0gIGlubmVyUG9pbnRzWzBdLnggKiBpbm5lckxvb3NlO1xyXG5cdFx0XHJcblx0XHRmb3IgKGxldCBpaT0xOyBpaTxpbm5lclBvaW50cy5sZW5ndGg7IGlpKyspeyBcclxuXHRcdFx0Ly90cmFuc2Zvcm1DdXJ2ZSh0LCBwMSwgaW5pdFAyLCBlbmRQMilcclxuXHRcdFx0aW5uZXJQb2ludHNbaWldID0gdHJhbnNmb3JtQ3VydmUoaW5uZXJMb29zZSwgaW5uZXJQb2ludHNbaWktMV0sIGlubmVyUG9pbnRzW2lpXSwge3g6MCx5OmlubmVyUG9pbnRzW2lpXS55fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdC8vQ1VSVkVEIEJPVFRPTVxyXG5cdGlmKGlubmVyTG9vc2U8MSYmaW5uZXJQb2ludHNbMF0ueTxleC5ncm9pbi55KXsgLy9wYW50c1xyXG5cdFx0aW5uZXJQb2ludHNbMF0uY3AxID0ge1xyXG5cdFx0XHR4IDogZmluZEJldHdlZW4ob3V0ZXJQb2ludHNbb3V0ZXJQb2ludHMubGVuZ3RoLTFdLngsaW5uZXJQb2ludHNbMF0ueCwwLjUpLFxyXG5cdFx0XHR5IDogaW5uZXJQb2ludHNbMF0ueSszLFxyXG5cdFx0fTtcdFxyXG5cdH1lbHNlIGlmKGlubmVyTG9vc2U+PTEpeyAvL3NraXJ0XHJcblx0XHRvdXRlclBvaW50c1tvdXRlclBvaW50cy5sZW5ndGgtMV0ueSArPSAyO1xyXG5cdFx0aW5uZXJQb2ludHNbMF0ueSArPSAtMjtcclxuXHRcdGlubmVyUG9pbnRzWzBdLmNwMSA9IHtcclxuXHRcdFx0eDogaW5uZXJQb2ludHNbMF0ueCAqIDAuNSArIG91dGVyUG9pbnRzW291dGVyUG9pbnRzLmxlbmd0aC0xXS54ICogMC41LFxyXG5cdFx0XHR5OiBpbm5lclBvaW50c1swXS55IFxyXG5cdFx0fTtcclxuXHR9XHRcclxuXHRcdFx0XHJcblx0Ly9UT0RPP1xyXG5cdGlmKG91dC55PmV4LmhpcC55JiZvdXQueTxleC5oaXAueSsxMCl7IC8vdGhlcmUgaXMgbG9vc2UgbG9vcCB2aXNpYmxlIGFyb3VuZCBiZWx0IGxpbmUgYW5kIGxvb2tzIGxpa2Ugc2hpdFxyXG5cdFx0aWYodHlwZW9mIG91dGVyUG9pbnRzWzFdIT09XCJ1bmRlZmluZWRcIilvdXRlclBvaW50c1sxXT1leHRyYWN0UG9pbnQob3V0ZXJQb2ludHNbMV0pO1xyXG5cdH1cclxuXHJcblxyXG5cdFxyXG5cdFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBvdXQsXHJcbiAgICAgICAgaGlwLFxyXG4gICAgICAgIHRvcCxcclxuXHRcdGNlbnRlcixcclxuXHRcdG1pZCxcclxuICAgICAgICB0aGlnaE91dCxcclxuICAgICAgICBncm9pbixcclxuXHRcdG91dGVyUG9pbnRzLFxyXG5cdFx0aW5uZXJQb2ludHMsXHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3VwZXJQYW50c1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuXHRcdC8vXHRiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgY29uc3Qge3RvcCwgb3V0LCBoaXAsIHRoaWdoT3V0LCBncm9pbiwgb3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzfSA9IGNhbGNTdXBlclBhbnRzLmNhbGwodGhpcyxleCk7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRpZih0aGlzLmlubmVyTG9vc2U+PTEpeyAvL3NraXJ0IC0gZG8gbm90IGRyYXcgdGhlIG1pZGRsZSBsaW5lXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIHRvcCwgLi4ub3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzWzBdLHRvcCk7XHJcblx0XHRcdGN0eC5maWxsKCk7IFxyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgLi4ub3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzWzBdKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIHRvcCwgLi4ub3V0ZXJQb2ludHMsICAuLi5pbm5lclBvaW50cywgZ3JvaW4sIHRvcCk7XHJcblx0XHRcdGN0eC5maWxsKCk7IFxyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgLi4ub3V0ZXJQb2ludHMsICAuLi5pbm5lclBvaW50cywgZ3JvaW4pO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vYmVsdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuYmVsdDtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCB0b3AsYWRqdXN0KG91dCwtMC41LDApKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG5cdHRoZSBzYW1lIHRoaW5nIGFzIFN1cGVyUGFudHNQYXJ0LCBidXQgZHJhd24gQkVMTE9XIHNoaXJ0c1xyXG4qL1xyXG5leHBvcnQgY2xhc3MgU3VwZXJMZWdnaW5zUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJsZWdcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgbGVnXCJdLFxyXG5cdFx0XHRiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgY29uc3Qge3RvcCwgb3V0LCBoaXAsIGhpZ2hPdXQsIGdyb2luLCBvdXRlclBvaW50cywgaW5uZXJQb2ludHN9ID0gY2FsY1N1cGVyUGFudHMuY2FsbCh0aGlzLGV4KTtcclxuXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuXHRcdGlmKHRoaXMuaW5uZXJMb29zZT49MSl7IC8vc2tpcnQgLSBkbyBub3QgZHJhdyB0aGUgbWlkZGxlIGxpbmVcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgdG9wLCAuLi5vdXRlclBvaW50cywgaW5uZXJQb2ludHNbMF0sdG9wKTtcclxuXHRcdFx0Y3R4LmZpbGwoKTsgXHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCAuLi5vdXRlclBvaW50cywgaW5uZXJQb2ludHNbMF0pO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFx0XHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCB0b3AsIC4uLm91dGVyUG9pbnRzLCAgLi4uaW5uZXJQb2ludHMsIGdyb2luLCB0b3ApO1xyXG5cdFx0XHRjdHguZmlsbCgpOyBcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIC4uLm91dGVyUG9pbnRzLCAgLi4uaW5uZXJQb2ludHMsIGdyb2luKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvL2JlbHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmJlbHQ7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgdG9wLGFkanVzdChvdXQsLTAuNSwwKSk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0fVxyXG59XHJcblxyXG5cclxuLyoqXHJcblx0dGhlIHNhbWUgdGhpbmcgYXMgU3VwZXJQYW50c1BhcnQsIGJ1dCBkcmF3biBpbiBNSURSSUZUIGxheWVyXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBTdXBlclNraXJ0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImxlZ1wiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBsZWdcIl0sXHJcblx0XHQvL1x0YmVsb3dTYW1lTGF5ZXJQYXJ0czogW1widG9yc29cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIG91dCwgaGlwLCB0aGlnaE91dCwgZ3JvaW4sIG91dGVyUG9pbnRzLCBpbm5lclBvaW50c30gPSBjYWxjU3VwZXJQYW50cy5jYWxsKHRoaXMsZXgpO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0aWYodGhpcy5pbm5lckxvb3NlPj0xKXsgLy9za2lydCAtIGRvIG5vdCBkcmF3IHRoZSBtaWRkbGUgbGluZVxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCB0b3AsIC4uLm91dGVyUG9pbnRzLCBpbm5lclBvaW50c1swXSx0b3ApO1xyXG5cdFx0XHRjdHguZmlsbCgpOyBcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIC4uLm91dGVyUG9pbnRzLCBpbm5lclBvaW50c1swXSk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCB0b3AsIC4uLm91dGVyUG9pbnRzLCAgLi4uaW5uZXJQb2ludHMsIGdyb2luLCB0b3ApO1xyXG5cdFx0XHRjdHguZmlsbCgpOyBcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIC4uLm91dGVyUG9pbnRzLCAgLi4uaW5uZXJQb2ludHMsIGdyb2luKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvL2JlbHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmJlbHQ7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgdG9wLGFkanVzdChvdXQsLTAuNSwwKSk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExhY2VkTGVnZ2luc1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0YmVsb3dTYW1lTGF5ZXJQYXJ0czogW1widG9yc29cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt6aXAsIHRvcCwgbWlkLCBvdXQsIGhpcCwgaGlnaE91dCwgZ3JvaW4sIG91dGVyUG9pbnRzLCBpbm5lclBvaW50c30gPSBjYWxjU3VwZXJQYW50c1ppcC5jYWxsKHRoaXMsZXgpO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0aWYodGhpcy5pbm5lckxvb3NlPj0xKXsgLy9za2lydCAtIGRvIG5vdCBkcmF3IHRoZSBtaWRkbGUgbGluZVxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCB6aXAsIG1pZCwgLi4ub3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzWzBdLCB6aXApO1xyXG5cdFx0XHRjdHguZmlsbCgpOyBcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIC4uLm91dGVyUG9pbnRzLCBpbm5lclBvaW50c1swXSk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIHppcCwgbWlkLCAuLi5vdXRlclBvaW50cywgIC4uLmlubmVyUG9pbnRzLCBncm9pbiwgemlwKTtcclxuXHRcdFx0Y3R4LmZpbGwoKTsgXHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCAuLi5vdXRlclBvaW50cywgIC4uLmlubmVyUG9pbnRzLCBncm9pbik7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly9MQUNJTkchIVxyXG5cdFx0Y29uc3QgY3Jvc3NlcyA9IHRoaXMuY3Jvc3NlcyA+IDAgPyB0aGlzLmNyb3NzZXMgOiAzO1xyXG5cdFx0Y29uc3QgcG9pbnRzID0gZ2V0TGFjaW5nUG9pbnRzKHppcCxtaWQsemlwLHJlZmxlY3QobWlkKSxjcm9zc2VzLDEpO1xyXG5cdFx0Y3R4LmxpbmVXaWR0aCA9IDE7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgLi4ucG9pbnRzLmlubmVyLCBicmVha1BvaW50LCAuLi5wb2ludHMub3V0ZXIpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHQvL2JlbHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmJlbHQ7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxtaWQsYWRqdXN0KG91dCwtMC41LDApKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSmVhbnNQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImxlZ1wiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBsZWdcIl0sXHJcblx0XHQvL1x0YmVsb3dTYW1lTGF5ZXJQYXJ0czogW1widG9yc29cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt6aXAsIHRvcCwgbWlkLCBvdXQsIGhpcCwgdGhpZ2hPdXQsIGdyb2luLCBvdXRlclBvaW50cywgaW5uZXJQb2ludHN9ID0gY2FsY1N1cGVyUGFudHNaaXAuY2FsbCh0aGlzLGV4KTtcclxuXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuXHRcdGlmKHRoaXMuaW5uZXJMb29zZT49MSl7IC8vc2tpcnQgLSBkbyBub3QgZHJhdyB0aGUgbWlkZGxlIGxpbmVcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgemlwLCBtaWQsIC4uLm91dGVyUG9pbnRzLCBpbm5lclBvaW50c1swXSwgemlwKTtcclxuXHRcdFx0Y3R4LmZpbGwoKTsgXHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCB6aXAsIG1pZCwgLi4ub3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzWzBdKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIHppcCwgbWlkLCAuLi5vdXRlclBvaW50cywgIC4uLmlubmVyUG9pbnRzLCBncm9pbiwgemlwKTtcclxuXHRcdFx0Y3R4LmZpbGwoKTsgXHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCB6aXAsIG1pZCwgLi4ub3V0ZXJQb2ludHMsICAuLi5pbm5lclBvaW50cywgZ3JvaW4pO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdCBcclxuXHRcdFxyXG5cdFx0Ly9jdHgubGluZVdpZHRoID0gMC41O1xyXG5cdFx0Ly9jdHguc2V0TGluZURhc2goWzEsMl0pO1xyXG5cdFx0Ly9jdHguc3Ryb2tlU3R5bGUgPSBcIm9yYW5nZVwiO1xyXG5cdFx0XHJcblx0XHRjdHgubGluZVdpZHRoID0gMC41O1xyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIGFkanVzdChtaWQsMSwtMyksIGFkanVzdChvdXQsMCwtMykpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vdW5idXR0b25lZCBwYW50c1xyXG5cdFx0bGV0IGEgPSBtaWQueDtcclxuXHRcdGxldCBiID0gdG9wLnkgLSB6aXAueTtcclxuXHRcdGxldCB0ID0gTWF0aC5hdGFuKGEvYik7XHJcblx0XHRsZXQgZmluID0gcG9sYXIyY2FydGVzaWFuKGIsIC0xLjYqdCtNYXRoLlBJLzIgLCB6aXApXHJcblx0XHRcclxuXHRcdGN0eC5maWxsU3R5bGUgPSBkYS5hZGp1c3RDb2xvcihjdHguZmlsbFN0eWxlLCB7XHJcblx0XHRcdHM6IC0xMCxcclxuXHRcdFx0bDogMTBcclxuXHRcdH0pOyBcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCB6aXAsIGZpbiwgbWlkKTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb2luY2xvdGhQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULCAvL01JRFJJRlQsIC8vZHVubm8sIGNvdWxkIGJlIGJvdGhcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJsZWdcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgbGVnXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdGxldCB0ZW1wO1xyXG5cdFx0XHJcblx0XHQvL0JFTFRcclxuXHRcdGNvbnN0IGJlbHQgPSBjYWxjQmVsdC5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Ly9DTE9USFxyXG5cdFx0Y29uc3QgY2xvdGggPSB7fTtcclxuXHRcdFxyXG5cdFx0Ly90b3AgLSBjb3B5IG9mIGJvdHRvbSBiZWx0XHJcblx0XHRjbG90aC5pblRvcCA9IGV4dHJhY3RQb2ludChiZWx0LmluQm90KTtcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMudG9wQ292ZXJhZ2UsYmVsdC5pbkJvdCxiZWx0Lm91dEJvdCk7XHJcblx0XHRjbG90aC5vdXRUb3AgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdGNsb3RoLm91dFRvcC5jcDEgPSBiZWx0LmluQm90LmNwMTtcclxuXHRcdFx0XHJcblx0XHQvL2xlZyBjb3ZlcmFnZSBcclxuXHRcdGNvbnN0IGxvd2VzdFkgPSBmaW5kQmV0d2VlbihleC5hbmtsZS5vdXQueSxleC5oaXAueSwxLXRoaXMubGVnQ292ZXJhZ2UpXHJcblx0XHRcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMuYm90dG9tQ292ZXJhZ2UsYmVsdC5pbkJvdCxiZWx0Lm91dEJvdCk7XHJcblx0XHRjbG90aC5vdXRCb3QgPSB7XHJcblx0XHRcdHg6IHRlbXAubGVmdC5wMi54LFxyXG5cdFx0XHR5OiBsb3dlc3RZXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgwLjMsY2xvdGgub3V0VG9wLGNsb3RoLm91dEJvdCk7XHJcblx0XHRjbG90aC5vdXRCb3QuY3AxPXRlbXAubGVmdC5wMjtcclxuXHJcblx0XHRjbG90aC5vdXRCb3QuY3AxLnggKz0gdGhpcy5jdXJ2ZVg7XHJcblx0XHRjbG90aC5vdXRCb3QuY3AxLnkgKz0gdGhpcy5jdXJ2ZVk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0Ly9ib3R0b20gJiBib3R0b20gY3VydmVcclxuXHRcdGNsb3RoLmluQm90ID0ge1xyXG5cdFx0XHR4OiAtMC4yLFxyXG5cdFx0XHR5OiBsb3dlc3RZIC0gKDQqdGhpcy5ib3R0b21Db3ZlcmFnZSlcclxuXHRcdH07XHJcblx0XHRjbG90aC5pbkJvdC5jcDEgPSB7XHJcblx0XHRcdHg6IGZpbmRCZXR3ZWVuKGNsb3RoLm91dEJvdC54LGNsb3RoLmluQm90LngpLFxyXG5cdFx0XHR5OiBjbG90aC5pbkJvdC55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Y2xvdGguaW5Ub3AsXHJcblx0XHRcdGNsb3RoLm91dFRvcCxcclxuXHRcdFx0Y2xvdGgub3V0Qm90LFxyXG5cdFx0XHRjbG90aC5pbkJvdCxcclxuXHRcdCk7XHJcblx0XHQgXHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRjdHguZmlsbCgpO1x0XHRcdFxyXG5cdFx0XHJcblx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGJlbHQuaW5Ub3AsXHJcblx0XHRcdGJlbHQub3V0VG9wLFxyXG5cdFx0XHRiZWx0Lm91dE1pZCxcclxuXHRcdFx0YmVsdC5vdXRCb3QsXHJcblx0XHRcdGJlbHQuaW5Cb3QsXHJcblx0XHQpO1xyXG5cdFx0IFxyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFxyXG5cdH1cclxufVxyXG5cclxuLypcclxuXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBTdXBlclBhbnRzIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5NSUQsXHJcbiAgICAgICAgICAgIGlubmVyTG9vc2U6IDAsXHJcblx0XHRcdG91dGVyTG9vc2U6IDAsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjksXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0b3BhY2l0eTogMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRidXN0bGU6ZmFsc2UsXHJcblx0XHRcdGJlbHQ6IDIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDIwMCwgNjUlLCAyMCUpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgcmV0dXJuIFwiaHNsKDIwMCwgNTAlLCAxMCUpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAvKiAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJCdXR0UGFydCxcclxuICAgICAgICAgICB9LFxyXG4gICAgKi8gICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclBhbnRzUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJQYW50c1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3VwZXJMZWdnaW5zIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5NSUQsXHJcbiAgICAgICAgICAgIGlubmVyTG9vc2U6IDAsXHJcblx0XHRcdG91dGVyTG9vc2U6IDAsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjksXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0b3BhY2l0eTogMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRidXN0bGU6ZmFsc2UsXHJcblx0XHRcdGJlbHQ6IDIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgyMDAsIDAlLCAyMCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgcmV0dXJuIFwiaHNsYSgyMDAsIDAlLCAxMCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFt7XHJcbiAgIC8qICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyQnV0dFBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgKi8gICAgICAgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlckxlZ2dpbnNQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyTGVnZ2luc1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3VwZXJTa2lydCBleHRlbmRzIFBhbnRzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICBpbm5lckxvb3NlOiAxLFxyXG5cdFx0XHRvdXRlckxvb3NlOiAxLjMsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjQsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuMSxcclxuXHRcdFx0b3BhY2l0eTogMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRidXN0bGU6ZmFsc2UsXHJcblx0XHRcdGJlbHQ6IDIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDAsIDY1JSwgMjAlKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgIHJldHVybiBcImhzbCgwLCA1MCUsIDEwJSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW3tcclxuICAgICAvKiAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJCdXR0UGFydCxcclxuICAgICAgICAgICB9LFxyXG4gICAgKi8gICAgICBcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyU2tpcnRQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyU2tpcnRQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMYWNlZExlZ2dpbnMgZXh0ZW5kcyBQYW50cyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk1JRCxcclxuICAgICAgICAgICAgXHJcblx0XHRcdHppcE9wZW46IDAuMiwgLy9UT0RPXHJcblx0XHRcdHppcERlZXA6IDAuMyxcclxuXHRcdFx0Y3Jvc3NlczogNCxcclxuXHRcdFx0XHJcblx0XHRcdGlubmVyTG9vc2U6IDAsXHJcblx0XHRcdG91dGVyTG9vc2U6IDAsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjksXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNCxcclxuXHRcdFx0b3BhY2l0eTogMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRidXN0bGU6ZmFsc2UsXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMjAwLCAwJSwgMjAlLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgIHJldHVybiBcImhzbGEoMjAwLCAwJSwgMTAlLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdFxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbe1xyXG4gICAgLyogICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDb3ZlcmVkQnV0dFBhcnQsXHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgKi8gICAgICBcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExhY2VkTGVnZ2luc1BhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTGFjZWRMZWdnaW5zUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBKZWFucyBleHRlbmRzIFBhbnRzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICBpbm5lckxvb3NlOiAwLFxyXG5cdFx0XHRvdXRlckxvb3NlOiAwLFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC45LFxyXG5cdFx0XHR3YWlzdENvdmVyYWdlOiAwLjQsXHJcblx0XHRcdG9wYWNpdHk6IDEsXHJcblx0XHRcdHRoaWNrbmVzczogMSxcclxuXHRcdFx0YnVzdGxlOmZhbHNlLFxyXG5cdFx0XHRiZWx0OiAyLFxyXG5cdFx0XHRcclxuXHRcdFx0emlwT3BlbjogMC4wMSwgIC8vVE9ET1xyXG5cdFx0XHR6aXBEZWVwOiAwLjIxLFxyXG5cdFx0XHRoaWdobGlnaHQ6IFwib3JhbmdlXCIsIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgyMDAsIDY1JSwgMjAlKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgIHJldHVybiBcImhzbCgyMDAsIDUwJSwgMTAlKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgLyogICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyQnV0dFBhcnQsXHJcbiAgICAgICAgICAgfSxcclxuICAgICovICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSmVhbnNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBKZWFuc1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9pbmNsb3RoIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgd2Fpc3RDb3ZlcmFnZTogMC40MixcclxuXHRcdFx0XHJcblx0XHRcdGJlbHRXaWR0aDogNCxcclxuXHRcdFx0YmVsdEN1cnZlOi0zLjUsXHJcblx0XHRcdFxyXG5cdFx0XHR0aGlja25lc3M6IDEsXHJcblx0XHRcdFxyXG5cdFx0XHR0b3BDb3ZlcmFnZTogMC44LFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC41LFxyXG5cdFx0XHRib3R0b21Db3ZlcmFnZTogMC4xNCxcclxuXHRcdFx0XHJcblx0XHRcdGN1cnZlWDogLTE2LFxyXG5cdFx0XHRjdXJ2ZVk6IDE0LFxyXG5cdFx0XHJcblx0XHRcdGhpZ2hsaWdodDpcImhzbGEoMzMsIDgwJSwgMTAlLCAxKVwiLFxyXG5cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMzMsIDQ1JSwgMzUlLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgIHJldHVybiBcImhzbGEoMzMsIDQ1JSwgMjUlLCAxKVwiO1xyXG4gICAgfVxyXG5cdCBcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMb2luY2xvdGhQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMb2luY2xvdGhQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcblx0aW50ZXJwb2xhdGVDdXJ2ZSxcclxuXHRhZGp1c3QsXHJcbiAgICBjbG9uZSxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdGdldExpbWJQb2ludHNOZWdhdGl2ZSxcclxuXHRnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQsXHJcblx0Z2V0TGltYlBvaW50c0Fib3ZlUG9pbnQsXHJcblx0ZmluZEJldHdlZW4sXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5pbXBvcnQge1NvY2ssU29ja1BhcnR9IGZyb20gXCIuL3NvY2tzXCI7XHJcbmltcG9ydCB7Y2FsY1N1cGVyUGFudHNUb3B9IGZyb20gXCIuL3N1cGVyX3BhbnRzXCI7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNTdXBlclNvY2tzKGV4KXtcclxuXHRsZXQgIGFkZFBvaW50c01pZD1bXTtcclxuXHRpZih0eXBlb2YgZXgucXVhZHMgIT09IFwidW5kZWZpbmVkXCIpe1xyXG5cdFx0YWRkUG9pbnRzTWlkWzBdID0gIGNsb25lKGV4LnF1YWRzLnRvcCk7XHJcblx0XHRhZGRQb2ludHNNaWRbMF0ueCA9IGV4LnRoaWdoLm91dC54O1xyXG5cdFx0YWRkUG9pbnRzTWlkWzFdID0gY2xvbmUoZXgucXVhZHMub3V0KTtcclxuXHR9XHJcblx0XHJcblx0bGV0ICBvdXRlclBvaW50cyA9IGdldExpbWJQb2ludHNOZWdhdGl2ZShleC5oaXAsZXguYW5rbGUub3V0LHRoaXMubGVnQ292ZXJhZ2UsZXguaGlwLGV4LnRoaWdoLm91dCwgLi4uYWRkUG9pbnRzTWlkLCBleC5rbmVlLm91dCxleC5jYWxmLm91dCxleC5hbmtsZS5vdXQpO1xyXG5cdFxyXG5cdGlmKCF0aGlzLmxvY2tHcm9pbiYmdGhpcy5sZWdDb3ZlcmFnZTwwKXsgLy9jYW4gaW5jbHVkZSB3YWlzdCBcclxuXHRcdGxldCB0b3Jzb1BvaW50cyA9IGdldExpbWJQb2ludHNOZWdhdGl2ZShleC5hcm1waXQsZXguaGlwLCgxK3RoaXMubGVnQ292ZXJhZ2UpLGV4LmFybXBpdCxleC53YWlzdCxleC5oaXApO1xyXG5cdFx0dG9yc29Qb2ludHMucG9wKCk7XHJcblx0XHRvdXRlclBvaW50cyA9IHRvcnNvUG9pbnRzLmNvbmNhdChvdXRlclBvaW50cyk7XHJcblx0fVxyXG5cdFxyXG5cdGxldCAgaW5uZXJQb2ludHMgPSBbXTtcclxuXHRpZighb3V0ZXJQb2ludHNbMF18fCFvdXRlclBvaW50c1swXS55KXtcclxuXHRcdCBpbm5lclBvaW50cyA9IFtleC5hbmtsZS5pbl07XHJcblx0XHQgY29uc29sZS5sb2coXCJQcm9ibGVtIHdpdGggc29ja3NcIik7XHJcblx0XHQgaWYob3V0ZXJQb2ludHMpY29uc29sZS5sb2cob3V0ZXJQb2ludHMpO1xyXG5cdFx0IGlmKCFvdXRlclBvaW50cylvdXRlclBvaW50cyA9IFtleC5hbmtsZS5vdXRdO1xyXG5cdH1lbHNle1xyXG5cdFx0aW5uZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQob3V0ZXJQb2ludHNbMF0sdHJ1ZSxleC5ncm9pbixleC50aGlnaC50b3AsZXgudGhpZ2guaW4sZXgua25lZS5pbnRvcCxleC5rbmVlLmluLGV4LmNhbGYuaW4sZXguYW5rbGUuaW4pO1xyXG5cdH1cdFxyXG5cdFxyXG5cdG91dGVyUG9pbnRzWzBdID0gZXh0cmFjdFBvaW50KCBvdXRlclBvaW50c1swXSk7IFxyXG5cclxuXHQgLy9UT1BcclxuXHQgLy9zb2NrcyB0b3AgY3VydmVcclxuXHQgaWYob3V0ZXJQb2ludHNbMF0ueS02PD1leC50aGlnaC50b3AueSl7XHJcblx0XHRvdXRlclBvaW50c1swXS5jcDEgPSB7XHJcblx0XHRcdHg6ZmluZEJldHdlZW4oaW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoLTFdLngsb3V0ZXJQb2ludHNbMF0ueCwwLjUpLFxyXG5cdFx0XHR5Om91dGVyUG9pbnRzWzBdLnktNlxyXG5cdFx0fTtcclxuXHQvL3Nob3VsZCBiZSB0aWdodHMgYnV0IG1hbnVhbGx5IG92ZXJyaWRkZW4gdG8gc3RheSBzb2NrcyAoc3RvY2tpbmdzKVxyXG5cdH1lbHNlIGlmKHRoaXMubG9ja0dyb2luKXtcclxuXHRcdGlubmVyUG9pbnRzLnNwbGljZShpbm5lclBvaW50cy5sZW5ndGgtMSwgMSk7XHJcblx0XHRsZXQgdGVtcCA9IGludGVycG9sYXRlQ3VydmUoIGV4LmhpcCwgZXgudGhpZ2gub3V0LCB7eDpudWxsLHk6ZXgudGhpZ2gudG9wLnl9KTtcclxuXHRcdG91dGVyUG9pbnRzWzBdID0gZXh0cmFjdFBvaW50KHRlbXBbMF0pO1xyXG5cdFx0b3V0ZXJQb2ludHNbMV0gPSBleHRyYWN0UG9pbnQob3V0ZXJQb2ludHNbMV0pOy8vbGFzc28gbG9vcCBhYm92ZSBvdXRlclBvaW50c1swXTsgXHJcblx0XHRvdXRlclBvaW50c1swXS5jcDEgPSB7XHJcblx0XHRcdHg6ZmluZEJldHdlZW4oaW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoLTFdLngsb3V0ZXJQb2ludHNbMF0ueCwwLjUpLFxyXG5cdFx0XHR5Om91dGVyUG9pbnRzWzBdLnktNlxyXG5cdFx0fTtcdFx0XHJcblx0Ly90aWdodHMgLSB0b3AgJiB0b3AgY3VydmVcclxuXHR9ZWxzZXtcclxuXHRcdGlubmVyUG9pbnRzW2lubmVyUG9pbnRzLmxlbmd0aF0gPSBhZGp1c3QoZXguZ3JvaW4sLTAuMiwwKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qgd2Fpc3RDdXJ2ZSA9IG91dGVyUG9pbnRzWzBdLnkgLSBleC5oaXAueTtcclxuXHRcdGxldCAgdG9wID0ge1xyXG5cdFx0XHR4OiAtMC4yLCAgXHJcblx0XHRcdHk6IGV4LnBlbHZpcy55ICsgd2Fpc3RDdXJ2ZSAqIDEuMlxyXG5cdFx0fTsgLy9mb3JtdWxhIGZyb20gb3JpZ2luYWwgcGFudHMgXHJcblx0XHRcclxuXHRcdG91dGVyUG9pbnRzWzBdLmNwMiA9IHZvaWQgMDtcclxuXHRcdG91dGVyUG9pbnRzWzBdLmNwMSA9IHtcclxuXHRcdFx0eDogZmluZEJldHdlZW4ob3V0ZXJQb2ludHNbMF0ueCx0b3AueCwwLjUpLFxyXG5cdFx0XHR5OiB0b3AueVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0b3V0ZXJQb2ludHMudW5zaGlmdCh0b3ApO1xyXG5cdFx0XHJcblx0XHQvL2FyY2ggYmV0d2VlbiB0aGlnaHMgXHJcblx0XHRpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGgtMV0uY3AxID0ge1xyXG5cdFx0XHR4OiBpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGgtMV0ueCAqIDAuNSArIGV4LnRoaWdoLnRvcC54ICogMC41LFxyXG5cdFx0XHR5OiBpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGgtMV0ueVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0aW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoXSA9IHRvcDtcclxuXHR9XHJcblx0XHJcblx0cmV0dXJuIHtcclxuXHRcdG91dGVyUG9pbnRzLFxyXG5cdFx0aW5uZXJQb2ludHMsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdhcnRlciBleHRlbmRzIFNvY2tQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImZlZXRcIl0sXHJcblx0XHRcdGFib3ZlUGFydHM6IFtcInBhcnRzIGZlZXRcIixcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiXSxcclxuXHRcdFx0cmVmbGVjdDp0cnVlLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGNvbnN0IHtvdXRlclBvaW50cywgaW5uZXJQb2ludHN9ID0gY2FsY1N1cGVyU29ja3MuY2FsbCh0aGlzLGV4KTtcclxuXHRcdC8vQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0O1xyXG5cdFx0XHJcblx0XHQvL1RPUFxyXG5cdFxyXG5cdFx0Ly9iYXNlZCBvbiBjb2RlIGZyb20gZnJvbSBjYWxjU3VwZXJQYW50c1xyXG5cdFx0bGV0IG91dFRvcDtcclxuXHRcdGxldCBvdXRCb3RzO1xyXG5cdFx0aWYodGhpcy53YWlzdENvdmVyYWdlPjApe1xyXG5cdFx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKCgxLXRoaXMud2Fpc3RDb3ZlcmFnZSksZXgud2Fpc3QsZXguaGlwKTtcdFxyXG5cdFx0XHRvdXRUb3AgPSBleHRyYWN0UG9pbnQoc3AubGVmdC5wMik7XHJcblx0XHRcdC8vbGV0ICBoaXAgPSB0ZW1wLnJpZ2h0LnAyO1xyXG5cdFx0XHRsZXQgdGVtcCA9IHt4OjAseTpvdXRUb3AueS10aGlzLmJlbHRXaWR0aH07XHJcblx0XHRcdG91dEJvdHMgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCh0ZW1wLGZhbHNlLG91dFRvcCxleC5oaXAsZXgudGhpZ2gub3V0KTtcclxuXHRcdFx0Ly9sZXQgIHRoaWdoT3V0ID0gZXgudGhpZ2gub3V0O1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGxldCBzcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy53YWlzdENvdmVyYWdlKSxleC5oaXAsZXgudGhpZ2gub3V0KTtcdFxyXG5cdFx0XHRvdXRUb3AgPSBleHRyYWN0UG9pbnQoc3AubGVmdC5wMik7XHJcblx0XHRcdC8vbGV0ICBoaXA7XHJcblx0XHRcdGxldCB0ZW1wID0ge3g6MCx5Om91dFRvcC55LXRoaXMuYmVsdFdpZHRofTtcclxuXHRcdFx0b3V0Qm90cyA9IGdldExpbWJQb2ludHNBYm92ZVBvaW50KHRlbXAsZmFsc2Usb3V0VG9wLGV4LnRoaWdoLm91dCk7XHJcblx0XHRcdC8vbGV0ICB0aGlnaE91dCA9IHRlbXAucmlnaHQucDI7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly9sZXQgIHdhaXN0Q3VydmUgPSBvdXRCb3RzW291dEJvdHMubGVuZ3RoLTFdLnkgLSBleC5oaXAueTtcclxuXHRcdGxldCAgaW5Ub3AgPSB7XHJcblx0XHRcdHg6IC0wLjEsICBcclxuXHRcdFx0eTogb3V0VG9wLnktNixcclxuXHRcdFx0Ly95OiBleC5wZWx2aXMueSArIHdhaXN0Q3VydmUgKiAxLjIvLzEuMlxyXG5cdFx0fTtcclxuXHRcdG91dFRvcC5jcDEgPSB7XHJcblx0XHRcdHg6IG91dFRvcC54ICogMC41ICsgaW5Ub3AueCAqIDAuNSxcclxuXHRcdFx0eTogaW5Ub3AueVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0Ly9DT05ORUNUSU9OIFRPIFNPQ0tTXHJcblx0XHRsZXQgIHNvY2tJbiA9ICBpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGgtMV07XHJcblx0XHRsZXQgIHNvY2tPdXQgPSBleHRyYWN0UG9pbnQob3V0ZXJQb2ludHNbMF0pO1xyXG5cdFx0c29ja0luLnktPTY7XHRcdFxyXG5cdFx0c29ja091dC55LT02O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdGxldCAgY29ubmVjdE91dCA9IHtcclxuXHRcdFx0eTpzb2NrT3V0LnksXHJcblx0XHRcdHg6KCgoc29ja0luLngtc29ja091dC54KSowLjQrc29ja091dC54KSAgKSszXHJcblx0XHR9O1xyXG5cdFx0Y29ubmVjdE91dC5jcDEgPSB7XHJcblx0XHRcdHk6ICgob3V0Qm90c1tvdXRCb3RzLmxlbmd0aC0xXS55LWNvbm5lY3RPdXQueSkqMC45KStjb25uZWN0T3V0LnksXHJcblx0XHRcdHg6ICgob3V0Qm90c1tvdXRCb3RzLmxlbmd0aC0xXS54LWNvbm5lY3RPdXQueCkqKC0wLjEpKStjb25uZWN0T3V0LnhcclxuXHRcdH07XHJcblx0XHRsZXQgIGNvbm5lY3RJbiA9IHtcclxuXHRcdFx0eTogc29ja0luLnksXHJcblx0XHRcdHg6IGNvbm5lY3RPdXQueC0zLFxyXG5cdFx0fTtcclxuXHRcdGxldCAgaW5Cb3QgPSB7XHJcblx0XHRcdHg6IGV4LnBlbHZpcy54LTAuMSxcclxuXHRcdFx0eTogaW5Ub3AueS0ob3V0VG9wLnktb3V0Qm90c1tvdXRCb3RzLmxlbmd0aC0xXS55KVxyXG5cdFx0fTtcclxuXHRcdGluQm90LmNwMSA9IHtcclxuXHRcdFx0eTogKChjb25uZWN0SW4ueS1pblRvcC55KSowLjIpK2luVG9wLnksXHJcblx0XHRcdHg6ICgoY29ubmVjdEluLngtaW5Ub3AueCkqKDAuOSkpK2luVG9wLnhcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKFxyXG4gICAgICAgICAgICBjdHgsICBcclxuXHRcdFx0aW5Ub3AsXHJcblx0XHRcdG91dFRvcCxcclxuXHRcdFx0Li4ub3V0Qm90cyxcclxuXHRcdFx0Y29ubmVjdE91dCxcclxuXHRcdFx0Y29ubmVjdEluLFxyXG5cdFx0XHRpbkJvdFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAvLyAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5leHBvcnQgY2xhc3MgU3VwZXJTb2NrQmFuZFBhcnQgZXh0ZW5kcyBTb2NrUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJmZWV0XCJdLFxyXG5cdFx0XHRhYm92ZVBhcnRzOiBbXCJwYXJ0cyBmZWV0XCIsXCJwYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0aWYodGhpcy5iYW5kV2lkdGg8MC4xKXJldHVybjtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge291dGVyUG9pbnRzLCBpbm5lclBvaW50c30gPSBjYWxjU3VwZXJTb2Nrcy5jYWxsKHRoaXMsZXgpO1xyXG5cdFx0Ly9DbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRcclxuXHRcdGxldCAgdG9wSW4gPSBpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGgtMV07XHJcblx0XHRsZXQgIHRvcE91dCA9IGV4dHJhY3RQb2ludChvdXRlclBvaW50c1swXSk7XHJcblx0XHRcclxuXHRcdGxldCB0ZW1wUG9pbnQgPSBjbG9uZSh0b3BJbik7XHJcblx0XHR0ZW1wUG9pbnQueSA9IHRlbXBQb2ludC55LXRoaXMuYmFuZFdpZHRoO1xyXG5cdFx0XHJcblx0XHRpbm5lclBvaW50cy5yZXZlcnNlKCk7IC8vdGhleSBhcmUgYWxyZWFkeSBpbiBvcmRlciBmb3IgZHJhd1BvaW50cyAobG93ZXN0IHRvIGhpZ2hlc3QpIGJ1dCBcclxuXHRcdGxldCAgYm90SW5zICA9IGdldExpbWJQb2ludHNBYm92ZVBvaW50KHRlbXBQb2ludCx0cnVlLC4uLmlubmVyUG9pbnRzKTtcdFx0XHJcblx0XHRsZXQgIGJvdE91dHMgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCh0ZW1wUG9pbnQsZmFsc2UsLi4ub3V0ZXJQb2ludHMpO1xyXG5cdFx0XHJcblx0XHQvL3RvcCBjdXJ2ZVxyXG5cdFx0dG9wT3V0LmNwMSA9IHtcclxuXHRcdFx0eDpmaW5kQmV0d2Vlbih0b3BJbi54LHRvcE91dC54LDAuNSksXHJcblx0XHRcdHk6dG9wT3V0LnktNlxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0Ly9ib3R0b20gY3VydmVcclxuXHRcdGJvdEluc1swXSA9IGV4dHJhY3RQb2ludChib3RJbnNbMF0pO1xyXG5cdFx0Ym90SW5zWzBdLmNwMSA9IHtcclxuXHRcdFx0eDpmaW5kQmV0d2Vlbihib3RPdXRzW2JvdE91dHMubGVuZ3RoLTFdLngsYm90SW5zWzBdLngsMC41KSxcclxuXHRcdFx0eTpib3RJbnNbMF0ueS02XHJcblx0XHR9O1xyXG5cdFx0XHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoXHJcbiAgICAgICAgICAgIGN0eCwgIFxyXG5cdFx0XHR0b3BPdXQsIFxyXG5cdFx0XHQuLi5ib3RPdXRzLFxyXG5cdFx0XHQuLi5ib3RJbnMsIFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0dG9wT3V0XHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgLy9jdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHRcdFxyXG5cdFx0XHJcbmV4cG9ydCBjbGFzcyBTdXBlclNvY2tQYXJ0IGV4dGVuZHMgU29ja1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiZmVldFwiXSxcclxuXHRcdFx0YWJvdmVQYXJ0czogW1wicGFydHMgZmVldFwiLFwicGFydHMgbGVnXCIsXCJjbG90aGluZ1BhcnRzIGdyb2luXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGNvbnN0IHtvdXRlclBvaW50cywgaW5uZXJQb2ludHN9ID0gY2FsY1N1cGVyU29ja3MuY2FsbCh0aGlzLGV4KTtcclxuXHRcdFxyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhcclxuICAgICAgICAgICAgY3R4LCAgXHJcblx0XHRcdC4uLm91dGVyUG9pbnRzLCBcclxuXHRcdFx0ZXguYW5rbGUub3V0Ym90LCBleC50b2Uub3V0LCBleC50b2UuaW4sIGV4LmFua2xlLmluYm90LFxyXG5cdFx0XHQuLi5pbm5lclBvaW50cywgXHJcblx0XHRcdG91dGVyUG9pbnRzWzBdXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUGFudHlob3NlUGFydCBleHRlbmRzIFNvY2tQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImZlZXRcIl0sXHJcblx0XHRcdGFib3ZlUGFydHM6IFtcInBhcnRzIGZlZXRcIixcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRjb25zdCB7dG9wLCBvdXQsIGhpcCwgdGhpZ2hPdXR9ID0gY2FsY1N1cGVyUGFudHNUb3AuY2FsbCh0aGlzLGV4KTtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcclxuXHRcdGNvbnN0IGFkZFBvaW50c01pZCA9IFtdOyAvL2llIHNob3VsZCBiZSBtdXNjbGVzIGluY2x1ZGVkP1xyXG5cdFx0aWYodHlwZW9mIGV4LnF1YWRzICE9PSBcInVuZGVmaW5lZFwiKXtcclxuXHRcdFx0YWRkUG9pbnRzTWlkWzBdID0gIGNsb25lKGV4LnF1YWRzLnRvcCk7XHJcblx0XHRcdGFkZFBvaW50c01pZFswXS54ID0gIGV4LnRoaWdoLm91dC54O1xyXG5cdFx0XHRhZGRQb2ludHNNaWRbMV0gPSBjbG9uZShleC5xdWFkcy5vdXQpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRsZXQgdGhpZ2ggPSBleC50aGlnaC50b3A7XHJcblx0XHRsZXQgZ3JvaW4gPSBleC5ncm9pbjtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5vcGVuPjAuMDIpe1xyXG5cdFx0XHRsZXQgdGVtcCA9ICh0b3AueS1ncm9pbi55KSowLjcqdGhpcy5vcGVuO1xyXG5cdFx0XHRncm9pbiA9IGFkanVzdChleC5ncm9pbiwwLHRlbXApXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0Z3JvaW4uY3AyID0gYWRqdXN0KGV4Lmdyb2luLDIyKnRoaXMub3BlbiwyMip0aGlzLm9wZW4pXHJcblx0XHRcdGdyb2luLmNwMSA9IGFkanVzdChleC5ncm9pbiwxMip0aGlzLm9wZW4sLTE0KnRoaXMub3BlbilcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHR0ZW1wID0gZGEuc3BsaXRDdXJ2ZSgxLSgwLjkqdGhpcy5vcGVuKSxleC50aGlnaC5pbixleC50aGlnaC50b3ApO1xyXG5cdFx0XHR0aGlnaCA9IHRlbXAubGVmdC5wMjtcclxuXHRcdH07XHJcblx0XHRcdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsICBcclxuXHRcdFx0dG9wLG91dCxoaXAsdGhpZ2hPdXQsXHJcblx0XHRcdC4uLmFkZFBvaW50c01pZCxcclxuXHRcdFx0ZXgua25lZS5vdXQsZXguY2FsZi5vdXQsZXguYW5rbGUub3V0LFxyXG5cdFx0XHRleC5hbmtsZS5vdXRib3QsIGV4LnRvZS5vdXQsIGV4LnRvZS5pbiwgZXguYW5rbGUuaW5ib3QsXHJcblx0XHRcdGV4LmFua2xlLmluLGV4LmNhbGYuaW4sZXgua25lZS5pbixleC5rbmVlLmludG9wLGV4LnRoaWdoLmluLFxyXG5cdFx0XHR0aGlnaCxcclxuXHRcdFx0Z3JvaW4sIHRvcFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdXBlclNvY2tzIGV4dGVuZHMgU29jayB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC41LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNSxcclxuXHRcdFx0bG9ja0dyb2luOiBmYWxzZSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyU29ja1BhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdG9ja2luZ3MgZXh0ZW5kcyBTb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjIsXHJcblx0XHRcdHRoaWNrbmVzczogMC4zLFxyXG5cdFx0XHRiYW5kV2lkdGggIDogNyxcclxuXHRcdFx0aGlnaGxpZ2h0OiBcImhzbGEoMCwgMCUsIDExJSwgMSlcIixcclxuXHRcdFx0bG9ja0dyb2luOiB0cnVlLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsIDAlLCAyOCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJTb2NrQmFuZFBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNvY2tCYW5kUGFydCxcclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0XHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyU29ja1BhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3RvY2tpbmdzR2FydGVyIGV4dGVuZHMgU29jayB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjIsXHJcblx0XHRcdHRoaWNrbmVzczogMC4zLFxyXG5cdFx0XHRiYW5kV2lkdGggIDogOSxcclxuXHRcdFx0YmVsdFdpZHRoIDogMTAsXHJcblx0XHRcdGhpZ2hsaWdodDogXCJoc2xhKDAsIDAlLCAxMSUsIDEpXCIsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0bG9ja0dyb2luOiB0cnVlLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMCwgMCUsIDI4JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuXHRcdFx0XHRzaWRlOiBQYXJ0LlJJR0hULFxyXG5cdFx0XHRcdFBhcnQ6IEdhcnRlclxyXG5cdFx0XHR9LCBcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJTb2NrQmFuZFBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNvY2tCYW5kUGFydCxcclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0XHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN1cGVyU29ja1BhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBQYW50eWhvc2UgZXh0ZW5kcyBTb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdHdhaXN0Q292ZXJhZ2UgOiAwLjQ1LFxyXG5cdFx0XHR0aGlja25lc3MgOiAwLjMsXHJcblx0XHRcdG9wZW46IDAsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cdFxyXG5cdGZpbGwoKXtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsMjAlLDMwJSwwLjUpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLjAsNSUsMzAlLDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogUGFudHlob3NlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFBhbnR5aG9zZVBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjb25zdCBTa2VsZXRvbiA9IHtodW1hbjoge319O1xyXG4iLCJpbXBvcnQge0RlY29yYXRpdmVQYXJ0fSBmcm9tIFwiLi9kZWNvcmF0aXZlX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7bm9uZSwgY2xhbXAsIHNpbXBsZVF1YWRyYXRpYywgYnJlYWtQb2ludCwgc3BsaXRDdXJ2ZX0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5pbXBvcnQge2luaGVyaXRGaWxsfSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcbmltcG9ydCB7YWRqdXN0Q29sb3J9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuXHJcbmNsYXNzIE91dGxpbmUgZXh0ZW5kcyBEZWNvcmF0aXZlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKGN0eCwgZXgpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmJhc2VTdHJva2UsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHM6IC0zMCxcclxuICAgICAgICAgICAgICAgIGw6IC0zMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBub25lO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgTXVzY2xlT3V0bGluZSBleHRlbmRzIE91dGxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExpbmVXaWR0aChhdmF0YXIpIHtcclxuICAgICAgICByZXR1cm4gY2xhbXAoKGF2YXRhci5nZXREaW0odGhpcy5tdXNjbGVHcm91cCkgLSAxMCkgKiAwLjA1LCAwLCAxLjIpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCZWxseUJ1dHRvbk91dGxpbmUgZXh0ZW5kcyBPdXRsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK3RvcnNvXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1BhcnRzOiBbXCJjbG90aGluZ1BhcnRzIGxlZ1wiXSxcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGluZVdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBpZ25vcmUsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgbGV0IGJlbGx5ID0gZXguYmVsbHlidXR0b24gPSB7fTtcclxuICAgICAgICAgICAgYmVsbHkudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIHk6IGV4LndhaXN0LnkgKiAwLjQ1ICsgZXguaGlwLnkgKiAwLjU1XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJlbGx5LmJvdCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGJlbGx5LnRvcC54LFxyXG4gICAgICAgICAgICAgICAgeTogYmVsbHkudG9wLnkgLSAxXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJlbGx5LmJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYmVsbHkudG9wLCBiZWxseS5ib3QsIDAuNSwgMC41KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtleC5iZWxseWJ1dHRvbi50b3AsIGV4LmJlbGx5YnV0dG9uLmJvdF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRGVsdG9pZHNPdXRsaW5lIGV4dGVuZHMgTXVzY2xlT3V0bGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgIDogXCIrYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHMgOiBbXCJwYXJ0cyBhcm1cIl0sXHJcbiAgICAgICAgICAgIGxheWVyICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbXVzY2xlR3JvdXA6IFwidXBwZXJNdXNjbGVcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIGlnbm9yZSwgY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudXBwZXJNdXNjbGUgPCAyMCB8fCBleC5oYXNPd25Qcm9wZXJ0eShcImRlbHRvaWRzXCIpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgY29uc3QgYnVsayA9IHRoaXMudXBwZXJNdXNjbGUgLSAxMDtcclxuICAgICAgICAgICAgbGV0IGRlbHRvaWRzID0gZXguZGVsdG9pZHM7XHJcbiAgICAgICAgICAgIGRlbHRvaWRzLnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmFybXBpdC54LFxyXG4gICAgICAgICAgICAgICAgeTogZXguYXJtcGl0LnkgKyAyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGRlbHRvaWRzLmJvdCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGRlbHRvaWRzLnggLSA1LFxyXG4gICAgICAgICAgICAgICAgeTogZGVsdG9pZHMueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBkZWx0b2lkcy5ib3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKGRlbHRvaWRzLnRvcCwgZGVsdG9pZHMuYm90LCAwLjcsIC1idWxrICogMC4xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtleC5kZWx0b2lkcy50b3AsIGV4LmRlbHRvaWRzLmJvdF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ29sbGFyYm9uZU91dGxpbmUgZXh0ZW5kcyBNdXNjbGVPdXRsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgOiBcIit0b3Jzb1wiLFxyXG4gICAgICAgICAgICBsYXllciAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBtdXNjbGVHcm91cDogXCJ1cHBlck11c2NsZVwiLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBpZ25vcmUsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnVwcGVyTXVzY2xlIDwgMjAgfHwgZXguaGFzT3duUHJvcGVydHkoXCJjb2xsYXJib25lXCIpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgbGV0IGNvbGxhcmJvbmUgPSBleC5jb2xsYXJib25lO1xyXG4gICAgICAgICAgICBjb2xsYXJib25lLm91dCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGNvbGxhcmJvbmUueCAtIDAuNSxcclxuICAgICAgICAgICAgICAgIHk6IGNvbGxhcmJvbmUueSAtIDJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29sbGFyYm9uZS5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IDIsXHJcbiAgICAgICAgICAgICAgICB5OiBjb2xsYXJib25lLm91dC55IC0gMlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb2xsYXJib25lLmluLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGNvbGxhcmJvbmUub3V0LnggLSA1LFxyXG4gICAgICAgICAgICAgICAgeTogY29sbGFyYm9uZS5vdXQueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb2xsYXJib25lLmluLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGNvbGxhcmJvbmUuaW4ueCArIDEsXHJcbiAgICAgICAgICAgICAgICB5OiBjb2xsYXJib25lLmluLnkgKyAyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZXguY29sbGFyYm9uZS5vdXQsIGV4LmNvbGxhcmJvbmUuaW5dO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFBlY3RvcmFsT3V0bGluZSBleHRlbmRzIE11c2NsZU91dGxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgICA6IFwiK3RvcnNvXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHMgOiBbXCJwYXJ0cyB0b3Jzb1wiXSxcclxuICAgICAgICAgICAgYmVsb3dQYXJ0cyA6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgICAgICBsYXllciAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBtdXNjbGVHcm91cDogXCJ1cHBlck11c2NsZVwiLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBpZ25vcmUsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnVwcGVyTXVzY2xlIDwgMjApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1bGsgPSB0aGlzLnVwcGVyTXVzY2xlIC0gMjA7XHJcbiAgICAgICAgICAgIGxldCBwZWNzID0gZXgucGVjcyA9IHt9O1xyXG4gICAgICAgICAgICBwZWNzLm91dHRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmFybXBpdC54LFxyXG4gICAgICAgICAgICAgICAgeTogZXguYXJtcGl0LnkgKyA0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHBlY3Mub3V0Ym90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogcGVjcy5vdXR0b3AueCAtIDMsXHJcbiAgICAgICAgICAgICAgICB5OiBwZWNzLm91dHRvcC55IC0gOVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBwZWNzLmluYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogMixcclxuICAgICAgICAgICAgICAgIHk6IHBlY3Mub3V0Ym90LnkgKyAwLjVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcGVjcy5pbnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IDAuNSxcclxuICAgICAgICAgICAgICAgIHk6IHBlY3MuaW5ib3QueSArIDEgKyBidWxrICogMC4zXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBwZWNzLm91dGJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBwZWNzLm91dHRvcC54LFxyXG4gICAgICAgICAgICAgICAgeTogcGVjcy5vdXR0b3AueSAtIDNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcGVjcy5vdXRib3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogcGVjcy5vdXRib3QueCArIDEsXHJcbiAgICAgICAgICAgICAgICB5OiBwZWNzLm91dGJvdC55ICsgMVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBwZWNzLmluYm90LmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHBlY3Mub3V0Ym90LnggLSAwLjUsXHJcbiAgICAgICAgICAgICAgICB5OiBwZWNzLm91dGJvdC55IC0gMVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBwZWNzLmluYm90LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHBlY3MuaW5ib3QueCArIDAuNSxcclxuICAgICAgICAgICAgICAgIHk6IHBlY3MuaW5ib3QueSAtIDFcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcGVjcy5pbnRvcC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBwZWNzLmluYm90LnggLSBidWxrICogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogcGVjcy5pbmJvdC55ICsgYnVsayAqIDAuMDVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcGVjcy5pbnRvcC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBwZWNzLmludG9wLngsXHJcbiAgICAgICAgICAgICAgICB5OiBwZWNzLmludG9wLnkgLSBidWxrICogMC4xXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZXgucGVjcy5vdXR0b3AsIGV4LnBlY3Mub3V0Ym90LCBleC5wZWNzLmluYm90LCBleC5wZWNzLmludG9wXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBBYmRvbWluYWxPdXRsaW5lIGV4dGVuZHMgTXVzY2xlT3V0bGluZSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyA6IFtcInBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBsYXllciAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBtdXNjbGVHcm91cDogXCJ1cHBlck11c2NsZVwiLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBpZ25vcmUsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnVwcGVyTXVzY2xlIDwgMTUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBidWxrID0gdGhpcy51cHBlck11c2NsZSAtIDIwO1xyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gKHRoaXMuaGVpZ2h0IC0gdGhpcy5sZWdMZW5ndGgpICogMC43NTtcclxuICAgICAgICAgICAgY29uc3QgYWJMZW5ndGggPSBsZW5ndGggKiAwLjEyO1xyXG4gICAgICAgICAgICBjb25zdCBhYkJ1bGdlID0gYnVsayAqIDAuMDU7XHJcblxyXG4gICAgICAgICAgICBsZXQgYWJzID0gZXguYWJzID0ge307XHJcblxyXG4gICAgICAgICAgICAvLyBzaWRlIGRldGFpbHNcclxuICAgICAgICAgICAgYWJzLnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LndhaXN0LnggLSAzLFxyXG4gICAgICAgICAgICAgICAgeTogZXguYXJtcGl0LnkgLSA3XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGFicy5maXJzdCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGFicy50b3AueCAtIDEsXHJcbiAgICAgICAgICAgICAgICB5OiBhYnMudG9wLnkgLSBhYkxlbmd0aFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhYnMuZmlyc3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKGFicy50b3AsIGFicy5maXJzdCwgMC41LCBhYkJ1bGdlKTtcclxuICAgICAgICAgICAgYWJzLnNlY29uZCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGFicy5maXJzdC54IC0gMC40LFxyXG4gICAgICAgICAgICAgICAgeTogYWJzLmZpcnN0LnkgLSBhYkxlbmd0aFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhYnMuc2Vjb25kLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhhYnMuZmlyc3QsIGFicy5zZWNvbmQsIDAuNSwgYWJCdWxnZSk7XHJcbiAgICAgICAgICAgIGFicy5ib3QgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBhYnMuc2Vjb25kLnggLSAwLjMsXHJcbiAgICAgICAgICAgICAgICB5OiBhYnMuc2Vjb25kLnkgLSBhYkxlbmd0aFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhYnMuYm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhhYnMuc2Vjb25kLCBhYnMuYm90LCAwLjUsIGFiQnVsZ2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gaW5zaWRlXHJcbiAgICAgICAgICAgIGlmIChidWxrID4gNSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGFicy50b3Aub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGFicy50b3AueCAtIDEuNyxcclxuICAgICAgICAgICAgICAgICAgICB5OiBhYnMudG9wLnlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBhYnMudG9wLmluID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IDAuOSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBhYnMudG9wLnkgKyAwLjVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBhYnMudG9wLmluLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhhYnMudG9wLCBhYnMudG9wLmluLCAwLjUsIC1hYkJ1bGdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBhYnMuZmlyc3Qub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGFicy5maXJzdC54IC0gMS43LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGFicy5maXJzdC55XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYWJzLmZpcnN0LmluID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IDEuNSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBhYnMuZmlyc3QueVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGFicy5maXJzdC5pbi5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYWJzLmZpcnN0LCBhYnMuZmlyc3QuaW4sIDAuNSwgYWJCdWxnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYWJzLnNlY29uZC5vdXQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogYWJzLnNlY29uZC54IC0gMS43LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGFicy5zZWNvbmQueVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGFicy5zZWNvbmQuaW4gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogMS4yLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGFicy5zZWNvbmQueVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGFicy5zZWNvbmQuaW4uY3AxID0gc2ltcGxlUXVhZHJhdGljKGFicy5zZWNvbmQsIGFicy5zZWNvbmQuaW4sIDAuNSwgYWJCdWxnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYWJzLmJvdC5pbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiAwLjYsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogYWJzLmJvdC55XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYWJzLmJvdC5pbi5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYWJzLmJvdCwgYWJzLmJvdC5pbiwgMC41LCBhYkJ1bGdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBsYXRzXHJcbiAgICAgICAgICAgICAgICBsZXQgbGF0ID0gZXgubGF0O1xyXG4gICAgICAgICAgICAgICAgbGF0LnRvcCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBsYXQueCAtIDEuNSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBsYXQueVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGxhdC5ib3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogYWJzLnRvcC54ICsgMSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBhYnMudG9wLnkgKiAwLjUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGFicy5maXJzdC55ICogMC41XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgbGF0LmJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMobGF0LnRvcCwgbGF0LmJvdCwgMC41LCBhYkJ1bGdlICogMS41KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcG9pbnRzID0gW1xyXG4gICAgICAgICAgICBleC5hYnMudG9wLFxyXG4gICAgICAgICAgICBleC5hYnMuZmlyc3QsXHJcbiAgICAgICAgICAgIGV4LmFicy5zZWNvbmQsXHJcbiAgICAgICAgICAgIGV4LmFicy5ib3QsXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAoYnVsayA+IDUpIHtcclxuICAgICAgICAgICAgcG9pbnRzID0gW1xyXG4gICAgICAgICAgICAgICAgLi4ucG9pbnRzLFxyXG4gICAgICAgICAgICAgICAgLy8gaW5zaWRlIGFic1xyXG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCxcclxuICAgICAgICAgICAgICAgIGV4LmFicy50b3Aub3V0LFxyXG4gICAgICAgICAgICAgICAgZXguYWJzLnRvcC5pbixcclxuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQsXHJcbiAgICAgICAgICAgICAgICBleC5hYnMuZmlyc3Qub3V0LFxyXG4gICAgICAgICAgICAgICAgZXguYWJzLmZpcnN0LmluLFxyXG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCxcclxuICAgICAgICAgICAgICAgIGV4LmFicy5zZWNvbmQub3V0LFxyXG4gICAgICAgICAgICAgICAgZXguYWJzLnNlY29uZC5pbixcclxuICAgICAgICAgICAgICAgIC8vIGxhdHNcclxuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQsXHJcbiAgICAgICAgICAgICAgICBleC5sYXQudG9wLFxyXG4gICAgICAgICAgICAgICAgZXgubGF0LmJvdCxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBvaW50cztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBRdWFkcmljZXBzT3V0bGluZSBleHRlbmRzIE11c2NsZU91dGxpbmUge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgICA6IFwiK2xlZ1wiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzIDogW1wicGFydHMgbGVnXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1BhcnRzIDogW1wiY2xvdGhpbmdQYXJ0cyBsZWdcIiwgXCJjbG90aGluZ1BhcnRzIGZlZXRcIl0sXHJcbiAgICAgICAgICAgIGxheWVyICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbXVzY2xlR3JvdXA6IFwibG93ZXJNdXNjbGVcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKGN0eCwgZXgpIHtcclxuICAgICAgICByZXR1cm4gaW5oZXJpdEZpbGwuY2FsbCh0aGlzLCBjdHgsIGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwRmlsbCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIGlnbm9yZSwgY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG93ZXJNdXNjbGUgPCAyMCB8fCBleC5oYXNPd25Qcm9wZXJ0eShcInRoaWdoXCIpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgY29uc3QgYnVsayA9IHRoaXMubG93ZXJNdXNjbGUgLSAxMDtcclxuICAgICAgICAgICAgbGV0IHF1YWRzID0gZXgucXVhZHMgPSB7fTtcclxuICAgICAgICAgICAgcXVhZHMudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXgudGhpZ2guaW4ueCAqIDAuMSArIGV4LnRoaWdoLm91dC54ICogMC45LFxyXG4gICAgICAgICAgICAgICAgeTogZXgudGhpZ2gub3V0LnksXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUoMC45NSwgZXgudGhpZ2gub3V0LCBleC5rbmVlLm91dCk7XHJcbiAgICAgICAgICAgIHF1YWRzLm91dCA9IHNwLnJpZ2h0LnAxO1xyXG4gICAgICAgICAgICBxdWFkcy5vdXQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHF1YWRzLnRvcCwgcXVhZHMub3V0LCAwLjU1LCBidWxrICogMC4yNSk7XHJcblxyXG4gICAgICAgICAgICBxdWFkcy5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LnRoaWdoLmluLnggKiAwLjY1ICsgZXgudGhpZ2gub3V0LnggKiAwLjM1LFxyXG4gICAgICAgICAgICAgICAgeTogZXgudGhpZ2guaW4ueSArIDMuNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBxdWFkcy5ib3QgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5rbmVlLm91dC54IC0gNiAtIGJ1bGsgKiAwLjA1LFxyXG4gICAgICAgICAgICAgICAgeTogZXgua25lZS5pbnRvcC55ICsgMlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBxdWFkcy5ib3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKHF1YWRzLmluLCBxdWFkcy5ib3QsIDAuNywgLWJ1bGsgKiAwLjEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2V4LnF1YWRzLnRvcCwgZXgucXVhZHMub3V0LCBicmVha1BvaW50LCBleC5xdWFkcy5pbiwgZXgucXVhZHMuYm90XTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtzdGF0TGltaXRzfSBmcm9tIFwiLi9zdGF0c1wiO1xyXG5pbXBvcnQge2Jhc2VEaW1EZXNjfSBmcm9tIFwiLi9kaW1lbnNpb25zXCI7XHJcblxyXG4vLyBpZG9zeW5jcmF0aWMgc3RhdHMgKHJhbmRvbSBkZXZpYXRpb25zIGZvciBlYWNoIHBlcnNvbilcclxuLy8gY291bGQgYWxzbyBiZSBtb2RpZmllZCBieSBpdGVtc1xyXG4vLyBvbmx5IHB1dCBudW1lcmljYWwgdmFsdWVzIGhlcmVcclxuZXhwb3J0IGNvbnN0IG1vZExpbWl0cyA9IHtcclxuICAgIC8vIE5FVyBtb2RzIEFQSVxyXG4gICAgYXJtUm90YXRpb246IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImFybVwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiZGVncmVlXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTQwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDQwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMCxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGFyb3VzYWwgICAgOiB7XHJcbiAgICAgICAgdW5pdHM6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgbG93ICA6IDAsXHJcbiAgICAgICAgaGlnaCA6IDEwMCxcclxuICAgICAgICBhdmcgIDogMTAsXHJcbiAgICAgICAgc3RkZXY6IDUsXHJcbiAgICAgICAgYmlhcyA6IDAsXHJcbiAgICB9LFxyXG5cclxuICAgIGJyZWFzdFBlcmtpbmVzczoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiY2hlc3RcIixcclxuICAgICAgICBkZXNjICAgICAgOiBcImNvdW50ZXIgc2FnZ2luZyBlZmZlY3Qgd2hlbiBicmVhc3RzIGdyb3cgdG9vIGxhcmdlXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgLy9XV0JCIERBSEFLTUEgLSBib29zdGVkIHRvIGFsbG93IGJpZ2dlciBib29ic1xyXG5cdFx0aGlnaCAgICAgIDogMzAsXHJcblx0XHQvL2hpZ2ggICAgICA6IDIwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGJyb3dCb3RDdXJsICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiYnJvd1wiLFxyXG4gICAgICAgIGRlc2MgICAgICA6IFwiSG93IG11Y2ggdGhlIGJvdHRvbSBvZiB0aGUgZXllYnJvdyBjdXJscyB1cCBvciBkb3duOyAwIGlzIGZsYXRcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDE1LFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDMsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAzLFxyXG4gICAgfSxcclxuICAgIGJyb3dUb3BDdXJsICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiYnJvd1wiLFxyXG4gICAgICAgIGRlc2MgICAgICA6IFwiSG93IG11Y2ggdGhlIHRvcCBvZiB0aGUgZXllYnJvdyBjdXJscyB1cCBvciBkb3duOyAwIGlzIGZsYXRcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDE1LFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDgsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAxLFxyXG4gICAgfSxcclxuICAgIGJyb3dDbG9zZW5lc3MgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiYnJvd1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgYnJvd0hlaWdodCAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJicm93XCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0xMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBicm93TGVuZ3RoICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImJyb3dcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGJyb3dTaGFycG5lc3MgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiYnJvd1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGJyb3dUaGlja25lc3MgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiYnJvd1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiAxLFxyXG4gICAgICAgIGJpYXMgICAgICA6IC0xLjUsXHJcbiAgICB9LFxyXG5cclxuICAgIGJyb3dPdXRCaWFzOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJicm93XCIsXHJcbiAgICAgICAgZGVzYyAgICAgIDogXCJXaGV0aGVyIHRoZSB0b3Agb2YgdGhlIG91dGVyIGJyb3cgZW5kcyBpbnNpZGUgb3Igb3V0c2lkZSB0aGUgYm90dG9tXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0xMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMCxcclxuICAgICAgICBhdmcgICAgICAgOiAtMSxcclxuICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgYnJvd1RpbHQgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImJyb3dcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcImRlZ3JlZVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0yMCxcclxuICAgICAgICBoaWdoICAgICAgOiAyMCxcclxuICAgICAgICBhdmcgICAgICAgOiA1LFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDQsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIGNoZWVrRnVsbG5lc3MgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJoZWFkXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMjAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMjAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiAzLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgY2hpbkxlbmd0aCAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImhlYWRcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTMwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDMwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMyxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIC8vIGVhciBsb2JlIGxlbmd0aFxyXG4gICAgZWFybG9iZUxlbmd0aCAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImVhcnNcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMixcclxuICAgICAgICBoaWdoICAgICAgOiA0LFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMC4yLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDBcclxuICAgIH0sXHJcbiAgICBleWVCaWFzICAgICAgICAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiZXllc1wiLFxyXG4gICAgICAgIGRlc2MgICAgICA6IFwiV2hldGhlciB0aGUgZXllcyBiaWFzIHRvd2FyZHMgdGhlIGluc2lkZSBvciBvdXRzaWRlXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMSxcclxuICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgZXllQ2xvc2VuZXNzICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImV5ZXNcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMDAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiA1LFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgZXllQm90QmlhcyAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImV5ZXNcIixcclxuICAgICAgICBkZXNjICAgICAgOiBcIldoZXRoZXIgdGhlIGV5ZSBib3R0b20gYmlhcyB0b3dhcmRzIHRoZSBpbnNpZGUgb3Igb3V0c2lkZVwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGV5ZUJvdFNpemUgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJleWVzXCIsXHJcbiAgICAgICAgZGVzYyAgICAgIDogXCJIb3cgbXVjaCBkb2VzIHRoZSBib3R0b20gb2YgdGhlIGV5ZXMgZGlwXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0yMCxcclxuICAgICAgICBoaWdoICAgICAgOiAyMCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDAsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMSxcclxuICAgIH0sXHJcbiAgICBleWVIZWlnaHQgICAgICAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiZXllc1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTUsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTAsXHJcbiAgICAgICAgYXZnICAgICAgIDogLTMsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGV5ZVRpbHQgICAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJleWVzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJkZWdyZWVcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMjAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMzAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMixcclxuICAgICAgICBzdGRldiAgICAgOiA0LFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgZXllVG9wU2l6ZSAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImV5ZXNcIixcclxuICAgICAgICBkZXNjICAgICAgOiBcIkhvdyBtdWNoIGRvZXMgdGhlIHRvcCBvZiB0aGUgZXllcyBjdXJ2ZVwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogOCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDAuNSxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGV5ZVdpZHRoICAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJleWVzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0xMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBleWVsYXNoQmlhcyAgICAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiZXllbGFzaFwiLFxyXG4gICAgICAgIGRlc2MgICAgICA6IFwiV2hldGhlciB0aGUgZXllbGFzaGVzIGJpYXMgdG93YXJkcyB0aGUgaW5zaWRlIG9yIG91dHNpZGVcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcImFyYml0cmFyeVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0xMCxcclxuICAgICAgICBoaWdoICAgICAgOiAyMCxcclxuICAgICAgICBhdmcgICAgICAgOiA1LFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDEsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBleWVsYXNoQW5nbGUgICAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiZXllbGFzaFwiLFxyXG4gICAgICAgIGRlc2MgICAgICA6IFwiV2hldGhlciB0aGUgZXllbGFzaCBwb2ludHMgZG93biBvciB1cFwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMSxcclxuICAgICAgICBhdmcgICAgICAgOiAwLjksXHJcbiAgICAgICAgc3RkZXYgICAgIDogMCxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGV5ZWxpZEJpYXMgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJleWVsaWRcIixcclxuICAgICAgICBkZXNjICAgICAgOiBcIldoZXRoZXIgdGhlIGV5ZWxpZHMgYmlhcyB0b3dhcmRzIHRoZSBpbnNpZGUgb3Igb3V0c2lkZVwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDEsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGV5ZWxpZEhlaWdodCAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJleWVsaWRcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTYsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTIsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgZmVldEJpYXMgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImZlZXRcIixcclxuICAgICAgICBkZXNjICAgICAgOiBcIlJlbGF0aXZlIGltcG9ydGFuY2Ugb2YgaW5uZXIgdG9lcyB2cyBvdXRlciB0b2VzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMjAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgZmVldExlbmd0aCAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImZlZXRcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDQwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGZlZXRXaWR0aCAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJmZWV0XCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0yMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMixcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBoYWlyQWNjZXNzb3J5SHVlICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiaGFpclwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiZGVncmVlXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICBoaWdoICAgICAgOiAzNjAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMzYwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDUwLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgaGFpckFjY2Vzc29yeVNhdHVyYXRpb246IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImhhaXJcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIiVcIixcclxuICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwMCxcclxuICAgICAgICBhdmcgICAgICAgOiA4MCxcclxuICAgICAgICBzdGRldiAgICAgOiA1LFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgaGFpckFjY2Vzc29yeUxpZ2h0bmVzcyA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImhhaXJcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIiVcIixcclxuICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwMCxcclxuICAgICAgICBhdmcgICAgICAgOiA1MCxcclxuICAgICAgICBzdGRldiAgICAgOiAxMCxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGhhbmRSb3RhdGlvbiAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJoYW5kXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJkZWdyZWVcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtNDAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogNDAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiAwLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgaXJpc0hlaWdodCAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImlyaXNcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMSxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGlyaXNIdWUgICAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJpcmlzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJkZWdyZWVcIixcclxuICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDM2MCxcclxuICAgICAgICBhdmcgICAgICAgOiAzMCxcclxuICAgICAgICBzdGRldiAgICAgOiAzMCxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGlyaXNTYXR1cmF0aW9uICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJpcmlzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCIlXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMDAsXHJcbiAgICAgICAgYXZnICAgICAgIDogNTAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMTAsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBpcmlzTGlnaHRuZXNzICAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiaXJpc1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiJVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IDAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTAwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDIwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDEwLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgaXJpc1NpemUgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImlyaXNcIixcclxuICAgICAgICBkZXNjICAgICAgOiBcIkRpYW1ldGVyIG9mIHRoZSBpcmlzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IDAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogNTAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMTYsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMS41LFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgLy8gaG93IHByb21pbmFudGx5IHRoZSBsb3dlciBqYXcganV0cyBvdXQgKGluIG1tKVxyXG4gICAgamF3SnV0ICAgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImhlYWRcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMC41LFxyXG4gICAgICAgIGJpYXMgICAgICA6IDBcclxuICAgIH0sXHJcbiAgICBsaW1iYWxSaW5nU2l6ZSAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwiaXJpc1wiLFxyXG4gICAgICAgIGRlc2MgICAgICA6IFwiV2lkdGggb2YgdGhlIGxpbWJhbCByaW5nIChkYXJrIHJpbmcgc3Vycm91bmRpbmcgaXJpcylcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcInVtXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMDAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMjAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogNSxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGxpcEJpYXMgICAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJsaXBzXCIsXHJcbiAgICAgICAgZGVzYyAgICAgIDogXCJXaGV0aGVyIHRoZSB0b3AgbGlwIHNpdHMgYWJvdmUgdGhlIGJvdHRvbSBsaXAgb3IgdmlzZSB2ZXJzYVwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTUwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDUwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDEwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDEwLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgLy8gaG93IGZhciBhcGFydCB0aGUgY3VwaWQgYm93IGNvcm5lcnMgYXJlXHJcbiAgICBsaXBDdXBpZHNCb3cgICAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwibGlwc1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDMwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMjAsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBsaXBDdXJsICAgICAgICAgICAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwibGlwc1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwiYXJiaXRyYXJ5XCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTIwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDIwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogNSxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGxpcEhlaWdodCAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJsaXBzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0xMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDEuMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIC8vIHdoZXRoZXIgd2UgY3VydmUgdXAgb3IgZG93biB1cCB0byB0aGUgY3VwaWQgYm93IGNvcm5lclxyXG4gICAgbGlwVG9wQ3VydmUgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImxpcHNcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcImFyYml0cmFyeVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC01MCxcclxuICAgICAgICBoaWdoICAgICAgOiA1MCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDEwLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgbGlwVG9wU2l6ZSAgICAgICAgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImxpcHNcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcInVtXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTIwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDYwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDgsXHJcbiAgICAgICAgc3RkZXYgICAgIDogNCxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIGxpcEJvdFNpemUgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJsaXBzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC04MCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMDAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMzAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMTAsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMyxcclxuICAgIH0sXHJcblxyXG4gICAgbGlwUGFydGluZzoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwibGlwc1wiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwidW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiAwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwMCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDAsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBsaXBXaWR0aCAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJsaXBzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0yNTAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTAwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMzAsXHJcbiAgICAgICAgYmlhcyAgICAgIDogLTcwLFxyXG4gICAgfSxcclxuXHRsaXBIdWUgICAgICAgOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJsaXBzXCIsXHJcblx0XHR1bml0czogXCJkZWdyZWVcIixcclxuICAgICAgICBsb3cgIDogLTIwLFxyXG4gICAgICAgIGhpZ2ggOiAyMCxcclxuICAgICAgICBhdmcgIDogMCxcclxuICAgICAgICBzdGRldjogMixcclxuICAgICAgICBiaWFzIDogMCxcclxuICAgIH0sXHJcbiAgICBsaXBTYXR1cmF0aW9uOiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJsaXBzXCIsXHJcblx0XHR1bml0czogXCIlXCIsXHJcbiAgICAgICAgbG93ICA6IC0yMCxcclxuICAgICAgICBoaWdoIDogMjAsXHJcbiAgICAgICAgYXZnICA6IDAsXHJcbiAgICAgICAgc3RkZXY6IDIsXHJcbiAgICAgICAgYmlhcyA6IDAsXHJcbiAgICB9LFxyXG4gICAgbGlwTGlnaHRuZXNzIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwibGlwc1wiLFxyXG5cdFx0dW5pdHM6IFwiJVwiLFxyXG4gICAgICAgIGxvdyAgOiAtMjAsXHJcbiAgICAgICAgaGlnaCA6IDIwLFxyXG4gICAgICAgIGF2ZyAgOiAwLFxyXG4gICAgICAgIHN0ZGV2OiAyLFxyXG4gICAgICAgIGJpYXMgOiAwLFxyXG4gICAgfSxcclxuICAgIG5lY2tDdXJ2ZSA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcIm5lY2tcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTIwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IC01LFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDMsXHJcbiAgICAgICAgYmlhcyAgICAgIDogLTIsXHJcbiAgICB9LFxyXG5cclxuICAgIG5vc2VIZWlnaHQ6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcIm5vc2VcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogLTEwLFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogNCxcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuXHJcbiAgICBub3NlTGVuZ3RoICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcIm5vc2VcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICBoaWdoICAgICAgOiA3MCxcclxuICAgICAgICBhdmcgICAgICAgOiA0NSxcclxuICAgICAgICBzdGRldiAgICAgOiAzLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDAsXHJcbiAgICB9LFxyXG4gICAgbm9zZVJpZGdlSGVpZ2h0OiB7XHJcbiAgICAgICAgbGlua2VkUGFydDogXCJub3NlXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0xMCxcclxuICAgICAgICBoaWdoICAgICAgOiAxMCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBub3NlUm91bmRuZXNzICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcIm5vc2VcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcImFyYml0cmFyeVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC02LFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDEwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDAsXHJcbiAgICAgICAgc3RkZXYgICAgIDogMixcclxuICAgICAgICBiaWFzICAgICAgOiAwLFxyXG4gICAgfSxcclxuICAgIG5vc2VXaWR0aCAgICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwibm9zZVwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiAxMCxcclxuICAgICAgICBoaWdoICAgICAgOiAzMCxcclxuICAgICAgICBhdmcgICAgICAgOiAxOCxcclxuICAgICAgICBzdGRldiAgICAgOiAyLFxyXG4gICAgICAgIGJpYXMgICAgICA6IC0xLFxyXG4gICAgfSxcclxuICAgIG5vc3RyaWxTaXplICAgIDoge1xyXG4gICAgICAgIGxpbmtlZFBhcnQ6IFwibm9zZVwiLFxyXG4gICAgICAgIHVuaXRzICAgICA6IFwibW1cIixcclxuICAgICAgICBsb3cgICAgICAgOiA1LFxyXG4gICAgICAgIGhpZ2ggICAgICA6IDMwLFxyXG4gICAgICAgIGF2ZyAgICAgICA6IDEwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDIsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcbiAgICBwdXBpbFNpemUgICAgICA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcInB1cGlsXCIsXHJcbiAgICAgICAgZGVzYyAgICAgIDogXCJEaWFtZXRlciBvZiB0aGUgcHVwaWxcIixcclxuICAgICAgICB1bml0cyAgICAgOiBcIm1tXCIsXHJcbiAgICAgICAgbG93ICAgICAgIDogMCxcclxuICAgICAgICBoaWdoICAgICAgOiAyMCxcclxuICAgICAgICBhdmcgICAgICAgOiAxMCxcclxuICAgICAgICBzdGRldiAgICAgOiAwLjUsXHJcbiAgICAgICAgYmlhcyAgICAgIDogMCxcclxuICAgIH0sXHJcblxyXG4gICAgbGFiaWFGdWxsbmVzcyA6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImdlbml0YWxzXCIsXHJcbiAgICAgICAgZGVzYyAgICAgIDogXCJIb3cgcHVmZnkgdGhlIGxhYmlhIGlzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJhcmJpdHJhcnlcIixcclxuICAgICAgICBsb3cgICAgICAgOiAtMTAsXHJcbiAgICAgICAgaGlnaCAgICAgIDogMTAsXHJcbiAgICAgICAgYXZnICAgICAgIDogMCxcclxuICAgICAgICBzdGRldiAgICAgOiAxLFxyXG4gICAgICAgIGJpYXMgICAgICA6IDEsXHJcbiAgICB9LFxyXG4gICAgcGVuaXNUaGlja25lc3M6IHtcclxuICAgICAgICBsaW5rZWRQYXJ0OiBcImdlbml0YWxzXCIsXHJcbiAgICAgICAgdW5pdHMgICAgIDogXCJ1bVwiLFxyXG4gICAgICAgIGxvdyAgICAgICA6IC0zMCxcclxuICAgICAgICBoaWdoICAgICAgOiAzMCxcclxuICAgICAgICBhdmcgICAgICAgOiAwLFxyXG4gICAgICAgIHN0ZGV2ICAgICA6IDQsXHJcbiAgICAgICAgYmlhcyAgICAgIDogLTQsXHJcbiAgICB9LFxyXG4gICAgc2hvZUhlaWdodCAgICA6IHtcclxuICAgICAgICB1bml0czogXCJtbVwiLFxyXG4gICAgICAgIGxvdyAgOiAwLFxyXG4gICAgICAgIGhpZ2ggOiAzMDAsXHJcbiAgICAgICAgYXZnICA6IDAsXHJcbiAgICAgICAgc3RkZXY6IDAsXHJcbiAgICAgICAgYmlhcyA6IDAsXHJcbiAgICB9LFxyXG4gICAgc2tpbkh1ZSAgICAgICA6IHtcclxuICAgICAgICB1bml0czogXCJkZWdyZWVcIixcclxuICAgICAgICBsb3cgIDogLTIwLFxyXG4gICAgICAgIGhpZ2ggOiAyMCxcclxuICAgICAgICBhdmcgIDogMCxcclxuICAgICAgICBzdGRldjogMixcclxuICAgICAgICBiaWFzIDogMCxcclxuICAgIH0sXHJcbiAgICBza2luU2F0dXJhdGlvbjoge1xyXG4gICAgICAgIHVuaXRzOiBcIiVcIixcclxuICAgICAgICBsb3cgIDogLTIwLFxyXG4gICAgICAgIGhpZ2ggOiAyMCxcclxuICAgICAgICBhdmcgIDogMCxcclxuICAgICAgICBzdGRldjogMixcclxuICAgICAgICBiaWFzIDogMCxcclxuICAgIH0sXHJcbiAgICBza2luTGlnaHRuZXNzIDoge1xyXG4gICAgICAgIHVuaXRzOiBcIiVcIixcclxuICAgICAgICBsb3cgIDogLTIwLFxyXG4gICAgICAgIGhpZ2ggOiAyMCxcclxuICAgICAgICBhdmcgIDogMCxcclxuICAgICAgICBzdGRldjogMixcclxuICAgICAgICBiaWFzIDogMCxcclxuICAgIH0sXHJcbn07XHJcbmV4cG9ydCBjb25zdCBtb2REaXNjcmV0ZVBvb2wgPSB7fTtcclxuXHJcblxyXG4vLyBmaWxsIG91dCBtb2RpZmllciBmb3IgbnVtZXJpY2FsIHN0YXRzIGlmIHRoZXkgZG9uJ3QgZXhpc3RcclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRNb2RzKCkge1xyXG4gICAgZm9yIChsZXQgcCBpbiBzdGF0TGltaXRzKSB7XHJcbiAgICAgICAgaWYgKHN0YXRMaW1pdHMuaGFzT3duUHJvcGVydHkocCkgJiYgIW1vZExpbWl0cy5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHN0YXRMaW1pdHNbcF0uaGlnaCAtIHN0YXRMaW1pdHNbcF0ubG93O1xyXG4gICAgICAgICAgICAvLyBkZWZhdWx0XHJcbiAgICAgICAgICAgIG1vZExpbWl0c1twXSA9IHtcclxuICAgICAgICAgICAgICAgIGxvdyAgOiAtMWU5LFxyXG4gICAgICAgICAgICAgICAgaGlnaCA6IDFlOSxcclxuICAgICAgICAgICAgICAgIGF2ZyAgOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RkZXY6IHJhbmdlICogMC4wMSxcclxuICAgICAgICAgICAgICAgIGJpYXMgOiAwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgZGltZW5zaW9ucyA9IGJhc2VEaW1EZXNjW1wiaHVtYW5cIl07XHJcbiAgICBmb3IgKGxldCBkIGluIGRpbWVuc2lvbnMpIHtcclxuICAgICAgICBpZiAoZGltZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShkKSAmJiAhbW9kTGltaXRzLmhhc093blByb3BlcnR5KGQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZGltZW5zaW9uc1tkXS5oaWdoIC0gZGltZW5zaW9uc1tkXS5sb3c7XHJcbiAgICAgICAgICAgIG1vZExpbWl0c1tkXSA9IHtcclxuICAgICAgICAgICAgICAgIGxvdyAgOiAtMWU5LFxyXG4gICAgICAgICAgICAgICAgaGlnaCA6IDFlOSxcclxuICAgICAgICAgICAgICAgIGF2ZyAgOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RkZXY6IHJhbmdlICogMC4wMSxcclxuICAgICAgICAgICAgICAgIGJpYXMgOiAwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBhZGp1c3QsXHJcbiAgICBjbGFtcCxcclxuICAgIHJvdGF0ZVBvaW50cyxcclxuICAgIHJhZCxcclxuICAgIHJlZmxlY3QsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuZnVuY3Rpb24gY2FsY05lY2t0aWVMb29wKHBhcmFtcykge1xyXG4gICAgLy8gb3JkZXIgd2lsbCBiZSByaWdodEJvdC0+cmlnaHRUb3AtPmxlZnRUb3AtPmxlZnRCb3QtPnJpZ2h0Qm90XHJcbiAgICBjb25zdCByaWdodFRvcCA9IGV4dHJhY3RQb2ludChwYXJhbXMuY29sbGFyVG9wKTtcclxuICAgIGNvbnN0IHJpZ2h0Qm90ID0gZXh0cmFjdFBvaW50KHBhcmFtcy5jb2xsYXJCb3QpO1xyXG4gICAgY29uc3QgbGVmdFRvcCA9IGV4dHJhY3RQb2ludChyaWdodFRvcCk7XHJcbiAgICBsZWZ0VG9wLnggPSAtbGVmdFRvcC54O1xyXG4gICAgY29uc3QgbGVmdEJvdCA9IGV4dHJhY3RQb2ludChyaWdodEJvdCk7XHJcbiAgICBsZWZ0Qm90LnggPSAtbGVmdEJvdC54O1xyXG5cclxuICAgIHJpZ2h0VG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhyaWdodEJvdCwgcmlnaHRUb3AsIDAuNSwgMSk7XHJcbiAgICAvLyBjdXJ2ZSBiZXR3ZWVuIGxlZnQgYW5kIHJpZ2h0XHJcbiAgICBsZWZ0VG9wLmNwMSA9IHBhcmFtcy5jZW50ZXI7XHJcbiAgICBsZWZ0Qm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhsZWZ0VG9wLCBsZWZ0Qm90LCAwLjUsIDEpO1xyXG4gICAgLy8gY3VydmUgYmV0d2VlbiBsZWZ0IGFuZCByaWdodFxyXG4gICAgcmlnaHRCb3QuY3AxID0gYWRqdXN0KHBhcmFtcy5jZW50ZXIsIDAsIHJpZ2h0Qm90LnkgLSByaWdodFRvcC55KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJpZ2h0Qm90LFxyXG4gICAgICAgIHJpZ2h0VG9wLFxyXG4gICAgICAgIGxlZnRUb3AsXHJcbiAgICAgICAgbGVmdEJvdFxyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENsb3RoaW5nUGFydCBkcmF3biBjbGFzc2VzL2NvbXBvbmVudHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBOZWNrdGllUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBQb3NpdGlvbmFsIG9mZnNldCBvZiB0aGUgdG9wIG9mIHRoZSBrbm90IHJlbGF0aXZlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIG5lY2tcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIG9mZnNldFdpZHRoICAgIDogMCxcclxuICAgICAgICAgICAgb2Zmc2V0SGVpZ2h0ICAgOiAtMTAsXHJcbiAgICAgICAgICAgIGtub3RXaWR0aCAgICAgIDogNSxcclxuICAgICAgICAgICAga25vdEhlaWdodCAgICAgOiA1LFxyXG4gICAgICAgICAgICBsb29wV2lkdGggICAgICA6IDMsXHJcbiAgICAgICAgICAgIC8vIHRvcCBwYXJ0IG9mIHRvbmd1ZSdzIHdpZHRoXHJcbiAgICAgICAgICAgIHRvbmd1ZVRvcFdpZHRoIDogNCxcclxuICAgICAgICAgICAgLy8gd2lkZXN0IHBhcnQgKGF0IHRoZSBib3R0b20pIG9mIHRoZSB0b25ndWUncyB3aWR0aFxyXG4gICAgICAgICAgICB0b25ndWVCb3RXaWR0aCA6IDYsXHJcbiAgICAgICAgICAgIC8vIHRvdGFsIGxlbmd0aCBvZiB0b25ndWVcclxuICAgICAgICAgICAgdG9uZ3VlSGVpZ2h0ICAgOiAxNSxcclxuICAgICAgICAgICAgLy8gZnJvbSB0aGUgYm90dG9tLCB3aGVyZSB0aGUgd2lkZXN0IHBhcnQgb2NjdXJzXHJcbiAgICAgICAgICAgIHRvbmd1ZUJvdEhlaWdodDogMyxcclxuICAgICAgICAgICAgLy8gcm90YXRpb24gb2YgdGhlIHRpcCBvZiB0aGUgdG9uZ3VlXHJcbiAgICAgICAgICAgIHRvbmd1ZVJvdGF0aW9uIDogMCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICAvLyBjZW50ZXIgb2YgdGhlIG5lY2sgdG9wICh0b3Agb2Yga25vdClcclxuICAgICAgICBjb25zdCBjZW50ZXIgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMub2Zmc2V0V2lkdGgsXHJcbiAgICAgICAgICAgIHk6IGV4Lm5lY2suY3VzcC55ICsgdGhpcy5vZmZzZXRIZWlnaHRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBrbm90XHJcbiAgICAgICAgY29uc3Qga25vdCA9IHt9O1xyXG4gICAgICAgIGtub3QudG9wTGVmdCA9IHtcclxuICAgICAgICAgICAgeDogY2VudGVyLnggLSB0aGlzLmtub3RXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgIHk6IGNlbnRlci55XHJcbiAgICAgICAgfTtcclxuICAgICAgICBrbm90LnRvcFJpZ2h0ID0ge1xyXG4gICAgICAgICAgICB4OiBjZW50ZXIueCArIHRoaXMua25vdFdpZHRoIC8gMixcclxuICAgICAgICAgICAgeTogY2VudGVyLnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGtub3QubGVmdCA9IHtcclxuICAgICAgICAgICAgeDoga25vdC50b3BMZWZ0LngsXHJcbiAgICAgICAgICAgIHk6IGNlbnRlci55IC0gdGhpcy5sb29wV2lkdGggLyAyXHJcbiAgICAgICAgfTtcclxuICAgICAgICBrbm90LnJpZ2h0ID0ge1xyXG4gICAgICAgICAgICB4OiBrbm90LnRvcFJpZ2h0LngsXHJcbiAgICAgICAgICAgIHk6IGtub3QubGVmdC55XHJcbiAgICAgICAgfTtcclxuICAgICAgICBrbm90LmJvdExlZnQgPSB7XHJcbiAgICAgICAgICAgIHg6IGNlbnRlci54IC0gdGhpcy50b25ndWVUb3BXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgIHk6IGNlbnRlci55IC0gdGhpcy5rbm90SGVpZ2h0XHJcbiAgICAgICAgfTtcclxuICAgICAgICBrbm90LmJvdFJpZ2h0ID0ge1xyXG4gICAgICAgICAgICB4OiBjZW50ZXIueCArIHRoaXMudG9uZ3VlVG9wV2lkdGggLyAyLFxyXG4gICAgICAgICAgICB5OiBrbm90LmJvdExlZnQueVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIG5lY2sgbG9vcFxyXG4gICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZShjbGFtcCh0aGlzLmxvb3BXaWR0aCAqIDAuMDM1LCAwLCAxKSwgZXgudHJhcGV6aXVzLFxyXG4gICAgICAgICAgICBleC5jb2xsYXJib25lXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBib3RSaWdodCA9IGV4dHJhY3RQb2ludChzcC5sZWZ0LnAyKTtcclxuICAgICAgICBjb25zdCB0b3BSaWdodCA9IHNwLmxlZnQucDE7XHJcbiAgICAgICAgdG9wUmlnaHQuY3AxID0gc3AubGVmdC5wMi5jcDI7XHJcbiAgICAgICAgdG9wUmlnaHQuY3AyID0gc3AubGVmdC5wMi5jcDE7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvcExlZnQgPSByZWZsZWN0KHRvcFJpZ2h0KTtcclxuICAgICAgICBjb25zdCBib3RMZWZ0ID0gcmVmbGVjdChib3RSaWdodCk7XHJcbiAgICAgICAgdG9wTGVmdC5jcDEgPSByZWZsZWN0KHRvcFJpZ2h0LmNwMSk7XHJcbiAgICAgICAgdG9wTGVmdC5jcDIgPSByZWZsZWN0KHRvcFJpZ2h0LmNwMik7XHJcblxyXG4gICAgICAgIC8vIHRvbmd1ZVxyXG4gICAgICAgIGNvbnN0IHRvbmd1ZSA9IHt9O1xyXG4gICAgICAgIHRvbmd1ZS5ib3QgPSB7XHJcbiAgICAgICAgICAgIHg6IGNlbnRlci54LFxyXG4gICAgICAgICAgICB5OiBrbm90LmJvdFJpZ2h0LnkgLSB0aGlzLnRvbmd1ZUhlaWdodFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdG9uZ3VlLmxlZnQgPSB7XHJcbiAgICAgICAgICAgIHg6IGNlbnRlci54IC0gdGhpcy50b25ndWVCb3RXaWR0aCAvIDIsXHJcbiAgICAgICAgICAgIHk6IHRvbmd1ZS5ib3QueSArIHRoaXMudG9uZ3VlQm90SGVpZ2h0LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdG9uZ3VlLnJpZ2h0ID0ge1xyXG4gICAgICAgICAgICB4OiBjZW50ZXIueCArIHRoaXMudG9uZ3VlQm90V2lkdGggLyAyLFxyXG4gICAgICAgICAgICB5OiB0b25ndWUubGVmdC55LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gcm90YXRlIGp1c3QgdGhlIHRvbmd1ZSBwb2ludHMgYW5kIG5vdCB0aGUgY29udHJvbCBwb2ludHNcclxuICAgICAgICByb3RhdGVQb2ludHMoY2VudGVyLFxyXG4gICAgICAgICAgICByYWQodGhpcy50b25ndWVSb3RhdGlvbiksXHJcbiAgICAgICAgICAgIHRvbmd1ZS5ib3QsXHJcbiAgICAgICAgICAgIHRvbmd1ZS5sZWZ0LFxyXG4gICAgICAgICAgICB0b25ndWUucmlnaHQpO1xyXG4gICAgICAgIC8vIFRPRE8gc2V0IGNvbnRyb2wgcG9pbnRzIHRoYXQgd29uJ3QgYmUgcm90YXRlZFxyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBrbm90LnRvcExlZnQsXHJcbiAgICAgICAgICAgIGNlbnRlcixcclxuICAgICAgICAgICAga25vdC50b3BSaWdodCxcclxuICAgICAgICAgICAga25vdC5yaWdodCxcclxuICAgICAgICAgICAga25vdC5ib3RSaWdodCxcclxuICAgICAgICAgICAga25vdC5ib3RMZWZ0LFxyXG4gICAgICAgICAgICBrbm90LmxlZnQsXHJcbiAgICAgICAgICAgIGtub3QudG9wTGVmdFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlZmxlY3Rpb24gPSAxLjU7XHJcbiAgICAgICAgLy8gdG9wIGxlZnQgZG93biB0byBrbm90XHJcbiAgICAgICAga25vdC50b3BMZWZ0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyh0b3BMZWZ0LCBrbm90LnRvcExlZnQsIDAuNSwgLWRlZmxlY3Rpb24pO1xyXG4gICAgICAgIGJvdExlZnQuY3AxID0gc2ltcGxlUXVhZHJhdGljKGtub3QubGVmdCwgYm90TGVmdCwgMC41LCBkZWZsZWN0aW9uKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgYm90TGVmdCwgdG9wTGVmdCwga25vdC50b3BMZWZ0LCBrbm90LmxlZnQsIGJvdExlZnRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB0b3AgcmlnaHQgZG93biB0byBrbm90XHJcbiAgICAgICAga25vdC50b3BSaWdodC5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9wUmlnaHQsIGtub3QudG9wUmlnaHQsIDAuNSwgZGVmbGVjdGlvbik7XHJcbiAgICAgICAgYm90UmlnaHQuY3AxID0gc2ltcGxlUXVhZHJhdGljKGtub3QucmlnaHQsIGJvdFJpZ2h0LCAwLjUsIC1kZWZsZWN0aW9uKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgYm90UmlnaHQsIHRvcFJpZ2h0LCBrbm90LnRvcFJpZ2h0LCBrbm90LnJpZ2h0LCBib3RSaWdodFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIHRvbmd1ZVxyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBrbm90LmJvdExlZnQsIHRvbmd1ZS5sZWZ0LCB0b25ndWUuYm90LCB0b25ndWUucmlnaHQsIGtub3QuYm90UmlnaHRcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQmFzZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmVja0FjY2Vzc29yeSBleHRlbmRzIENsb3RoaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbmNyZXRlIENsb3RoaW5nIGNsYXNzZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBOZWNrVGllIGV4dGVuZHMgTmVja0FjY2Vzc29yeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjMzMzXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBOZWNrdGllUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7Y29ubmVjdEVuZFBvaW50cywgY292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge3NldFN0cm9rZUFuZEZpbGx9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuaW1wb3J0IHtcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICBub25lLFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGFkanVzdCxcclxuICAgIGNsb25lLFxyXG4gICAgYnJlYWtQb2ludCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG4vKipcclxuICogQ2xvdGhpbmdQYXJ0IGRyYXduIGNsYXNzZXMvY29tcG9uZW50c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN3ZWF0ZXJCYXNlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImdyb2luXCJdXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICBjb25zdCB7dG9wLCBvdXQsIGN1c3AsIGNvbGxhcmJvbmUsIHdhaXN0LCBib3R9ID0gY2FsY1N3ZWF0ZXJCYXNlLmNhbGwodGhpcywgZXgpO1xyXG5cclxuICAgICAgICAvLyBzY2FsZSB0byBzaW11bGF0ZSBjbG90aGluZyB0aGlja25lc3NcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgdG9wLFxyXG4gICAgICAgICAgICBvdXQsXHJcbiAgICAgICAgICAgIGN1c3AsXHJcbiAgICAgICAgICAgIGNvbGxhcmJvbmUsXHJcbiAgICAgICAgICAgIGV4LmFybXBpdCxcclxuICAgICAgICAgICAgZXgubGF0LFxyXG4gICAgICAgICAgICB3YWlzdCxcclxuICAgICAgICAgICAgYm90Lm91dCxcclxuICAgICAgICAgICAgYm90LmJvdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgIG91dCxcclxuICAgICAgICAgICAgY3VzcCxcclxuICAgICAgICAgICAgY29sbGFyYm9uZSwgYnJlYWtQb2ludCxcclxuICAgICAgICAgICAgZXguYXJtcGl0LFxyXG4gICAgICAgICAgICBleC5sYXQsXHJcbiAgICAgICAgICAgIHdhaXN0LFxyXG4gICAgICAgICAgICBib3Qub3V0LFxyXG4gICAgICAgICAgICBib3QuYm90KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZSB0aGUgZHJhd3BvaW50cyBmb3IgdGhlIHRvcnNvIGJhc2Ugb2YgYSBzd2VhdGVyXHJcbiAqIEB0aGlzIHtDbG90aGluZ1BhcnR9XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aGlzLm5lY2tDb3ZlcmFnZSBbMCwxXSBwcm9wb3J0aW9uIG9mIHRoZSBuZWNrIHRoYXQncyBjb3ZlcmVkIGJ5IHRoZSBzd2VhdGVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aGlzLnN0b21hY2hDb3ZlcmFnZSBbMCwxXSBwcm9wb3J0aW9uIG9mIHRoZSBzdG9tYWNoIHRoYXQncyBjb3ZlcmVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aGlzLnRoaWNrbmVzcyBob3cgZGVmaW5lZCB0aGUgb3V0bGluZSBzaG91bGQgYmVcclxuICogQHBhcmFtIGV4XHJcbiAqIEByZXR1cm5zIHt7dG9wOiB7eDogbnVtYmVyLCB5OiBudW1iZXJ9LCBvdXQ6ICp8cDJ8e3gsIHl9fGx8aSwgY3VzcDogKiwgY29sbGFyYm9uZTogKiwgd2Fpc3Q6ICosIGJvdDoge319fVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNTd2VhdGVyQmFzZShleCkge1xyXG4gICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgxIC0gdGhpcy5uZWNrQ292ZXJhZ2UsIGV4Lm5lY2sudG9wLFxyXG4gICAgICAgIGV4Lm5lY2suY3VzcFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBvdXQgPSBzcC5sZWZ0LnAyO1xyXG4gICAgY29uc3QgdG9wID0ge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogb3V0LnkgLSAyXHJcbiAgICB9O1xyXG4gICAgb3V0LmNwMSA9IHtcclxuICAgICAgICB4OiB0b3AueCAqIDAuNSArIG91dC54ICogMC41LFxyXG4gICAgICAgIHk6IHRvcC55XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGN1c3AgPSBleHRyYWN0UG9pbnQoZXgudHJhcGV6aXVzKTtcclxuICAgIGN1c3AuY3AxID0ge1xyXG4gICAgICAgIHg6IG91dC54ICsgdGhpcy5uZWNrQ292ZXJhZ2UgKiAyLFxyXG4gICAgICAgIHk6IG91dC55IC0gMVxyXG4gICAgfTtcclxuICAgIGN1c3AuY3AyID0ge1xyXG4gICAgICAgIHg6IGN1c3AueCxcclxuICAgICAgICB5OiBjdXNwLnkgKyB0aGlzLm5lY2tDb3ZlcmFnZSAqIDNcclxuICAgIH07XHJcblxyXG4gICAgLy8gd2hlcmUgZG9lcyB0aGlzIHNoaXJ0IGVuZFxyXG4gICAgc3AgPSBzcGxpdEN1cnZlKHRoaXMuc3RvbWFjaENvdmVyYWdlLCBleC53YWlzdCwgZXguaGlwKTtcclxuICAgIGNvbnN0IGJvdCA9IHt9O1xyXG4gICAgYm90Lm91dCA9IHNwLmxlZnQucDI7XHJcbiAgICBib3Qub3V0LnggKz0gdGhpcy50aGlja25lc3MgKiAwLjQ7XHJcblxyXG4gICAgYm90LmJvdCA9IGV4dHJhY3RQb2ludChleC5wZWx2aXMpO1xyXG4gICAgYm90LmJvdC55ICs9IGJvdC5vdXQueSAtIGV4LmhpcC55O1xyXG4gICAgYm90LmJvdC5jcDEgPSB7XHJcbiAgICAgICAgeDogYm90LmJvdC54ICogMC41ICsgYm90Lm91dC54ICogMC41LFxyXG4gICAgICAgIHk6IGJvdC5ib3QueVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjb2xsYXJib25lID0gY2xvbmUoZXguY29sbGFyYm9uZSk7XHJcbiAgICBjb25zdCB3YWlzdCA9IGFkanVzdChleC53YWlzdCwgdGhpcy50aGlja25lc3MgKiAwLjgsIDApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9wLFxyXG4gICAgICAgIG91dCxcclxuICAgICAgICBjdXNwLFxyXG4gICAgICAgIGNvbGxhcmJvbmUsXHJcbiAgICAgICAgd2Fpc3QsXHJcbiAgICAgICAgYm90LFxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvdmVyZWRCcmVhc3RQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgaWYgKGNvdmVyTmlwcGxlc0lmSGF2ZU5vQnJlYXN0cyhleCwgY3R4LCB0aGlzKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0b3AgPSBhZGp1c3QoZXguYnJlYXN0LnRvcCwgMCwgMCk7XHJcbiAgICAgICAgY29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcbiAgICAgICAgY29uc3QgYm90ID0gYWRqdXN0KGV4LmJyZWFzdC5ib3QsIDAsIC0wLjEpO1xyXG4gICAgICAgIGNvbnN0IGlubmVyID0gYWRqdXN0KGV4LmJyZWFzdC5pbiwgMCwgMCk7XHJcbiAgICAgICAgY29uc3QgY2xlYXZhZ2UgPSBhZGp1c3QoZXguYnJlYXN0LmNsZWF2YWdlLCAtMC4xLCAwKTtcclxuICAgICAgICBjb25zdCB0b3BBZ2FpbiA9IGFkanVzdChjb25uZWN0RW5kUG9pbnRzKGNsZWF2YWdlLCB0b3ApLCAwLCAwLjIpO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgdG9wLFxyXG4gICAgICAgICAgICB0aXAsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgaW5uZXIsXHJcbiAgICAgICAgICAgIGNsZWF2YWdlLFxyXG4gICAgICAgICAgICB0b3BBZ2FpblxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAgICAgLy8gZmlsbCBvdXQgYnJlYXN0c1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgdG9wLFxyXG4gICAgICAgICAgICB0aXAsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgaW5uZXJcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogTG9uZyBzbGVldmUgbWVhbnMgYmV0d2VlbiBlbGJvdyBhbmQgd3Jpc3RcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMb25nU2xlZXZlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImFybVwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIHNsZWV2ZUxlbmd0aDogMSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgY29sbGFyYm9uZSxcclxuICAgICAgICAgICAgZGVsdG9pZHMsXHJcbiAgICAgICAgICAgIHNob3VsZGVyLFxyXG4gICAgICAgICAgICBlbGJvd091dCxcclxuICAgICAgICAgICAgb3V0LFxyXG4gICAgICAgICAgICBib3QsXHJcbiAgICAgICAgICAgIGVsYm93LFxyXG4gICAgICAgICAgICBhcm1waXRcclxuICAgICAgICB9ID0gY2FsY0xvbmdTbGVldmUuY2FsbCh0aGlzLCBleCk7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gdG9wIHN0cmFwXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBjb2xsYXJib25lLFxyXG4gICAgICAgICAgICBkZWx0b2lkcyxcclxuICAgICAgICAgICAgc2hvdWxkZXIsXHJcbiAgICAgICAgICAgIGVsYm93T3V0LFxyXG4gICAgICAgICAgICBvdXQsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgZWxib3csXHJcbiAgICAgICAgICAgIGFybXBpdCxcclxuICAgICAgICAgICAgY29ubmVjdEVuZFBvaW50cyhhcm1waXQsIGNvbGxhcmJvbmUpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIGNvbGxhcmJvbmUsXHJcbiAgICAgICAgICAgIGRlbHRvaWRzLFxyXG4gICAgICAgICAgICBzaG91bGRlcixcclxuICAgICAgICAgICAgZWxib3dPdXQsXHJcbiAgICAgICAgICAgIG91dCxcclxuICAgICAgICAgICAgYm90LFxyXG4gICAgICAgICAgICBlbGJvdyxcclxuICAgICAgICAgICAgYXJtcGl0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlIHRoZSBkcmF3IHBvaW50cyBmb3IgYSBsb25nIHNsZWV2ZSBwYXJ0XHJcbiAqIEBwYXJhbSBleFxyXG4gKiBAcmV0dXJucyB7e2NvbGxhcmJvbmU6ICh7eCwgeX18KiksIGRlbHRvaWRzOiAqLCBzaG91bGRlcjogT2JqZWN0LCBlbGJvd091dDogT2JqZWN0LCBvdXQsIGJvdCwgZWxib3csIGFybXBpdDogT2JqZWN0fX1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjTG9uZ1NsZWV2ZShleCkge1xyXG4gICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSh0aGlzLnNsZWV2ZUxlbmd0aCwgZXguZWxib3cub3V0LCBleC53cmlzdC5vdXQpO1xyXG4gICAgbGV0IG91dCA9IHNwLmxlZnQucDI7XHJcbiAgICBpZiAob3V0LmNwMSAmJiBvdXQuY3AyKSB7XHJcbiAgICAgICAgb3V0LmNwMS54ICs9IDAuNSAqIHRoaXMudGhpY2tuZXNzO1xyXG4gICAgICAgIG91dC5jcDIueCArPSAwLjMgKiB0aGlzLnRoaWNrbmVzcztcclxuICAgIH1cclxuXHJcbiAgICBzcCA9IHNwbGl0Q3VydmUoKDEgLSB0aGlzLnNsZWV2ZUxlbmd0aCkgKiAwLjksIGV4LndyaXN0LmluLCBleC5lbGJvdy5pbik7XHJcbiAgICBsZXQgYm90ID0gc3AubGVmdC5wMjtcclxuICAgIGxldCBlbGJvdyA9IHNwLnJpZ2h0LnAyO1xyXG4gICAgZWxib3cgPSBhZGp1c3QoZWxib3csIC10aGlzLnRoaWNrbmVzcyAqIDAuNCwgMCk7XHJcblxyXG4gICAgY29uc3QgY29sbGFyYm9uZSA9IGV4dHJhY3RQb2ludChleC5jb2xsYXJib25lKTtcclxuICAgIGNvbGxhcmJvbmUueCAtPSAwLjI7XHJcblxyXG4gICAgY29uc3Qgc2hvdWxkZXIgPSBhZGp1c3QoZXguc2hvdWxkZXIsIHRoaXMudGhpY2tuZXNzICogMC41LCAwKTtcclxuICAgIGNvbnN0IGVsYm93T3V0ID0gYWRqdXN0KGV4LmVsYm93Lm91dCwgdGhpcy50aGlja25lc3MgKiAwLjUsIDApO1xyXG5cclxuICAgIGJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMob3V0LCBib3QsIDAuNSwgMSk7XHJcblxyXG4gICAgY29uc3QgYXJtcGl0ID0gYWRqdXN0KGV4LmFybXBpdCwgLTAuMiwgMCk7XHJcbiAgICBjb25zdCBkZWx0b2lkcyA9IGV4LmRlbHRvaWRzO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjb2xsYXJib25lLFxyXG4gICAgICAgIGRlbHRvaWRzLFxyXG4gICAgICAgIHNob3VsZGVyLFxyXG4gICAgICAgIGVsYm93T3V0LFxyXG4gICAgICAgIG91dCxcclxuICAgICAgICBib3QsXHJcbiAgICAgICAgZWxib3csXHJcbiAgICAgICAgYXJtcGl0XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogU2hvcnQgc2xlZXZlIG1lYW5zIGJldHdlZW4gc2hvdWxkZXIgYW5kIGVsYm93XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2hvcnRTbGVldmVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDEgLSB0aGlzLnNsZWV2ZUxlbmd0aCwgZXguc2hvdWxkZXIsIGV4LmVsYm93Lm91dCk7XHJcbiAgICAgICAgbGV0IG91dCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZSgoMSAtIHRoaXMuc2xlZXZlTGVuZ3RoKSAqIDAuOSwgZXguZWxib3cuaW4sIGV4LmFybXBpdCk7XHJcbiAgICAgICAgbGV0IGJvdCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgbGV0IGFybXBpdCA9IHNwLnJpZ2h0LnAyO1xyXG4gICAgICAgIGFybXBpdCA9IGFkanVzdChhcm1waXQsIC0wLjEsIDApO1xyXG5cclxuICAgICAgICAvLyBhZGp1c3QoZXguY29sbGFyYm9uZSwgdGhpcy50aGlja25lc3MgKiAwLjIsIHRoaXMudGhpY2tuZXNzICogMC41KSxcclxuICAgICAgICBjb25zdCB7Y29sbGFyYm9uZX0gPSBjYWxjU3dlYXRlckJhc2UuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgY29sbGFyYm9uZS54IC09IDAuMTtcclxuICAgICAgICBjb25zdCBzaG91bGRlciA9IGFkanVzdChleC5zaG91bGRlciwgdGhpcy50aGlja25lc3MgKiAwLjUsIDApO1xyXG5cclxuICAgICAgICBib3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKG91dCwgYm90LCAwLjUsIDEpO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgY29sbGFyYm9uZSxcclxuICAgICAgICAgICAgZXguZGVsdG9pZHMsXHJcbiAgICAgICAgICAgIHNob3VsZGVyLFxyXG4gICAgICAgICAgICBvdXQsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgYXJtcGl0LFxyXG4gICAgICAgICAgICBjb25uZWN0RW5kUG9pbnRzKGFybXBpdCwgY29sbGFyYm9uZSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgY29sbGFyYm9uZSxcclxuICAgICAgICAgICAgZXguZGVsdG9pZHMsXHJcbiAgICAgICAgICAgIHNob3VsZGVyLFxyXG4gICAgICAgICAgICBvdXQsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgYXJtcGl0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEJhc2UgQ2xvdGhpbmcgY2xhc3Nlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN3ZWF0ZXIgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyICA6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSG93IG11Y2ggb2YgdGhlIHN0b21hY2ggc2hvdWxkIGJlIGNvdmVyZWQgKDEgbWVhbnMgZnVsbHkpXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBzdG9tYWNoQ292ZXJhZ2U6IDAuOCxcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEhvdyBtdWNoIG9mIHRoZSBuZWNrIHdpbGwgdGhlIGNvbGxhciBjb3ZlclxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgbmVja0NvdmVyYWdlICAgOiAwLjUsXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBIb3cgZmFyIHRvIGV4dGVuZCB0aGUgc2xlZXZlIChiZXR3ZWVuIDAgYW5kIDEpXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBzbGVldmVMZW5ndGggICA6IDAuOCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb25jcmV0ZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTG9uZ1NsZWV2ZWRTd2VhdGVyIGV4dGVuZHMgU3dlYXRlciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdG9tYWNoQ292ZXJhZ2U6IDAuNyxcclxuICAgICAgICAgICAgbmVja0NvdmVyYWdlICAgOiAwLjUsXHJcbiAgICAgICAgICAgIHNsZWV2ZUxlbmd0aCAgIDogMSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDAsMTAlLDIwJSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN3ZWF0ZXJCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ292ZXJlZEJyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTG9uZ1NsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvbmdTbGVldmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBBc3ltbWV0cmljU2xlZXZlZFN3ZWF0ZXIgZXh0ZW5kcyBTd2VhdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0b21hY2hDb3ZlcmFnZTogMC43LFxyXG4gICAgICAgICAgICBuZWNrQ292ZXJhZ2UgICA6IDAuNSxcclxuICAgICAgICAgICAgc2xlZXZlTGVuZ3RoICAgOiAxLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCIjMDAwXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2woMCwxMCUsMjAlKVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3dlYXRlckJhc2VQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDb3ZlcmVkQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTaG9ydFNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvbmdTbGVldmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBXaGVyZSBjb21tb24gbWF0ZXJpYWxzIGdvLCB3aGVyZSBlYWNoIGNhbiBhY3QgYXMgc3R5bGUgb3ZlcnJpZGVzLCB1c3VhbGx5XHJcbiAqIGJ5IGhhdmluZyBhIGZpbGwgYW5kIHN0cm9rZSBwcm9wZXJ0eSBvciBtZXRob2RcclxuICogQG5hbWVzcGFjZSBNYXRlcmlhbHNcclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IE1hdGVyaWFscyA9IHtcclxuICAgIGJyb3duRnVyOiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBzdHJva2UgICAgICA6IFwiIzY2MzMwMFwiLFxyXG4gICAgICAgIGZpbGwgICAgICAgIDogXCIjYWM3MzM5XCIsXHJcbiAgICAgICAgLy8gZnVyIHBhcnRzIGNhbiBiZSB0dWNrZWQgdW5kZXJcclxuICAgICAgICBjb3ZlckNvbmNlYWw6IFtcInRoaXNcIl0sXHJcbiAgICB9KSxcclxuXHJcbiAgICBzaGVlckZhYnJpYzogT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgc3Ryb2tlOiBcIiMwMDBcIixcclxuICAgICAgICBmaWxsICA6IFwicmdiYSgwLDAsMCwwLjgpXCIsXHJcbiAgICB9KSxcclxufTtcclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBnZXRQb2ludE9uQ3VydmUsXHJcbiAgICBhZGp1c3QsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICB0cmFjZVBvaW50LCBub25lXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5pbXBvcnQge0xvY2F0aW9uLCBzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1hc2NhcmFQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICAgICAgbG9jICAgICAgIDogYCR7TG9jYXRpb24uRVlFTEFTSH1gLFxyXG4gICAgICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJmYWNlUGFydHMgZXllbGFzaFwiXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICB0b3BGaWxsOiBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgICAgICBib3RGaWxsOiBcImJsYWNrXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiBub25lLFxyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLnRvcEZpbGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIGV4LmV5ZXMub3V0LFxyXG4gICAgICAgICAgICBleC5leWVsaWQudG9wLFxyXG4gICAgICAgICAgICBleC5leWVsaWQuaW4sXHJcbiAgICAgICAgICAgIGV4LmV5ZWxhc2gudG9wLFxyXG4gICAgICAgICAgICBleC5leWVsYXNoLm91dCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogbm9uZSxcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5ib3RGaWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIGV4LmV5ZXMub3V0LFxyXG4gICAgICAgICAgICBleC5leWVzLmluLFxyXG4gICAgICAgICAgICBleC5leWVsYXNoLm91dEJvdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE1ha2V1cCBleHRlbmRzIENsb3RoaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICByZXF1aXJlZFBhcnRzOiBcImZhY2VQYXJ0c1wiLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNYXNjYXJhIGV4dGVuZHMgTWFrZXVwIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7ZXh0cmFMZW5ndGg6IDJ9LCAuLi5kYXRhKTtcclxuICAgICAgICB0aGlzLk1vZHMgPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICAgICAgZXllbGFzaExlbmd0aDogdGhpcy5leHRyYUxlbmd0aCxcclxuICAgICAgICB9LCB0aGlzLk1vZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBNYXNjYXJhUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTWFzY2FyYVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtwYXR0ZXJuTG9hZGluZ1F1ZXVlfSBmcm9tIFwiLi4vdXRpbC9wYXR0ZXJuXCI7XHJcblxyXG4vKipcclxuICogSXRlbXMgYXJlIGxpa2UgY2xvdGhpbmcgYnV0IGRvIG5vdCBuZWVkIHRvIGJlIGR5bmFtaWNhbGx5IGRyYXduXHJcbiAqIFRoZXkgZG8gbm90IHNjYWxlIGluIGZvcm0gd2l0aCBib2R5IGRpbWVuc2lvbnMsIHNvIGNhbiBiZSBwcmVkcmF3biBpbiBzdmcsIHBuZywgYW5kIG90aGVyIGZvcm1zXHJcbiAqIFBvc2l0aW9uaW5nIGFuZCBzaXppbmcgb2YgYW4gaXRlbSBvcHRpb25hbGx5IGRlcGVuZHMgb24gZHJhdyBleHBvcnRzIChpZS4gcmVsYXRpdmUgdG8gcGFydHMgb2YgYm9keSlcclxuICogTWF5IGhhdmUgYm9keSBtb2RpZmllcnMgdW5kZXIgTW9kcyBwcm9wZXJ0eVxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSXRlbSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7XHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5CQVNFLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwibmFtZVwiKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uc3RydWN0aW5nIGl0ZW0gd2l0aCBubyBuYW1lIVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoXCJzcmNcIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnN0cnVjdGluZyBpdGVtIHdpdGggbm8gc3JjIVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIHN0YXJ0aW5nIGxvY2F0aW9uIGZvciBkcmF3aW5nIHRoZSBpdGVtXHJcbiAgICAgKiBAcGFyYW0gZXggRHJhd2luZyBleHBvcnRzXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcclxuICAgICAqIEByZXR1cm5zIHsobnVsbHx7eDogbnVtYmVyLCB5OiBudW1iZXJ9KX1cclxuICAgICAqL1xyXG4gICAgcmVuZGVySXRlbUxvY2F0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwieFwiKSAmJiB0aGlzLmhhc093blByb3BlcnR5KFwieVwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgeDogdGhpcy54LFxyXG4gICAgICAgICAgICAgICAgeTogdGhpcy55XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZ5IHRoZSBQbGF5ZXIgcG9zZSAoZ2V0UGFydEluTG9jYXRpb24gaW5zaWRlIGZ1bmN0aW9uIGFuZCBtb2RpZnkgcG9zZSBNb2RzIGRpcmVjdGx5KVxyXG4gICAgICogQHRoaXMgUGxheWVyXHJcbiAgICAgKi9cclxuICAgIG1vZGlmeVBvc2UoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXN0b3JlIHRoZSBlZmZlY3Qgb2YgbW9kaWZ5aW5nIHBvc2Ugd2hlbiBpdGVtIHdhcyBmaXJzdCB3aWVsZGVkXHJcbiAgICAgKiBAdGhpcyBQbGF5ZXJcclxuICAgICAqL1xyXG4gICAgcmVzdG9yZVBvc2UoKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGNhY2hlZEl0ZW1zID0ge307XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IEl0ZW1zID0ge1xyXG4gICAgZ2V0SXRlbVJlbmRlcihpdGVtKSB7XHJcbiAgICAgICAgaWYgKGNhY2hlZEl0ZW1zLmhhc093blByb3BlcnR5KGl0ZW0ubmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZEl0ZW1zW2l0ZW0ubmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0ZW0gbm90IGxvYWRlZCB5ZXQ6IFwiICsgaXRlbS5uYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaW1pbGFyIHRvIGdldEl0ZW0sIGxvYWQgdGhlIHJlc291cmNlIGlmIG5vdCBjYWNoZWRcclxuICAgICAqIEBwYXJhbSBpdGVtXHJcbiAgICAgKi9cclxuICAgIGxvYWRJdGVtKGl0ZW0pIHtcclxuICAgICAgICBpZiAoY2FjaGVkSXRlbXMuaGFzT3duUHJvcGVydHkoaXRlbS5uYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjcmVhdGUgdGhlIHByb21pc2UgdG8gYmUgbG9hZGVkIGJlZm9yZSB3ZSBkcmF3IHRoZSBpdGVtXHJcbiAgICAgICAgcGF0dGVybkxvYWRpbmdRdWV1ZS5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVkSXRlbXNbaXRlbS5uYW1lXSA9IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coRXJyb3IoXCJmYWlsZWQgdG8gbG9hZCBcIiArIGl0ZW0uc3JjKSk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gaXRlbS5zcmM7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIEl0ZW0gaW5zdGFuY2VcclxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZGEuSXRlbXNcclxuICAgICAqIEBwYXJhbSB7SXRlbX0gSXRlbSBJdGVtIHByb3RvdHlwZSB0byBpbnN0YW50aWF0ZVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgT3ZlcnJpZGluZyBkYXRhXHJcbiAgICAgKiBAcmV0dXJucyB7SXRlbX0gSW5zdGFudGlhdGVkIGNsb3RoaW5nIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBjcmVhdGUoSXRlbSwgLi4uZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgSXRlbSguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbn07XHJcbiIsImltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgZXh0cmFjdEJhc2VMb2NhdGlvbixcclxuICAgIGdldFNpZGVWYWx1ZSxcclxuICAgIGxvY2F0ZVJlbGF0aXZlVG9EcmF3cG9pbnQsXHJcbiAgICBwYXR0ZXJuTG9hZGluZ1F1ZXVlXHJcbn0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUYXR0b28ge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CQVNFLFxyXG4gICAgICAgICAgICBzaWRlICAgICAgOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICByb3RhdGlvbiAgOiAwLFxyXG4gICAgICAgICAgICB3aWR0aCAgICAgOiAyMCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrYXJtXCIsXHJcbiAgICAgICAgICAgIGlnbm9yZUNsaXA6IGZhbHNlLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG5cclxuICAgICAgICAvLyB0YXR0b29zIGNhbiBuZXZlciBiZSBleGNsdXNpdmVcclxuICAgICAgICBpZiAoIXRoaXMubG9jLnN0YXJ0c1dpdGgoXCIrXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jID0gXCIrXCIgKyB0aGlzLmxvYztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxvYyA9IGV4dHJhY3RCYXNlTG9jYXRpb24odGhpcy5sb2MpO1xyXG5cclxuICAgICAgICB0aGlzLmFib3ZlUGFydHMgPSBbYHBhcnRzICR7bG9jfWAsIGBkZWNvcmF0aXZlUGFydHMgJHtsb2N9YF07XHJcbiAgICAgICAgdGhpcy5iZWxvd1BhcnRzID0gW2BjbG90aGluZ1BhcnRzICR7bG9jfWBdO1xyXG5cclxuICAgICAgICAvLyBjYW5vbml6ZSBzaWRlIHZhbHVlXHJcbiAgICAgICAgdGhpcy5zaWRlID0gZ2V0U2lkZVZhbHVlKHRoaXMuc2lkZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwibmFtZVwiKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uc3RydWN0aW5nIHRhdHRvbyB3aXRoIG5vIG5hbWUhXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShcInNyY1wiKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uc3RydWN0aW5nIHRhdHRvbyB3aXRoIG5vIHNyYyFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwicmVsYXRpdmVMb2NhdGlvblwiKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29uc3RydWN0aW5nIHRhdHRvbyB3aXRob3V0IHJlbGF0aXZlTG9jYXRpb24gb2JqZWN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB0aGUgc3RhcnRpbmcgbG9jYXRpb24gZm9yIGRyYXdpbmcgdGhlIGl0ZW1cclxuICAgICAqIEBwYXJhbSBleCBEcmF3aW5nIGV4cG9ydHNcclxuICAgICAqL1xyXG4gICAgcmVuZGVyVGF0dG9vTG9jYXRpb24oZXgpIHtcclxuICAgICAgICByZXR1cm4gbG9jYXRlUmVsYXRpdmVUb0RyYXdwb2ludChleCwgdGhpcy5yZWxhdGl2ZUxvY2F0aW9uKTtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgY2FjaGVkVGF0dG9vcyA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIFZlcnkgc2ltaWxhciB0byBJdGVtc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFRhdHRvb3MgPSB7XHJcbiAgICBnZXRSZW5kZXIodGF0dG9vKSB7XHJcbiAgICAgICAgaWYgKGNhY2hlZFRhdHRvb3MuaGFzT3duUHJvcGVydHkodGF0dG9vLm5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRUYXR0b29zW3RhdHRvby5uYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGF0dG9vIG5vdCBsb2FkZWQgeWV0OiBcIiArIHRhdHRvby5uYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgbG9hZFRhdHRvbyh0YXR0b28pIHtcclxuICAgICAgICBpZiAoY2FjaGVkVGF0dG9vcy5oYXNPd25Qcm9wZXJ0eSh0YXR0b28ubmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBwcm9taXNlIHRvIGJlIGxvYWRlZCBiZWZvcmUgd2UgZHJhdyB0aGUgdGF0dG9vXHJcbiAgICAgICAgcGF0dGVybkxvYWRpbmdRdWV1ZS5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVkVGF0dG9vc1t0YXR0b28ubmFtZV0gPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1hZ2Uub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEVycm9yKFwiZmFpbGVkIHRvIGxvYWQgXCIgKyB0YXR0b28uc3JjKSk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdGF0dG9vLnNyYztcclxuICAgICAgICB9KSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZShJdGVtLCAuLi5kYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUYXR0b28oLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG59OyIsImltcG9ydCB7SGFpciwgSGFpclBhcnR9IGZyb20gXCIuL2hhaXJfcGFydFwiO1xyXG5pbXBvcnQge2FkanVzdCwgYWRqdXN0UG9pbnRzLCBjb250aW51ZUN1cnZlLCBkcmF3UG9pbnRzLCBzY2FsZSwgY2xhbXB9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtTaGFkaW5nUGFydH0gZnJvbSBcIi4uL2RyYXcvc2hhZGluZ19wYXJ0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXNpYW5CdW5CYWNrIGV4dGVuZHMgSGFpclBhcnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuXHRcdC8vVE9ETyBXV0JCISEhISEhISEhISEhISFcclxuXHRcdC8vQ09ORkxJQ1QgV0lUSCBFQVJSSU5HUyEhXHJcblx0XHQvL1RISVMgV0lMTCBNQUtFIFRIRU0gV09SS1MgQlVUIFBPVEVOQ0FMTFkgUlVJTlMgQUxMIEhBVFMhISEhXHJcbiAgICAgICAgc3VwZXIoSGFpci5oYWlyQmFjaywgey8qY292ZXJDb25jZWFsOiBbXCJoZWFkXCJdLCovfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaGFpciBoYXMgc3BlY2lhbCBkcmF3IG1ldGhvZHNcclxuICAgIHJlbmRlckhhaXJQb2ludHMoY3R4LCBleCwgaWdub3JlLCBleHRyYUNvbG9ycykge1xyXG4gICAgICAgIGxldCBobCA9IHRoaXMuaGFpckxlbmd0aDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZHJhd0JhY2tCdW5zKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjZW50ZXIgPSBhZGp1c3QoZXgubmVjay50b3AsIDEsIC0xKTtcclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG5cclxuLy9UT0RPIC0gRUxJUFNFIERPRVNOIFdPUksgUFJPUEVSTFksIFggPSAwIElTTlQgVEhFIE1JRERMRSBPRiBUSEUgQVZBVEFSLCBCVVQgVEhFIExFRlQgU0lERSBPRiBDQU5WQVNcdFx0XHRcclxuXHRcdCAgLypcclxuXHRcdCAgIGN0eC5lbGxpcHNlKGNlbnRlci54LFxyXG4gICAgICAgICAgICAgICAgY2VudGVyLnksXHJcbiAgICAgICAgICAgICAgICBobCAqIDAuMDgsXHJcbiAgICAgICAgICAgICAgICBobCAqIDAuMDYsXHJcbiAgICAgICAgICAgICAgICAwLjI1ICogTWF0aC5QSSxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAyICogTWF0aC5QSSk7XHJcblx0XHRcdCovXHRcclxuXHRcdFx0Y3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShjZW50ZXIueCwgY2VudGVyLnkpO1xyXG5cdFx0XHRjdHgucm90YXRlKDAuMjUgKiBNYXRoLlBJKTtcclxuXHRcdFx0Y3R4LnNjYWxlKGhsICogMC4wOCwgaGwgKiAwLjA2KTtcclxuXHRcdFx0Y3R4LmFyYygwLCAwLCAxLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XHJcblx0XHRcdGN0eC5yZXN0b3JlKCk7XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuICAgICAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHJhd0JhY2tCdW5zKCk7XHJcbi8qXHJcblRPRE8gLSBJUyBUSElTIFBBUlQgSU1QT1JUQU5UPz8/PyBcclxuICAgICAgICAvLyBjdHguc2F2ZSgpO1xyXG4gICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgICAgZHJhd0JhY2tCdW5zKCk7XHJcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuICAgICAgICAvLyBjdHgucmVzdG9yZSgpO1xyXG4qL1xyXG4gICAgICAgIGhsID0gdGhpcy5oYWlyTGVuZ3RoO1xyXG4gICAgICAgIC8vIGJ1blxyXG4gICAgICAgIGlmIChobCA+IDEwKSB7XHJcbiAgICAgICAgICAgIC8vIGNob3BzdGlja3M/XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IHtcclxuICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5za3VsbC55ICsgM1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBiYWNrID0ge1xyXG4gICAgICAgICAgICAgICAgeDogY2VudGVyLnggKyBobCAqIDAuMTMsXHJcbiAgICAgICAgICAgICAgICB5OiBjZW50ZXIueSArIGhsICogMC4wNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBmcm9udCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGNlbnRlci54ICsgaGwgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5OiBjZW50ZXIueSArIGhsICogMC4xXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGV4dHJhQ29sb3JzLmhhaXJBY2Nlc3NvcnlDb2xvcjtcclxuICAgICAgICAgICAgZHJhd1BvaW50cyhjdHgsIGNlbnRlciwgYmFjayk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuXHJcbiAgICAgIFxyXG5cdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdC8vIGN0eC5lbGxpcHNlKGNlbnRlci54LCBjZW50ZXIueSwgaGwgKiAwLjEsIGhsICogMC4wNiwgMCwgMCwgMiAqIE1hdGguUEkpO1x0XHJcblx0XHRcdGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY2VudGVyLngsIGNlbnRlci55KTtcclxuICAgICAgIC8vXHRjdHgucm90YXRlKHJvdCk7XHJcblx0XHRcdGN0eC5zY2FsZShobCAqIDAuMSwgaGwgKiAwLjA2KTtcclxuXHRcdFx0Y3R4LmFyYygwLCAwLCAxLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG5cdFx0XHRjdHgucmVzdG9yZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFxyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGV4dHJhQ29sb3JzLmhhaXJBY2Nlc3NvcnlDb2xvcjtcclxuICAgICAgICAgICAgZHJhd1BvaW50cyhjdHgsIGFkanVzdChjZW50ZXIsIDEgKyBobCAqIDAuMDIsIDEgKyBobCAqIDAuMDIpLCBmcm9udCk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuXHRcdFx0XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIExhcmdlU2lkZUJhbmdTaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIraGVhZFwiLFxyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5IQUlSLFxyXG4gICAgICAgICAgICBmb3JjZWRTaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIGlnbm9yZSwgaWdub3JlMSwgaWdub3JlMiwgYXZhdGFyKSB7XHJcbiAgICAgICAgY29uc3QgaGwgPSBjbGFtcChhdmF0YXIuZGltLmhhaXJMZW5ndGgsIDAsIDUwKTtcclxuICAgICAgICBsZXQge3RpcCwgYm90fSA9IGNhbGNMYXJnZVNpZGVCYW5nLmNhbGwodGhpcywgZXgsIGhsKTtcclxuICAgICAgICBjb25zdCBbYSwgYl0gPSBhZGp1c3RQb2ludHMoLWhsICogMC4wMywgLWhsICogMC4wNCwgdGlwLmNwMSwgdGlwLmNwMik7XHJcbiAgICAgICAgY29uc3QgW2MsIGRdID0gYWRqdXN0UG9pbnRzKGhsICogMC4wNiwgaGwgKiAwLjA1LCB0aXAuY3AxLCB0aXAuY3AyKTtcclxuXHJcbiAgICAgICAgYm90LmNwMSA9IGQ7XHJcbiAgICAgICAgYm90LmNwMiA9IGM7XHJcblxyXG4gICAgICAgIHRpcC5jcDEgPSBhO1xyXG4gICAgICAgIHRpcC5jcDIgPSBiO1xyXG5cclxuICAgICAgICByZXR1cm4gW2JvdCwgdGlwLCBib3RdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEFzaWFuQnVuRnJvbnQgZXh0ZW5kcyBIYWlyUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoSGFpci5oYWlyRnJvbnQsIHtcclxuICAgICAgICAgICAgc2hhZGluZ1BhcnRzOiBbTGFyZ2VTaWRlQmFuZ1NoYWRpbmddLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckhhaXJQb2ludHMoY3R4LCBleCkge1xyXG4gICAgICAgIC8vIHJpZ2h0IHNpZGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhsID0gY2xhbXAodGhpcy5oYWlyTGVuZ3RoLCAwLCA3MCk7XHJcbiAgICAgICAgICAgIGxldCB0aXAgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5za3VsbC54IC0gMixcclxuICAgICAgICAgICAgICAgIHk6IGV4LnNrdWxsLnkgKyAzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxldCBib3QgPSBhZGp1c3QoZXguc2t1bGwuc2lkZSwgMSwgMCk7XHJcbiAgICAgICAgICAgIGJvdC5jcDEueCArPSAzICsgaGwgKiAwLjAxO1xyXG4gICAgICAgICAgICBib3QuY3AxLnkgKz0gMyArIGhsICogMC4wMTtcclxuICAgICAgICAgICAgYm90LmNwMi54ID0gYm90Lng7XHJcbiAgICAgICAgICAgIHRpcC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBib3QueCAtIDQsXHJcbiAgICAgICAgICAgICAgICB5OiBib3QueSArIDNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGlwLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRpcC54LFxyXG4gICAgICAgICAgICAgICAgeTogdGlwLnkgLSB0aGlzLmZhY2VMZW5ndGggLyAxNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludHMoY3R4LCB0aXAsIGJvdCwgdGlwKTtcclxuICAgICAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBsZWZ0IHNpZGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhsID0gY2xhbXAodGhpcy5oYWlyTGVuZ3RoLCAwLCA1MCk7XHJcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB7dGlwLCBvdXQsIGJvdH0gPSBjYWxjTGFyZ2VTaWRlQmFuZy5jYWxsKHRoaXMsIGV4LCBobCk7XHJcblxyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludHMoY3R4LCB0aXAsIG91dCwgYm90LCB0aXApO1xyXG4gICAgICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjTGFyZ2VTaWRlQmFuZyhleCwgaGwpIHtcclxuICAgIC8vIGRyYXcgZnJvbnQgcGFydGluZ1xyXG4gICAgbGV0IHRpcCA9IHtcclxuICAgICAgICB4OiBleC5za3VsbC54IC0gMixcclxuICAgICAgICB5OiBleC5za3VsbC55ICsgM1xyXG4gICAgfTtcclxuICAgIGxldCBvdXQgPSBhZGp1c3QoZXguc2t1bGwuc2lkZSwgMSArIGhsICogMC4wMywgY2xhbXAoMiAtIGhsICogMC4wNSwgLTMsIDIpKTtcclxuICAgIC8vIG91dC5jcDEueCA9IG91dC54O1xyXG4gICAgb3V0LmNwMi54ID0gb3V0Lng7XHJcbiAgICBvdXQuY3AyLnkgLT0gMjtcclxuICAgIG91dC5jcDEueCArPSBobCAqIDAuMDU7XHJcbiAgICBvdXQuY3AxLnkgKz0gMiArIGhsICogMC4wNDtcclxuXHJcbiAgICBsZXQgYm90ID0ge1xyXG4gICAgICAgIHg6IG91dC54IC0gY2xhbXAoaGwgKiAwLjEsIDAsIDEwKSxcclxuICAgICAgICB5OiBvdXQueSAtIGNsYW1wKGhsLCAwLCAyMClcclxuICAgIH07XHJcbiAgICBib3QueCA9IGNsYW1wKGJvdC54LCAxMywgb3V0LngpO1xyXG4gICAgYm90LmNwMiA9IHtcclxuICAgICAgICB4OiBjbGFtcChib3QueCArIGhsICogMC4wOCwgMCwgTWF0aC5QT1NJVElWRV9JTkZJTklUWSksXHJcbiAgICAgICAgeTogYm90LnkgKyAyICsgaGwgKiAwLjA3XHJcbiAgICB9O1xyXG4gICAgaWYgKGhsID4gNSkge1xyXG4gICAgICAgIGJvdC54IC09IChobCAtIDUpICogMC4xO1xyXG4gICAgICAgIGlmIChobCA+IDIwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4dHJhTGVuZ3RoID0gaGwgLSAyMDtcclxuICAgICAgICAgICAgYm90ID0gYWRqdXN0KGJvdCwgLWV4dHJhTGVuZ3RoICogMC4wMiwgLWV4dHJhTGVuZ3RoICogMC4xNSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYm90LmNwMSA9IGNvbnRpbnVlQ3VydmUodGlwLCBvdXQpO1xyXG5cclxuICAgIHRpcC5jcDEgPSBzY2FsZShib3QuY3AyLCAyLCBib3QpO1xyXG4gICAgdGlwLmNwMS55ID0gb3V0Lnk7XHJcbiAgICB0aXAuY3AyID0ge1xyXG4gICAgICAgIHg6IHRpcC54IC0gOCxcclxuICAgICAgICB5OiB0aXAueSAtIHRoaXMuZmFjZUxlbmd0aCAvIDE1XHJcbiAgICB9O1xyXG4gICAgaWYgKGhsIDwgMTApIHtcclxuICAgICAgICB0aXAuY3AyLnkgLT0gKDEwIC0gaGwpICogMC41O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0aXAsXHJcbiAgICAgICAgb3V0LFxyXG4gICAgICAgIGJvdFxyXG4gICAgfTtcclxufVxyXG5cclxuIiwiaW1wb3J0IHtIYWlyLCBIYWlyUGFydH0gZnJvbSBcIi4vaGFpcl9wYXJ0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBjbGFtcCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgYWRqdXN0LFxyXG4gICAgc2NhbGUsXHJcbiAgICBkcmF3U3BlY2lmaWNDdXJsLFxyXG4gICAgZXh0cmFjdFBvaW50XHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEN1cmx5VGFpbEZyb250IGV4dGVuZHMgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKEhhaXIuaGFpckZyb250LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJIYWlyUG9pbnRzKGN0eCwgZXgpIHtcclxuICAgICAgICBjb25zdCBobCA9IGNsYW1wKHRoaXMuaGFpckxlbmd0aCwgMCwgNzApO1xyXG4gICAgICAgIC8vIHJpZ2h0IHNpZGVcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCB0aXAgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5za3VsbC54ICsgaGwgKiAwLjAyLFxyXG4gICAgICAgICAgICAgICAgeTogZXguc2t1bGwueSArIDNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZShjbGFtcCgwLjc1ICsgaGwgKiAwLjAwNDUsIDAsIDEuMSksIHRpcCwgZXguc2t1bGwuc2lkZSk7XHJcbiAgICAgICAgICAgIGxldCBib3QgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgICAgICBib3QuY3AxLnggKz0gMyArIGhsICogMC4wMTtcclxuICAgICAgICAgICAgYm90LmNwMS55ICs9IDMgKyBobCAqIDAuMDE7XHJcbiAgICAgICAgICAgIGJvdC5jcDIueCA9IGJvdC54O1xyXG4gICAgICAgICAgICB0aXAuY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYm90LnggLSA0ICsgaGwgKiAwLjAzLFxyXG4gICAgICAgICAgICAgICAgeTogYm90LnkgKyAzICsgaGwgKiAwLjFcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGlwLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRpcC54LFxyXG4gICAgICAgICAgICAgICAgeTogdGlwLnkgLSB0aGlzLmZhY2VMZW5ndGggLyAxNSAtIGhsICogMC4wNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludHMoY3R4LCB0aXAsIGJvdCwgdGlwKTtcclxuICAgICAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIGxlZnQgc2lkZVxyXG5cclxuICAgICAgICAgICAgY29uc3Qge3RpcCwgb3V0LCBib3R9ID0gY2FsY0N1cmx5VG9wKGV4LCBobCk7XHJcbiAgICAgICAgICAgIC8vIGRyYXcgZnJvbnQgcGFydGluZ1xyXG4gICAgICAgICAgICBvdXQuY3AyLnkgLT0gaGwgKiAwLjAzO1xyXG4gICAgICAgICAgICBvdXQuY3AyLnggKz0gaGwgKiAwLjAxO1xyXG4gICAgICAgICAgICBvdXQuY3AxLnggKz0gaGwgKiAwLjA1O1xyXG4gICAgICAgICAgICBvdXQuY3AxLnkgKz0gNCArIGhsICogMC4wNTtcclxuXHJcbiAgICAgICAgICAgIGJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBvdXQueCxcclxuICAgICAgICAgICAgICAgIHk6IGNsYW1wKG91dC55IC0gNSAtIGhsICogMC4wNSwgYm90LnksIG91dC55KVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBib3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogY2xhbXAoYm90LnggKyBobCAqIDAuMDcsIDAsIG91dC54KSxcclxuICAgICAgICAgICAgICAgIHk6IGJvdC55ICsgMiArIGhsICogMC4wN1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGlwLmNwMSA9IHNjYWxlKGJvdC5jcDIsIDMsIGJvdCk7XHJcbiAgICAgICAgICAgIHRpcC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aXAueCAtIDcsXHJcbiAgICAgICAgICAgICAgICB5OiB0aXAueSAtIHRoaXMuZmFjZUxlbmd0aCAvIDIwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChobCA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICB0aXAuY3AyLnkgLT0gKDEwIC0gaGwpICogMC41O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC41LCBib3QsIHRpcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IFtjdXJsTGVmdCwgY3VybEJvdCwgY3VybFRvcF0gPSBkcmF3U3BlY2lmaWNDdXJsKFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHggICAgICAgICA6IHNwLmxlZnQucDIueCxcclxuICAgICAgICAgICAgICAgICAgICB5ICAgICAgICAgOiBzcC5sZWZ0LnAyLnksXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmbGVjdGlvbjogLWhsICogMC4wM1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBzcC5sZWZ0LnAyLngsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogc3AubGVmdC5wMi55IC0gaGwgKiAwLjA4XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHggICAgICAgICA6IHRpcC54LFxyXG4gICAgICAgICAgICAgICAgICAgIHkgICAgICAgICA6IHRpcC55LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmxlY3Rpb246IC01XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGN1cmxUb3AuY3AyID0gc3AucmlnaHQucDIuY3AyO1xyXG5cdFx0XHRjdXJsTGVmdC5jcDEgPSBzcC5sZWZ0LnAyLmNwMTtcclxuICAgICAgICAgICAgY3VybExlZnQuY3AyID0gc3AubGVmdC5wMi5jcDI7XHJcblx0XHRcdFxyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludHMoY3R4LCB0aXAsIG91dCwgYm90LCBjdXJsTGVmdCwgY3VybEJvdCwgY3VybFRvcCk7XHJcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ3VybHlUYWlsTWVkaXVtIGV4dGVuZHMgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKEhhaXIuaGFpck1lZGl1bSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySGFpclBvaW50cyhjdHgsIGV4KSB7XHJcbiAgICAgICAgY29uc3QgaGwgPSB0aGlzLmhhaXJMZW5ndGg7XHJcblxyXG4gICAgICAgIGNvbnN0IHRhaWwgPSBobCAtIDQwO1xyXG4gICAgICAgIGlmICh0YWlsID4gMCkge1xyXG5cclxuICAgICAgICAgICAgY29uc3Qge291dCwgYm90fSA9IGNhbGNDdXJseVRvcChleCwgY2xhbXAoaGwsIDAsIDcwKSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsZWZ0ID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiBib3QueCArIHRhaWwgKiAwLjA0LFxyXG4gICAgICAgICAgICAgICAgeSAgOiBib3QueSAtIHRhaWwgKiAwLjM1LFxyXG4gICAgICAgICAgICAgICAgY3AxOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogYm90LngsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogYm90LnkgLSB0YWlsICogMC4yXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxlZnQuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbGVmdC54LFxyXG4gICAgICAgICAgICAgICAgeTogbGVmdC55ICsgdGFpbCAqIDAuMTVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRpcCA9IHtcclxuICAgICAgICAgICAgICAgIHggIDogYm90LnggLSB0YWlsICogMC4xLFxyXG4gICAgICAgICAgICAgICAgeSAgOiBib3QueSAtIHRhaWwsXHJcbiAgICAgICAgICAgICAgICBjcDE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBsZWZ0LngsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogbGVmdC55IC0gdGFpbCAqIDAuM1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGlwLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRpcC54IC0gdGFpbCAqIDAuMDUsXHJcbiAgICAgICAgICAgICAgICB5OiB0aXAueSArIHRhaWwgKiAwLjRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBleHRyYWN0UG9pbnQoZXgubmVjay50b3ApO1xyXG4gICAgICAgICAgICByaWdodC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aXAueCAtIHRhaWwgKiAwLjMsXHJcbiAgICAgICAgICAgICAgICB5OiB0aXAueSArIHRhaWwgKiAwLjJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmlnaHQuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogcmlnaHQueCxcclxuICAgICAgICAgICAgICAgIHk6IHJpZ2h0LnkgLSB0YWlsICogMC4wNVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRzKGN0eCwgYm90LCBsZWZ0LCB0aXAsIHJpZ2h0LCBvdXQpO1xyXG4gICAgICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY2FsY0N1cmx5VG9wKGV4LCBobCkge1xyXG4gICAgY29uc3QgdGlwID0ge1xyXG4gICAgICAgIHg6IGV4LnNrdWxsLnggLSBobCAqIDAuMDgsXHJcbiAgICAgICAgeTogZXguc2t1bGwueSArIDNcclxuICAgIH07XHJcbiAgICBjb25zdCBvdXQgPSBhZGp1c3QoZXguc2t1bGwuc2lkZSwgMSArIGhsICogMC4wMywgY2xhbXAoMiAtIGhsICogMC4wNSwgLTMsIDIpKTtcclxuICAgIGNvbnN0IGJvdCA9IHtcclxuICAgICAgICB4OiBvdXQueCAtIGNsYW1wKGhsICogMC4wNSwgMCwgMTApLFxyXG4gICAgICAgIHk6IG91dC55IC0gY2xhbXAoaGwgKiAwLjI1LCAwLCAyNSlcclxuICAgIH07XHJcbiAgICBpZiAoaGwgPiA1MCkge1xyXG4gICAgICAgIGJvdC54ICs9IChobCAtIDUwKSAqIDAuMDY7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0aXAsXHJcbiAgICAgICAgb3V0LFxyXG4gICAgICAgIGJvdFxyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQge0hhaXJQYXJ0LCBIYWlyfSBmcm9tIFwiLi9oYWlyX3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGFkanVzdCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgcmVmbGVjdCwgY2xhbXAsIGRyYXdTcGVjaWZpY0N1cmwsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5pbXBvcnQge2F2ZXJhZ2VQb2ludH0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5pbXBvcnQge1NoYWRpbmdQYXJ0fSBmcm9tIFwiLi4vZHJhdy9zaGFkaW5nX3BhcnRcIjtcclxuaW1wb3J0IHtzZWFtV2lkdGgsIExheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuXHJcbmNsYXNzIEhpbWVDdXRGcm9udFNoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCIraGVhZFwiLFxyXG4gICAgICAgICAgICBsYXllcjogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGxldCB7XHJcbiAgICAgICAgICAgIGxlZnQsXHJcbiAgICAgICAgICAgIHJpZ2h0LFxyXG4gICAgICAgICAgICB0b3BcclxuICAgICAgICB9ID0gY2FsY0hpbWVDdXQoZXgsIGNsYW1wKHRoaXMuaGFpckxlbmd0aCwgMCwgNTMpKTtcclxuXHJcbiAgICAgICAgbGVmdCA9IGFkanVzdChsZWZ0LCAwLCAtMSk7XHJcbiAgICAgICAgcmlnaHQgPSBhZGp1c3QocmlnaHQsIDAsIC0xKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtyaWdodCwgbGVmdCwgdG9wLCByaWdodF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSGltZUN1dEJhY2sgZXh0ZW5kcyBIYWlyUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoSGFpci5oYWlyQmFjaywge1xyXG4gICAgICAgICAgICByZWZsZWN0OiB0cnVlLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckhhaXJQb2ludHMoY3R4LCBleCkge1xyXG4gICAgICAgIGNvbnN0IGhsID0gdGhpcy5oYWlyTGVuZ3RoO1xyXG4gICAgICAgIGxldCB7cmlnaHQsIHRvcH0gPSBjYWxjSGltZUN1dChleCwgY2xhbXAoaGwsIDAsIDUzKSk7XHJcbiAgICAgICAgdG9wLnkgKz0gaGwgKiAwLjAxO1xyXG4gICAgICAgIHRvcC54IC09IHNlYW1XaWR0aDtcclxuICAgICAgICByaWdodCA9IGFkanVzdChyaWdodCwgaGwgKiAwLjAwNSwgMCk7XHJcbiAgICAgICAgcmlnaHQuY3AxLnkgKz0gaGwgKiAwLjAxO1xyXG5cclxuICAgICAgICBjb25zdCByaWdodEJvdCA9IHtcclxuICAgICAgICAgICAgeDogcmlnaHQueCxcclxuICAgICAgICAgICAgeTogcmlnaHQueSAtIGhsICogMC44XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBib3QgPSB7XHJcbiAgICAgICAgICAgIHg6IC1zZWFtV2lkdGgsXHJcbiAgICAgICAgICAgIHk6IHJpZ2h0Qm90LnkgLSBobCAqIDAuMDFcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHRvcCwgcmlnaHQsIHJpZ2h0Qm90LCBib3QpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEhpbWVDdXRGcm9udCBleHRlbmRzIEhhaXJQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcihIYWlyLmhhaXJGcm9udCwge1xyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtIaW1lQ3V0RnJvbnRTaGFkaW5nXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJIYWlyUG9pbnRzKGN0eCwgZXgpIHtcclxuICAgICAgICBjb25zdCBobCA9IGNsYW1wKHRoaXMuaGFpckxlbmd0aCwgMCwgNTMpO1xyXG4gICAgICAgIGNvbnN0IHtsZWZ0LCByaWdodCwgdG9wfSA9IGNhbGNIaW1lQ3V0KGV4LCBobCk7XHJcblxyXG4gICAgICAgIC8vIGZpcnN0IGRyYXcgdGhlIGJhbmcgKGRvbid0IHdhbnQgdG8gc3Ryb2tlIHRoZSB0b3AgYXMgd2VsbCBzbyB3ZSdsbCBmaWxsIGxhdGVyXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCByaWdodCk7XHJcbiAgICAgICAgLy8gZ2FwcyBpbiB0aGUgaGFpclxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjIsIHJpZ2h0LCBsZWZ0KTtcclxuICAgICAgICAgICAgY29uc3QgZ2FwUmlnaHQgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgICAgICBnYXBSaWdodC5kZWZsZWN0aW9uID0gLTI7XHJcblxyXG4gICAgICAgICAgICBzcCA9IHNwbGl0Q3VydmUoMC4yMjEsIHJpZ2h0LCBsZWZ0KTtcclxuICAgICAgICAgICAgbGVmdC5jcDEgPSBzcC5sZWZ0LnAyLmNwMTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IFssIGdhcFRvcCwgZ2FwTGVmdF0gPSBkcmF3U3BlY2lmaWNDdXJsKFxyXG4gICAgICAgICAgICAgICAgZ2FwUmlnaHQsXHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlUG9pbnQoZ2FwUmlnaHQsIHRvcCwgMC42KSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB4ICAgICAgICAgOiBzcC5sZWZ0LnAyLngsXHJcbiAgICAgICAgICAgICAgICAgICAgeSAgICAgICAgIDogc3AubGVmdC5wMi55LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmxlY3Rpb246IC0yXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZHJhd1BvaW50cyhjdHgsIG51bGwsIGdhcFJpZ2h0LCBnYXBUb3AsIGdhcExlZnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuNiwgcmlnaHQsIGxlZnQpO1xyXG4gICAgICAgICAgICBjb25zdCBnYXBSaWdodCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgICAgIGdhcFJpZ2h0LmRlZmxlY3Rpb24gPSAtMTtcclxuXHJcbiAgICAgICAgICAgIHNwID0gc3BsaXRDdXJ2ZSgwLjYxNSwgcmlnaHQsIGxlZnQpO1xyXG4gICAgICAgICAgICBsZWZ0LmNwMSA9IHNwLmxlZnQucDIuY3AxO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgWywgZ2FwVG9wLCBnYXBMZWZ0XSA9IGRyYXdTcGVjaWZpY0N1cmwoXHJcbiAgICAgICAgICAgICAgICBnYXBSaWdodCxcclxuICAgICAgICAgICAgICAgIGF2ZXJhZ2VQb2ludChnYXBSaWdodCwgdG9wLCAwLjQpLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHggICAgICAgICA6IHNwLmxlZnQucDIueCxcclxuICAgICAgICAgICAgICAgICAgICB5ICAgICAgICAgOiBzcC5sZWZ0LnAyLnksXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmbGVjdGlvbjogLTFcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRzKGN0eCwgbnVsbCwgZ2FwUmlnaHQsIGdhcFRvcCwgZ2FwTGVmdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC45LCByaWdodCwgbGVmdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGdhcFJpZ2h0ID0gc3AubGVmdC5wMjtcclxuICAgICAgICAgICAgZ2FwUmlnaHQuZGVmbGVjdGlvbiA9IDQ7XHJcblxyXG4gICAgICAgICAgICBzcCA9IHNwbGl0Q3VydmUoMC45MSwgcmlnaHQsIGxlZnQpO1xyXG4gICAgICAgICAgICBsZWZ0LmNwMSA9IHNwLmxlZnQucDIuY3AxO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgWywgZ2FwVG9wLCBnYXBMZWZ0XSA9IGRyYXdTcGVjaWZpY0N1cmwoXHJcbiAgICAgICAgICAgICAgICBnYXBSaWdodCxcclxuICAgICAgICAgICAgICAgIGF2ZXJhZ2VQb2ludChnYXBSaWdodCwgdG9wLCAwLjUpLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHggICAgICAgICA6IHNwLmxlZnQucDIueCxcclxuICAgICAgICAgICAgICAgICAgICB5ICAgICAgICAgOiBzcC5sZWZ0LnAyLnksXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmbGVjdGlvbjogNFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludHMoY3R4LCBudWxsLCBnYXBSaWdodCwgZ2FwVG9wLCBnYXBMZWZ0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNsb3NpbmcgdXAgdG8gdGhlIGxlZnRcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgbnVsbCwgbGVmdCwgdG9wLCByaWdodCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBIaW1lQ3V0U2lkZSBleHRlbmRzIEhhaXJQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcihIYWlyLmhhaXJGcm9udCwge1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIitmcm9udCBoYWlyXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcImhhaXJQYXJ0cyBoYWlyXCJdLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySGFpclBvaW50cyhjdHgsIGV4KSB7XHJcbiAgICAgICAgY29uc3QgaGwgPSB0aGlzLmhhaXJMZW5ndGg7XHJcbiAgICAgICAgaWYgKGhsIDwgNDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQge2xlZnQsIHJpZ2h0fSA9IGNhbGNIaW1lQ3V0KGV4LCBjbGFtcChobCwgMCwgNTMpKTtcclxuICAgICAgICByaWdodCA9IGFkanVzdChyaWdodCwgMC40LCAwLjkpO1xyXG4gICAgICAgIHJpZ2h0LmNwMS55ICs9IGhsICogMC4wMTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuMSwgcmlnaHQsIGxlZnQpO1xyXG4gICAgICAgIGNvbnN0IGlubmVyID0gc3AubGVmdC5wMjtcclxuXHJcbiAgICAgICAgY29uc3QgYm90ID0ge1xyXG4gICAgICAgICAgICB4OiByaWdodC54LFxyXG4gICAgICAgICAgICB5OiByaWdodC55IC0gKGhsIC0gNDApICogMC40XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBpbm5lckJvdCA9IHtcclxuICAgICAgICAgICAgeDogaW5uZXIueCxcclxuICAgICAgICAgICAgeTogYm90LnkgLSAxXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpbm5lckJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYm90LCBpbm5lckJvdCwgMC41LCAxKTtcclxuXHJcbiAgICAgICAgLy8gZmlyc3QgZHJhdyB0aGUgYmFuZyAoZG9uJ3Qgd2FudCB0byBzdHJva2UgdGhlIHRvcCBhcyB3ZWxsIHNvIHdlJ2xsIGZpbGwgbGF0ZXJcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHJpZ2h0LCBib3QsIGlubmVyQm90LCBpbm5lcik7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjSGltZUN1dChleCwgaGwpIHtcclxuICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZSgwLjQgKyBobCAvIDgyLCBleC5za3VsbCwgZXguc2t1bGwuc2lkZSk7XHJcbiAgICAvLyBza3VsbCBkb3duIHRvIHJpZ2h0XHJcbiAgICBsZXQgcmlnaHQgPSBzcC5sZWZ0LnAyO1xyXG4gICAgcmlnaHQgPSBhZGp1c3QocmlnaHQsIDEsIGhsIC8gMTAwKTtcclxuICAgIHJpZ2h0LmNwMS54IC09IGhsICogMC4wOTtcclxuXHJcbiAgICAvLyBjdXJ2ZSBkb3duIGluIGZyb250XHJcbiAgICBjb25zdCBsZWZ0ID0gcmVmbGVjdChyaWdodCk7XHJcbiAgICBsZWZ0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhyaWdodCwgbGVmdCwgMC41LCBobCAvIDIwKTtcclxuXHJcbiAgICBsZXQgdG9wID0gZXh0cmFjdFBvaW50KGV4LnNrdWxsKTtcclxuICAgIHRvcC5jcDEgPSByZWZsZWN0KHJpZ2h0LmNwMik7XHJcbiAgICB0b3AuY3AyID0gcmVmbGVjdChyaWdodC5jcDEpO1xyXG4gICAgdG9wID0gYWRqdXN0KHRvcCwgMCwgMik7XHJcbiAgICByaWdodC5jcDEueSArPSAyO1xyXG4gICAgcmlnaHQuY3AyLnkgKz0gMjtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbGVmdCxcclxuICAgICAgICByaWdodCxcclxuICAgICAgICB0b3BcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHtIYWlyUGFydCwgSGFpcn0gZnJvbSBcIi4vaGFpcl9wYXJ0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBhZGp1c3QsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGJyZWFrUG9pbnQsXHJcbiAgICBlbmRQb2ludCxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIGNvbnRpbnVlQ3VydmUsXHJcbiAgICBub25lLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtTaGFkaW5nUGFydH0gZnJvbSBcIi4uL2RyYXcvc2hhZGluZ19wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge2F2ZXJhZ2VQb2ludCwgYWRqdXN0Q29sb3IsIGV4dHJhY3RIZXh9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuXHJcbmNsYXNzIFN0cmFpZ2h0RnJvbnRTaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICA6IFwiZnJvbnQgaGFpclwiLFxyXG4gICAgICAgICAgICBsYXllcjogTGF5ZXIuSEFJUixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIHRvcEJvdH0gPSBjYWxjU3RyYWlnaHQuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgdG9wQm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyh0b3AsIHRvcEJvdCwgMC41LCAyLjUpO1xyXG4gICAgICAgIHRvcEJvdC5jcDIgPSBudWxsO1xyXG4gICAgICAgIHRvcC5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9wQm90LCB0b3AsIDAuNSwgLS41KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt0b3AsIHRvcEJvdCwgdG9wXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFN0cmFpZ2h0RnJvbnRTaWRlU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICA6IFwiK2Zyb250IGhhaXJcIixcclxuICAgICAgICAgICAgbGF5ZXIgIDogTGF5ZXIuSEFJUixcclxuICAgICAgICAgICAgcmVmbGVjdDogdHJ1ZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIHNpZGUsIHRvcEJvdH0gPSBjYWxjU3RyYWlnaHQuY2FsbCh0aGlzLCBleCk7XHJcblxyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC44LCB0b3AsIHNpZGUpO1xyXG5cclxuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiAxLFxyXG4gICAgICAgICAgICAgICAgeTogdG9wLnkgKiAwLjggKyB0b3BCb3QueSAqIDAuMlxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IHBFbmQgPSBhZGp1c3QoZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpLCAtMC4zLCAwKTtcclxuICAgICAgICAgICAgY29uc3QgY3VybCA9IDc7XHJcbiAgICAgICAgICAgIGNvbnN0IHRoaWNrbmVzcyA9IDAuNDtcclxuICAgICAgICAgICAgY29uc3QgYmlhcyA9IDAuMzU7XHJcbiAgICAgICAgICAgIHBFbmQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHAsIHBFbmQsIGJpYXMsIGN1cmwpO1xyXG4gICAgICAgICAgICBwLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhwRW5kLCBwLCAxIC0gYmlhcywgLWN1cmwgKyB0aGlja25lc3MpO1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaChwLCBwRW5kLCBwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBwID0ge1xyXG4gICAgICAgICAgICAgICAgeDogLTEsXHJcbiAgICAgICAgICAgICAgICB5OiB0b3AueSAqIDAuNCArIHRvcEJvdC55ICogMC42XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgcEVuZCA9IGFkanVzdChleHRyYWN0UG9pbnQoc3AubGVmdC5wMiksIC0wLjUsIC0xLjUpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJsID0gNztcclxuICAgICAgICAgICAgY29uc3QgdGhpY2tuZXNzID0gMC40O1xyXG4gICAgICAgICAgICBjb25zdCBiaWFzID0gMC41NTtcclxuICAgICAgICAgICAgcEVuZC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMocCwgcEVuZCwgYmlhcywgY3VybCk7XHJcbiAgICAgICAgICAgIHAuY3AxID0gc2ltcGxlUXVhZHJhdGljKHBFbmQsIHAsIDEgLSBiaWFzLCAtY3VybCArIHRoaWNrbmVzcyk7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKGJyZWFrUG9pbnQsIHAsIHBFbmQsIHApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwb2ludHMucHVzaChlbmRQb2ludCk7XHJcbiAgICAgICAgLy8gcmV0dXJuIFtdO1xyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3RyYWlnaHRGcm9udFNoaW5lIGV4dGVuZHMgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrZWFycyBoYWlyXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkhBSVIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcImhhaXJQYXJ0cyBoYWlyXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckhhaXJQb2ludHMoY3R4LCBleCkge1xyXG4gICAgICAgIGxldCB7dG9wLCB0b3BCb3R9ID0gY2FsY1N0cmFpZ2h0LmNhbGwodGhpcywgZXgpO1xyXG5cclxuICAgICAgICB0b3AgPSBhZGp1c3QodG9wLCAyLjUsIC0xKTtcclxuICAgICAgICB0b3BCb3QgPSBhZGp1c3QodG9wQm90LCAyLjUsIDEpO1xyXG4gICAgICAgIGNvbnN0IG1pZCA9IGFkanVzdChhdmVyYWdlUG9pbnQodG9wLCB0b3BCb3QsIDAuNSksIDAuNSwgMCk7XHJcblxyXG4gICAgICAgIHRvcEJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IHRvcC54IC0gMSxcclxuICAgICAgICAgICAgeTogdG9wLnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRvcEJvdC5jcDIgPSB7XHJcbiAgICAgICAgICAgIHg6IHRvcEJvdC54IC0gMSxcclxuICAgICAgICAgICAgeTogdG9wQm90LnkgKyAwLjVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBtaWQuY3AxID0ge1xyXG4gICAgICAgICAgICB4OiB0b3BCb3QueCArIDEuNSxcclxuICAgICAgICAgICAgeTogdG9wQm90LnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIG1pZC5jcDIgPSB7XHJcbiAgICAgICAgICAgIHg6IG1pZC54IC0gMC4yLFxyXG4gICAgICAgICAgICB5OiBtaWQueSAtIDAuM1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRvcC5jcDEgPSBjb250aW51ZUN1cnZlKHRvcEJvdCwgbWlkKTtcclxuICAgICAgICB0b3AuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiB0b3AueCArIDIsXHJcbiAgICAgICAgICAgIHk6IHRvcC55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiaHNsYSgwLDAlLDEwMCUsMC4yKVwiO1xyXG4gICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCB0b3AsIHRvcEJvdCwgbWlkLCB0b3ApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnNjYWxlKC0xLCAxKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJhaWdodEZyb250IGV4dGVuZHMgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKEhhaXIuaGFpckZyb250LCB7XHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgc2hhZGluZ1BhcnRzOiBbU3RyYWlnaHRGcm9udFNoYWRpbmcsIFN0cmFpZ2h0RnJvbnRTaWRlU2hhZGluZ11cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySGFpclBvaW50cyhjdHgsIGV4KSB7XHJcbiAgICAgICAgY29uc3Qge3RvcCwgc2lkZSwgdG9wQm90fSA9IGNhbGNTdHJhaWdodC5jYWxsKHRoaXMsXHJcbiAgICAgICAgICAgIGV4KTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgIHNpZGUsXHJcbiAgICAgICAgICAgIHRvcEJvdCxcclxuICAgICAgICAgICAgdG9wKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgU3RyYWlnaHRTaWRlQmFuZ1NoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCIrZnJvbnQgaGFpclwiLFxyXG4gICAgICAgICAgICBsYXllcjogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGNvbnN0IGhsID0gdGhpcy5oYWlyTGVuZ3RoIC0gMTI7XHJcbiAgICAgICAgaWYgKGhsIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7c2lkZUJvdCwgaW5uZXJCb3R9ID0gY2FsY1N0cmFpZ2h0U2lkZS5jYWxsKHRoaXMsIGV4LCBobCk7XHJcbiAgICAgICAgc2lkZUJvdC55ICs9IGhsICogMC4xO1xyXG4gICAgICAgIGNvbnN0IGJvdCA9IHtcclxuICAgICAgICAgICAgeDogaW5uZXJCb3QueCArIDYsXHJcbiAgICAgICAgICAgIHk6IGlubmVyQm90LnkgKyAxMFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgdG9wID0ge1xyXG4gICAgICAgICAgICB4OiBzaWRlQm90LnggKyAzLFxyXG4gICAgICAgICAgICB5OiBzaWRlQm90LnkgKyAyXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gW3NpZGVCb3QsIGlubmVyQm90LCBib3QsIHRvcCwgc2lkZUJvdF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3RyYWlnaHRTaWRlQmFuZyBleHRlbmRzIEhhaXJQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcihIYWlyLmhhaXJBYm92ZUVhcnMsIHtcclxuICAgICAgICAgICAgc2hhZGluZ1BhcnRzOiBbU3RyYWlnaHRTaWRlQmFuZ1NoYWRpbmddLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckhhaXJQb2ludHMoY3R4LCBleCkge1xyXG4gICAgICAgIGNvbnN0IGhsID0gdGhpcy5oYWlyTGVuZ3RoIC0gMTI7XHJcbiAgICAgICAgaWYgKGhsIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7dG9wLCBzaWRlLCBzaWRlQm90LCBpbm5lckJvdCwgaW5uZXJUb3B9ID0gY2FsY1N0cmFpZ2h0U2lkZS5jYWxsKHRoaXMsIGV4LCBobCk7XHJcbiAgICAgICAgc2lkZUJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoc2lkZSwgc2lkZUJvdCwgMC41LCAwLjUgKyBobCAqIDAuMDA1KTtcclxuICAgICAgICBpbm5lclRvcC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoaW5uZXJCb3QsIGlubmVyVG9wLCAwLjUsIC0wLjUpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHRvcCwgc2lkZSwgc2lkZUJvdCwgaW5uZXJCb3QsIGlubmVyVG9wKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY2FsY1N0cmFpZ2h0U2lkZShleCwgaGwpIHtcclxuICAgIGNvbnN0IHt0b3AsIHNpZGV9ID0gY2FsY1N0cmFpZ2h0LmNhbGwodGhpcywgZXgpO1xyXG5cclxuICAgIHNpZGUueCArPSBobCAqIDAuMDI7XHJcbiAgICBjb25zdCBzaWRlQm90ID0ge1xyXG4gICAgICAgIHg6IHNpZGUueCAtIGhsICogMC4wMyxcclxuICAgICAgICB5OiBzaWRlLnkgLSBobCAqIDAuNjVcclxuICAgIH07XHJcbiAgICBjb25zdCBpbm5lckJvdCA9IHtcclxuICAgICAgICB4OiBzaWRlQm90LnggLSBobCAqIDAuMDIsXHJcbiAgICAgICAgeTogc2lkZUJvdC55IC0gaGwgKiAwLjA1XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZSgwLjYsIHRvcCwgc2lkZSk7XHJcbiAgICBjb25zdCBpbm5lclRvcCA9IGV4dHJhY3RQb2ludChzcC5sZWZ0LnAyKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRvcCxcclxuICAgICAgICBzaWRlLFxyXG4gICAgICAgIHNpZGVCb3QsXHJcbiAgICAgICAgaW5uZXJCb3QsXHJcbiAgICAgICAgaW5uZXJUb3BcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJhaWdodEJhY2sgZXh0ZW5kcyBIYWlyUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoSGFpci5oYWlyQmFjaywge1xyXG4gICAgICAgICAgICByZWZsZWN0OiB0cnVlXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySGFpclBvaW50cyhjdHgsIGV4KSB7XHJcbiAgICAgICAgY29uc3QgaGwgPSB0aGlzLmhhaXJMZW5ndGggLSAxMjtcclxuICAgICAgICBpZiAoaGwgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHt0b3AsIHNpZGV9ID0gY2FsY1N0cmFpZ2h0LmNhbGwodGhpcywgZXgsIGhsICsgMTIpO1xyXG5cclxuICAgICAgICBzaWRlLnggKz0gaGwgKiAwLjAyO1xyXG4gICAgICAgIGNvbnN0IHNpZGVCb3QgPSB7XHJcbiAgICAgICAgICAgIHg6IHNpZGUueCArIGhsICogMC4wNSxcclxuICAgICAgICAgICAgeTogc2lkZS55IC0gaGxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGlubmVyID0ge1xyXG4gICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICB5OiBzaWRlQm90LnkgLSBobCAqIDAuMDVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHRvcCwgc2lkZSwgc2lkZUJvdCwgaW5uZXIpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY2FsY1N0cmFpZ2h0KGV4KSB7XHJcbiAgICBjb25zdCB0b3AgPSBleHRyYWN0UG9pbnQoZXguc2t1bGwpO1xyXG4gICAgdG9wLnkgKz0gMTtcclxuXHJcbiAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuNSwgZXguc2t1bGwuc2lkZSwgZXguc2t1bGwuYm90KTtcclxuICAgIGNvbnN0IHNpZGUgPSBzcC5sZWZ0LnAyO1xyXG4gICAgc2lkZS5jcDEgPSB7XHJcbiAgICAgICAgeDogdG9wLnggKiAwLjUgKyBzaWRlLnggKiAwLjUsXHJcbiAgICAgICAgeTogdG9wLnkgKyAyXHJcbiAgICB9O1xyXG4gICAgc2lkZS5jcDIgPSB7XHJcbiAgICAgICAgeDogc2lkZS54ICsgMy41LFxyXG4gICAgICAgIHk6IHRvcC55ICogMC43ICsgc2lkZS55ICogMC4zXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHRvcEJvdCA9IHtcclxuICAgICAgICB4OiB0b3AueCxcclxuICAgICAgICB5OiB0b3AueSAtIHRoaXMuZmFjZUxlbmd0aCAqIDAuMDQsXHJcbiAgICB9O1xyXG4gICAgdG9wQm90LmNwMSA9IHtcclxuICAgICAgICB4OiBzaWRlLngsXHJcbiAgICAgICAgeTogc2lkZS55ICogMC40ICsgdG9wLnkgKiAwLjZcclxuICAgIH07XHJcbiAgICB0b3BCb3QuY3AyID0ge1xyXG4gICAgICAgIHg6IHRvcEJvdC54LFxyXG4gICAgICAgIHk6IHRvcEJvdC55IC0gdGhpcy5mYWNlTGVuZ3RoICogMC4wMlxyXG4gICAgfTtcclxuXHJcbiAgICB0b3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKHRvcEJvdCwgdG9wLCAwLjUsIDEpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9wLFxyXG4gICAgICAgIHNpZGUsXHJcbiAgICAgICAgdG9wQm90XHJcbiAgICB9O1xyXG59XHJcblxyXG4iLCJpbXBvcnQge0hhaXJQYXJ0LCBIYWlyfSBmcm9tIFwiLi9oYWlyX3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGFkanVzdCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc2NhbGUsXHJcbiAgICBjb250aW51ZUN1cnZlLFxyXG4gICAgcm90YXRlUG9pbnRzLFxyXG4gICAgY2xhbXAsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpZGVIaWdoVGFpbEZyb250IGV4dGVuZHMgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKEhhaXIuaGFpckZyb250LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJIYWlyUG9pbnRzKGN0eCwgZXgpIHtcclxuICAgICAgICBjb25zdCBobCA9IGNsYW1wKHRoaXMuaGFpckxlbmd0aCwgMCwgNzApO1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHRpcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LnNrdWxsLnggKyBobCAqIDAuMDIsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5za3VsbC55ICsgM1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKGNsYW1wKDAuNzUgKyBobCAqIDAuMDA0NSwgMC45LCAxLjEpLCB0aXAsIGV4LnNrdWxsLnNpZGUpO1xyXG4gICAgICAgICAgICBsZXQgYm90ID0gc3AubGVmdC5wMjtcclxuICAgICAgICAgICAgYm90LmNwMS54ICs9IDMgKyBobCAqIDAuMDE7XHJcbiAgICAgICAgICAgIGJvdC5jcDEueSArPSAzICsgaGwgKiAwLjAxO1xyXG4gICAgICAgICAgICBib3QuY3AyLnggPSBib3QueDtcclxuICAgICAgICAgICAgdGlwLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGJvdC54IC0gNCArIGhsICogMC4wMyxcclxuICAgICAgICAgICAgICAgIHk6IGJvdC55ICsgMyArIGhsICogMC4xXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRpcC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aXAueCxcclxuICAgICAgICAgICAgICAgIHk6IHRpcC55IC0gdGhpcy5mYWNlTGVuZ3RoIC8gMTUgLSBobCAqIDAuMDVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRzKGN0eCwgdGlwLCBib3QsIHRpcCk7XHJcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgY29uc3Qge3RpcCwgb3V0LCBib3R9ID0gY2FsY1NpZGVIaWdoVGFpbFRvcChleCwgaGwpO1xyXG4gICAgICAgICAgICBvdXQuY3AyLnkgLT0gaGwgKiAwLjAzO1xyXG4gICAgICAgICAgICBvdXQuY3AyLnggKz0gaGwgKiAwLjAxO1xyXG4gICAgICAgICAgICBvdXQuY3AxLnggKz0gaGwgKiAwLjA1O1xyXG4gICAgICAgICAgICBvdXQuY3AxLnkgKz0gNCArIGhsICogMC4wNTtcclxuXHJcbiAgICAgICAgICAgIGJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBvdXQueCxcclxuICAgICAgICAgICAgICAgIHk6IGNsYW1wKG91dC55IC0gNSAtIGhsICogMC4wNSwgYm90LnksIG91dC55KVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBib3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogY2xhbXAoYm90LnggKyBobCAqIDAuMDcsIDAsIG91dC54KSxcclxuICAgICAgICAgICAgICAgIHk6IGJvdC55ICsgMiArIGhsICogMC4wN1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGlwLmNwMSA9IHNjYWxlKGJvdC5jcDIsIDMsIGJvdCk7XHJcbiAgICAgICAgICAgIHRpcC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aXAueCAtIDUsXHJcbiAgICAgICAgICAgICAgICB5OiB0aXAueSAtIHRoaXMuZmFjZUxlbmd0aCAvIDE1IC0gaGwgKiAwLjA1XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChobCA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICB0aXAuY3AyLnkgLT0gKDEwIC0gaGwpICogMC41O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludHMoY3R4LCB0aXAsIG91dCwgYm90LCB0aXApO1xyXG4gICAgICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNpZGVIaWdoVGFpbFRhaWwgZXh0ZW5kcyBIYWlyUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoSGFpci5oYWlyTWVkaXVtLCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJIYWlyUG9pbnRzKGN0eCwgZXgsIGlnbm9yZSwgZXh0cmFDb2xvcnMpIHtcclxuICAgICAgICBjb25zdCBobCA9IHRoaXMuaGFpckxlbmd0aDtcclxuICAgICAgICBjb25zdCB0YWlsID0gdGhpcy5oYWlyTGVuZ3RoIC0gNTA7XHJcbiAgICAgICAgaWYgKHRhaWwgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHt0aXB9ID0gY2FsY1NpZGVIaWdoVGFpbFRvcChleCwgY2xhbXAoaGwsIDAsIDcwKSk7XHJcbiAgICAgICAgdGlwLnggKj0gLTE7XHJcbiAgICAgICAgdGlwLnkgLT0gdGFpbCAqIDAuMDE7XHJcblxyXG4gICAgICAgIGNvbnN0IHRvcCA9IHtcclxuICAgICAgICAgICAgeDogdGlwLngsXHJcbiAgICAgICAgICAgIHk6IHRpcC55ICsgdGFpbCAqIDAuMTJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSB7XHJcbiAgICAgICAgICAgIHg6IHRpcC54IC0gdGFpbCAqIDAuMDksXHJcbiAgICAgICAgICAgIHk6IHRpcC55XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCByaWdodCA9IHtcclxuICAgICAgICAgICAgeDogdGlwLnggKyB0YWlsICogMC4wOSxcclxuICAgICAgICAgICAgeTogdGlwLnlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0b3AuY3AxID0ge1xyXG4gICAgICAgICAgICB4OiBsZWZ0LnggKyBobCAqIDAuMDIsXHJcbiAgICAgICAgICAgIHk6IGxlZnQueSArIGhsICogMC4wMlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdG9wLmNwMiA9IHtcclxuICAgICAgICAgICAgeDogdG9wLnggLSB0YWlsICogMC4xLFxyXG4gICAgICAgICAgICB5OiB0b3AueSAtIHRhaWwgKiAwLjAyXHJcbiAgICAgICAgfTtcclxuICAgICAgICByaWdodC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IHRvcC54ICsgdGFpbCAqIDAuMSxcclxuICAgICAgICAgICAgeTogdG9wLnkgLSB0YWlsICogMC4wMlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmlnaHQuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiByaWdodC54IC0gaGwgKiAwLjAyLFxyXG4gICAgICAgICAgICB5OiByaWdodC55ICsgaGwgKiAwLjAyLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJvdGF0ZVBvaW50cyh0aXAsIC0wLjI0LCB0b3AsIGxlZnQsIHJpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gcmlnaHQgdGFpbFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgYmFjayA9IHt9O1xyXG4gICAgICAgICAgICBiYWNrLm91dCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRvcC54ICsgdGFpbCAqIDAuMixcclxuICAgICAgICAgICAgICAgIHk6IHRvcC55IC0gdGFpbCAqIDAuOFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBiYWNrLm91dGJvdCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRvcC54ICsgdGFpbCAqIDAuMTgsXHJcbiAgICAgICAgICAgICAgICB5OiBiYWNrLm91dC55IC0gdGFpbCAqIDAuOFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBiYWNrLmluID0gZXh0cmFjdFBvaW50KGV4Lm5lY2sudG9wKTtcclxuXHJcbiAgICAgICAgICAgIGJhY2sub3V0LmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRvcC54ICsgdGFpbCAqIDAuMyxcclxuICAgICAgICAgICAgICAgIHk6IHRvcC55IC0gdGFpbCAqIDAuMVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBiYWNrLm91dC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBiYWNrLm91dC54IC0gdGFpbCAqIDAuMSxcclxuICAgICAgICAgICAgICAgIHk6IGJhY2sub3V0LnkgKyB0YWlsICogMC4zLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBiYWNrLm91dGJvdC5jcDEgPSBjb250aW51ZUN1cnZlKHRvcCwgYmFjay5vdXQpO1xyXG4gICAgICAgICAgICBiYWNrLm91dGJvdC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBiYWNrLm91dGJvdC54ICsgdGFpbCAqIDAuMixcclxuICAgICAgICAgICAgICAgIHk6IGJhY2sub3V0Ym90LnkgKyB0YWlsICogMC4wNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBiYWNrLmluLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGJhY2sub3V0Ym90LnggLSB0YWlsICogMC4wNSxcclxuICAgICAgICAgICAgICAgIHk6IGJhY2sub3V0Ym90LnkgKyB0YWlsICogMC40XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJhY2suaW4uY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYmFjay5pbi54IC0gdGFpbCAqIDAuMSxcclxuICAgICAgICAgICAgICAgIHk6IGJhY2suaW4ueSAtIHRhaWwgKiAwLjVcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgZHJhd1BvaW50cyhjdHgsIHRvcCwgYmFjay5vdXQsIGJhY2sub3V0Ym90LCBiYWNrLmluKTtcclxuICAgICAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGVmdCB0YWlsXHJcbiAgICAgICAgY29uc3QgbGVmdFRhaWwgPSB0aGlzLmhhaXJMZW5ndGggLSA5MDtcclxuICAgICAgICBpZiAobGVmdFRhaWwgPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhY2sgPSB7fTtcclxuICAgICAgICAgICAgYmFjay50b3AgPSBleHRyYWN0UG9pbnQoZXgubmVjay50b3ApO1xyXG4gICAgICAgICAgICBiYWNrLnRpcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGJhY2sudG9wLnggKyBsZWZ0VGFpbCAqIDAuNixcclxuICAgICAgICAgICAgICAgIHk6IGJhY2sudG9wLnkgLSBsZWZ0VGFpbCAqIDMuNVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgYmFjay50aXAuY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYmFjay50b3AueCArIGxlZnRUYWlsICogMS41LFxyXG4gICAgICAgICAgICAgICAgeTogYmFjay50b3AueSAtIGxlZnRUYWlsICogMlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBiYWNrLnRpcC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBiYWNrLnRpcC54IC0gbGVmdFRhaWwgKiAwLjUsXHJcbiAgICAgICAgICAgICAgICB5OiBiYWNrLnRpcC55ICsgbGVmdFRhaWwgKiAxLjJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGJhY2sucmlnaHQgPSBleHRyYWN0UG9pbnQoZXgubmVjay5jdXNwKTtcclxuICAgICAgICAgICAgYmFjay5yaWdodC54ICs9IDAuNTtcclxuICAgICAgICAgICAgYmFjay5yaWdodC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBiYWNrLnRpcC54IC0gbGVmdFRhaWwgKiAwLjYsXHJcbiAgICAgICAgICAgICAgICB5OiBiYWNrLnRpcC55ICsgbGVmdFRhaWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYmFjay5yaWdodC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBiYWNrLnJpZ2h0LnggKyBsZWZ0VGFpbCAqIDAuMyxcclxuICAgICAgICAgICAgICAgIHk6IGJhY2sucmlnaHQueSAtIGxlZnRUYWlsICogMC44XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjdHguc2NhbGUoLTEsIDEpO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludHMoY3R4LCBiYWNrLnRvcCwgYmFjay50aXAsIGJhY2sucmlnaHQpO1xyXG4gICAgICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0b3Aga25vdFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgbGVmdCwgdG9wLCByaWdodCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIC8vIGhhaXIgYWNjZXNzb3J5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuMywgbGVmdCwgdG9wKTtcclxuICAgICAgICAgICAgY29uc3QgbGVmdEJhbmQgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgICAgICBzcCA9IHNwbGl0Q3VydmUoMSAtIDAuMywgdG9wLCByaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0QmFuZCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgICAgIHJpZ2h0QmFuZC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMobGVmdEJhbmQsIHJpZ2h0QmFuZCwgMC41LCB0YWlsICogMC4wMyk7XHJcblxyXG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBleHRyYUNvbG9ycy5oYWlyQWNjZXNzb3J5Q29sb3I7XHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgZHJhd1BvaW50cyhjdHgsIGxlZnRCYW5kLCByaWdodEJhbmQpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNhbGNTaWRlSGlnaFRhaWxUb3AoZXgsIGhsKSB7XHJcbiAgICBjb25zdCB0aXAgPSB7XHJcbiAgICAgICAgeDogZXguc2t1bGwueCAtIGhsICogMC4wOCxcclxuICAgICAgICB5OiBleC5za3VsbC55ICsgM1xyXG4gICAgfTtcclxuICAgIGNvbnN0IG91dCA9IGFkanVzdChleC5za3VsbC5zaWRlLCBobCAqIDAuMDMsIGNsYW1wKDIgLSBobCAqIDAuMDUsIC0zLCAyKSk7XHJcbiAgICBjb25zdCBib3QgPSB7XHJcbiAgICAgICAgeDogb3V0LnggLSBjbGFtcChobCAqIDAuMDUsIDAsIDEwKSxcclxuICAgICAgICB5OiBvdXQueSAtIGNsYW1wKGhsICogMC4yNSwgMCwgMjUpXHJcbiAgICB9O1xyXG4gICAgaWYgKGhsID4gNTApIHtcclxuICAgICAgICBib3QueCArPSAoaGwgLSA1MCkgKiAwLjA2O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdGlwLFxyXG4gICAgICAgIG91dCxcclxuICAgICAgICBib3RcclxuICAgIH07XHJcbn1cclxuXHJcbiIsImltcG9ydCB7SGFpclBhcnQsIEhhaXJ9IGZyb20gXCIuL2hhaXJfcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgYWRqdXN0UG9pbnRzLFxyXG4gICAgYWRqdXN0LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBicmVha1BvaW50LFxyXG4gICAgZW5kUG9pbnQsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICByZWZsZWN0LCBjbGFtcFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtTaGFkaW5nUGFydH0gZnJvbSBcIi4uL2RyYXcvc2hhZGluZ19wYXJ0XCI7XHJcbmltcG9ydCB7c2VhbVdpZHRoLCBMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Y2FsY0hpbWVDdXR9IGZyb20gXCIuL2hpbWVfY3V0XCI7XHJcblxyXG5jbGFzcyBIaW1lQ3VybFNoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCIrZnJvbnQgaGFpclwiLFxyXG4gICAgICAgICAgICBsYXllcjogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBjb25zdCB7cmlnaHQsIG91dCwgYm90LCBmb3JrLCBmb3JrSW59ID0gY2FsY0hpbWVDdXJsKGV4LCB0aGlzLmhhaXJMZW5ndGgpO1xyXG4gICAgICAgIGxldCBbdG9wLCBtaWRdID0gYWRqdXN0UG9pbnRzKC0yLCAwLCByaWdodCwgb3V0KTtcclxuICAgICAgICBib3QuY3AxID0gYWRqdXN0KGJvdC5jcDEsIC0zLCAwKTtcclxuICAgICAgICBib3QuY3AyID0gYWRqdXN0KGJvdC5jcDIsIC00LCAwKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuMzUsIG1pZCwgYm90KTtcclxuICAgICAgICBjb25zdCBzaGFkaW5nRm9yayA9IGFkanVzdChzcC5sZWZ0LnAyLCAtMiwgMCk7XHJcbiAgICAgICAgc2hhZGluZ0ZvcmsuY3AxID0gc3AubGVmdC5wMi5jcDE7XHJcbiAgICAgICAgc2hhZGluZ0ZvcmsuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiBzaGFkaW5nRm9yay54ICsgdGhpcy5oYWlyTGVuZ3RoICogMC4wNCxcclxuICAgICAgICAgICAgeTogc2hhZGluZ0ZvcmsueSAtIHRoaXMuaGFpckxlbmd0aCAqIDAuMlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYm90LmNwMSA9IHtcclxuICAgICAgICAgICAgeDogc2hhZGluZ0ZvcmsueCAtIHRoaXMuaGFpckxlbmd0aCAqIDAuMDIsXHJcbiAgICAgICAgICAgIHk6IHNoYWRpbmdGb3JrLnkgLSB0aGlzLmhhaXJMZW5ndGggKiAwLjA3LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYm90LmNwMiA9IHNwLnJpZ2h0LnAyLmNwMjtcclxuXHJcbiAgICAgICAgcmlnaHQuY3AxID0ge1xyXG4gICAgICAgICAgICB4OiBib3QueCArIDEyLFxyXG4gICAgICAgICAgICB5OiBib3QueVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmlnaHQuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiByaWdodC54ICsgNSxcclxuICAgICAgICAgICAgeTogdG9wLnlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBzaGFkZSB0aGUgZm9ya1xyXG4gICAgICAgIGZvcmsueSArPSAxLjU7XHJcbiAgICAgICAgZm9yay54ICs9IDAuNztcclxuICAgICAgICBmb3JrLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhmb3JrLCBmb3JrSW4sIDAuNSwgLTcpO1xyXG4gICAgICAgIGZvcmsuY3AyID0gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgcmlnaHQsXHJcbiAgICAgICAgICAgIG1pZCxcclxuICAgICAgICAgICAgc2hhZGluZ0ZvcmssXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgcmlnaHQsXHJcbiAgICAgICAgICAgIGJyZWFrUG9pbnQsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgZm9yayxcclxuICAgICAgICAgICAgZm9ya0luLFxyXG4gICAgICAgICAgICBmb3JrLFxyXG4gICAgICAgICAgICBleHRyYWN0UG9pbnQoYm90KSxcclxuICAgICAgICAgICAgZW5kUG9pbnRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEhpbWVDdXJsTWVkaXVtIGV4dGVuZHMgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKEhhaXIuaGFpck1lZGl1bSwge1xyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtIaW1lQ3VybFNoYWRpbmddLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckhhaXJQb2ludHMoY3R4LCBleCkge1xyXG4gICAgICAgIGNvbnN0IGhsID0gdGhpcy5oYWlyTGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHtsZWZ0LCB0b3AsIHJpZ2h0LCBvdXQsIGJvdCwgZm9yaywgZm9ya0luLCBmb3JrVG9wfSA9IGNhbGNIaW1lQ3VybChleCwgaGwpO1xyXG4gICAgICAgIGV4LmhhaXIgPSBleC5oYWlyIHx8IHt9O1xyXG4gICAgICAgIGV4LmhhaXIubWlkID0ge1xyXG4gICAgICAgICAgICBsZWZ0LFxyXG4gICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgIHJpZ2h0LFxyXG4gICAgICAgICAgICBvdXQsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgZm9yayxcclxuICAgICAgICAgICAgZm9ya0luLFxyXG4gICAgICAgICAgICBmb3JrVG9wXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCBsZWZ0LCB0b3AsIHJpZ2h0LCBvdXQsIGJvdCwgZm9yaywgZm9ya0luLCBmb3JrVG9wKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNhbGNIaW1lQ3VybChleCwgaGwpIHtcclxuICAgIGxldCB7cmlnaHQsIHRvcH0gPSBjYWxjSGltZUN1dChleCwgY2xhbXAoaGwsIDAsIDUzKSk7XHJcbiAgICB0b3AueSArPSBobCAqIDAuMDE7XHJcbiAgICB0b3AueCAtPSBzZWFtV2lkdGg7XHJcbiAgICByaWdodCA9IGFkanVzdChyaWdodCwgaGwgKiAwLjAwNSwgMCk7XHJcbiAgICByaWdodC5jcDEueSArPSBobCAqIDAuMDE7XHJcbiAgICB0b3AuY3AxLnkgKz0gaGwgKiAwLjAxO1xyXG4gICAgdG9wLmNwMi54IC09IGhsICogMC4wMDU7XHJcbiAgICBjb25zdCBsZWZ0ID0gcmVmbGVjdChyaWdodCk7XHJcbiAgICByaWdodC54ICs9IGhsICogMC4wMTI7XHJcblxyXG4gICAgY29uc3QgYm90ID0ge1xyXG4gICAgICAgIHg6IHJpZ2h0LngsXHJcbiAgICAgICAgeTogcmlnaHQueSAtIGhsICogMC44XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG91dCA9IHtcclxuICAgICAgICB4OiByaWdodC54IC0gaGwgKiAwLjAxLFxyXG4gICAgICAgIHk6IHJpZ2h0LnkgKiAwLjcgKyBib3QueSAqIDAuM1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyByaWdodCBzaWRlIGRvd24gdG8gdGhlIHRpcFxyXG4gICAgb3V0LmNwMSA9IHtcclxuICAgICAgICB4OiByaWdodC54ICsgaGwgKiAwLjAxLFxyXG4gICAgICAgIHk6IHJpZ2h0LnkgLSBobCAqIDAuMTVcclxuICAgIH07XHJcbiAgICBvdXQuY3AyID0ge1xyXG4gICAgICAgIHg6IG91dC54LFxyXG4gICAgICAgIHk6IG91dC55ICsgaGwgKiAwLjFcclxuICAgIH07XHJcblxyXG4gICAgLy8gdXAgdG8gdGlwXHJcbiAgICBib3QuY3AxID0ge1xyXG4gICAgICAgIHg6IG91dC54LFxyXG4gICAgICAgIHk6IG91dC55IC0gaGwgKiAwLjA3XHJcbiAgICB9O1xyXG4gICAgYm90LmNwMiA9IHtcclxuICAgICAgICB4OiBib3QueCArIGhsICogMC4xLFxyXG4gICAgICAgIHk6IGJvdC55ICsgaGwgKiAwLjFcclxuICAgIH07XHJcblxyXG4gICAgLy8gZm9yayBhdCB0aGUgdGlwIG9mIHRoZSBjdXJsc1xyXG4gICAgY29uc3QgZm9yayA9IHtcclxuICAgICAgICB4OiBib3QueCAtIGhsICogMC4wMyxcclxuICAgICAgICB5OiBib3QueSArIGhsICogMC4yXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZm9ya0luID0ge1xyXG4gICAgICAgIHg6IGZvcmsueCAtIGhsICogMC4wMixcclxuICAgICAgICB5OiBmb3JrLnkgLSBobCAqIDAuMSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gZ28gYmFjayB1cCB0byBuZWNrXHJcbiAgICBjb25zdCBmb3JrVG9wID0gZXh0cmFjdFBvaW50KGV4Lm5lY2sudG9wKTtcclxuICAgIGZvcmtUb3AueSAtPSAyO1xyXG4gICAgLy8gY3VybCB1cCB0byBuZWNrXHJcbiAgICBmb3JrVG9wLmNwMSA9IHtcclxuICAgICAgICB4OiBmb3JrSW4ueCAtIGhsICogMC4xOCxcclxuICAgICAgICB5OiBmb3JrSW4ueSArIGhsICogMC4yM1xyXG4gICAgfTtcclxuICAgIGZvcmtUb3AuY3AyID0ge1xyXG4gICAgICAgIHg6IGZvcmtUb3AueCxcclxuICAgICAgICB5OiBmb3JrVG9wLnkgLSBobCAqIDAuMjNcclxuICAgIH07XHJcblxyXG4gICAgLy8gZm9yayBjdXJsc1xyXG4gICAgZm9yay5jcDEgPSB7XHJcbiAgICAgICAgeDogYm90LnggKyBobCAqIDAuMDIsXHJcbiAgICAgICAgeTogYm90LnkgKyBobCAqIDAuMDdcclxuICAgIH07XHJcbiAgICBmb3JrLmNwMiA9IHtcclxuICAgICAgICB4OiBmb3JrLnggLSBobCAqIDAuMDIsXHJcbiAgICAgICAgeTogZm9yay55IC0gaGwgKiAwLjA3XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGZvcmsgb3V0XHJcbiAgICBmb3JrSW4uY3AxID0gc2ltcGxlUXVhZHJhdGljKGZvcmssIGZvcmtJbiwgMC4zLCAtaGwgKiAwLjAyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbGVmdCxcclxuICAgICAgICB0b3AsXHJcbiAgICAgICAgcmlnaHQsXHJcbiAgICAgICAgb3V0LFxyXG4gICAgICAgIGJvdCxcclxuICAgICAgICBmb3JrLFxyXG4gICAgICAgIGZvcmtJbixcclxuICAgICAgICBmb3JrVG9wXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSGltZUN1cmxTaWRlIGV4dGVuZHMgSGFpclBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKEhhaXIuaGFpckZyb250LCB7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2Zyb250IGhhaXJcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wiaGFpclBhcnRzIGhhaXJcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySGFpclBvaW50cyhjdHgsIGV4KSB7XHJcbiAgICAgICAgY29uc3QgaGwgPSB0aGlzLmhhaXJMZW5ndGg7XHJcbiAgICAgICAgY29uc3QgY3VybCA9IGhsIC0gMzU7XHJcbiAgICAgICAgaWYgKGN1cmwgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHtsZWZ0LCByaWdodH0gPSBjYWxjSGltZUN1dChleCwgY2xhbXAoaGwsIDAsIDUzKSk7XHJcbiAgICAgICAgcmlnaHQgPSBhZGp1c3QocmlnaHQsIDAuNCwgMS41KTtcclxuICAgICAgICByaWdodC5jcDEueSArPSBobCAqIDAuMDE7XHJcblxyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC4xLCByaWdodCwgbGVmdCk7XHJcbiAgICAgICAgY29uc3QgaW5uZXIgPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgICAgICBsZXQgYm90O1xyXG4gICAgICAgIGlmIChjdXJsIDwgMTUpIHtcclxuICAgICAgICAgICAgYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogcmlnaHQueCAtIDMsXHJcbiAgICAgICAgICAgICAgICB5OiByaWdodC55IC0gY3VybFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNwID0gc3BsaXRDdXJ2ZShjbGFtcCgtMC4zICsgY3VybCAqIDAuMDE1LCAtMC4zLCAwLjgpLCBleC5qYXcsIGV4LmNoaW4ub3V0KTtcclxuICAgICAgICAgICAgYm90ID0gYWRqdXN0KHNwLmxlZnQucDIsIDAuMiwgLTAuMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IHJpZ2h0LngsXHJcbiAgICAgICAgICAgIHk6IHJpZ2h0LnkgLSBjdXJsICogMC4xXHJcbiAgICAgICAgfTtcclxuICAgICAgICBib3QuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiBib3QueCArIGN1cmwgKiAwLjEzLFxyXG4gICAgICAgICAgICB5OiBib3QueSArIGN1cmwgKiAwLjA2XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpbm5lci5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYm90LCBpbm5lciwgMC40NSwgLWN1cmwgKiAwLjA3KTtcclxuXHJcbiAgICAgICAgLy8gZmlyc3QgZHJhdyB0aGUgYmFuZyAoZG9uJ3Qgd2FudCB0byBzdHJva2UgdGhlIHRvcCBhcyB3ZWxsIHNvIHdlJ2xsIGZpbGwgbGF0ZXJcclxuICAgICAgICBjdHguc2F2ZSgpO1xyXG4gICAgICAgIGN0eC5zY2FsZSgtMSwgMSk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCByaWdodCwgYm90LCBpbm5lcik7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtBc2lhbkJ1bkJhY2ssIEFzaWFuQnVuRnJvbnR9IGZyb20gXCIuL2FzaWFuX2J1blwiO1xyXG5pbXBvcnQge0N1cmx5VGFpbEZyb250LCBDdXJseVRhaWxNZWRpdW19IGZyb20gXCIuL2N1cmx5X3RhaWxcIjtcclxuaW1wb3J0IHtIaW1lQ3V0QmFjaywgSGltZUN1dEZyb250LCBIaW1lQ3V0U2lkZX0gZnJvbSBcIi4vaGltZV9jdXRcIjtcclxuaW1wb3J0IHtTdHJhaWdodEZyb250LCBTdHJhaWdodFNpZGVCYW5nLCBTdHJhaWdodEJhY2ssIFN0cmFpZ2h0RnJvbnRTaGluZX0gZnJvbSBcIi4vc3RyYWlnaHRcIjtcclxuaW1wb3J0IHtTaWRlSGlnaFRhaWxUYWlsLCBTaWRlSGlnaFRhaWxGcm9udH0gZnJvbSBcIi4vc2lkZV9oaWdoX3RhaWxcIjtcclxuaW1wb3J0IHtIaW1lQ3VybE1lZGl1bSwgSGltZUN1cmxTaWRlfSBmcm9tIFwiLi9oaW1lX2N1cmxcIjtcclxuXHJcbi8qKlxyXG4gKiBJbmRleCB0YWJsZSBvZiBhbGwgaGFpciB0eXBlcy5cclxuICogQG1lbWJlcm9mIG1vZHVsZTpIYWlyXHJcbiAqIEB0eXBlIHttb2R1bGU6SGFpclBhcnRbXX1cclxuICovXHJcbmV4cG9ydCBjb25zdCBzdHlsZXMgPSBbXHJcbiAgICBbLyogYmFsZCAqL10sXHJcbiAgICBbXHJcbiAgICAgICAgQXNpYW5CdW5Gcm9udCxcclxuICAgICAgICBBc2lhbkJ1bkJhY2tcclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgICAgQ3VybHlUYWlsRnJvbnQsXHJcbiAgICAgICAgQ3VybHlUYWlsTWVkaXVtLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBIaW1lQ3V0RnJvbnQsXHJcbiAgICAgICAgSGltZUN1dEJhY2ssXHJcbiAgICAgICAgSGltZUN1dFNpZGUsXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICAgIFN0cmFpZ2h0RnJvbnQsXHJcbiAgICAgICAgU3RyYWlnaHRTaWRlQmFuZyxcclxuICAgICAgICBTdHJhaWdodEJhY2ssXHJcbiAgICAgICAgU3RyYWlnaHRGcm9udFNoaW5lLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBTaWRlSGlnaFRhaWxGcm9udCxcclxuICAgICAgICBTaWRlSGlnaFRhaWxUYWlsLFxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgICBIaW1lQ3V0RnJvbnQsXHJcbiAgICAgICAgSGltZUN1cmxNZWRpdW0sXHJcbiAgICAgICAgSGltZUN1cmxTaWRlLFxyXG4gICAgXVxyXG5dO1xyXG4iLCJpbXBvcnQgbG9hZFBhdHRlcm5zIGZyb20gXCIuL3BhdHRlcm5zXCI7XHJcbmltcG9ydCB7bG9hZFNlcmlhbGl6YXRpb259IGZyb20gXCIuLi91dGlsL3NlcmlhbGl6YXRpb25cIjtcclxuaW1wb3J0IHtsb2FkRGVmYXVsdFBhcnRzfSBmcm9tIFwiLi4vc2tlbGV0b25zL2RlZmF1bHRfcGFydHNcIjtcclxuaW1wb3J0IHtsb2FkTW9kc30gZnJvbSBcIi4uL3BsYXllci9tb2RzXCI7XHJcbmltcG9ydCB7bG9hZERpbWVuc2lvbkRlc2NyaXB0aW9uc30gZnJvbSBcIi4uL3BsYXllci9kaW1lbnNpb25zXCI7XHJcblxyXG5leHBvcnQgbGV0IGxvYWRlZCA9IGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIExvYWQgYWxsIG5lY2Vzc2FyeSBtb2R1bGUgY29tcG9uZW50cyBhbmQgYXNzZXRzXHJcbiAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBBRlRFUiBhbGwgZXh0ZW5zaW9ucyBvZiB0aGUgc3lzdGVtIGlzIGRvbmVcclxuICogYW5kIEJFRk9SRSBjYWxsaW5nIGFueSBkcmF3aW5nIG1ldGhvZHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgbG9hZERpbWVuc2lvbkRlc2NyaXB0aW9ucygpO1xyXG4gICAgICAgIGxvYWRNb2RzKCk7XHJcbiAgICAgICAgbG9hZERlZmF1bHRQYXJ0cygpO1xyXG4gICAgICAgIGxvYWRTZXJpYWxpemF0aW9uKCk7XHJcbiAgICAgICAgbG9hZFBhdHRlcm5zKCk7XHJcbiAgICAgICAgbG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICB9KTtcclxufVxyXG4iLCJpbXBvcnQge2FkZFBhdHRlcm4sIGFkZERlYnVnUGF0dGVybn0gZnJvbSBcIi4uL3V0aWwvcGF0dGVyblwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9hZFBhdHRlcm5zKCkge1xyXG4gICAgYWRkUGF0dGVybihcInNlcXVpbnNcIixcclxuICAgICAgICBcImh0dHA6Ly91cy4xMjNyZi5jb20vNDUwd20vYWdvbmRhL2Fnb25kYTE1MDMvYWdvbmRhMTUwMzAwMDM1LzM3NjE5NTY5LW1lbGFuZ2Utd29vbC1rbml0dGluZy1wYXR0ZXJuLXNlYW1sZXNzLWJhY2tncm91bmQuanBnP3Zlcj02XCIpO1xyXG5cclxuICAgIGFkZFBhdHRlcm4oXCJzb2Z0IGJyb3duIGZ1clwiLFxyXG4gICAgICAgIFwiaHR0cHM6Ly9jZG4udG9iaS5jb20vc3dhdGNoX2ltYWdlcy9ibGFjay1tdWx0aS1jYW50LWJlLXRhbWVkLWZ1ci12ZXN0LXN3YXRjaC5qcGdcIik7XHJcbiAgICBhZGRQYXR0ZXJuKFwiYmxhY2sgbGVhdGhlclwiLFxyXG4gICAgICAgIFwiaHR0cDovL3d3dy50ZXh0dXJlczEyMy5jb20vZnJlZS10ZXh0dXJlL2xlYXRoZXIvbGVhdGhlci10ZXh0dXJlMDUuanBnXCIpO1xyXG5cclxuICAgIGFkZFBhdHRlcm4oXCJ5ZWxsb3cgc3RyaXBlc1wiLFxyXG4gICAgICAgIFwiaHR0cDovL2ltYWdlcy5uYWxkemdyYXBoaWNzLm5ldC8yMDE0LzA3LzE2LXllbGxvdy1zdHJpcGUtdGV4dHVyZS5qcGdcIik7XHJcblxyXG4gICAgYWRkUGF0dGVybihcInB1cnBsZSBzcXVhcmVzXCIsXHJcbiAgICAgICAgXCJodHRwOi8vaW1hZ2VzLm5hbGR6Z3JhcGhpY3MubmV0LzIwMTQvMDcvMTctc3F1YXJlLWZhYnJpYy10ZXh0dXJlcy5qcGdcIik7XHJcblxyXG4gICAgYWRkUGF0dGVybihcImNoYWlubWFpbDFcIixcclxuICAgICAgICBcIkltYWdlcy9jaGFpbm1haWwuanBnXCIpO1xyXG5cdFxyXG5cdGFkZFBhdHRlcm4oXCJjaGFpbm1haWwyXCIsXHJcbiAgICAgICAgXCJJbWFnZXMvY2hhaW5tYWlsMi5qcGdcIik7XHJcblx0XHJcblx0YWRkUGF0dGVybihcImlyb25cIixcclxuICAgICAgICBcIkltYWdlcy9pcm9uLmpwZ1wiKTtcclxuXHRcclxuXHRhZGRQYXR0ZXJuKFwiY29wcGVyXCIsXHJcbiAgICAgICAgXCJJbWFnZXMvY29wcGVyLmpwZ1wiKTtcclxuXHRcclxuXHRhZGRQYXR0ZXJuKFwiZm9pbFwiLFxyXG4gICAgICAgIFwiSW1hZ2VzL2ZvaWwuanBnXCIpO1xyXG5cdFx0XHJcblx0YWRkUGF0dGVybihcInNpbHZlclwiLFxyXG4gICAgICAgIFwiSW1hZ2VzL3NpbHZlcjEuanBnXCIpO1xyXG5cclxuXHRhZGRQYXR0ZXJuKFwiZ29sZFwiLFxyXG4gICAgICAgIFwiSW1hZ2VzL2dvbGQxLmpwZ1wiKTtcclxuXHRcdFxyXG5cdFx0XHJcblx0YWRkUGF0dGVybihcImRhbWFza1wiLFxyXG4gICAgICAgIFwiSW1hZ2VzL2RhbWFzay5qcGdcIik7XHJcblx0XHRcclxuXHRcclxuICAgIGFkZFBhdHRlcm4oXCJmaXNobmV0XCIsXHJcbiAgICAgICAgXCJJbWFnZXMvZmlzaG5ldC5wbmdcIik7XHJcblxyXG4gICAgYWRkUGF0dGVybihcImxhY2VcIixcclxuICAgICAgICBcImh0dHA6Ly9pLmltZ3VyLmNvbS9SWmM3Mk9LLmdpZlwiKTtcclxuXHJcbiAgICBhZGRQYXR0ZXJuKFwicmVkIHBsYWlkXCIsXHJcbiAgICAgICAgXCJodHRwOi8vd3d3LmNyZWF0dG9yLmNvbS9maWxlcy8zNy8xNjgxL3BsYWlkLWZhYnJpY3MtdGV4dHVyZXMtc2NyZWVuc2hvdHMtMS5qcGdcIik7XHJcblxyXG4gICAgYWRkRGVidWdQYXR0ZXJuKFwiZ3JlZW4gY2Ftb3VmbGFnZVwiLFxyXG4gICAgICAgIFwicmVzL2dyZWVuIGNhbW91ZmxhZ2UucG5nXCIsXHJcbiAgICAgICAgXCJodHRwOi8vaS5pbWd1ci5jb20vY1NRVWNqai5wbmdcIik7XHJcblxyXG4gICAgYWRkRGVidWdQYXR0ZXJuKFwiY2Ftb3VmbGFnZVwiLFxyXG4gICAgICAgIFwicmVzL2NhbW91ZmxhZ2UuanBnXCIsXHJcbiAgICAgICAgXCJodHRwOi8vaW1hZ2VzLm5hbGR6Z3JhcGhpY3MubmV0LzIwMTQvMDcvMTUtY2Ftby1mYWJyaWMtdGV4dHVyZS5qcGdcIik7XHJcblxyXG4gICAgYWRkRGVidWdQYXR0ZXJuKFwia2ltb25vIGZsb3dlcnNcIixcclxuICAgICAgICBcInJlcy9raW1vbm9fZmxvd2Vycy5wbmdcIixcclxuICAgICAgICBcImh0dHA6Ly9va3NhbmNpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTEvMDMvYmVhdXRpZnVsX2dhcmRlbl9zZWFtbGVzc19wYXR0ZXJuX3dtLnBuZ1wiKTtcclxuXHJcbiAgICBhZGREZWJ1Z1BhdHRlcm4oXCJiYW5kYWdlc1wiLFxyXG4gICAgICAgIFwicmVzL2JhbmRhZ2VzLnBuZ1wiLFxyXG4gICAgICAgIFwiaHR0cDovL2kuaW1ndXIuY29tL09tN2xZcE8ucG5nXCIpO1xyXG5cclxuICAgIGFkZERlYnVnUGF0dGVybihcImtuaXQgY2FzaG1lcmVcIixcclxuICAgICAgICBcInJlcy9rbml0X2Nhc2htZXJlLmpwZ1wiLFxyXG4gICAgICAgIFwiaHR0cHM6Ly9pLmltZ3VyLmNvbS9rY3lJRlVULmpwZ1wiKTtcclxufVxyXG4iLCJpbXBvcnQge2FkanVzdENvbG9yLCBSR0JUb0hTTH0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtpbmN1fSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcbmltcG9ydCB7Y2xhbXB9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbi8vIGV4cG9ydCBleC5iYXNlU3Ryb2tlLCBleC5iYXNlRmlsbCwgYW5kIGV4LmJhc2VMaXBDb2xvclxyXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlQmFzZUNvbG9ycyhleCkge1xyXG4gICAgY29uc3QgYXZhdGFyID0gZXguYXZhdGFyO1xyXG5cclxuICAgIGNvbnN0IHNraW4gPSBhdmF0YXIuZGltLnNraW47XHJcblxyXG4gICAgaWYgKGlzTmFOKHNraW4pKSB7XHJcbiAgICAgICAgZXguYmFzZUZpbGwgPSBza2luO1xyXG4gICAgICAgIGV4LmJhc2VTdHJva2UgPSBza2luO1xyXG4gICAgICAgIGV4LmJhc2VMaXBDb2xvciA9IHNraW47XHJcbiAgICAgICAgZXgubmlwcGxlQ29sb3IgPSBza2luO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH0gZWxzZSBpZiAoc2tpbiA8IDExKSB7XHJcbiAgICAgICAgZXguYmFzZUZpbGwgPSBbXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoMjU1IC0gKHNraW4gKiAyLjgpKSxcclxuICAgICAgICAgICAgTWF0aC5mbG9vcigyMTQgLSAoc2tpbiAqIDUuMykpLFxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKDE4MCAtIChza2luICogNi41KSlcclxuICAgICAgICBdO1xyXG4gICAgICAgIGV4LmJhc2VTdHJva2UgPSBbXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoMjE0IC0gKHNraW4gKiA1LjEpKSxcclxuICAgICAgICAgICAgTWF0aC5mbG9vcigxNTYgLSAoc2tpbiAqIDQpKSxcclxuICAgICAgICAgICAgTWF0aC5mbG9vcigxNDcgLSAoc2tpbiAqIDYuNCkpXHJcbiAgICAgICAgXTtcclxuICAgICAgICBleC5iYXNlTGlwQ29sb3IgPSBbXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoMTk0IC0gKHNraW4gKiA0LjEpKSxcclxuICAgICAgICAgICAgTWF0aC5mbG9vcigxMjMgLSAoc2tpbiAqIDQuMSkpLFxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKDExOSAtIChza2luICogNC4xKSlcclxuICAgICAgICBdO1xyXG4gICAgICAgIGV4Lm5pcHBsZUNvbG9yID0gW1xyXG4gICAgICAgICAgICBNYXRoLmZsb29yKDE0MCAtIChza2luICogNC4xKSksXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoODkgLSAoc2tpbiAqIDQuMSkpLFxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKDg2IC0gKHNraW4gKiA0LjEpKVxyXG4gICAgICAgIF07XHJcbiAgICB9IGVsc2UgaWYgKHNraW4gPCAxMDApIHtcclxuICAgICAgICBsZXQgYSA9IHNraW4gLSAxMTtcclxuICAgICAgICBleC5iYXNlRmlsbCA9IFtcclxuICAgICAgICAgICAgTWF0aC5mbG9vcigyMjcgLSAoYSAqIDkuNikpLFxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKDE2MSAtIChhICogOS4xKSksXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoMTE1IC0gKGEgKiA2LjMpKVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgaWYgKHNraW4gPiAyOCkge1xyXG4gICAgICAgICAgICBhID0gYSAtICgoc2tpbiAtIDIzKSAqIDIuNSk7XHJcbiAgICAgICAgfSAgLy8gY2hhbmdlIGNvbG91cnMgdG8gbGlnaHRlciBzbyB3ZSBkbyBub3QgZ2V0IGJsYWNrIG9uXHJcbiAgICAgICAgLy8gbmVhciBibGFjayBlZmZlY3RzXHJcbiAgICAgICAgZXguYmFzZVN0cm9rZSA9IFtcclxuICAgICAgICAgICAgTWF0aC5mbG9vcigxNjMgLSAoYSAqIDEyKSksXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoMTE2IC0gKGEgKiAxMC44KSksXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoODMgLSAoYSAqIDcuMykpXHJcbiAgICAgICAgXTtcclxuICAgICAgICBleC5iYXNlTGlwQ29sb3IgPSBbXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoMTUzIC0gKGEgKiA4LjkpKSxcclxuICAgICAgICAgICAgTWF0aC5mbG9vcig4MiAtIChhICogNi4yKSksXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoNzggLSAoYSAqIDYuNCkpXHJcbiAgICAgICAgXTtcclxuICAgICAgICBleC5uaXBwbGVDb2xvciA9IFtcclxuICAgICAgICAgICAgTWF0aC5mbG9vcig5OSAtIChhICogOS45KSksXHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IoNDggLSAoYSAqIDcuMikpLFxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKDQ1IC0gKGEgKiA3LjQpKVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGlwUHJvbWluYW5jZSA9IDAuNyArIGNsYW1wKGF2YXRhci5nZXREaW0oXCJmYWNlRmVtXCIpIC9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXZhdGFyLmdldERpbURlc2MoXCJmYWNlRmVtXCIpLmhpZ2ggKiAzKSwgMCwgMC4zKTtcclxuICAgIGV4LmJhc2VMaXBDb2xvci5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtLCBpbmRleCwgYXJyKSB7XHJcbiAgICAgICAgYXJyW2luZGV4XSA9IGV4LmJhc2VGaWxsW2luZGV4XSAqICgxIC0gbGlwUHJvbWluYW5jZSkgKyBlbGVtICogbGlwUHJvbWluYW5jZTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIG1vZGlmeSBza2luIGNvbG9yYXRpb24gYnkgZmlyc3QgY29udmVydGluZyB0byBIU0xcclxuICAgIGV4LmJhc2VGaWxsID0gZmluYWxpemVDb2xvcihleC5iYXNlRmlsbCwgYXZhdGFyLk1vZHMsIFwic2tpblwiKTtcclxuICAgIGV4LmJhc2VTdHJva2UgPSBmaW5hbGl6ZUNvbG9yKGV4LmJhc2VTdHJva2UsIGF2YXRhci5Nb2RzLCBcInNraW5cIik7XHJcbiAgICBleC5iYXNlTGlwQ29sb3IgPSBmaW5hbGl6ZUNvbG9yKGV4LmJhc2VMaXBDb2xvciwgYXZhdGFyLk1vZHMsIFwibGlwXCIpO1xyXG4gICAgZXgubmlwcGxlQ29sb3IgPSBmaW5hbGl6ZUNvbG9yKGV4Lm5pcHBsZUNvbG9yLCBhdmF0YXIuTW9kcyk7XHJcblxyXG4gICAgY29uc3QgZXllSGlnaGxpZ2h0ID0gYXZhdGFyLmdldERpbShcImZhY2VGZW1cIikgLyBhdmF0YXIuZ2V0RGltRGVzYyhcImZhY2VGZW1cIikuaGlnaCAqIDIwO1xyXG4gICAgZXguZXllbGlkQ29sb3IgPSBhZGp1c3RDb2xvcihleC5iYXNlU3Ryb2tlLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgczogLWV5ZUhpZ2hsaWdodCxcclxuICAgICAgICAgICAgbDogLWV5ZUhpZ2hsaWdodFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIGV4LmRlZmF1bHRIYWlyRmlsbCA9XHJcbiAgICAgICAgYGhzbCgke01hdGgucm91bmQoYXZhdGFyLmRpbS5oYWlySHVlKX0sJHtNYXRoLnJvdW5kKGF2YXRhci5kaW0uaGFpclNhdHVyYXRpb24pfSUsXHJcbiAgICAgICAgJHtNYXRoLnJvdW5kKGF2YXRhci5kaW0uaGFpckxpZ2h0bmVzcyl9JSlgO1xyXG4gICAgZXguaGFpckZpbGwgPSBhdmF0YXIuaGFpckZpbGw7XHJcbiAgICBleC5oYWlyU3Ryb2tlID0gYXZhdGFyLmhhaXJTdHJva2U7XHJcbiAgICBleC5icm93RmlsbCA9IGF2YXRhci5icm93RmlsbDtcclxuICAgIGV4Lmxhc2hGaWxsID0gYXZhdGFyLmxhc2hGaWxsO1xyXG4gICAgLy8gaW4gY2FzZSB3ZSBkb24ndCBoYXZlIG92ZXJyaWRlc1xyXG4gICAgaWYgKCFhdmF0YXIuaGFpckZpbGwpIHtcclxuICAgICAgICBleC5oYWlyRmlsbCA9IGV4LmRlZmF1bHRIYWlyRmlsbDtcclxuICAgIH1cclxuICAgIGlmICghYXZhdGFyLmhhaXJTdHJva2UpIHtcclxuICAgICAgICBleC5oYWlyU3Ryb2tlID0gYWRqdXN0Q29sb3IoZXguZGVmYXVsdEhhaXJGaWxsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtMTAsXHJcbiAgICAgICAgICAgICAgICBzOiAtMTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWF2YXRhci5icm93RmlsbCkge1xyXG4gICAgICAgIGV4LmJyb3dGaWxsID0gYWRqdXN0Q29sb3IoZXguZGVmYXVsdEhhaXJGaWxsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtNSxcclxuICAgICAgICAgICAgICAgIHM6IC01XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhdmF0YXIubGFzaEZpbGwpIHtcclxuICAgICAgICBleC5sYXNoRmlsbCA9IGFkanVzdENvbG9yKGV4LmRlZmF1bHRIYWlyRmlsbCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbDogLTEwLFxyXG4gICAgICAgICAgICAgICAgczogLTEwLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBleC5oYWlyQWNjZXNzb3J5Q29sb3IgPVxyXG4gICAgICAgIGBoc2woJHthdmF0YXIuZ2V0TW9kKFwiaGFpckFjY2Vzc29yeUh1ZVwiKX0sJHthdmF0YXIuZ2V0TW9kKFwiaGFpckFjY2Vzc29yeVNhdHVyYXRpb25cIil9JSwke2F2YXRhci5nZXRNb2QoXHJcbiAgICAgICAgICAgIFwiaGFpckFjY2Vzc29yeUxpZ2h0bmVzc1wiKX0lKWA7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBmaW5hbGl6ZUNvbG9yKHJnYiwgbW9kcywgbW9kTmFtZSkge1xyXG4gICAgY29uc3QgaHNsID0gUkdCVG9IU0woe1xyXG4gICAgICAgIHI6IGNsYW1wKHJnYlswXSwgMCwgMjU1KSxcclxuICAgICAgICBnOiBjbGFtcChyZ2JbMV0sIDAsIDI1NSksXHJcbiAgICAgICAgYjogY2xhbXAocmdiWzJdLCAwLCAyNTUpXHJcbiAgICB9KTtcclxuICAgIGlmIChtb2ROYW1lKSB7XHJcbiAgICAgICAgaHNsLmggKz0gbW9kc1ttb2ROYW1lICsgXCJIdWVcIl07XHJcbiAgICAgICAgaHNsLnMgKz0gbW9kc1ttb2ROYW1lICsgXCJTYXR1cmF0aW9uXCJdO1xyXG4gICAgICAgIGhzbC5sICs9IG1vZHNbbW9kTmFtZSArIFwiTGlnaHRuZXNzXCJdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFwiaHNsKFwiICsgY2xhbXAoTWF0aC5mbG9vcihoc2wuaCksIDAsIDM2MCkgKyBcIixcIiArXHJcbiAgICAgICAgICAgY2xhbXAoTWF0aC5mbG9vcihoc2wucyksIDAsIDEwMCkgKyBcIiUsXCIgK1xyXG4gICAgICAgICAgIGNsYW1wKE1hdGguZmxvb3IoaHNsLmwpLCAwLCAxMDApICsgXCIlKVwiO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGN0eCwgY29uZmlnLCBhdmF0YXIsIGV4LCBsYXllciwgY2xlYXIpIHtcclxuICAgIC8vIGNsZWFyIGNhbnZhc1xyXG4gICAgaWYgKGNsZWFyKSB7XHJcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgLy8gcHJldmVudCBjYW52YXMgZnJvbSBzaHJpbmtpbmcuLi5cclxuXHJcbiAgICAvLyB1c2UgYXMgbXVjaCBvZiB0aGUgc3BhY2UgYXMgbmVjZXNzYXJ5XHJcbiAgICAvLyB1c2UgdGhlIG1pbmltdW0gc2NhbGluZyBmcm9tIHggYW5kIHksIHRoZW4gdGFrZSB0aGUgcmVzdCBhcyBvZmZzZXRcclxuICAgIGNvbnN0IHN4ID0gY2FudmFzLndpZHRoIC8gMTgwLCBzeSA9IGNhbnZhcy5oZWlnaHQgLyA0MDA7XHJcbiAgICBjb25zdCBzY2FsaW5nID0gZXguc2NhbGluZyA9IE1hdGgubWluKHN4LCBzeSk7XHJcbiAgICBjdHguc2NhbGUoc2NhbGluZywgc2NhbGluZyk7XHJcblxyXG4gICAgZXgub3ggPSBjb25maWcub3ggPSBNYXRoLmZsb29yKGNhbnZhcy53aWR0aCAvIHNjYWxpbmcgLSBjYW52YXMud2lkdGggLyBzeCk7XHJcbiAgICBleC5veSA9IGNvbmZpZy5veSA9IE1hdGguZmxvb3IoY2FudmFzLmhlaWdodCAvIHNjYWxpbmcgLSBjYW52YXMuaGVpZ2h0IC8gc3kpO1xyXG5cclxuICAgIGlmIChsYXllciA9PT0gTGF5ZXIuQkFTRSAmJiBjb25maWcucHJpbnRBZGRpdGlvbmFsSW5mbykge1xyXG4gICAgICAgIHByaW50QWRkaXRpb25hbEluZm8oY2FudmFzLCBjdHgsIGNvbmZpZywgYXZhdGFyKTtcclxuICAgIH1cclxuXHJcblx0Ly9XV0JCXHJcblx0aWYgKGxheWVyID09PSBMYXllci5CQVNFKSB7XHJcbiAgICAgICAgcHJpbnRUb2tlbnMoY2FudmFzLCBjdHgsIGNvbmZpZywgYXZhdGFyKTtcclxuICAgIH1cclxuXHRcclxuICAgIGN0eC50cmFuc2xhdGUoY29uZmlnLm94LCAwKTtcclxuXHJcbiAgICBpZiAobGF5ZXIgPT09IExheWVyLkJBU0UgJiYgY29uZmlnLnByaW50SGVpZ2h0KSB7XHJcbiAgICAgICAgcHJpbnRIZWlnaHQoY3R4LCBjb25maWcsIGF2YXRhcik7XHJcbiAgICB9XHJcblxyXG5cdFxyXG5cdFxyXG5cdFxyXG4gICAgLy8gZmxpcCB2ZXJ0aWNhbGx5XHJcbiAgICBjdHguc2NhbGUoMSwgLTEpO1xyXG4gICAgLy8gZWxldmF0ZSBieSBvZmZzZXQgYW5kIHNob2UgaGVpZ2h0ICh3ZSBkaXZpZGUgYnkgMiB0byBhY2NvdW50IGZvciBwZXJzcGVjdGl2ZSlcclxuICAgIC8vIHdoZXRoZXIgdGhpcyBpcyBuZWNlc3NhcnkgY2FuIGJlIGRlY2lkZWQgYXQgYSBsYXRlciB0aW1lXHJcbiAgICBjdHgudHJhbnNsYXRlKDAsIC00MDAgLSBjb25maWcub3kgKyAxMCArIGluY3UoYXZhdGFyLmhlaWdodEFkanVzdCgpKSAvIDIpO1xyXG4gICAgLy8gc2NhbGUgdG8gYmUgaW4gc3luYyB3aXRoIHRoZSBoZWlnaHQgYmFyXHJcbiAgICAvLyBoZWlnaHQgYmFyIHNjYWxlIGlzIDYgZnQgPSAzOTAtMjAgPSAzNzAgY2FudmFzIHVuaXRzXHJcbiAgICAvLyBidXQgaW5jdSB+IDEgc28gd2Ugc2tpcCB0aGUgZm9sbG93aW5nIGNvbnZlcnNpb24gdG8gYXZvaWQgYW50aWFsaWFzaW5nIGlzc3Vlc1xyXG4gICAgLy8gY3R4LnNjYWxlKDEsIGluY3UoNzIpIC8gMzcwKTtcclxuXHJcbiAgICAvLyBtb3ZlIHNvIHRoYXQgdGhlIGNlbnRlciB4IGlzIDBcclxuICAgIC8vIGFsbG93IGRyYXcgcG9pbnRzIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBjZW50ZXIgb2YgdGhlIGJvZHlcclxuICAgIGN0eC50cmFuc2xhdGUoZXguY3gsIDApO1xyXG5cclxuICAgIC8vIGluaXRpYWxpemUgdG8gYmFzZSBza2luIGNvbG9yc1xyXG4gICAgY3R4LnN0cm9rZVN0eWxlID0gZXguYmFzZVN0cm9rZTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBleC5iYXNlRmlsbDtcclxuICAgIGN0eC5saW5lQ2FwID0gXCJyb3VuZFwiO1xyXG4gICAgY3R4LmxpbmVKb2luID0gXCJyb3VuZFwiO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gcHJpbnRIZWlnaHQoY3R4LCBjb25maWcsIGF2YXRhcikge1xyXG5cdC8vV1dCQiAtIEFHRSAmIFNFWFVBTElUWVxyXG5cdGlmKGF2YXRhci5hZ2Upe1xyXG5cdFx0Y3R4LmZvbnQgPSBcIjhweCBBcmlhbFwiO1xyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IGNvbmZpZy5oZWlnaHRDb2xvcjtcclxuXHRcdGN0eC5maWxsVGV4dChNYXRoLmZsb29yKGF2YXRhci5hZ2UpK1wiIHlvXCIsIDE0MCwgMzQpO1xyXG5cdH07XHJcblx0aWYodHlwZW9mIGF2YXRhci5zZXh1YWxpdHkhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHQvL2FsZXJ0KGF2YXRhci5zZXh1YWxpdHkpXHJcblx0XHRjdHguZm9udCA9IFwiOHB4IEFyaWFsXCI7XHJcblx0XHRjdHguZmlsbFN0eWxlID0gY29uZmlnLmhlaWdodENvbG9yO1xyXG5cdFx0aWYoYXZhdGFyLnNleHVhbGl0eTwtMSl7IFxyXG5cdFx0XHRjdHguZmlsbFRleHQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDI2NDIpLCAxNDUsIDQ0KSBcclxuXHRcdH1lbHNlIGlmKGF2YXRhci5zZXh1YWxpdHk+MSl7IFxyXG5cdFx0XHRjdHguZmlsbFRleHQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDI2NDApLCAxNDUsIDQ0KSBcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRjdHguZmlsbFRleHQoU3RyaW5nLmZyb21DaGFyQ29kZSgweDI2NDIpK1wiXCIrU3RyaW5nLmZyb21DaGFyQ29kZSgweDI2NDApLCAxNDUsIDQ0KSBcclxuXHRcdH07XHJcblx0fTtcclxuXHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcbiAgICBjb25zdCBzaG9laGVpZ2h0ID0gYXZhdGFyLmhlaWdodEFkanVzdCgpO1xyXG4gICAgY29uc3QgaGVpZ2h0T2Zmc2V0ID0gMjsgLy8gcGxheWVycyBhcHBlYXIgMiBpbmNoZXMgdGFsbGVyIHRoYW4gd2hhdCB0aGVpciBjb2RlIHN1Z2dlc3RzXHJcblxyXG4gICAgLy8gaGVpZ2h0IGlzIGdpdmVuIGluIGNlbnRpbWV0ZXJzLCBzbyBoYXZlIHRvIGNvbnZlcnRcclxuICAgIGxldCBoZWlnaHRyZWFkID0gKGF2YXRhci5kaW0uaGVpZ2h0KSAvIDIuNTQgKyBzaG9laGVpZ2h0ICsgaGVpZ2h0T2Zmc2V0OyAgLy8gaW4gaW5jaGVzXHJcbiAgICBsZXQgaGVpZ2h0ZnQgPSBcIlwiICsgTWF0aC5mbG9vcihoZWlnaHRyZWFkIC8gMTIpICsgXCJcXCdcIjtcclxuICAgIGxldCBoZWlnaHRpbiA9IFwiXCIgKyBNYXRoLmZsb29yKGhlaWdodHJlYWQgLSAoTWF0aC5mbG9vcihoZWlnaHRyZWFkIC8gMTIpICogMTIpKSArIFwiXFxcIlwiO1xyXG5cclxuICAgIGNvbnN0IG95ID0gY29uZmlnLm95O1xyXG5cclxuICAgIC8vIHByaW50IGltcGVyaWFsIGhlaWdodFxyXG4gICAgaGVpZ2h0cmVhZCA9IGhlaWdodGZ0ICsgaGVpZ2h0aW47XHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IGNvbmZpZy5oZWlnaHRDb2xvcjtcclxuICAgIGN0eC5mb250ID0gXCIxMnB4IEFyaWFsXCI7XHJcbiAgICBjdHguZmlsbFRleHQoaGVpZ2h0cmVhZCwgMTI1LCAxNik7XHJcblxyXG4gICAgaWYgKHNob2VoZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgaGVpZ2h0cmVhZCA9IChhdmF0YXIuZGltLmhlaWdodCkgLyAyLjU0ICsgaGVpZ2h0T2Zmc2V0OyAgLy8gdW5hZGp1c3RlZFxyXG4gICAgICAgIGhlaWdodGZ0ID0gXCJcIiArIE1hdGguZmxvb3IoaGVpZ2h0cmVhZCAvIDEyKSArIFwiXFwnXCI7XHJcbiAgICAgICAgaGVpZ2h0aW4gPSBcIlwiICsgTWF0aC5mbG9vcihoZWlnaHRyZWFkIC0gKE1hdGguZmxvb3IoaGVpZ2h0cmVhZCAvIDEyKSAqIDEyKSkgKyBcIlxcXCJcIjtcclxuICAgICAgICBoZWlnaHRyZWFkID0gaGVpZ2h0ZnQgKyBoZWlnaHRpbjtcclxuICAgICAgICBjdHguZmlsbFRleHQoXCIoXCIgKyBoZWlnaHRyZWFkICsgXCIpXCIsIDE1MCwgMTYpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBkcmF3IGhlaWdodCBtZWFzdXJlbWVudCBiYXIgb24gdGhlIHJpZ2h0XHJcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb25maWcuaGVpZ2h0QmFyQ29sb3I7XHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjb25zdCBwb3MgPSAyMDtcclxuICAgIGN0eC5tb3ZlVG8oMTMwICsgcG9zLCAyMCk7XHJcbiAgICBjdHgubGluZVRvKDE1OCArIHBvcywgMjApO1xyXG4gICAgY3R4LmxpbmVUbygxNTggKyBwb3MsIDM5MCArIG95KTtcclxuICAgIGNvbnN0IGRhc2hlcyA9IDM3MCAvIDcyO1xyXG4gICAgY29uc3QgbnVtZGFzaGVzID0gTWF0aC5mbG9vcig3MiArIG95IC8gZGFzaGVzKTtcclxuICAgIGxldCBpID0gMTtcclxuICAgIGZvciAoaSA9IDE7IGkgPCBudW1kYXNoZXM7IGkrKykge1xyXG4gICAgICAgIHZhciB2ID0gMzkwICsgb3kgLSAoaSAqIGRhc2hlcyk7XHJcbiAgICAgICAgY3R4Lm1vdmVUbygxNTggKyBwb3MsIHYpO1xyXG4gICAgICAgIGlmIChpICUgMTIgPT09IDApIHtcclxuICAgICAgICAgICAgY3R4LmxpbmVUbygxNDQgKyBwb3MsIHYpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaSAlIDYgPT09IDApIHtcclxuICAgICAgICAgICAgY3R4LmxpbmVUbygxNTEgKyBwb3MsIHYpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaSAlIDMgPT09IDApIHtcclxuICAgICAgICAgICAgY3R4LmxpbmVUbygxNTMgKyBwb3MsIHYpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGN0eC5saW5lVG8oMTU1ICsgcG9zLCB2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICBjdHgucmVzdG9yZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcmludEFkZGl0aW9uYWxJbmZvKGNhbnZhcywgY3R4LCBjb25maWcsIGF2YXRhcikge1xyXG5cdFxyXG4gICAgLy8gcHJpbnQgb3RoZXIgaW5mb1xyXG4gICAgY3R4LnNhdmUoKTtcclxuICAgIGN0eC5mb250ID0gXCJib2xkIDIwcHggQXJpYWxcIjtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBjb25maWcuZ2VuZGVyQ29sb3I7XHJcbiAgICAvKlxyXG5cdGN0eC5maWxsVGV4dChhdmF0YXIuaXNNYWxlKCkgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MjY0MikgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4MjY0MCksIDYsXHJcbiAgICAgICAgMjQpO1xyXG5cdCovXHJcblx0XHJcblx0Ly9XV0JCIFx0XHJcbiAgICBjb25zdCBmb250U2l6ZSA9IGNsYW1wKGNhbnZhcy53aWR0aCAvIGF2YXRhci5uYW1lLmxlbmd0aCAvIDIsIDEwLCAyNCk7XHJcbiAgICBjdHguZm9udCA9IGZvbnRTaXplICsgXCJweCBBcmlhbFwiO1xyXG5cclxuXHRjdHguZmlsbFRleHQoYXZhdGFyLmdlbmRlciA9PSAwID8gU3RyaW5nLmZyb21DaGFyQ29kZSgweDI2NDIpIDogU3RyaW5nLmZyb21DaGFyQ29kZSgweDI2NDApLCA2LFxyXG4gICAgICAgIDI2KTtcclxuXHRcdFxyXG4gICAgY3R4LmZpbGxTdHlsZSA9IGNvbmZpZy5uYW1lQ29sb3I7XHJcbiAgICBjb25zdCBuYW1lTGVuZ3RoTGltaXQgPSAyNDtcclxuICAgIGlmIChhdmF0YXIubmFtZS5sZW5ndGggPiBuYW1lTGVuZ3RoTGltaXQpIHtcclxuICAgICAgICBjdHguZmlsbFRleHQoYXZhdGFyLm5hbWUuc2xpY2UoMCwgbmFtZUxlbmd0aExpbWl0KSArIFwiLi4uXCIsIDMwLCAyNik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGN0eC5maWxsVGV4dChhdmF0YXIubmFtZSwgMzAsIDI2KTtcclxuICAgIH1cclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbn1cclxuXHJcblxyXG4vL1dXQkJcclxuZnVuY3Rpb24gcHJpbnRUb2tlbnMoY2FudmFzLCBjdHgsIGNvbmZpZywgYXZhdGFyKSB7XHJcblx0aWYoIWF2YXRhci50b2tlbnMpcmV0dXJuO1xyXG5cdGN0eC5zYXZlKCk7XHJcblx0Ly9jb25zb2xlLmxvZyhhdmF0YXIudG9rZW5zKTtcclxuXHRcclxuXHRjb25zdCBzaXplID0gYXZhdGFyLnRva2Vucy5zaXplID49IDAgPyBhdmF0YXIudG9rZW5zLnNpemUgOiAwLjE7XHJcblx0Y29uc3QgZnJvbnQgPSBhdmF0YXIudG9rZW5zLmZyb250OyAvL1wiI2NkMDAwMFwiOyAvLyBcInJlZFwiO1xyXG5cdGNvbnN0IGJhY2sgPSBhdmF0YXIudG9rZW5zLmJhY2s7XHJcblx0XHRcclxuXHRjb25zdCB0b3AgPSBhdmF0YXIudG9rZW5zLnRvcDtcclxuXHRjb25zdCBsZWZ0ID0gYXZhdGFyLnRva2Vucy5sZWZ0O1xyXG5cdGNvbnN0IHNwYWNlID0gYXZhdGFyLnRva2Vucy5zcGFjZSA/IGF2YXRhci50b2tlbnMuc3BhY2UgOiAwLjM7XHJcblx0XHJcblx0Zm9yKGxldCBpID0gMDsgaTxhdmF0YXIudG9rZW5zLmxlbmd0aDsgaSsrKXtcclxuXHRcdGlmKGF2YXRhci50b2tlbnNbaV0uc2l6ZTw9MCljb250aW51ZTtcclxuXHRcdHRva2VuKFx0XHJcblx0XHRcdGF2YXRhci50b2tlbnNbaV0udHlwLCBcclxuXHRcdFx0bGVmdCArIChzaXplKigxLWF2YXRhci50b2tlbnNbaV0uc2l6ZSkpLCBcclxuXHRcdFx0dG9wICsgKCgyK3NwYWNlKSpzaXplKSppICsgKDEuMSpzaXplKigxLWF2YXRhci50b2tlbnNbaV0uc2l6ZSkpLCBcclxuXHRcdFx0c2l6ZSphdmF0YXIudG9rZW5zW2ldLnNpemUsIFxyXG5cdFx0XHRhdmF0YXIudG9rZW5zW2ldLmNvbG9yXHJcblx0XHQpO1x0XHJcblx0fTtcclxuXHRcclxuXHRmdW5jdGlvbiB0b2tlbih0eXBlLHgseSxzaXplLGNvbG9yKXtcclxuXHQvKlxyXG5cdGNvbnNvbGUubG9nKHR5cGUpO1xyXG5cdFx0Y29uc29sZS5sb2coeCk7XHJcblx0XHRjb25zb2xlLmxvZyh5KTtcclxuXHRcdGNvbnNvbGUubG9nKHNpemUpO1xyXG5cdFx0XHJcblx0XHRjb25zb2xlLmxvZyhmcm9udCk7XHJcblx0Ki9cclxuXHRcdGN0eC5maWxsU3R5bGUgPSBhZGp1c3RDb2xvcihmcm9udCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHM6IC01MCooMS1jb2xvciksXHJcblx0XHRcdGw6IDUwKigxLWNvbG9yKSxcclxuICAgICAgICB9KTtcclxuXHRcdFxyXG5cdFx0Ly9pbnNlcnRlZCBwb3NpdGlvbiBvZiB0b3AgcmlnaHQsIGNhbGN1bGF0ZWQgY2VudGVyIFxyXG5cdFx0eCA9IHggKyBzaXplO1xyXG5cdFx0eSA9IHkgKyBzaXplO1xyXG5cdFx0XHJcblx0IFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y3R4LmFyYyh4LCB5LCBzaXplLCAwLCAyICogTWF0aC5QSSk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHJcblx0XHRjdHguZmlsbFN0eWxlID0gYmFjaztcclxuXHRcdFxyXG5cdFx0c3dpdGNoKHR5cGUpe1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHtcclxuLypcdFx0XHRcdFxyXG5cdFx0XHRcdGNvbnN0IHRleCA9IDAuNTtcclxuXHRcdFx0XHRjdHguZm9udCA9ICgyKnRleCpzaXplKStcInB4IEFyaWFsXCI7XHJcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KFwiRXJyXCIsIHggLSAoc2l6ZSp0ZXgpLCB5ICsgKHNpemUqdGV4KSwgKHNpemUqdGV4KjgpKTtcclxuXHJcbiovXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcclxuXHRcdFx0Y2FzZSBcImFnZVwiOlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSBzaXplKjAuMjU7XHJcblx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGU9IGN0eC5maWxsU3R5bGU7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHRjb25zdCB0b3AgPSB7XHJcblx0XHRcdFx0XHRcdHg6IDAsXHJcblx0XHRcdFx0XHRcdHk6IC1zaXplKjAuNVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdGNvbnN0IGJvdCA9IHtcclxuXHRcdFx0XHRcdFx0eDogMCxcclxuXHRcdFx0XHRcdFx0eTogc2l6ZSowLjVcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGNvbnN0IHNpZGUgPSB7XHJcblx0XHRcdFx0XHRcdHg6IHNpemUqMC41LFxyXG5cdFx0XHRcdFx0XHR5OiBzaXplKjBcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4ICsgdG9wLngsIHkgKyB0b3AueSk7XHJcblx0XHRcdFx0XHRjdHgubGluZVRvKHggKyBib3QueCwgeSArIGJvdC55KTtcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRcdGN0eC5tb3ZlVG8oeCAtIHNpZGUueCwgeSArIHNpZGUueSk7XHJcblx0XHRcdFx0XHRjdHgubGluZVRvKHggKyBib3QueCwgeSArIGJvdC55KTtcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh4ICsgc2lkZS54LCB5ICsgc2lkZS55KTtcclxuXHRcdFx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcclxuXHRcdFx0Y2FzZSBcImZlclwiOlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvL2NvbnN0IHNtYWxsID0gMC41O1xyXG5cdFx0XHRcdGNvbnN0IGxlbmd0aCA9IDAuMztcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjb25zdCBkaXN0YW5jZSA9IDAuMjtcclxuXHRcdFx0XHRjdHgubGluZVdpZHRoID0gc2l6ZSowLjM7XHJcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlPSBjdHguZmlsbFN0eWxlO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGZ1bmN0aW9uIGFzZGYoeCx5LGxlbmd0aCl7XHJcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0XHRjdHgubW92ZVRvKHggLSBsZW5ndGgsIHkgLSBsZW5ndGgpO1xyXG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh4ICsgbGVuZ3RoLCB5ICsgbGVuZ3RoKTtcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0YXNkZih4IC0gc2l6ZSpkaXN0YW5jZSwgeSArIHNpemUqZGlzdGFuY2UsIGxlbmd0aCpzaXplKTtcclxuXHRcdFx0XHRhc2RmKHggKyBzaXplKmRpc3RhbmNlLCB5IC0gc2l6ZSpkaXN0YW5jZSwgbGVuZ3RoKnNpemUpO1xyXG5cdFx0XHRcdC8qXHJcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGN0eC5tb3ZlVG8oeCAtIHNpemUqc21hbGwsIHkgLSBzaXplKmJpZyk7XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4ICsgc2l6ZSpiaWcsIHkgKyBzaXplKnNtYWxsKTtcdFx0XHRcdFxyXG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0Y3R4Lm1vdmVUbyh4ICsgc2l6ZSpiaWcsIHkgLSBzaXplKnNtYWxsKTtcclxuXHRcdFx0XHRjdHgubGluZVRvKHggKyBzaXplKnNtYWxsLCB5IC0gc2l6ZSpiaWcpO1x0XHRcdFx0XHJcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcdCovXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1x0XHJcblxyXG5cdFx0XHRcdFxyXG5cdFx0XHRjYXNlIFwiYmlcIjpcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Y29uc3QgcmFkaXVzID0gMC41O1xyXG5cdFx0XHRcdGNvbnN0IHZlcnRpY2FsID0gMC4yO1xyXG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSBzaXplKjAuMTU7XHJcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlPSBjdHguZmlsbFN0eWxlO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRjdHguYXJjKHggLSBzaXplKnZlcnRpY2FsLCB5IC0gc2l6ZSp2ZXJ0aWNhbCwgc2l6ZSpyYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGN0eC5hcmMoeCArIHNpemUqdmVydGljYWwsIHkgKyBzaXplKnZlcnRpY2FsLCBzaXplKnJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHQvL2N0eC5maWxsKCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1x0XHJcblx0XHRcdGNhc2UgXCJkb21cIjpcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0Y29uc3Qgd2lkdGggPSAwLjc7XHJcblx0XHRcdFx0Y29uc3QgaGVpZ2h0ID0gMC4yNTtcclxuXHRcdFxyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRjdHguZmlsbFJlY3QoeCAtIHNpemUqd2lkdGgsIHkgLSBzaXplKmhlaWdodCwgc2l6ZSp3aWR0aCoyLCBzaXplKmhlaWdodCoyKTtcclxuXHRcdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRjdHguZmlsbFJlY3QoeCAtIHNpemUqaGVpZ2h0LCB5IC0gc2l6ZSp3aWR0aCwgc2l6ZSpoZWlnaHQqMiwgc2l6ZSp3aWR0aCoyKTtcclxuXHRcdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcclxuXHRcdFx0Y2FzZSBcInN1YlwiOlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRjb25zdCB3aWR0aCA9IDAuNztcclxuXHRcdFx0XHRjb25zdCBoZWlnaHQgPSAwLjI1O1xyXG5cdFx0XHJcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGN0eC5maWxsUmVjdCh4IC0gc2l6ZSp3aWR0aCwgeSAtIHNpemUqaGVpZ2h0LCBzaXplKndpZHRoKjIsIHNpemUqaGVpZ2h0KjIpO1xyXG5cdFx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcclxuXHRcdFx0Y2FzZSBcIm55bXBob1wiOlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRjb25zdCBob3Jpem9udGFsID0gMC4zNjtcclxuXHRcdFx0XHRjb25zdCB2ZXJ0aWNhbCA9IDAuMTU7XHJcblx0XHRcdFx0Y29uc3QgbGVuZ3RoID0gMC43O1xyXG5cdFx0XHRcdGNvbnN0IHJvdW5kaW5nX2Vycm9yID0gc2l6ZSAqIDAuMDE7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGN0eC5tb3ZlVG8oeCwgeSArIHNpemUqbGVuZ3RoKTtcclxuXHRcdFx0XHRjdHguYXJjKHggKyBzaXplKmhvcml6b250YWwqMC45OCwgeSAtIHNpemUqdmVydGljYWwsIHNpemUqaG9yaXpvbnRhbCwgTWF0aC5QSSwgMC4yNSAqIE1hdGguUEkpO1xyXG5cdFx0XHRcdGN0eC5saW5lVG8oeCwgeSArIHNpemUqbGVuZ3RoKTtcclxuXHRcdFx0XHRjdHguYXJjKHggLSBzaXplKmhvcml6b250YWwqMC45OCwgeSAtIHNpemUqdmVydGljYWwsIHNpemUqaG9yaXpvbnRhbCwgMC43NSAqIE1hdGguUEksIDApO1xyXG5cdFx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRjYXNlIFwiZHVtYlwiOlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRjb25zdCByYWRpdXMgPSAwLjU7XHJcblx0XHRcdFx0Y29uc3QgaG9yaXpvbnRhbCA9IDAuMjU7XHJcblx0XHRcdFx0Y29uc3QgdmVydGljYWwgPSAwLjI1O1xyXG5cdFx0XHRcdGNvbnN0IGxlbmd0aCA9IDAuNDtcclxuXHRcdFxyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRjdHguYXJjKHggLCB5IC0gc2l6ZSp2ZXJ0aWNhbCwgc2l6ZSpyYWRpdXMsIDAuNzUgKiBNYXRoLlBJLCAwLjI1ICogTWF0aC5QSSk7XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4ICsgc2l6ZSpob3Jpem9udGFsLCB5ICsgc2l6ZSpsZW5ndGgpO1xyXG5cdFx0XHRcdGN0eC5saW5lVG8oeCAtIHNpemUqaG9yaXpvbnRhbCwgeSArIHNpemUqbGVuZ3RoKTtcclxuXHRcdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0Y3R4LmZpbGxSZWN0KHggLSBzaXplKmhvcml6b250YWwsIHkgKyBzaXplKihsZW5ndGgrMC4xKSwgc2l6ZSpob3Jpem9udGFsKjIsIHNpemUqMC4yKTtcclxuXHRcdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRcclxuXHRcdFx0Y2FzZSBcInBoZXJvXCI6XHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdGNvbnN0IHRvcCA9IDAuMztcclxuXHRcdFx0XHRjb25zdCBib3QgPSAwLjY7XHJcblx0XHRcdFx0Y29uc3QgaW5zaWRlID0gMC4yO1xyXG5cdFx0XHRcdGNvbnN0IHdpZHRoID0gMC4zO1xyXG5cdFx0XHRcdGNvbnN0IGxlbmd0aCA9IDAuNTtcclxuXHRcdFx0XHRcclxuXHRcclxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0Y3R4Lm1vdmVUbyh4ICsgc2l6ZSppbnNpZGUsIHkgLSBzaXplKnRvcCk7XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4ICsgc2l6ZSppbnNpZGUsIHkgKyBzaXplKihib3QtMC41KndpZHRoKSk7XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4LHkgKyBzaXplKmxlbmd0aCk7XHJcblx0XHRcdFx0Ly9hcmNcclxuXHRcdFx0XHRjdHgubGluZVRvKHggLSBzaXplKmluc2lkZSwgeSArIHNpemUqKGJvdC0wLjUqd2lkdGgpKTtcclxuXHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4IC0gc2l6ZSppbnNpZGUsIHkgLSBzaXplKnRvcCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4IC0gc2l6ZSooaW5zaWRlK3dpZHRoKSwgeSAtIHNpemUqdG9wKTtcclxuXHRcdFx0XHRjdHgubGluZVRvKHggLSBzaXplKihpbnNpZGUrd2lkdGgpLCB5ICsgc2l6ZSooYm90KSk7XHRcclxuXHRcdFx0XHQvL2FyY1xyXG5cdFx0XHRcdGN0eC5saW5lVG8oeCx5ICsgc2l6ZSoobGVuZ3RoK3dpZHRoKSk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4ICsgc2l6ZSooaW5zaWRlK3dpZHRoKSwgeSArIHNpemUqYm90KTtcclxuXHRcdFx0XHRjdHgubGluZVRvKHggKyBzaXplKihpbnNpZGUrd2lkdGgpLCB5IC0gc2l6ZSp0b3ApO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQvL2N0eC5zdHJva2UoKTtcclxuXHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4ICsgc2l6ZSooaW5zaWRlK3dpZHRoKSwgeSAtIHNpemUqdG9wKTtcdFxyXG5cclxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0Y3R4LmZpbGxSZWN0KCBcclxuXHRcdFx0XHRcdHggKyBzaXplKmluc2lkZSwgXHJcblx0XHRcdFx0XHR5IC0gc2l6ZSoodG9wK3dpZHRoKjEpLFxyXG5cdFx0XHRcdFx0d2lkdGgqMSpzaXplLCBcclxuXHRcdFx0XHRcdHdpZHRoKjAuNzUqc2l6ZVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0Y3R4LmZpbGxSZWN0KCBcclxuXHRcdFx0XHRcdHggLSBzaXplKmluc2lkZSwgXHJcblx0XHRcdFx0XHR5IC0gc2l6ZSoodG9wK3dpZHRoKjEpLFxyXG5cdFx0XHRcdFx0LXdpZHRoKjEqc2l6ZSwgXHJcblx0XHRcdFx0XHR3aWR0aCowLjc1KnNpemVcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHRcdGN0eC5maWxsKCk7XHJcblxyXG5cclxuXHRcdFx0XHRcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcclxuXHRcdCBcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRjYXNlIFwidGVzdFwiOlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRjb25zdCB0b3AgPSAwLjM7XHJcblx0XHRcdFx0Y29uc3QgYm90ID0gMC42O1xyXG5cdFx0XHRcdGNvbnN0IGluc2lkZSA9IDAuMztcclxuXHRcdFx0XHRjb25zdCB3aWR0aCA9IDAuMjtcclxuXHRcdFx0XHRjb25zdCBsZW5ndGggPSAwLjc1O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHQvKlx0XHJcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGN0eC5tb3ZlVG8oeCArIHNpemUqaW5zaWRlLCB5IC0gc2l6ZSp0b3ApO1xyXG5cdFx0XHRcdGN0eC5saW5lVG8oeCArIHNpemUqaW5zaWRlLCB5ICsgc2l6ZSpib3QpXHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4LHkgKyBzaXplKmxlbmd0aClcdFx0XHRcclxuXHRcdFx0XHRjdHgubGluZVRvKHggLSBzaXplKmluc2lkZSwgeSArIHNpemUqYm90KVx0XHJcblx0XHRcdCovXHJcblx0XHRcdFxyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRjdHgubW92ZVRvKHggKyBzaXplKmluc2lkZSwgeSk7XHJcblx0XHRcdC8vXHRjdHgubGluZVRvKHggKyBzaXplKmluc2lkZSwgeSArIHNpemUqYm90KTtcclxuXHRcdFxyXG5cclxuXHJcblx0XHRcclxuLy9cdFx0XHRcdGN0eC5saW5lVG8oeCx5ICsgc2l6ZSpsZW5ndGgpXHRcdFx0XHJcblx0Ly9cdFx0XHRjdHguYXJjVG8oeCx5ICsgc2l6ZSpsZW5ndGgsIHggLSBzaXplKmluc2lkZSwgeSArIHNpemUqYm90LCAxMCk7XHJcbi8vXHRcdFx0XHRjdHgubGluZVRvKHggLSBzaXplKmluc2lkZSwgeSArIHNpemUqYm90KVx0XHJcblx0XHJcblxyXG4vL2N0eC5hcmNUbyh4LHkgKyBzaXplKmxlbmd0aCwgeCAtIHNpemUqaW5zaWRlLCB5ICsgc2l6ZSpib3QsIDEwMCk7XHJcblxyXG5jdHguYXJjVG8oICh4KSAsICh5KzEwKSAsICh4IC0gc2l6ZSppbnNpZGUpLCAoeSksIDUwKTtcclxuY3R4LmxpbmVUbyggKHggLSBzaXplKmluc2lkZSksICh5KSwgKTtcclxuXHJcblxyXG5jdHguc3Ryb2tlU3R5bGU9IFwibmF2eVwiO1xyXG5cdFx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cclxuLy9jdHguYXJjVG8oMzAsIDE5MCwgMjUsIHkgKyBzaXplKmJvdCwgNTApO1xyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG4vKlxyXG5cdFx0XHRcdGN0eC5saW5lVG8oeCAtIHNpemUqaW5zaWRlLCB5IC0gc2l6ZSp0b3ApO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGN0eC5saW5lVG8oeCAtIHNpemUqKGluc2lkZSt3aWR0aCksIHkgLSBzaXplKnRvcCk7XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4IC0gc2l6ZSooaW5zaWRlK3dpZHRoKSwgeSArIHNpemUqYm90KTtcdFxyXG5cdFx0XHRcdC8vXHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4LHkgKyBzaXplKihsZW5ndGgrd2lkdGgpKTtcdFx0XHRcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRjdHgubGluZVRvKHggKyBzaXplKihpbnNpZGUrd2lkdGgpLCB5ICsgc2l6ZSpib3QpO1xyXG5cdFx0XHRcdGN0eC5saW5lVG8oeCArIHNpemUqKGluc2lkZSt3aWR0aCksIHkgLSBzaXplKnRvcCk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRjdHguc3Ryb2tlU3R5bGU9IFwibmF2eVwiO1xyXG5cdFx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG4qL1x0XHRcdFx0XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGN0eC5tb3ZlVG8oeCx5ICsgc2l6ZSpsZW5ndGgpO1x0XHJcblx0XHRcdFx0Y3R4LmxpbmVUbyh4IC0gc2l6ZSppbnNpZGUsIHkgKyBzaXplKmJvdCk7XHRcclxuXHRcdFx0XHRjdHguc3Ryb2tlU3R5bGU9IFwiYmxhY2tcIjtcclxuXHRcdFx0XHQgXHJcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHRcdCBcclxuXHRcdFxyXG5cdFx0XHJcblx0XHQvKlxyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IGJhY2s7XHJcblx0XHRcclxuXHRcdGNvbnN0IHdpZHRoID0gMC43O1xyXG5cdFx0Y29uc3QgaGVpZ2h0ID0gMC4yO1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRjdHguZmlsbFJlY3QoeCAtIHNpemUqd2lkdGgsIHkgLSBzaXplKmhlaWdodCwgc2l6ZSp3aWR0aCoyLCBzaXplKmhlaWdodCoyKTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHQqL1xyXG5cdH1cclxuXHRcdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cclxuXHQvKlxyXG5cdHRva2VuKFwiZHVtYlwiLCAyMCwgNzAsIDkpXHJcblx0dG9rZW4oXCJueW1waG9cIiwgMjAsIDkwLCA5KVxyXG5cdHRva2VuKFwicGhlcm9cIiwgMjAsIDExMCwgOSlcclxuXHR0b2tlbihcImRvbVwiLCAyMCwgMTMwLCA5KVxyXG5cdHRva2VuKFwiZmVyXCIsIDIwLCAxNTAsIDkpXHJcblx0dG9rZW4oXCJkb21cIiwgMjAsIDE3MCwgOSlcclxuXHR0b2tlbihcImZlclwiLCAyMCwgMjIwLCA0MClcclxuXHRcclxuXHQqL1xyXG5cdGN0eC5yZXN0b3JlKCk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge2NvdmVyTmlwcGxlc0lmSGF2ZU5vQnJlYXN0c30gZnJvbSBcIi4uL2RyYXcvZHJhd1wiO1xyXG5pbXBvcnQge1xyXG4gICAgLy9zaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGFkanVzdCxcclxuXHRicmVha1BvaW50LFxyXG5cdGdldFBvaW50T25DdXJ2ZSxcclxuLypcdHJlZmxlY3QsXHJcblx0aW50ZXJwb2xhdGVDdXJ2ZSxcclxuICAgICAgYnJlYWtQb2ludFxyXG5cdCAgKi9cclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbi8vaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5cclxuaW1wb3J0IHtUb3B9IGZyb20gXCIuL3RvcHNcIjtcclxuXHJcbmltcG9ydCB7UGFudHN9IGZyb20gXCIuL3BhbnRzXCI7XHJcbmltcG9ydCB7Y2FsY0JlbHQsQWNjZXNzb3J5fSBmcm9tIFwiLi9hY2Nlc3NvcnlcIjtcclxuXHJcbmltcG9ydCB7VW5kZXJ3ZWFyfSBmcm9tIFwiLi91bmRlcndlYXJcIjtcclxuaW1wb3J0IHtjYWxjU3VwZXJCcmEsY2FsY1N1cGVyQnJhU3RyYXAsU3VwZXJCcmFDaGVzdFBhcnQsU3VwZXJCcmFHZW5pdGFsUGFydH0gZnJvbSBcIi4vc3VwZXJfdW5kZXJ3ZWFyXCI7XHJcblxyXG5pbXBvcnQge2NhbGNOZWNrfSBmcm9tIFwiLi9uZWNrbGFjZXNcIjtcclxuXHJcbmltcG9ydCB7Y2FsY0dsb3ZlfSBmcm9tIFwiLi9nbG92ZXNcIjtcclxuaW1wb3J0IHtBcm1vcixWYW1icmFjZVBhcnQsR3JlYXZlUGFydH0gZnJvbSBcIi4vYXJtb3JcIjsgXHJcblxyXG5pbXBvcnQge1xyXG5cdGdldExpbWJQb2ludHNOZWdhdGl2ZSxcclxuXHRnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQsXHJcblx0ZmluZEJldHdlZW4sXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5pbXBvcnQge0RyZXNzQnJlYXN0UGFydH0gZnJvbSBcIi4vZHJlc3NcIjtcclxuaW1wb3J0IHtjYWxjVGVlfSBmcm9tIFwiLi90b3BzXCI7XHJcblxyXG4gXHJcblxyXG4gXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiBcclxuY2xhc3MgTG9pbmNsb3RoUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5NSURSSUZULCAvLz8/IGFzYXBcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJsZWdcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgbGVnXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdGxldCB0ZW1wO1xyXG5cdFx0XHJcblx0XHQvL0JFTFRcclxuXHRcdGNvbnN0IGJlbHQgPSBjYWxjQmVsdC5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Ly9DTE9USFxyXG5cdFx0Y29uc3QgY2xvdGggPSB7fTtcclxuXHRcdFxyXG5cdFx0Ly90b3AgLSBjb3B5IG9mIGJvdHRvbSBiZWx0XHJcblx0XHRjbG90aC5pblRvcCA9IGV4dHJhY3RQb2ludChiZWx0LmluQm90KTtcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMudG9wQ292ZXJhZ2UsYmVsdC5pbkJvdCxiZWx0Lm91dEJvdCk7XHJcblx0XHRjbG90aC5vdXRUb3AgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdGNsb3RoLm91dFRvcC5jcDEgPSBiZWx0LmluQm90LmNwMTtcclxuXHRcdFx0XHJcblx0XHQvL2xlZyBjb3ZlcmFnZSBcclxuXHRcdGNvbnN0IGxvd2VzdFkgPSBmaW5kQmV0d2VlbihleC5hbmtsZS5vdXQueSxleC5oaXAueSwxLXRoaXMubGVnQ292ZXJhZ2UpXHJcblx0XHRcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMuYm90dG9tQ292ZXJhZ2UsYmVsdC5pbkJvdCxiZWx0Lm91dEJvdCk7XHJcblx0XHRjbG90aC5vdXRCb3QgPSB7XHJcblx0XHRcdHg6IHRlbXAubGVmdC5wMi54LFxyXG5cdFx0XHR5OiBsb3dlc3RZXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgwLjMsY2xvdGgub3V0VG9wLGNsb3RoLm91dEJvdCk7XHJcblx0XHRjbG90aC5vdXRCb3QuY3AxPXRlbXAubGVmdC5wMjtcclxuXHJcblx0XHRjbG90aC5vdXRCb3QuY3AxLnggKz0gdGhpcy5jdXJ2ZVg7XHJcblx0XHRjbG90aC5vdXRCb3QuY3AxLnkgKz0gdGhpcy5jdXJ2ZVk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0Ly9ib3R0b20gJiBib3R0b20gY3VydmVcclxuXHRcdGNsb3RoLmluQm90ID0ge1xyXG5cdFx0XHR4OiAtMC4xLFxyXG5cdFx0XHR5OiBsb3dlc3RZIC0gKDQqdGhpcy5ib3R0b21Db3ZlcmFnZSlcclxuXHRcdH07XHJcblx0XHRjbG90aC5pbkJvdC5jcDEgPSB7XHJcblx0XHRcdHg6IGZpbmRCZXR3ZWVuKGNsb3RoLm91dEJvdC54LGNsb3RoLmluQm90LngpLFxyXG5cdFx0XHR5OiBjbG90aC5pbkJvdC55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Y2xvdGguaW5Ub3AsXHJcblx0XHRcdGNsb3RoLm91dFRvcCxcclxuXHRcdFx0Y2xvdGgub3V0Qm90LFxyXG5cdFx0XHRjbG90aC5pbkJvdCxcclxuXHRcdCk7XHJcblx0XHQgXHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRjdHguZmlsbCgpO1x0XHRcdFxyXG5cdFx0XHJcblx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGJlbHQuaW5Ub3AsXHJcblx0XHRcdGJlbHQub3V0VG9wLFxyXG5cdFx0XHRiZWx0Lm91dE1pZCxcclxuXHRcdFx0YmVsdC5vdXRCb3QsXHJcblx0XHRcdGJlbHQuaW5Cb3QsXHJcblx0XHQpO1xyXG5cdFx0IFxyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzICBCcmFGdXJPdXRsaW5lIGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBicmEgPSBjYWxjU3VwZXJCcmEoZXgpO1xyXG4gICAgICAgIGlmIChicmEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHRcdFxyXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5mdXJXaWR0aDtcclxuXHRcdFxyXG5cdFx0Ly9CUkFcclxuXHRcdC8vbm90IHN1cmUgd2h5IHRoZXkgYXJlIGFkanVzdGVkIHRoaXMgd2F5IGJ1dCBkcmVzcyBpcyB1c2luZyB0aGlzIFxyXG4vKlxyXG5cdFRPIERPIC0gVEhFUkUgSVMgU09NRSBNRVNTIFdJVEggU1VQRVIgQlJBIC0gU09MVkUgSU4gU1VQRVJfVU5ERVJXRUFSIEFORCBBREpVU1QgSEVSRSBBQ0NPUkRJTkdMWVxyXG5cdFx0XHJcblx0XHRjb25zdCB0b3AgPSBhZGp1c3QoZXguYnJlYXN0LnRvcCwgMC4xLCAwLjIpO1xyXG5cdFx0Y29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcblx0XHRjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuMSk7XHJcblx0XHRjb25zdCBpbm5lciA9IGFkanVzdChleC5icmVhc3QuaW4sIC0wLjQsIDApO1xyXG4qL1xyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdC8qXHJcblx0XHRcdGJyYS50b3AsXHJcblx0XHRcdGJyYS5vdXQsXHJcblx0XHRcdGJyYS50aXAsXHJcblx0XHRcdGJyYS5ib3QsXHJcblx0XHRcdGJyYS5pbm5lcixcclxuXHRcdFx0Ki9cclxuXHRcdFx0YnJhLmNsZWF2YWdlLFxyXG5cdFx0XHRicmEudG9wLFxyXG5cdFx0XHRicmEub3V0LFxyXG5cdFx0KTtcclxuXHQvL1x0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyAgRmFsbGVuVG9wT3JpZyBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJjaGVzdFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRsZXQgdGVtcDtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFx0XHJcblx0XHQvL05FQ0tcclxuXHRcdGNvbnN0IG5lY2sgPSBjYWxjR29yZ2V0LmNhbGwodGhpcywgZXgpO1xyXG4gXHJcblx0XHQvL0JFTFQgXHJcblx0XHRjb25zdCBiZWx0ID0gY2FsY0JlbHQuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcdFxyXG5cdFx0Ly9ORUNLIENPTk5FQ1RJT04gXHJcblx0XHQvL3RlbXAgPSBzcGxpdEN1cnZlKDEtdGhpcy50b3BJbkNvdmVyYWdlLG5lY2sub3V0Qm90LG5lY2suaW5Cb3QpO1xyXG5cdFx0dGVtcCA9ICh0aGlzLnRvcEluQ292ZXJhZ2UgPj0gMCkgPyBzcGxpdEN1cnZlKHRoaXMudG9wSW5Db3ZlcmFnZSxleC5uZWNrLmN1c3AsZXguY29sbGFyYm9uZSkgOiBzcGxpdEN1cnZlKDErdGhpcy50b3BJbkNvdmVyYWdlLGV4Lm5lY2sudG9wLGV4Lm5lY2suY3VzcClcclxuXHRcdC8vdGVtcCA9IHNwbGl0Q3VydmUoMSt0aGlzLnRvcEluQ292ZXJhZ2UsZXgubmVjay50b3AsZXgubmVjay5jdXNwKVxyXG5cdFx0Y29uc3QgdG9wSW4gPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRjb25zdCB0b3BOZWNrID0gKHRoaXMudG9wSW5Db3ZlcmFnZSA8IDApID8gZXgubmVjay5jdXNwIDogbnVsbDtcclxuXHRcdFxyXG5cdFx0Ly90ZW1wID0gc3BsaXRDdXJ2ZSgxLXRoaXMudG9wT3V0Q292ZXJhZ2UsbmVjay5vdXRCb3QsbmVjay5pbkJvdCk7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLnRvcE91dENvdmVyYWdlLGV4Lm5lY2suY3VzcCxleC5jb2xsYXJib25lKTtcclxuXHRcdGNvbnN0IHRvcE91dCA9IHRlbXAubGVmdC5wMjtcclxuXHRcdFxyXG5cdFx0Ly9CRUxUIENPTk5FQ1RJT04gXHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmJvdEluQ292ZXJhZ2UsYmVsdC5pblRvcCxiZWx0Lm91dFRvcCk7XHJcblx0XHRjb25zdCBib3RJbiA9IHRlbXAubGVmdC5wMjtcclxuXHRcdFxyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy5ib3RPdXRDb3ZlcmFnZSxiZWx0LmluVG9wLGJlbHQub3V0VG9wKTtcclxuXHRcdGNvbnN0IGJvdE91dCA9IHRlbXAubGVmdC5wMjtcclxuXHRcdFxyXG5cdFx0Ly9NSURETEVcclxuXHRcdGNvbnN0IGNoZXN0SW4gPSBhZGp1c3QoZXguY2hlc3QubmlwcGxlcywtdGhpcy5taWRkbGUsMCk7XHJcblx0XHRjb25zdCBjaGVzdE91dCA9IGFkanVzdChleC5jaGVzdC5uaXBwbGVzLHRoaXMubWlkZGxlLDApO1xyXG5cdFx0XHJcblx0XHR0b3BJbi5jcDIgPSBjaGVzdEluO1xyXG5cdHRvcEluLmNwMi54ICo9IDEuNDtcclxuXHRcdFxyXG5cdFx0Ym90T3V0LmNwMSA9IGNoZXN0T3V0O1xyXG5cdFx0Ym90T3V0LmNwMS54ICo9IDIuMjtcclxuXHRcdFxyXG5cdFx0Y29uc3QgYmVsbHlJbiA9IGFkanVzdChleC53YWlzdCx0aGlzLmJlbGx5WCx0aGlzLmJlbGx5WSk7XHJcblx0XHRjb25zdCBiZWxseU91dCA9IGFkanVzdChleC53YWlzdCx0aGlzLmJlbGx5WCx0aGlzLmJlbGx5WSk7XHJcblx0XHRcclxuXHRcdHRvcEluLmNwMSA9IGJlbGx5SW47XHJcblx0XHRib3RPdXQuY3AyID0gYmVsbHlPdXQ7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcdFxyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdC8qXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHRib3RJbixcclxuXHRcdFx0Ym90T3V0LFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdFxyXG5cdFx0XHQqL1xyXG5cdFx0XHQgXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHR0b3BOZWNrLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90SW4sXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vTkVDSyBBR0FJTlxyXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0bmVjay5pblRvcCxcclxuXHRcdFx0bmVjay5vdXRUb3AsXHJcblx0XHRcdG5lY2subWlkLFxyXG5cdFx0XHRuZWNrLm91dEJvdCxcclxuXHRcdFx0bmVjay5pbkJvdCxcclxuXHRcdCk7XHJcblx0Ly9cdGN0eC5maWxsKCk7XHJcblx0Ly9cdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Ly9CRUxUIEFHQUlOXHJcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDtcclxuXHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDtcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0YmVsdC5pblRvcCxcclxuXHRcdFx0YmVsdC5vdXRUb3AsXHJcblx0XHRcdGJlbHQub3V0TWlkLFxyXG5cdFx0XHRiZWx0Lm91dEJvdCxcclxuXHRcdFx0YmVsdC5pbkJvdCxcclxuXHRcdFx0XHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjRmFsbGVuVG9wKGV4KXtcclxuXHRsZXQgdGVtcDtcclxuXHRcdFxyXG5cdC8vQkVMVCBcclxuXHRjb25zdCBiZWx0ID0gY2FsY0JlbHQuY2FsbCh0aGlzLCBleCk7XHJcblx0XHJcblx0Ly9ORUNLIENPTk5FQ1RJT04gXHJcblx0dGVtcCA9ICh0aGlzLnRvcEluQ292ZXJhZ2UgPj0gMCkgPyBzcGxpdEN1cnZlKHRoaXMudG9wSW5Db3ZlcmFnZSxleC5uZWNrLmN1c3AsZXguY29sbGFyYm9uZSkgOiBzcGxpdEN1cnZlKDErdGhpcy50b3BJbkNvdmVyYWdlLGV4Lm5lY2sudG9wLGV4Lm5lY2suY3VzcClcclxuXHRjb25zdCB0b3BJbiA9IHRlbXAubGVmdC5wMjtcclxuXHRjb25zdCB0b3BOZWNrID0gKHRoaXMudG9wSW5Db3ZlcmFnZSA8IDApID8gZXgubmVjay5jdXNwIDogbnVsbDtcclxuXHRcclxuXHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLnRvcE91dENvdmVyYWdlLGV4Lm5lY2suY3VzcCxleC5jb2xsYXJib25lKTtcclxuXHRjb25zdCB0b3BPdXQgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHJcblx0Ly9CRUxUIENPTk5FQ1RJT04gXHJcblx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy5ib3RJbkNvdmVyYWdlLGJlbHQuaW5Ub3AsYmVsdC5vdXRUb3ApO1xyXG5cdGNvbnN0IGJvdEluID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFxyXG5cdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMuYm90T3V0Q292ZXJhZ2UsYmVsdC5pblRvcCxiZWx0Lm91dFRvcCk7XHJcblx0Y29uc3QgYm90T3V0ID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFxyXG5cdC8vTUlERExFXHJcblx0Y29uc3QgY2hlc3RJbiA9IGFkanVzdChleC5jaGVzdC5uaXBwbGVzLC10aGlzLm1pZGRsZSwwKTtcclxuXHRjb25zdCBjaGVzdE91dCA9IGFkanVzdChleC5jaGVzdC5uaXBwbGVzLHRoaXMubWlkZGxlLDApO1xyXG5cdFxyXG5cdHRvcEluLmNwMiA9IGNoZXN0SW47XHJcblx0dG9wSW4uY3AyLnggKj0gMS40O1xyXG5cdFxyXG5cdGJvdE91dC5jcDEgPSBjaGVzdE91dDtcclxuXHRib3RPdXQuY3AxLnggKj0gMi4yO1xyXG5cdFxyXG5cdGNvbnN0IGJlbGx5SW4gPSBhZGp1c3QoZXgud2Fpc3QsdGhpcy5iZWxseVgsdGhpcy5iZWxseVkpO1xyXG5cdGNvbnN0IGJlbGx5T3V0ID0gYWRqdXN0KGV4LndhaXN0LHRoaXMuYmVsbHlYLHRoaXMuYmVsbHlZKTtcclxuXHRcclxuXHR0b3BJbi5jcDEgPSBiZWxseUluO1xyXG5cdGJvdE91dC5jcDIgPSBiZWxseU91dDtcclxuXHJcblx0XHRcclxuXHRyZXR1cm57XHJcblx0XHRiZWx0LFxyXG5cdFx0dG9wSW4sXHJcblx0XHR0b3BOZWNrLFxyXG5cdFx0dG9wT3V0LFxyXG5cdFx0Ym90T3V0LFxyXG5cdFx0Ym90SW5cclxuXHR9O1xyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyAgRmFsbGVuVG9wIGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFx0XHJcblx0XHRjb25zdCB7YmVsdCx0b3BJbix0b3BOZWNrLHRvcE91dCxib3RPdXQsYm90SW59ID0gY2FsY0ZhbGxlblRvcC5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcdFxyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHR0b3BOZWNrLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90SW4sXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHRcdC8vQkVMVCBBR0FJTlxyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuc3Ryb2tlU3R5bGU7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGJlbHQuaW5Ub3AsXHJcblx0XHRcdGJlbHQub3V0VG9wLFxyXG5cdFx0XHRiZWx0Lm91dE1pZCxcclxuXHRcdFx0YmVsdC5vdXRCb3QsXHJcblx0XHRcdGJlbHQuaW5Cb3QsXHJcblx0XHRcdFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFxyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdvcmdldFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuR0VOSVRBTFMsIC8vYmVjYXVzZSBmdW5ja2luZyBmYWxsZW4gdG9wXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK25lY2tcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAvLyAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRjb25zdCBuZWNrID0gY2FsY0dvcmdldC5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdG5lY2suaW5Ub3AsXHJcblx0XHRcdG5lY2sub3V0VG9wLFxyXG5cdFx0XHRuZWNrLm1pZCxcclxuXHRcdFx0bmVjay5vdXRCb3QsXHJcblx0XHRcdG5lY2sub3V0Qm90LFxyXG5cdFx0XHRuZWNrLmluQm90LFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuZ3Jvb3ZlKXtcclxuXHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDAuNCwgIG5lY2sub3V0Qm90LCBuZWNrLmluQm90KTtcclxuXHRcdFx0Y29uc3QgZ3Jvb3ZlQm90ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuNSwgIG5lY2suaW5Ub3AsIG5lY2sub3V0VG9wKTtcclxuXHRcdFx0Y29uc3QgZ3Jvb3ZlVG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdGdyb292ZUJvdCxcclxuXHRcdFx0XHRncm9vdmVUb3AsXHJcblx0XHRcdFx0YnJlYWtQb2ludCxcclxuXHRcdFx0XHRuZWNrLmluQm90LFxyXG5cdFx0XHRcdG5lY2suaW5Ub3AsXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGNHb3JnZXQoZXgpe1xyXG5cdGxldCB0ZW1wO1xyXG5cdGlmKHRoaXMubmVja1RvcENvdmVyYWdlIDwgMCl7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgxK3RoaXMubmVja1RvcENvdmVyYWdlLCAgZXgubmVjay50b3AsIGV4Lm5lY2suY3VzcCk7XHJcblx0fWVsc2V7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLm5lY2tUb3BDb3ZlcmFnZSwgZXgubmVjay5jdXNwLCBleC5jb2xsYXJib25lKTtcclxuXHR9XHJcblx0Y29uc3Qgb3V0VG9wID0gdGVtcC5sZWZ0LnAyO1xyXG5cdGNvbnN0IGluVG9wID0ge3g6IC0wLjEsIHk6IG91dFRvcC55LTF9O1xyXG5cdFxyXG5cdG91dFRvcC5jcDEgPSB7XHJcblx0XHR4OiBvdXRUb3AueCAqIDAuNSArIGluVG9wLnggKiAwLjUsXHJcblx0XHR5OiBpblRvcC55IFxyXG5cdH07XHJcblxyXG5cdGlmKHRoaXMuY3VydmVYKW91dFRvcC5jcDEueCArPSB0aGlzLmN1cnZlWDtcclxuXHRpZih0aGlzLmN1cnZlWSlvdXRUb3AuY3AxLnkgKz0gdGhpcy5jdXJ2ZVk7XHJcblxyXG5cdFxyXG5cdGxldCBtaWQ7XHJcblx0aWYodGhpcy5uZWNrVG9wQ292ZXJhZ2UgPCAwICYmIHRoaXMubmVja0JvdENvdmVyYWdlPjApbWlkID0gZXgubmVjay5jdXNwOy8vVE9ETyBcclxuXHRcclxuXHRpZih0aGlzLm5lY2tCb3RDb3ZlcmFnZSA8IDApe1xyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUoMSt0aGlzLm5lY2tCb3RDb3ZlcmFnZSwgIGV4Lm5lY2sudG9wLCBleC5uZWNrLmN1c3ApO1xyXG5cdH1lbHNle1xyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy5uZWNrQm90Q292ZXJhZ2UsIGV4Lm5lY2suY3VzcCwgZXguY29sbGFyYm9uZSk7XHJcblx0fVxyXG5cdGNvbnN0IG91dEJvdCAgPSB0ZW1wLmxlZnQucDI7XHJcblxyXG5cdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMuY2xlYXZhZ2VDb3ZlcmFnZSwgZXgubmVjay5jdXNwLCBleC5ncm9pbik7XHJcblx0Y29uc3QgaW5Cb3QgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRpbkJvdC54ID0gLTAuMTtcclxuXHJcblx0aW5Cb3QuY3AxID0ge1xyXG5cdFx0eDogb3V0Qm90LnggKiAwLjUgKyBpbkJvdC54ICogMC41LFxyXG5cdFx0eTogaW5Cb3QueSBcclxuXHR9O1xyXG5cclxuXHRpZih0aGlzLmN1cnZlWClvdXRCb3QuY3AxLnggKz0gdGhpcy5jdXJ2ZVg7XHJcblx0aWYodGhpcy5jdXJ2ZVkpb3V0Qm90LmNwMS55ICs9IHRoaXMuY3VydmVZO1xyXG5cdFx0XHJcblx0cmV0dXJuIHtcclxuXHRcdGluVG9wLFxyXG5cdFx0bWlkLFxyXG5cdFx0b3V0VG9wLFxyXG5cdFx0b3V0Qm90LFxyXG5cdFx0aW5Cb3QsXHJcblx0fTtcclxufVxyXG5cclxuLypcclxuZXhwb3J0IGNsYXNzIExvaW5jbG90aCBleHRlbmRzIFBhbnRzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHdhaXN0Q292ZXJhZ2U6IDAuNDIsXHJcblx0XHRcdGJlbHRXaWR0aDogNyxcclxuXHRcdFx0YmVsdEN1cnZlOiAtNyxcclxuXHRcdFx0XHJcblx0XHRcdHRoaWNrbmVzczogMSxcclxuXHRcdFx0XHJcblx0XHRcdHRvcENvdmVyYWdlOiAwLjgsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjUsXHJcblx0XHRcdGJvdHRvbUNvdmVyYWdlOiAwLjE0LFxyXG5cdFx0XHRcclxuXHRcdFx0Y3VydmVYOiAtMTYsXHJcblx0XHRcdGN1cnZlWTogMTQsXHJcblx0XHRcclxuXHRcdFx0aGlnaGxpZ2h0OlwiaHNsYSgzMywgODAlLCAxMCUsIDEpXCIsXHJcblxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cdFxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgzMywgNDUlLCAzNSUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgcmV0dXJuIFwiaHNsYSgzMywgNDUlLCAyNSUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0IFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvaW5jbG90aFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvaW5jbG90aFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcbiovXHJcblxyXG5leHBvcnQgY2xhc3MgQmFyYmFyaWNCcmEgZXh0ZW5kcyBVbmRlcndlYXIge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0ZnVyV2lkdGg6IDQsXHJcblx0XHRcdGhpZ2hsaWdodDpcImhzbGEoMzMsIDgwJSwgMTAlLCAxKVwiLFxyXG5cdFx0XHRcclxuXHRcdFx0c2hvd1N0cmFwOmZhbHNlLFxyXG5cdFx0XHRzdHJhcFdpZHRoOiAyLFxyXG5cdFx0XHRuZWNrQ292ZXJhZ2U6IDAuNyxcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjUsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cdFxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgzMywgNDUlLCAzNSUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgcmV0dXJuIFwiaHNsYSgzMywgNDUlLCAyNSUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0Z2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCcmFGdXJPdXRsaW5lXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlckJyYUNoZXN0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJCcmFHZW5pdGFsUGFydFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHb3JnZXQgZXh0ZW5kcyBBY2Nlc3Nvcnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Y3VydmVYOiAwLFxyXG5cdFx0XHRjdXJ2ZVk6IDAsXHJcblx0XHRcdGdyb292ZTogZmFsc2UsXHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMTYsXHJcblx0XHRcdG5lY2tUb3BDb3ZlcmFnZTogLTAuMSxcclxuXHRcdFx0bmVja0JvdENvdmVyYWdlOiAwLjgxLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMzMsIDQ1JSwgMzUlLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgIHJldHVybiBcImhzbGEoMzMsIDQ1JSwgMjUlLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogR29yZ2V0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIFxyXG5cdFx0ICAgXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBGYWxsZW4gZXh0ZW5kcyBUb3Age1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHJcblx0XHRcdHRvcEluQ292ZXJhZ2U6IDAsIFxyXG5cdFx0XHR0b3BPdXRDb3ZlcmFnZTogMC4yMixcclxuXHRcdFx0XHJcblx0XHRcdGJvdEluQ292ZXJhZ2U6IDAuMDIsIFxyXG5cdFx0XHRib3RPdXRDb3ZlcmFnZTogMC42OSxcclxuXHRcdFx0XHJcblx0XHRcdG1pZGRsZTogMyxcclxuXHRcdFx0XHJcblx0XHRcdGJlbGx5WDogLTE1LFxyXG5cdFx0XHRiZWxseVk6IC04LFxyXG5cdFx0XHRcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4zLFxyXG5cdFx0XHRiZWx0V2lkdGg6IDIsXHJcblx0XHRcdGJlbHRDdXJ2ZTogLTcsXHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDM1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDI1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEZhbGxlblRvcFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIFxyXG5cdFx0ICAgXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZhbGxlbk9yaWcgZXh0ZW5kcyBUb3Age1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMTEsXHJcbi8vXHRuZWNrQ292ZXJhZ2U6IDAuMDUsXHJcbi8vXHRuZWNrV2lkdGg6IDAsXHJcblx0XHRcdG5lY2tUb3BDb3ZlcmFnZTogLTEsXHJcblx0XHRcdG5lY2tCb3RDb3ZlcmFnZTogMSxcclxuXHRcdFx0XHJcblx0XHRcdHRvcEluQ292ZXJhZ2U6IDAsIFxyXG5cdFx0XHR0b3BPdXRDb3ZlcmFnZTogMC41LFxyXG5cdFx0XHRcclxuXHRcdFx0Ym90SW5Db3ZlcmFnZTogMCwgXHJcblx0XHRcdGJvdE91dENvdmVyYWdlOiAwLjUsXHJcblx0XHRcdFxyXG5cdFx0XHRtaWRkbGU6IDUsXHJcblx0XHRcdFxyXG5cdFx0XHRiZWxseVg6IC0xNSxcclxuXHRcdFx0YmVsbHlZOiAtOCxcclxuXHRcdFx0XHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNDIsXHJcblx0XHRcdGJlbHRXaWR0aDogMyxcclxuXHRcdFx0YmVsdEN1cnZlOiAtNyxcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdGZ1cldpZHRoOiA0LFxyXG5cdFx0XHRoaWdobGlnaHQ6IFwieWVsbG93XCIsXHJcblx0XHRcdFxyXG5cdFx0XHRzaG93U3RyYXA6ZmFsc2UsXHJcblx0XHRcdHN0cmFwV2lkdGg6IDIsXHJcblx0XHRcdG5lY2tDb3ZlcmFnZTogMC43LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDM1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDI1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEZhbGxlblRvcFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIFxyXG5cdFx0ICAgXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiBcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENpbmd1bHVtUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5NSURSSUZULCBcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuXHRcdFx0cmVmbGVjdFx0XHQ6dHJ1ZSwgXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFsgXCJwYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyBjaGVzdFwiLCBcImNsb3RoaW5nUGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIiAgLypcImNsb3RoaW5nUGFydHMgbGVnXCIsXCJjbG90aGluZ1BhcnRzIGdyb2luXCIqL10sXHJcblx0XHRcdGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImNsb3RoaW5nUGFydHMgdG9yc29cIl0sXHJcbi8vXHRcdFx0IGFib3ZlUGFydHM6IFsgXCJwYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiICwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIixcInBhcnRzIGNoZXN0XCIsIFwiY2xvdGhpbmdQYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiICAvKlwiY2xvdGhpbmdQYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiovXSxcclxuXHRcdH0sXHJcblx0XHR7XHRcclxuXHRcdFx0XHJcbiAgICAgICAgfSxcclxuXHRcdC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge2luVG9wLG91dFRvcCxvdXRNaWQsb3V0Qm90LGluQm90fSA9IGNhbGNCZWx0LmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcblx0XHRcclxuXHQvL1x0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XHJcblx0Ly9cdGNvbnN0IHBvaW50eSA9IDU7XHJcblx0XHQvKlxyXG5cdFx0bGV0IGEgPSBnZXRQb2ludE9uQ3VydmUoMS4zLG91dEJvdCxpbkJvdClcclxuXHRcdGxldCBiID0gZ2V0UG9pbnRPbkN1cnZlKDAuNyxvdXRCb3QsaW5Cb3QpXHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRjb25zdCBsZW5ndGggPSAyMDtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRkcmF3Rmlyc3RQbGF0ZShhLGIpO1xyXG5cdFx0Ki9cclxuXHRcdGNvbnN0IHBvaW50eSA9IHRoaXMucG9pbnR5O1xyXG5cdFx0Y29uc3QgaG93TWFueSA9IE1hdGguZmxvb3IodGhpcy5udW1iZXIvMik7XHJcblx0XHRjb25zdCBhdmFpbGFibGVXaWR0aCA9IDEgLSAoKHRoaXMubWFyZ2luLzEwKSArICgodGhpcy5zcGFjZS8xMCkgKiBob3dNYW55KSApOyBcclxuXHRcdGNvbnN0IHdpZHRoID0gYXZhaWxhYmxlV2lkdGgvKGhvd01hbnkrMC41KTtcclxuXHRcdFxyXG5cdC8vY29uc29sZS5sb2codGhpcyk7XHJcblx0XHJcblx0XHRcdGNvbnN0IGEgPSBnZXRQb2ludE9uQ3VydmUoMSsod2lkdGgvMiksb3V0Qm90LGluQm90KVxyXG5cdFx0XHRjb25zdCBiID0gZ2V0UG9pbnRPbkN1cnZlKDEtKHdpZHRoLzIpLG91dEJvdCxpbkJvdClcclxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGggKiAoMSsodGhpcy5jcmVzdC8xMCkpXHJcblx0XHRcdGRyYXdGaXJzdFBsYXRlKGEsYixsZW5ndGgpO1xyXG5cdFxyXG5cdFx0XHJcblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgaG93TWFueTsgaSsrKXtcclxuXHRcdFx0Y29uc3QgYVBvc2l0aW9uID0gMSAtICggIChpKndpZHRoKSArICgwLjUqd2lkdGgpICsgKCgxK2kpKih0aGlzLnNwYWNlLzEwKSkgICk7XHJcblx0XHRcdGNvbnN0IGEgPSBnZXRQb2ludE9uQ3VydmUoYVBvc2l0aW9uLG91dEJvdCxpbkJvdCk7XHJcblx0XHRcdGNvbnN0IGIgPSBnZXRQb2ludE9uQ3VydmUoYVBvc2l0aW9uLXdpZHRoLG91dEJvdCxpbkJvdCk7XHJcblx0XHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoICogKCAgMSAtICggKHRoaXMuY3Jlc3QvMTApKigxK2kpICkgIClcclxuXHRcdFx0ZHJhd1BsYXRlKGEsYixsZW5ndGgpO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRmdW5jdGlvbiBkcmF3Rmlyc3RQbGF0ZShhLGIsbGVuZ3RoKXtcclxuXHQvL1x0XHRjb25zb2xlLmxvZyhcIkRSQVcgUExBVEVcIik7XHJcbiBcdFx0XHRcclxuXHRcdFx0Y29uc3QgYyA9IGFkanVzdChiLDAsLWxlbmd0aCk7XHJcblx0XHRcdGNvbnN0IGQgPSBhZGp1c3QoZmluZEJldHdlZW4oYSxiKSwwLC0obGVuZ3RoK3BvaW50eSkpO1xyXG5cdFx0XHRjb25zdCBlID0gYWRqdXN0KGEsMCwtbGVuZ3RoKTtcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IGYgPSBhZGp1c3QoZmluZEJldHdlZW4oYSxiKSwwLDApO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxiLGMsZCxmKTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsYixjLGQpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGZ1bmN0aW9uIGRyYXdQbGF0ZShhLGIsbGVuZ3RoKXtcclxuXHQvL2NvbnNvbGUubG9nKFwiRFJBVyBQTEFURVwiKTtcclxuIFx0XHJcblx0XHRcdGNvbnN0IGMgPSBhZGp1c3QoYiwwLC1sZW5ndGgpO1xyXG5cdC8qXHRcclxuY29uc29sZS5sb2coXCJmYlwiKVx0XHRcclxuY29uc29sZS5sb2coYSlcclxuY29uc29sZS5sb2coYilcclxuKi9cclxuXHRcdFx0Y29uc3QgZCA9IGFkanVzdChmaW5kQmV0d2VlbihhLGIpLDAsLShsZW5ndGgrcG9pbnR5KSk7XHJcblx0XHRcdGNvbnN0IGUgPSBhZGp1c3QoYSwwLC1sZW5ndGgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxiLGMsZCxlLGEpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly9CRUxUXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRpblRvcCxcclxuXHRcdFx0b3V0VG9wLFxyXG5cdFx0XHRvdXRNaWQsXHJcblx0XHRcdG91dEJvdCxcclxuXHRcdFx0aW5Cb3QsXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbiBcclxuXHJcblxyXG4vKipcclxuICogQmFzZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG4gXHJcblxyXG5leHBvcnQgY2xhc3MgR3JlYXZlTGVmdCBleHRlbmRzIEFybW9yIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjU0LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdyZWF2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR3JlYXZlUmlnaHQgZXh0ZW5kcyBBcm1vciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC41NCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdyZWF2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcbiBcclxuXHJcblxyXG5cclxuIFxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDaW5ndWx1bSBleHRlbmRzIEFybW9yIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdG51bWJlcjogNSxcclxuXHRcdFx0c3BhY2U6IDAsXHJcblx0XHRcdG1hcmdpbjogMCxcclxuXHRcdFx0bGVuZ3RoOiAzMCxcclxuXHRcdFx0cG9pbnR5OiA1LFxyXG5cdFx0XHRjcmVzdDogMSxcclxuXHRcdFx0XHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuMixcclxuXHRcdFx0YmVsdFdpZHRoOiA3LFxyXG5cdFx0XHRiZWx0Q3VydmU6LTYsXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ2luZ3VsdW1QYXJ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG4vKlxyXG4qL1xyXG4gXHJcbmV4cG9ydCBjbGFzcyBWYW1icmFjZUxlZnQgZXh0ZW5kcyBBcm1vciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGFybUNvdmVyYWdlOjAuNzUsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLCAwJSwgMjglLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCl7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFZhbWJyYWNlUGFydCxcclxuICAgICAgICAgICAgfVx0XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZhbWJyYWNlUmlnaHQgZXh0ZW5kcyBBcm1vciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGFybUNvdmVyYWdlOjAuNzUsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLCAwJSwgMjglLCAxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCl7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICBcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFZhbWJyYWNlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuXHRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Qm9keVBhcnR9IGZyb20gXCIuL3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIGNsYW1wLFxyXG4gICAgcmVmbGVjdCxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7RGVjb3JhdGl2ZVBhcnR9IGZyb20gXCIuLi9kZWNvcmF0aXZlX3BhcnRzL2RlY29yYXRpdmVfcGFydFwiO1xyXG5pbXBvcnQge2FkanVzdENvbG9yfSBmcm9tIFwiLi4vdXRpbC91dGlsaXR5XCI7XHJcbmltcG9ydCB7cmVxdWlyZVBhcnR9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuXHJcbmNsYXNzIFBlbmlzIGV4dGVuZHMgQm9keVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgICAgOiBcInBlbmlzXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICAgIDogTGF5ZXIuTUFMRV9HRU5JVEFMUyxcclxuICAgICAgICAgICAgY292ZXJDb25jZWFsOiBbXCJncm9pblwiLCBcImxlZnQgbGVnXCJdLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICA6IFtcInRlc3RpY2xlc1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMaW5lV2lkdGgoYXZhdGFyKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYW1wKGF2YXRhci5nZXREaW0oXCJwZW5pc1NpemVcIikgLyAxMDAsIDAuOCwgMS41KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBQZW5pc0h1bWFuIGV4dGVuZHMgUGVuaXMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCJpbmhlcml0XCI7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG5cclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBwZW5pcyA9IGV4LnBlbmlzID0ge307XHJcblxyXG4gICAgICAgICAgICBwZW5pcy5jZW50ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgeTogZXguZ3JvaW4ueSArIDNcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHBlbmlzLnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHBlbmlzLmNlbnRlci54ICsgMSArIG1vZHMucGVuaXNUaGlja25lc3MgKiAwLjAxICsgdGhpcy5wZW5pc1NpemUgKiAwLjAwNSxcclxuICAgICAgICAgICAgICAgIHk6IHBlbmlzLmNlbnRlci55ICsgdGhpcy5wZW5pc1NpemUgKiAwLjAwNixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcGVuaXMuYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogcGVuaXMudG9wLnggLVxyXG4gICAgICAgICAgICAgICAgICAgY2xhbXAoMC41IC0gbW9kcy5wZW5pc1RoaWNrbmVzcyAqIDAuMDEgLSB0aGlzLnBlbmlzU2l6ZSAqIDAuMDAwMSwgMCwgNSksXHJcbiAgICAgICAgICAgICAgICB5OiBwZW5pcy50b3AueSAtIHRoaXMucGVuaXNTaXplICogMC4xXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBwZW5pcy50aXAgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBwZW5pcy5jZW50ZXIueCxcclxuICAgICAgICAgICAgICAgIHk6IHBlbmlzLmJvdC55IC0gMSAtIHRoaXMucGVuaXNTaXplICogMC4wMVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcGVuaXMuYm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhwZW5pcy50b3AsXHJcbiAgICAgICAgICAgICAgICBwZW5pcy5ib3QsXHJcbiAgICAgICAgICAgICAgICAwLjQsXHJcbiAgICAgICAgICAgICAgICBjbGFtcCgwLjUgKyBtb2RzLnBlbmlzVGhpY2tuZXNzICogMC4wMSAtIHRoaXMucGVuaXNTaXplICogMC4wMDIsIDAsIDMpKTtcclxuICAgICAgICAgICAgcGVuaXMudGlwLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHBlbmlzLmJvdC54ICsgdGhpcy5wZW5pc1NpemUgKiAwLjAwNCxcclxuICAgICAgICAgICAgICAgIHk6IHBlbmlzLmJvdC55IC0gdGhpcy5wZW5pc1NpemUgKiAwLjAwNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBwZW5pcy50aXAuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogcGVuaXMudGlwLnggKyAxLFxyXG4gICAgICAgICAgICAgICAgeTogcGVuaXMudGlwLnkgKyAwLjJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZWZsZWN0ZWRCb3QgPSByZWZsZWN0KGV4LnBlbmlzLmJvdCk7XHJcbiAgICAgICAgbGV0IHJlZmxlY3RlZFRvcCA9IHJlZmxlY3QoZXgucGVuaXMudG9wKTtcclxuICAgICAgICByZWZsZWN0ZWRCb3QuY3AxID0gcmVmbGVjdChleC5wZW5pcy50aXAuY3AyKTtcclxuICAgICAgICByZWZsZWN0ZWRCb3QuY3AyID0gcmVmbGVjdChleC5wZW5pcy50aXAuY3AxKTtcclxuICAgICAgICByZWZsZWN0ZWRUb3AuY3AxID0gcmVmbGVjdChleC5wZW5pcy5ib3QuY3AxKTtcclxuICAgICAgICByZXR1cm4gKHRoaXMucGVuaXNTaXplID4gMTApID8gW1xyXG4gICAgICAgICAgICBleC5wZW5pcy50b3AsXHJcbiAgICAgICAgICAgIGV4LnBlbmlzLmJvdCxcclxuICAgICAgICAgICAgZXgucGVuaXMudGlwLFxyXG4gICAgICAgICAgICByZWZsZWN0ZWRCb3QsXHJcbiAgICAgICAgICAgIHJlZmxlY3RlZFRvcCxcclxuICAgICAgICBdIDogW107XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBQZW5pc0hlYWQgZXh0ZW5kcyBEZWNvcmF0aXZlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgICA6IFwicGVuaXNcIixcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgOiBMYXllci5NQUxFX0dFTklUQUxTLFxyXG4gICAgICAgICAgICBjb3ZlckNvbmNlYWw6IFtcImdyb2luXCIsIFwibGVmdCBsZWdcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGluZVdpZHRoKGF2YXRhcikge1xyXG4gICAgICAgIHJldHVybiBjbGFtcChhdmF0YXIuZ2V0RGltKFwicGVuaXNTaXplXCIpIC8gMTAwLCAwLjgsIDEuNSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUGVuaXNIZWFkSHVtYW4gZXh0ZW5kcyBQZW5pc0hlYWQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoaWdub3JlLCBleCkge1xyXG4gICAgICAgIHJldHVybiBhZGp1c3RDb2xvcihleC5iYXNlU3Ryb2tlLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtNSxcclxuICAgICAgICAgICAgICAgIHM6IC01XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZShpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmJhc2VTdHJva2UsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGw6IC01LFxyXG4gICAgICAgICAgICAgICAgczogLTNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmIChtb2RzLmFyb3VzYWwgPCA1MCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXF1aXJlUGFydChcInBlbmlzXCIsIGV4KTtcclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGV4LnBlbmlzLnRpcHRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LnBlbmlzLmNlbnRlci54LFxyXG4gICAgICAgICAgICAgICAgeTogZXgucGVuaXMuYm90LnkgKyB0aGlzLnBlbmlzU2l6ZSAqIDAuMDAzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYm90ID0gZXh0cmFjdFBvaW50KGV4LnBlbmlzLmJvdCk7XHJcbiAgICAgICAgYm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhleC5wZW5pcy50aXB0b3AsIGJvdCwgMC41LCAwLjUpO1xyXG4gICAgICAgIGxldCByZWZsZWN0ZWRCb3QgPSByZWZsZWN0KGV4LnBlbmlzLmJvdCk7XHJcbiAgICAgICAgcmVmbGVjdGVkQm90LmNwMSA9IHJlZmxlY3QoZXgucGVuaXMudGlwLmNwMik7XHJcbiAgICAgICAgcmVmbGVjdGVkQm90LmNwMiA9IHJlZmxlY3QoZXgucGVuaXMudGlwLmNwMSk7XHJcbiAgICAgICAgZXgucGVuaXMudGlwdG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhyZWZsZWN0ZWRCb3QsIGV4LnBlbmlzLnRpcHRvcCwgMC41LCAwLjUpO1xyXG4gICAgICAgIHJldHVybiBbZXgucGVuaXMudGlwdG9wLCBib3QsIGV4LnBlbmlzLnRpcCwgcmVmbGVjdGVkQm90LCBleC5wZW5pcy50aXB0b3BdO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge3NoYWRpbmdNZWRpdW0sIFNoYWRpbmdQYXJ0fSBmcm9tIFwiLi4vZHJhdy9zaGFkaW5nX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Qm9keVBhcnR9IGZyb20gXCIuL3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGFkanVzdFBvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGNsb25lLFxyXG4gICAgYWRqdXN0LFxyXG4gICAgYnJlYWtQb2ludCxcclxuICAgIGVuZFBvaW50LFxyXG4gICAgcmV2ZXJzZURyYXdQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICByb3RhdGVQb2ludHNcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5jbGFzcyBMZWZ0QXJtU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgOiBcImxlZnQgYXJtXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5BUk1TLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNoYWRpbmdNZWRpdW07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgICAgICBjb25zdCBbZWxib3csIGFybXBpdF0gPSBhZGp1c3RQb2ludHModGhpcy5hcm1UaGlja25lc3MgKiAwLjA3LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICBleC5lbGJvdy5pbixcclxuICAgICAgICAgICAgZXguYXJtcGl0KTtcclxuXHJcbiAgICAgICAgLy8gd2UnbGwgc3RhcnQgc2hhZGluZyBmcm9tIGhhbmQgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgaWYgKGV4LmhhbmQpIHtcclxuICAgICAgICAgICAgY29uc3QgW3dyaXN0LCB0aHVtYk91dF0gPSBhZGp1c3RQb2ludHModGhpcy5hcm1UaGlja25lc3MgKiAwLjAyLFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgIGV4LndyaXN0LmluLFxyXG4gICAgICAgICAgICAgICAgZXgudGh1bWIub3V0KTtcclxuICAgICAgICAgICAgY29uc3QgdGh1bWJUaXAgPSBleHRyYWN0UG9pbnQoZXgudGh1bWIudGlwKTtcclxuXHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHRodW1iVGlwLCB0aHVtYk91dCwgd3Jpc3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdyaXN0ID0gZXh0cmFjdFBvaW50KGV4LndyaXN0LmluKTtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2god3Jpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGxldCBpblRvcDtcclxuICAgICAgICBpZiAoZXguYnJlYXN0KSB7XHJcbiAgICAgICAgICAgIGluVG9wID0gZXh0cmFjdFBvaW50KGV4LmJyZWFzdC50b3ApO1xyXG4gICAgICAgICAgICBpblRvcC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYXJtcGl0LCBpblRvcCwgMC41LCAtNCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5Ub3AgPSBleHRyYWN0UG9pbnQoZXguYXJtcGl0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFybXBpdE91dCA9IGV4dHJhY3RQb2ludChleC5hcm1waXQpO1xyXG4gICAgICAgIGNvbnN0IGVsYm93SW4gPSBleHRyYWN0UG9pbnQoZXguZWxib3cuaW4pO1xyXG4gICAgICAgIGVsYm93SW4uY3AxID0gY2xvbmUoZXguYXJtcGl0LmNwMik7XHJcbiAgICAgICAgZWxib3dJbi5jcDIgPSBjbG9uZShleC5hcm1waXQuY3AxKTtcclxuICAgICAgICBjb25zdCB3cmlzdEluID0gZXh0cmFjdFBvaW50KGV4LndyaXN0LmluKTtcclxuICAgICAgICB3cmlzdEluLmNwMSA9IGNsb25lKGV4LmVsYm93LmluLmNwMik7XHJcbiAgICAgICAgd3Jpc3RJbi5jcDIgPSBjbG9uZShleC5lbGJvdy5pbi5jcDEpO1xyXG4gICAgICAgIHBvaW50cy5wdXNoKGVsYm93LCBhcm1waXQsIGluVG9wLCBhcm1waXRPdXQsIGVsYm93SW4sIHdyaXN0SW4pO1xyXG5cclxuICAgICAgICBpZiAoZXguaGFuZCkge1xyXG4gICAgICAgICAgICBjb25zdCB0aHVtYk91dCA9IGV4dHJhY3RQb2ludChleC50aHVtYi5vdXQpO1xyXG4gICAgICAgICAgICB0aHVtYk91dC5jcDEgPSBjbG9uZShleC53cmlzdC5pbi5jcDIpO1xyXG4gICAgICAgICAgICB0aHVtYk91dC5jcDIgPSBjbG9uZShleC53cmlzdC5pbi5jcDEpO1xyXG4gICAgICAgICAgICBjb25zdCB0aHVtYlRpcCA9IGV4dHJhY3RQb2ludChleC50aHVtYi50aXApO1xyXG4gICAgICAgICAgICB0aHVtYlRpcC5jcDEgPSBjbG9uZShleC50aHVtYi5vdXQuY3AyKTtcclxuICAgICAgICAgICAgdGh1bWJUaXAuY3AyID0gY2xvbmUoZXgudGh1bWIub3V0LmNwMSk7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHRodW1iT3V0LCB0aHVtYlRpcCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoYW5kIHRpcCB0byBwYWxtIHNoYWRvd1xyXG4gICAgICAgICAgICBjb25zdCBoYW5kVGlwID0gZXh0cmFjdFBvaW50KGV4LmhhbmQudGlwKTtcclxuICAgICAgICAgICAgY29uc3QgaGFuZFBhbG0gPSBjbG9uZShleC5oYW5kLnBhbG0pO1xyXG4gICAgICAgICAgICBoYW5kVGlwLmNwMSA9IGFkanVzdChleC5oYW5kLnBhbG0uY3AyLCB0aGlzLmhhbmRTaXplICogMC4wMSwgMCk7XHJcbiAgICAgICAgICAgIGhhbmRUaXAuY3AyID0gYWRqdXN0KGV4LmhhbmQucGFsbS5jcDEsIHRoaXMuaGFuZFNpemUgKiAwLjAxLCAwKTtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goYnJlYWtQb2ludCwgaGFuZFRpcCwgaGFuZFBhbG0sIGhhbmRUaXAsIGVuZFBvaW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBMZWZ0QXJtVW5kZXJTaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICA6IFwiK2xlZnQgYXJtXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5GUk9OVCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAoZXguaGFuZCkge1xyXG4gICAgICAgICAgICBjb25zdCBwYWxtID0gYWRqdXN0KGV4LmhhbmQucGFsbSwgLTAuNSwgLTIpO1xyXG4gICAgICAgICAgICBjb25zdCB0aHVtYlRpcCA9IGFkanVzdChleC50aHVtYi50aXAsIC0wLjUsIC0xLjUpO1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaChcclxuICAgICAgICAgICAgICAgIGV4LmhhbmQudGlwLFxyXG4gICAgICAgICAgICAgICAgcGFsbSxcclxuICAgICAgICAgICAgICAgIHRodW1iVGlwLFxyXG4gICAgICAgICAgICAgICAgLi4uYWRqdXN0UG9pbnRzKC0yLCAtMSwgZXgudGh1bWIub3V0LCBleC53cmlzdC5pbikpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaChleC53cmlzdC5pbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlbGJvdyA9IGFkanVzdChleC5lbGJvdy5pbiwgLTIsIC0xKTtcclxuXHJcbiAgICAgICAgY29uc3QgYXJtcGl0ID0gZXh0cmFjdFBvaW50KGV4LmFybXBpdCk7XHJcbiAgICAgICAgYXJtcGl0LmNwMSA9IGFkanVzdChleC5hcm1waXQuY3AxLCAtMSwgLTAuNSk7XHJcbiAgICAgICAgYXJtcGl0LmNwMiA9IGFkanVzdChleC5hcm1waXQuY3AyLCAtMiwgLTAuNSk7XHJcblxyXG4gICAgICAgIHBvaW50cy5wdXNoKGVsYm93LCBhcm1waXQpO1xyXG5cclxuICAgICAgICAvLyBmaW5pc2ggdXAgdGhlIHNoYWRvdyBvbiB0aGUgb3RoZXIgZGlyZWN0aW9uXHJcbiAgICAgICAgcG9pbnRzLnB1c2goZXh0cmFjdFBvaW50KGV4LmVsYm93Lm91dCksIGV4LndyaXN0Lm91dCk7XHJcbiAgICAgICAgaWYgKGV4LmhhbmQpIHtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goZXguaGFuZC5rbnVja2xlLCBleC5oYW5kLnRpcCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goZXh0cmFjdFBvaW50KGV4LndyaXN0LmluKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9pbnRzO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgUmlnaHRBcm1TaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICA6IFwicmlnaHQgYXJtXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5BUk1TLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNoYWRpbmdNZWRpdW07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgICAgICBjb25zdCBjb2xsYXJib25lID0gZXh0cmFjdFBvaW50KGV4LmNvbGxhcmJvbmUpO1xyXG4gICAgICAgIGNvbnN0IFtkZWx0b2lkcywgc2hvdWxkZXIsIGVsYm93XSA9IGFkanVzdFBvaW50cygtdGhpcy5hcm1UaGlja25lc3MgKiAwLjA1LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICBleC5kZWx0b2lkcyxcclxuICAgICAgICAgICAgZXguc2hvdWxkZXIsXHJcbiAgICAgICAgICAgIGV4LmVsYm93Lm91dFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcG9pbnRzLnB1c2goY29sbGFyYm9uZSwgZGVsdG9pZHMsIHNob3VsZGVyLCBlbGJvdyk7XHJcblxyXG4gICAgICAgIGlmIChleC5oYW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdyaXN0ID0gYWRqdXN0KGV4LndyaXN0Lm91dCwgLXRoaXMuYXJtVGhpY2tuZXNzICogMC4wMywgMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRLbnVja2xlID0gYWRqdXN0KGV4LmhhbmQua251Y2tsZSwgLXRoaXMuYXJtVGhpY2tuZXNzICogMC4wMiwgMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRUaXAgPSBjbG9uZShleC5oYW5kLnRpcCk7XHJcbiAgICAgICAgICAgIGhhbmRUaXAuY3AxID0gYWRqdXN0KGV4LmhhbmQudGlwLmNwMSwgLXRoaXMuYXJtVGhpY2tuZXNzICogMC4wMiwgMCk7XHJcblxyXG4gICAgICAgICAgICBwb2ludHMucHVzaCh3cmlzdCwgaGFuZEtudWNrbGUpO1xyXG4gICAgICAgICAgICBpZiAoZXguaGFuZC5maXN0KSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChhZGp1c3QoZXguaGFuZC5maXN0LCAtdGhpcy5hcm1UaGlja25lc3MgKiAwLjAyLCAxKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goaGFuZFRpcCk7XHJcblxyXG4gICAgICAgICAgICAvLyBoZWFkIGJhY2sgdXAgdG8gY29sbGFyYm9uZVxyXG4gICAgICAgICAgICBpZiAoZXguaGFuZC5maXN0KSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChyZXZlcnNlRHJhd1BvaW50KGV4LmhhbmQuZmlzdCwgZXguaGFuZC50aXApKTtcclxuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHJldmVyc2VEcmF3UG9pbnQoZXguaGFuZC5rbnVja2xlLCBleC5oYW5kLmZpc3QpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHJldmVyc2VEcmF3UG9pbnQoZXguaGFuZC5rbnVja2xlLCBleC5oYW5kLnRpcCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHJldmVyc2VEcmF3UG9pbnQoZXgud3Jpc3Qub3V0LCBleC5oYW5kLmtudWNrbGUpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB3cmlzdCA9IGV4dHJhY3RQb2ludChleC53cmlzdC5vdXQpO1xyXG4gICAgICAgICAgICB3cmlzdC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBlbGJvdy54LFxyXG4gICAgICAgICAgICAgICAgeTogZWxib3cueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3cmlzdC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiB3cmlzdC54IC0gMixcclxuICAgICAgICAgICAgICAgIHk6IHdyaXN0LnlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2god3Jpc3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb3V0UG9pbnRzID0gW107XHJcbiAgICAgICAgb3V0UG9pbnRzLnB1c2gocmV2ZXJzZURyYXdQb2ludChleC5lbGJvdy5vdXQsIGV4LndyaXN0Lm91dCksXHJcbiAgICAgICAgICAgIHJldmVyc2VEcmF3UG9pbnQoZXguZWxib3cub3V0LCBleC5lbGJvdy5vdXQpLFxyXG4gICAgICAgICAgICByZXZlcnNlRHJhd1BvaW50KGV4LnNob3VsZGVyLCBleC5lbGJvdy5vdXQpKTtcclxuXHJcbiAgICAgICAgaWYgKGV4LmRlbHRvaWRzKSB7XHJcbiAgICAgICAgICAgIG91dFBvaW50cy5wdXNoKHJldmVyc2VEcmF3UG9pbnQoZXguZGVsdG9pZHMsIGV4LnNob3VsZGVyKSxcclxuICAgICAgICAgICAgICAgIHJldmVyc2VEcmF3UG9pbnQoZXguY29sbGFyYm9uZSwgZXguZGVsdG9pZHMpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRQb2ludHMucHVzaChyZXZlcnNlRHJhd1BvaW50KGV4LmNvbGxhcmJvbmUsIGV4LnNob3VsZGVyKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb2ludHMuZXh0ZW5kKGFkanVzdFBvaW50cygzLCAwLCAuLi5vdXRQb2ludHMpKTtcclxuICAgICAgICByZXR1cm4gcG9pbnRzO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgUmlnaHRBcm1VbmRlclNoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCIrcmlnaHQgYXJtXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5GUk9OVCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IFtcclxuICAgICAgICAgICAgZXguY29sbGFyYm9uZSxcclxuICAgICAgICAgICAgLi4uYWRqdXN0UG9pbnRzKDMsIC0xLCBleC5kZWx0b2lkcywgZXguc2hvdWxkZXIsIGV4LmVsYm93Lm91dClcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBpZiAoZXguaGFuZCkge1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaCguLi5hZGp1c3RQb2ludHMoMS41LFxyXG4gICAgICAgICAgICAgICAgLTAuNyxcclxuICAgICAgICAgICAgICAgIGV4LndyaXN0Lm91dCxcclxuICAgICAgICAgICAgICAgIGV4LmhhbmQua251Y2tsZSxcclxuICAgICAgICAgICAgICAgIGV4LmhhbmQudGlwKSk7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKC4uLmFkanVzdFBvaW50cygyLjIsIC0wLjksXHJcbiAgICAgICAgICAgICAgICBleC5oYW5kLnBhbG0sXHJcbiAgICAgICAgICAgICAgICBleC50aHVtYi50aXAsXHJcbiAgICAgICAgICAgICAgICBleC50aHVtYi5vdXQpLFxyXG4gICAgICAgICAgICAgICAgZXh0cmFjdFBvaW50KGV4LndyaXN0Lm91dClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB3cmlzdE91dCA9IGV4dHJhY3RQb2ludChleC53cmlzdC5vdXQpO1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaCh3cmlzdE91dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwb2ludHMucHVzaChleHRyYWN0UG9pbnQoZXguZWxib3cuaW4pLCBleHRyYWN0UG9pbnQoZXguY29sbGFyYm9uZSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gcG9pbnRzO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgQXJtIGV4dGVuZHMgQm9keVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgICAgOiBcImFybVwiLFxyXG4gICAgICAgICAgICBsYXllciAgICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGNoaWxkUGFydHMgIDogW1wiaGFuZFwiXSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgOiBbXCJsZWdcIiwgXCJ0b3Jzb1wiXSxcclxuICAgICAgICAgICAgc2hhZGluZ1BhcnRzOiBbXHJcbiAgICAgICAgICAgICAgICBMZWZ0QXJtU2hhZGluZyxcclxuICAgICAgICAgICAgICAgIExlZnRBcm1VbmRlclNoYWRpbmcsXHJcbiAgICAgICAgICAgICAgICBSaWdodEFybVNoYWRpbmcsXHJcbiAgICAgICAgICAgICAgICBSaWdodEFybVVuZGVyU2hhZGluZ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaXBTdHJva2UoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpcEZpbGwoKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBcm1IdW1hbiBleHRlbmRzIEFybSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG5cclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCB3cmlzdCA9IGV4LndyaXN0ID0ge307XHJcblxyXG4gICAgICAgICAgICAvLyB3aGVyZSBtb3N0IGFybSBjYWxjdWxhdGlvbnMgc2hvdWxkIGJlIGJhc2VkIG9mZiBvZlxyXG4gICAgICAgICAgICBsZXQgYXJtcGl0ID0gZXguYXJtcGl0ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguY29sbGFyYm9uZS54IC0gdGhpcy51cHBlck11c2NsZSAqIDAuMDMsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5jb2xsYXJib25lLnkgLSB0aGlzLnRvcnNvTGVuZ3RoICogMC4yNyAtIHRoaXMudXBwZXJNdXNjbGUgKiAwLjEsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgc2hvdWxkZXIgPSBleC5zaG91bGRlciA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmNvbGxhcmJvbmUueCArIHRoaXMudXBwZXJNdXNjbGUgKiAwLjIgKyB0aGlzLmFybVRoaWNrbmVzcyAqIDAuMSxcclxuICAgICAgICAgICAgICAgIHk6IGV4LmNvbGxhcmJvbmUueSAtIDEwIC0gdGhpcy51cHBlck11c2NsZSAqIDAuMSxcclxuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNob3VsZGVyLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHNob3VsZGVyLngsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5jb2xsYXJib25lLnkgLSAzXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzaG91bGRlci5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBzaG91bGRlci54IC0gMC41ICsgdGhpcy51cHBlck11c2NsZSAqIDAuMDIsXHJcbiAgICAgICAgICAgICAgICB5OiBzaG91bGRlci55ICsgNFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IGVsYm93ID0gZXguZWxib3cgPSB7fTtcclxuICAgICAgICAgICAgZWxib3cub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYXJtcGl0LnggKyA1ICsgdGhpcy51cHBlck11c2NsZSAqIDAuMTcgKyB0aGlzLmFybVRoaWNrbmVzcyAqIDAuMDUsXHJcbiAgICAgICAgICAgICAgICB5OiBzaG91bGRlci55IC0gdGhpcy5hcm1MZW5ndGggKiAwLjQ1LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgd3Jpc3Qub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiBhcm1waXQueCArIDEwICsgdGhpcy51cHBlck11c2NsZSAqIDAuMDEgKyB0aGlzLmFybVRoaWNrbmVzcyAqIDAuMDM1LFxyXG4gICAgICAgICAgICAgICAgeSAgOiBlbGJvdy5vdXQueSAtIHRoaXMuYXJtTGVuZ3RoICogMC41MCxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGVsYm93Lm91dC54LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGVsYm93Lm91dC55IC0gMlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgd3Jpc3Qub3V0LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHdyaXN0Lm91dC54IC0gMC41LFxyXG4gICAgICAgICAgICAgICAgeTogd3Jpc3Qub3V0LnkgKyAzXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBoYW5kIGdldHMgZHJhd24gaGVyZSAtLS0tLVxyXG5cclxuICAgICAgICAgICAgd3Jpc3QuaW4gPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBhcm1waXQueCArIDksXHJcbiAgICAgICAgICAgICAgICB5OiB3cmlzdC5vdXQueSAtIDEsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBlbGJvdy5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHggIDogZWxib3cub3V0LnggLSAzIC0gdGhpcy51cHBlck11c2NsZSAqIDAuMDcgLSB0aGlzLmFybVRoaWNrbmVzcyAqIDAuMDUsXHJcbiAgICAgICAgICAgICAgICB5ICA6IGVsYm93Lm91dC55ICsgMixcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IHdyaXN0LmluLnggLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHdyaXN0LmluLnkgKyA3XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBsb3dlciBhcm0gY3VydmVcclxuICAgICAgICAgICAgZWxib3cuaW4uY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWxib3cuaW4ueCArIDAuNSxcclxuICAgICAgICAgICAgICAgIHk6IGVsYm93LmluLnkgLSA3LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyB1cHBlciBhcm0gY3VydmVcclxuICAgICAgICAgICAgZXguYXJtcGl0LmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVsYm93LmluLnggLSAwLjUsXHJcbiAgICAgICAgICAgICAgICB5OiBlbGJvdy5pbi55ICsgMlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC5hcm1waXQuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguYXJtcGl0LngsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5hcm1waXQueSAtIDJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVwcGVyTXVzY2xlID4gMTApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1bGsgPSB0aGlzLnVwcGVyTXVzY2xlIC0gMTA7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVsdG9pZHMgPSBleC5kZWx0b2lkcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBzaG91bGRlci54IC0gYnVsayAqIDAuMTIsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogc2hvdWxkZXIueSAtIGJ1bGsgKiAwLjJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBkZWx0b2lkcy5jcDEgPSBleHRyYWN0UG9pbnQoc2hvdWxkZXIuY3AxKTtcclxuICAgICAgICAgICAgICAgIGRlbHRvaWRzLmNwMiA9IGV4dHJhY3RQb2ludChzaG91bGRlci5jcDIpO1xyXG4gICAgICAgICAgICAgICAgZGVsdG9pZHMuY3AxLnggKz0gYnVsayAqIDAuMDM7XHJcbiAgICAgICAgICAgICAgICBkZWx0b2lkcy5jcDIueCArPSBidWxrICogMC4wNTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUoMC44NSwgZXguY29sbGFyYm9uZSwgZXguZGVsdG9pZHMpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGN1cnZlXHJcbiAgICAgICAgICAgICAgICBzaG91bGRlciA9IGV4LnNob3VsZGVyID0gc3AucmlnaHQucDE7XHJcbiAgICAgICAgICAgICAgICBzaG91bGRlci5jcDEgPSBzcC5yaWdodC5wMi5jcDI7XHJcbiAgICAgICAgICAgICAgICBzaG91bGRlci5jcDIgPSBzcC5yaWdodC5wMi5jcDE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYWRkIHRyaWNlcHNcclxuICAgICAgICAgICAgICAgIGVsYm93Lm91dC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogc2hvdWxkZXIueCArIGJ1bGsgKiAwLjA4LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IHNob3VsZGVyLnkgLSBidWxrICogMC4xXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZWxib3cub3V0LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBlbGJvdy5vdXQueCxcclxuICAgICAgICAgICAgICAgICAgICB5OiBlbGJvdy5vdXQueSArIGJ1bGsgKiAwLjA3XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8gYmljZXBzXHJcbiAgICAgICAgICAgICAgICBhcm1waXQuY3AxLnggLT0gYnVsayAqIDAuMTU7XHJcbiAgICAgICAgICAgICAgICBhcm1waXQuY3AxLnkgKz0gYnVsayAqIDAuMTtcclxuICAgICAgICAgICAgICAgIGFybXBpdC5jcDIueCAtPSBidWxrICogMC4wMjtcclxuICAgICAgICAgICAgICAgIGFybXBpdC5jcDIueSAtPSBidWxrICogMC4xO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGZvcmVhcm1cclxuICAgICAgICAgICAgICAgIGVsYm93LmluLmNwMi54IC09IGJ1bGsgKiAwLjE1O1xyXG4gICAgICAgICAgICAgICAgZWxib3cuaW4uY3AyLnkgLT0gYnVsayAqIDAuMDU7XHJcbiAgICAgICAgICAgICAgICBlbGJvdy5pbi5jcDEueSArPSBidWxrICogMC4xO1xyXG5cclxuICAgICAgICAgICAgICAgIHdyaXN0Lm91dC5jcDEueCArPSBidWxrICogMC4xO1xyXG4gICAgICAgICAgICAgICAgd3Jpc3Qub3V0LmNwMS55IC09IGJ1bGsgKiAwLjE7XHJcbiAgICAgICAgICAgICAgICB3cmlzdC5vdXQuY3AyLnggKz0gYnVsayAqIDAuMTtcclxuICAgICAgICAgICAgICAgIHdyaXN0Lm91dC5jcDIueSArPSBidWxrICogMC4xO1xyXG5cclxuICAgICAgICAgICAgICAgIHdyaXN0LmluLnggLT0gYnVsayAqIDAuMDM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHJvdGF0ZSBhcm1zXHJcbiAgICAgICAgICAgIHJvdGF0ZVBvaW50cyhlbGJvdy5pbixcclxuICAgICAgICAgICAgICAgIG1vZHMuYXJtUm90YXRpb24gKiBNYXRoLlBJIC8gMTgwLFxyXG4gICAgICAgICAgICAgICAgZWxib3cuaW4sXHJcbiAgICAgICAgICAgICAgICBlbGJvdy5vdXQsXHJcbiAgICAgICAgICAgICAgICB3cmlzdC5pbixcclxuICAgICAgICAgICAgICAgIHdyaXN0Lm91dCk7XHJcbiAgICAgICAgICAgIGVsYm93LmluLnggLT0gTWF0aC5hYnMobW9kcy5hcm1Sb3RhdGlvbikgKiAwLjAyO1xyXG4gICAgICAgICAgICBlbGJvdy5pbi55IC09IG1vZHMuYXJtUm90YXRpb24gKiAwLjAxO1xyXG4gICAgICAgICAgICBpZiAobW9kcy5hcm1Sb3RhdGlvbiA8IC0yMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW53YXJkUm90YXRpb24gPSAoLTIwIC0gbW9kcy5hcm1Sb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICBlbGJvdy5pbi54IC09IGlud2FyZFJvdGF0aW9uICogMC4wNTtcclxuICAgICAgICAgICAgICAgIGVsYm93LmluLnkgLT0gaW53YXJkUm90YXRpb24gKiAwLjE3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBleC5jb2xsYXJib25lLFxyXG4gICAgICAgICAgICBleC5kZWx0b2lkcyxcclxuICAgICAgICAgICAgZXguc2hvdWxkZXIsXHJcbiAgICAgICAgICAgIGV4LmVsYm93Lm91dCxcclxuICAgICAgICAgICAgZXgud3Jpc3Qub3V0LFxyXG4gICAgICAgICAgICAvLyBleC53cmlzdC5vdXQsXHJcbiAgICAgICAgICAgIHtjaGlsZDogXCJoYW5kXCJ9LFxyXG4gICAgICAgICAgICBleC53cmlzdC5pbixcclxuICAgICAgICAgICAgZXguZWxib3cuaW4sXHJcbiAgICAgICAgICAgIGV4LmFybXBpdCxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtCb2R5UGFydH0gZnJvbSBcIi4vcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgYWRqdXN0LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIHJvdGF0ZVBvaW50cyxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7YXZlcmFnZVF1YWRyYXRpYywgcmVxdWlyZVBhcnR9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuaW1wb3J0IHthdmVyYWdlUG9pbnR9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuXHJcbmNsYXNzIEhhbmQgZXh0ZW5kcyBCb2R5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCJoYW5kXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5BUk1TLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gaGFuZCBleHBvcnRzIGhhbmQua251Y2tsZSwgaGFuZC50aXAsIGhhbmQucGFsbSwgdGh1bWIudGlwLCB0aHVtYi5vdXRcclxuZXhwb3J0IGNsYXNzIEhhbmRIdW1hbiBleHRlbmRzIEhhbmQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzLCBjYWxjdWxhdGUpIHtcclxuICAgICAgICByZXF1aXJlUGFydChcIndyaXN0XCIsIGV4KTtcclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBoYW5kID0gZXguaGFuZCA9IHt9O1xyXG4gICAgICAgICAgICBsZXQgdGh1bWIgPSBleC50aHVtYiA9IHt9O1xyXG5cclxuICAgICAgICAgICAgLy8gYW5jaG9yIHBvaW50IHdoZXJlIGFsbCBkcmF3aW5nIGRlcml2ZXMgZnJvbVxyXG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBleC53cmlzdC5vdXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmhhbmRTaXplICogMC4xICsgdGhpcy51cHBlck11c2NsZSAqIDAuMDQ7XHJcblxyXG4gICAgICAgICAgICBoYW5kLmtudWNrbGUgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBhbmNob3IueCArIHNpemUgKiAwLjE1LFxyXG4gICAgICAgICAgICAgICAgeTogYW5jaG9yLnkgLSBzaXplICogMC42LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBoYW5kLnRpcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGFuY2hvci54ICsgc2l6ZSAqIDAuMSxcclxuICAgICAgICAgICAgICAgIHk6IGhhbmQua251Y2tsZS55IC0gMiAtIHNpemUgKiAwLjYsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGhhbmQudGlwLmNwMSA9XHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlUXVhZHJhdGljKGhhbmQua251Y2tsZSwgaGFuZC50aXAsIDAuNywgMSwgLTAuMik7XHJcblxyXG4gICAgICAgICAgICBoYW5kLnBhbG0gPSB7XHJcbiAgICAgICAgICAgICAgICB4ICA6IGFuY2hvci54ICogMC42NSArIGV4LndyaXN0LmluLnggKiAwLjM1LFxyXG4gICAgICAgICAgICAgICAgeSAgOiBoYW5kLmtudWNrbGUueSAtIHNpemUgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICBjcDE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBoYW5kLnRpcC54IC0gMC41IC0gc2l6ZSAqIDAuMTUsLy8xLjUgLSBzaXplICogMC4wNSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBoYW5kLnRpcC55ICsgc2l6ZSAqIDAuMVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaGFuZC5wYWxtLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGhhbmQucGFsbS54ICsgMSArIHNpemUgKiAwLjIsXHJcbiAgICAgICAgICAgICAgICB5OiBoYW5kLnBhbG0ueSAtIDEgLSBzaXplICogMC4yLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIHRodW1iLnRpcCA9IHtcclxuICAgICAgICAgICAgICAgIHggIDogaGFuZC5wYWxtLnggLSBzaXplICogMC4wMyxcclxuICAgICAgICAgICAgICAgIHkgIDogaGFuZC5wYWxtLnkgLSAxIC0gc2l6ZSAqIDAuMjUsXHJcbiAgICAgICAgICAgICAgICBjcDE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBoYW5kLnBhbG0ueCAtIHNpemUgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogaGFuZC5wYWxtLnkgLSBzaXplICogMC4xXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aHVtYi50aXAuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogdGh1bWIudGlwLnggKyBzaXplICogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogdGh1bWIudGlwLnkgKyBzaXplICogMC4xLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGh1bWIub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiBleC53cmlzdC5pbi54ICsgMC4xLFxyXG4gICAgICAgICAgICAgICAgeSAgOiBleC53cmlzdC5pbi55IC0gc2l6ZSAqIDAuMixcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IHRodW1iLnRpcC54IC0gc2l6ZSAqIDAuMTUsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogdGh1bWIudGlwLnkgKyBzaXplICogMC4yXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aHVtYi5vdXQuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogdGh1bWIub3V0LnggLSBzaXplICogMC4wNSxcclxuICAgICAgICAgICAgICAgIHk6IHRodW1iLm91dC55IC0gc2l6ZSAqIDAuMixcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnRpbnVlZCB3aXRoIGFybSByb3RhdGlvblxyXG4gICAgICAgICAgICAvLyByb3RhdGUgYXJtc1xyXG4gICAgICAgICAgICByb3RhdGVQb2ludHMoYW5jaG9yLFxyXG4gICAgICAgICAgICAgICAgKG1vZHMuYXJtUm90YXRpb24gKyBtb2RzLmhhbmRSb3RhdGlvbikgKiBNYXRoLlBJIC8gMTgwLFxyXG4gICAgICAgICAgICAgICAgaGFuZC5rbnVja2xlLFxyXG4gICAgICAgICAgICAgICAgaGFuZC50aXAsXHJcbiAgICAgICAgICAgICAgICBoYW5kLnBhbG0sXHJcbiAgICAgICAgICAgICAgICB0aHVtYi50aXAsXHJcbiAgICAgICAgICAgICAgICB0aHVtYi5vdXQpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIGJhbGwgdXAgaW50byBmaXN0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVwcGVyTXVzY2xlID4gMTIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1bGsgPSB0aGlzLnVwcGVyTXVzY2xlIC0gMTI7XHJcbiAgICAgICAgICAgICAgICBoYW5kLmtudWNrbGUueSAtPSBidWxrICogMC4wNTtcclxuICAgICAgICAgICAgICAgIHRodW1iLnRpcCA9IGFkanVzdCh0aHVtYi50aXAsIC1idWxrICogMC4wMywgYnVsayAqIDAuMDUpO1xyXG4gICAgICAgICAgICAgICAgaGFuZC50aXAueSArPSBidWxrICogMC4wNTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aHVtYi5vdXQuY3AxLnggLT0gYnVsayAqIDAuMDU7XHJcbiAgICAgICAgICAgICAgICB0aHVtYi5vdXQuY3AyLnggLT0gYnVsayAqIDAuMDI7XHJcbiAgICAgICAgICAgICAgICByb3RhdGVQb2ludHMoaGFuZC5rbnVja2xlLCAtYnVsayAqIDAuMDM1LCBoYW5kLnRpcCwgaGFuZC5wYWxtKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUoMC42LCBoYW5kLmtudWNrbGUsIGhhbmQudGlwKTtcclxuICAgICAgICAgICAgICAgIGhhbmQuZmlzdCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgICAgICAgICBoYW5kLnRpcC5jcDEgPSBzcC5yaWdodC5wMi5jcDE7XHJcbiAgICAgICAgICAgICAgICByb3RhdGVQb2ludHMoaGFuZC5maXN0LFxyXG4gICAgICAgICAgICAgICAgICAgIC1idWxrICogMC4wNSxcclxuICAgICAgICAgICAgICAgICAgICBoYW5kLnRpcCxcclxuICAgICAgICAgICAgICAgICAgICBoYW5kLnBhbG0uY3AxLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmQucGFsbS5jcDIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGhhbmQucGFsbS54IC09IGJ1bGsgKiAwLjA3O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVwcGVyTXVzY2xlID4gMjUpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kLnRpcCA9IGV4dHJhY3RQb2ludCh0aHVtYi50aXApO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmQucGFsbSA9IGV4dHJhY3RQb2ludChoYW5kLnBhbG0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iLm91dCA9IGV4dHJhY3RQb2ludCh0aHVtYi5vdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iLmtudWNrbGUgPSBhdmVyYWdlUG9pbnQodGh1bWIudGlwLCB0aHVtYi5vdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRodW1iLmtudWNrbGUueCAtPSBidWxrICogMC4wNjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByb3RhdGVQb2ludHMoYW5jaG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIC1idWxrICogMC4wMSxcclxuICAgICAgICAgICAgICAgICAgICBoYW5kLnRpcCxcclxuICAgICAgICAgICAgICAgICAgICBoYW5kLmZpcnN0LFxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmQucGFsbSxcclxuICAgICAgICAgICAgICAgICAgICB0aHVtYi50aXAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGh1bWIua251Y2tsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZXgud3Jpc3Qub3V0LFxyXG4gICAgICAgICAgICBleC5oYW5kLmtudWNrbGUsXHJcbiAgICAgICAgICAgIGV4LmhhbmQuZmlzdCxcclxuICAgICAgICAgICAgZXguaGFuZC50aXAsXHJcbiAgICAgICAgICAgIGV4LmhhbmQucGFsbSxcclxuICAgICAgICAgICAgZXgudGh1bWIudGlwLFxyXG4gICAgICAgICAgICBleC50aHVtYi5rbnVja2xlLFxyXG4gICAgICAgICAgICBleC50aHVtYi5vdXQsXHJcbiAgICAgICAgICAgIGV4LndyaXN0LmluLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7c2hhZGluZ01lZGl1bSwgU2hhZGluZ1BhcnR9IGZyb20gXCIuLi9kcmF3L3NoYWRpbmdfcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtCb2R5UGFydH0gZnJvbSBcIi4vcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgYWRqdXN0LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNvbnRpbnVlQ3VydmUsXHJcbiAgICBjbG9uZSxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGNsYW1wLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHthdmVyYWdlUG9pbnR9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuaW1wb3J0IHtjb25uZWN0RW5kUG9pbnRzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcblxyXG5jbGFzcyBSaWdodExlZ1NoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCJyaWdodCBsZWdcIixcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLk1JRFJJRlQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gc2hhZGluZ01lZGl1bTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGNvbnN0IGJlbGx5ID0gdGhpcy5iZWxseVByb3RydXNpb24gKiAwLjE7XHJcbiAgICAgICAgY29uc3QgaGlwID0gYWRqdXN0KGV4LmhpcCwgLTMgLSB0aGlzLmhpcFdpZHRoICogMC4wNCArIGJlbGx5ICogMC41LCAtYmVsbHkpO1xyXG4gICAgICAgIGNvbnN0IHRoaWdoT3V0ID0gYWRqdXN0KGV4LnRoaWdoLm91dCwgLTcgLSB0aGlzLmxlZ0Z1bGxuZXNzICogMC4yLCAwKTtcclxuXHJcbiAgICAgICAgLy8gZHJhd2luZyB0aGUga25lZWNhcFxyXG4gICAgICAgIGNvbnN0IGtuZWVPdXQgPSBhdmVyYWdlUG9pbnQoZXgua25lZS5vdXQsIGV4LmtuZWUuaW4pO1xyXG4gICAgICAgIGtuZWVPdXQuY3AxID0gY29udGludWVDdXJ2ZShoaXAsIHRoaWdoT3V0LCAxKTtcclxuICAgICAgICBrbmVlT3V0LmNwMiA9IHtcclxuICAgICAgICAgICAgeDoga25lZU91dC54ICsgNSxcclxuICAgICAgICAgICAgeToga25lZU91dC55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuNSwgdGhpZ2hPdXQsIGtuZWVPdXQpO1xyXG4gICAgICAgIGNvbnN0IGtuZWVDYXAgPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgICAgICBrbmVlT3V0LmNwMSA9IHtcclxuICAgICAgICAgICAgeDoga25lZUNhcC54LFxyXG4gICAgICAgICAgICB5OiBrbmVlQ2FwLnkgLSAzXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGtuZWVCb3QgPSB7XHJcbiAgICAgICAgICAgIHg6IGtuZWVPdXQueCAqIDAuNyArIGV4LmtuZWUub3V0LnggKiAwLjMsXHJcbiAgICAgICAgICAgIHk6IGtuZWVPdXQueSAtIDJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGtuZWVCb3QuY3AxID0ge1xyXG4gICAgICAgICAgICB4OiBrbmVlT3V0LnggLSAyLFxyXG4gICAgICAgICAgICB5OiBrbmVlT3V0LnkgLSAyXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGNhbGZPdXQgPSBhZGp1c3QoZXguY2FsZi5vdXQsIC02IC0gdGhpcy5sZWdGdWxsbmVzcyAqIDAuMSxcclxuICAgICAgICAgICAgMCk7XHJcbiAgICAgICAgY2FsZk91dC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IGtuZWVCb3QueCArIDEsXHJcbiAgICAgICAgICAgIHk6IGtuZWVCb3QueSAtIDVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBhbmtsZU91dCA9IGFkanVzdChleC5hbmtsZS5vdXQsIC0yLCAzKTtcclxuICAgICAgICBhbmtsZU91dC5jcDEgPSBjb250aW51ZUN1cnZlKGtuZWVCb3QsIGNhbGZPdXQpO1xyXG5cclxuICAgICAgICBjb25zdCBvdXRCb3QgPSB7XHJcbiAgICAgICAgICAgIHg6IGV4LmFua2xlLm91dC54ICsgMjAsXHJcbiAgICAgICAgICAgIHk6IGV4LmFua2xlLm91dC55XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBvdXRUb3AgPSB7XHJcbiAgICAgICAgICAgIHg6IGV4LmhpcC54ICsgMjAsXHJcbiAgICAgICAgICAgIHk6IGV4LmhpcC55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgaGlwLFxyXG4gICAgICAgICAgICB0aGlnaE91dCxcclxuICAgICAgICAgICAga25lZUNhcCxcclxuICAgICAgICAgICAga25lZU91dCxcclxuICAgICAgICAgICAga25lZUJvdCxcclxuICAgICAgICAgICAgY2FsZk91dCxcclxuICAgICAgICAgICAgYW5rbGVPdXQsXHJcbiAgICAgICAgICAgIGV4dHJhY3RQb2ludChleC5hbmtsZS5vdXQpLFxyXG4gICAgICAgICAgICBvdXRCb3QsXHJcbiAgICAgICAgICAgIG91dFRvcCxcclxuICAgICAgICAgICAgaGlwXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIExlZnRMZWdTaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICA6IFwibGVmdCBsZWdcIixcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLkZST05ULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNoYWRpbmdNZWRpdW07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuXHJcbiAgICAgICAgLy8gY29uc3QgaGlwID0gY29ubmVjdEVuZFBvaW50cyhleC50aGlnaC50b3AsIGV4LmhpcCk7XHJcbiAgICAgICAgLy8gY29uc3QgZm9sZERlcHRoID0gY2xhbXAodGhpcy5sZWdGZW0gLyA1NSAtIHRoaXMubG93ZXJNdXNjbGUgLyAxNTAgLSAwLjEsIDAsIDEpO1xyXG4gICAgICAgIC8vIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZShleC50aGlnaC50b3AsIGhpcCwgZm9sZERlcHRoKTtcclxuICAgICAgICAvLyBleC50aGlnaC5mb2xkID0gc3AubGVmdC5wMjtcclxuICAgICAgICBjb25zdCBhbmtsZUluID0gYWRqdXN0KGV4LmFua2xlLmluLCAzLCAyKTtcclxuICAgICAgICBjb25zdCBjYWxmSW4gPSBhZGp1c3QoZXguY2FsZi5pbiwgMTAgLSB0aGlzLmxlZ0ZlbSAqIDAuMTUsIDApO1xyXG4gICAgICAgIGNhbGZJbi5jcDEueCAtPSA1O1xyXG5cclxuICAgICAgICAvLyBnaXZlIGhpbnQgb2Yga25lZWNhcFxyXG4gICAgICAgIGNvbnN0IGtuZWVCb3QgPSB7XHJcbiAgICAgICAgICAgIHg6IGV4LmtuZWUuaW4ueCAqIDAuNyArIGV4LmtuZWUub3V0LnggKiAwLjMsXHJcbiAgICAgICAgICAgIHk6IGV4LmtuZWUuaW4ueSAtIDMsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBrbmVlQm90LmNwMSA9IGNvbnRpbnVlQ3VydmUoYW5rbGVJbiwgY2FsZkluKTtcclxuICAgICAgICBrbmVlQm90LmNwMiA9IHtcclxuICAgICAgICAgICAgeDoga25lZUJvdC54ICsgNSxcclxuICAgICAgICAgICAgeToga25lZUJvdC55IC0gMlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGtuZWVUb3AgPSBhZGp1c3QoZXgua25lZS5pbnRvcCwgMywgMik7XHJcbiAgICAgICAga25lZVRvcC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IGtuZWVCb3QueCAtIDMsXHJcbiAgICAgICAgICAgIHk6IGtuZWVCb3QueSArIDNcclxuICAgICAgICB9O1xyXG4gICAgICAgIGtuZWVUb3AuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiBrbmVlVG9wLnggLSAxLFxyXG4gICAgICAgICAgICB5OiBrbmVlVG9wLnkgLSAyXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjgsIGV4LnRoaWdoLnRvcCwgZXgudGhpZ2guZm9sZCk7XHJcbiAgICAgICAgY29uc3QgdGhpZ2hUb3AgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIHRoaWdoVG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhrbmVlVG9wLCB0aGlnaFRvcCwgMC41LCAyKTtcclxuXHJcbiAgICAgICAgY29uc3QgaW5NaWQgPSB7XHJcbiAgICAgICAgICAgIHg6IGV4LmtuZWUuaW4ueCAtIDIsXHJcbiAgICAgICAgICAgIHk6IGV4LmtuZWUuaW4ueVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW5NaWQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHRoaWdoVG9wLFxyXG4gICAgICAgICAgICBpbk1pZCxcclxuICAgICAgICAgICAgMC4zNSxcclxuICAgICAgICAgICAgLTggLSB0aGlzLmxlZ0Z1bGxuZXNzICogMC4zIC0gdGhpcy5sZWdGZW0gKiAwLjEpO1xyXG5cclxuICAgICAgICBjb25zdCBhbmtsZUJvdCA9IGV4dHJhY3RQb2ludChleC5hbmtsZS5pbik7XHJcbiAgICAgICAgYW5rbGVCb3QuY3AxID0ge1xyXG4gICAgICAgICAgICB4OiBleC5jYWxmLmluLnggLSAzLFxyXG4gICAgICAgICAgICB5OiBleC5jYWxmLmluLnlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gW2Fua2xlQm90LCBhbmtsZUluLCBjYWxmSW4sIGtuZWVCb3QsIGtuZWVUb3AsIHRoaWdoVG9wLCBpbk1pZCwgYW5rbGVCb3RdO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFRoaWdoU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICA6IFwiK2xlZnQgbGVnXCIsXHJcbiAgICAgICAgICAgIGxheWVyICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICByZWZsZWN0OiB0cnVlLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4KSB7XHJcbiAgICAgICAgY29uc3QgZm9sZCA9IGNsb25lKGV4LnRoaWdoLmZvbGQpO1xyXG4gICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZSgwLjg1LCBleC50aGlnaC5pbiwgZXgudGhpZ2gudG9wKTtcclxuICAgICAgICBjb25zdCBzaGlmdGVkQm90ID0gc3AubGVmdC5wMjtcclxuICAgICAgICBjb25zdCBib3QgPSBzcC5yaWdodC5wMjtcclxuXHJcbiAgICAgICAgc2hpZnRlZEJvdC5jcDEgPSBjbG9uZShmb2xkLmNwMSk7XHJcbiAgICAgICAgZm9sZC5jcDEueCAtPSAxO1xyXG4gICAgICAgIGZvbGQuY3AxLnkgKz0gMTtcclxuICAgICAgICBzaGlmdGVkQm90LmNwMS54ICs9IDAuNTtcclxuICAgICAgICBzaGlmdGVkQm90LmNwMS55IC09IDAuNTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtib3QsIGZvbGQsIHNoaWZ0ZWRCb3QsIGJvdF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBMZWcgZXh0ZW5kcyBCb2R5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGNoaWxkUGFydHMgIDogW1wiZmVldFwiXSxcclxuICAgICAgICAgICAgc2hhZGluZ1BhcnRzOiBbUmlnaHRMZWdTaGFkaW5nLCBMZWZ0TGVnU2hhZGluZywgVGhpZ2hTaGFkaW5nXVxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExlZ0h1bWFuIGV4dGVuZHMgTGVnIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgaWdub3JlLCBjYWxjdWxhdGUpIHtcclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5sZWdMZW5ndGggKiAwLjAxO1xyXG4gICAgICAgICAgICBsZXQga25lZSA9IGV4LmtuZWUgPSB7fTtcclxuICAgICAgICAgICAga25lZS5vdXQgPSB7XHJcbiAgICAgICAgICAgICAgICB4ICA6IDEyIC0gY2xhbXAodGhpcy5sZWdGZW0gKiAwLjMsIDAsIDkpICsgdGhpcy5oaXBXaWR0aCAqIDAuMDQgK1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVnRnVsbG5lc3MgKiAwLjAzLFxyXG4gICAgICAgICAgICAgICAgeSAgOiB0aGlzLmxlZ0xlbmd0aCAqIDAuNSxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4LmhpcC54ICsgdGhpcy5sZWdGZW0gKiAwLjEgKyB0aGlzLmJ1dHRGdWxsbmVzcyAqIDAuMTUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZ0Z1bGxuZXNzICogMC4xIC0gdGhpcy5sb3dlck11c2NsZSAqIDAuMDUsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogZXguaGlwLnkgLSA3IC0gdGhpcy5sZWdGZW0gKiAwLjEgLSB0aGlzLmJ1dHRGdWxsbmVzcyAqIDAuMSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVnRnVsbG5lc3MgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBrbmVlLm91dC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBrbmVlLm91dC54ICsgNCArIHRoaXMubGVnRmVtICogMC4xIC0gdGhpcy5sb3dlck11c2NsZSAqIDAuMDUsXHJcbiAgICAgICAgICAgICAgICB5OiBrbmVlLm91dC55ICsgdGhpcy5sZWdMZW5ndGggKiAwLjI1LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gZGlmZmVyZW50IHN0YW5jZSB3aXRoIGNhbGZzIGJlaW5nIG1vcmUgcHJvbWluYW50XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1bGsgPSB0aGlzLmxvd2VyTXVzY2xlIC0gMTA7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YW5jZU11c2N1bGF0dXJlID0gdGhpcy5sZWdGZW0gPCAyNSAmJiBidWxrID4gMDtcclxuICAgICAgICAgICAgaWYgKHN0YW5jZU11c2N1bGF0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICBrbmVlLm91dC5jcDEueCArPSBidWxrICogMC4wNTtcclxuICAgICAgICAgICAgICAgIGtuZWUub3V0LmNwMS55IC09IGJ1bGsgKiAwLjA1O1xyXG4gICAgICAgICAgICAgICAga25lZS5vdXQuY3AyLnggKz0gYnVsayAqIDAuMjtcclxuICAgICAgICAgICAgICAgIGtuZWUub3V0LmNwMi55ICs9IGJ1bGsgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBleC5oaXAuY3AyLnggKz0gYnVsayAqIDAuMDM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC41NSwgZXguaGlwLCBrbmVlLm91dCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGhpZ2ggPSBleC50aGlnaCA9IGV4LnRoaWdoIHx8IHt9O1xyXG4gICAgICAgICAgICB0aGlnaC5vdXQgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgICAgICAvLyByZWFzc2lnbiBvdGhlciBkcmF3IHBvaW50c1xyXG4gICAgICAgICAgICBrbmVlLm91dCA9IHNwLnJpZ2h0LnAyO1xyXG5cclxuICAgICAgICAgICAgZXguYW5rbGUgPSBleC5hbmtsZSB8fCB7fTtcclxuICAgICAgICAgICAgZXguYW5rbGUub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgeDoga25lZS5vdXQueCAtIDAuNSAtIHRoaXMubGVnRnVsbG5lc3MgKiAwLjA1LFxyXG4gICAgICAgICAgICAgICAgeTogOCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjYWxmID0gZXguY2FsZiA9IGV4LmNhbGYgfHwge307XHJcbiAgICAgICAgICAgIGNhbGYub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiBrbmVlLm91dC54ICsgKGNsYW1wKHRoaXMubGVnRmVtICogMC4xLCAwLCAzKSArXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhbXAodGhpcy5sZWdGdWxsbmVzcyAqIDAuMDA1LCAwLCAzKSkgKiBzY2FsZSxcclxuICAgICAgICAgICAgICAgIHkgIDoga25lZS5vdXQueSAtIHRoaXMubGVnTGVuZ3RoICogMC4yMCArIHRoaXMubG93ZXJNdXNjbGUgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICBjcDE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBrbmVlLm91dC54LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGtuZWUub3V0LnkgLSB0aGlzLmxlZ0xlbmd0aCAqIDAuMSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYW1wKHRoaXMubGVnRmVtICogMC4wNSwgMCwgNiksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjYWxmLm91dC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBjYWxmLm91dC54LFxyXG4gICAgICAgICAgICAgICAgeTogY2FsZi5vdXQueSArIHRoaXMubGVnTGVuZ3RoICogMC4xMCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGV4LmFua2xlLm91dC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBjYWxmLm91dC54LFxyXG4gICAgICAgICAgICAgICAgeTogY2FsZi5vdXQueSAtIHRoaXMubGVnTGVuZ3RoICogMC4xMixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXguYW5rbGUub3V0LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmFua2xlLm91dC54IC0gMSxcclxuICAgICAgICAgICAgICAgIHk6IGV4LmFua2xlLm91dC55ICsgNVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIGZlZXQgLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgICAgICAgICBleC5hbmtsZS5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmFua2xlLm91dC54IC0gNSArIHRoaXMubGVnRmVtICogMC4wMixcclxuICAgICAgICAgICAgICAgIHk6IGV4LmFua2xlLm91dC55ICsgMC41LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY2FsZi5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGNhbGYub3V0LnggLSA5ICsgdGhpcy5sZWdGZW0gKiAwLjAxNSAtIHRoaXMubGVnRnVsbG5lc3MgKiAwLjA1LFxyXG4gICAgICAgICAgICAgICAgeTogY2FsZi5vdXQueSAtIHRoaXMubGVnRmVtICogMC4xLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBzdGFuY2VNYXNjdWxpbml0eSA9IDE1IC0gdGhpcy5sZWdGZW07XHJcbiAgICAgICAgICAgIGlmIChzdGFuY2VNYXNjdWxpbml0eSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNhbGYuaW4ueCAtPSBzdGFuY2VNYXNjdWxpbml0eSAqIDAuMDI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYWxmLmluLnggKz0gdGhpcy5sZWdGZW0gKiAwLjAyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGYuaW4uY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguYW5rbGUuaW4ueCArIDAuNSxcclxuICAgICAgICAgICAgICAgIHk6IGV4LmFua2xlLmluLnkgKyAoMS4zIC0gdGhpcy5sZWdGZW0gKiAwLjAzKSAqIHRoaXMubGVnTGVuZ3RoICogMC4xXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNhbGYuaW4uY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogY2FsZi5pbi54ICsgdGhpcy5sZWdGZW0gKiAwLjAyLFxyXG4gICAgICAgICAgICAgICAgeTogY2FsZi5pbi55ICsgKHRoaXMubGVnRmVtICogMC4wMSAtIDEpICogdGhpcy5sZWdMZW5ndGggKiAwLjEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChzdGFuY2VNYXNjdWxpbml0eSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNhbGYuaW4uY3AyLnggKz0gc3RhbmNlTWFzY3VsaW5pdHkgKiAwLjAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAga25lZS5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGtuZWUub3V0LnggLSA4IC0gdGhpcy5sZWdGdWxsbmVzcyAqIDAuMDUsXHJcbiAgICAgICAgICAgICAgICB5OiBrbmVlLm91dC55LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBrbmVlLmluLmNwMSA9IGNvbnRpbnVlQ3VydmUoZXguYW5rbGUuaW4sIGNhbGYuaW4sIDAuNyk7XHJcblxyXG5cclxuICAgICAgICAgICAga25lZS5pbnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGtuZWUuaW4ueCArIDAuMiAtIHRoaXMubGVnRmVtICogMC4wMSxcclxuICAgICAgICAgICAgICAgIHk6IGtuZWUuaW4ueSArIDMsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhbmNlTXVzY3VsYXR1cmUpIHtcclxuICAgICAgICAgICAgICAgIGtuZWUuaW4ueCAtPSBidWxrICogMC4wNDtcclxuICAgICAgICAgICAgICAgIGtuZWUuaW50b3AueCAtPSBidWxrICogMC4wNDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAga25lZS5pbi5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBrbmVlLmluLngsXHJcbiAgICAgICAgICAgICAgICB5OiBrbmVlLmluLnkgLSB0aGlzLmxlZ0xlbmd0aCAqIDAuMDlcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaWdoLnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHggIDogMS42LFxyXG4gICAgICAgICAgICAgICAgeSAgOiBleC5oaXAueSAtIHRoaXMubGVnTGVuZ3RoICogMC4xNSxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGtuZWUuaW4ueCxcclxuICAgICAgICAgICAgICAgICAgICB5OiBrbmVlLmluLnkgKyB0aGlzLmxlZ0xlbmd0aCAqIDAuMDdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaWdoLnRvcC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiAyIC0gdGhpcy5idXR0RnVsbG5lc3MgKiAwLjAzIC0gdGhpcy5sZWdGZW0gKiAwLjA0LFxyXG4gICAgICAgICAgICAgICAgeTogdGhpZ2gudG9wLnkgLSB0aGlzLmxlZ0xlbmd0aCAqIDAuMTJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGRpZmZlcmVudCBzdGFuY2Ugd2l0aCBjYWxmcyBiZWluZyBtb3JlIHByb21pbmFudFxyXG4gICAgICAgICAgICBpZiAoc3RhbmNlTXVzY3VsYXR1cmUpIHtcclxuICAgICAgICAgICAgICAgIC8vIGJ1bGsgdXAgY2FsZlxyXG4gICAgICAgICAgICAgICAga25lZS5pbi5jcDIueCAtPSBidWxrICogMC4wMTtcclxuICAgICAgICAgICAgICAgIGtuZWUuaW4uY3AyLnkgKz0gYnVsayAqIDAuMDU7XHJcbiAgICAgICAgICAgICAgICBrbmVlLmluLmNwMS54IC09IGJ1bGsgKiAwLjE7XHJcbiAgICAgICAgICAgICAgICBjYWxmLmluLnggLT0gYnVsayAqIDAuMTtcclxuICAgICAgICAgICAgICAgIGNhbGYuaW4ueSArPSBidWxrICogMC4xO1xyXG4gICAgICAgICAgICAgICAgY2FsZi5pbi5jcDIueCAtPSBidWxrICogMC4xO1xyXG4gICAgICAgICAgICAgICAgY2FsZi5vdXQueCArPSBidWxrICogMC4wNTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWxmLm91dC5jcDIueCArPSBidWxrICogMC4wNTtcclxuICAgICAgICAgICAgICAgIGNhbGYub3V0LmNwMS54ICs9IGJ1bGsgKiAwLjAyO1xyXG4gICAgICAgICAgICAgICAgY2FsZi5vdXQuY3AxLnkgKz0gYnVsayAqIDAuMTtcclxuICAgICAgICAgICAgICAgIC8vIHRpZ2h0ZW4gdXAgaW5uZXIgdGhpZ2hcclxuICAgICAgICAgICAgICAgIHRoaWdoLnRvcC5jcDIueCAtPSBidWxrICogMC4wODtcclxuICAgICAgICAgICAgICAgIHRoaWdoLnRvcC5jcDIueSAtPSBidWxrICogMC4wODtcclxuICAgICAgICAgICAgICAgIHRoaWdoLnRvcC5jcDEueSArPSBidWxrICogMC4yO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gc3BsaXQgaW50byBpbm5lciB0aGlnaFxyXG4gICAgICAgICAgICBzcCA9IHNwbGl0Q3VydmUoMC41NSwga25lZS5pbiwgdGhpZ2gudG9wKTtcclxuXHJcbiAgICAgICAgICAgIHRoaWdoLmluID0gc3AubGVmdC5wMjtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlYXNzaWduIG90aGVyIGRyYXcgcG9pbnRzXHJcbiAgICAgICAgICAgIHRoaWdoLnRvcCA9IHNwLnJpZ2h0LnAyO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaGlwID0gY29ubmVjdEVuZFBvaW50cyh0aGlnaC50b3AsIGV4LmhpcCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvbGREZXB0aCA9IGNsYW1wKHRoaXMubGVnRmVtIC8gNTUgLSB0aGlzLmxvd2VyTXVzY2xlIC8gMTUwIC0gMC4xLCAwLCAxKTtcclxuICAgICAgICAgICAgc3AgPSBzcGxpdEN1cnZlKGZvbGREZXB0aCwgdGhpZ2gudG9wLCBoaXApO1xyXG4gICAgICAgICAgICB0aGlnaC5mb2xkID0gc3AubGVmdC5wMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGV4dHJhY3RQb2ludChleC5oaXApLFxyXG4gICAgICAgICAgICBleC50aGlnaC5vdXQsXHJcbiAgICAgICAgICAgIGV4LmtuZWUub3V0LFxyXG4gICAgICAgICAgICBleC5jYWxmLm91dCxcclxuICAgICAgICAgICAgZXguYW5rbGUub3V0LFxyXG4gICAgICAgICAgICB7Y2hpbGQ6IFwiZmVldFwifSxcclxuICAgICAgICAgICAgZXguYW5rbGUuaW4sXHJcbiAgICAgICAgICAgIGV4LmNhbGYuaW4sXHJcbiAgICAgICAgICAgIGV4LmtuZWUuaW4sXHJcbiAgICAgICAgICAgIGV4LmtuZWUuaW50b3AsXHJcbiAgICAgICAgICAgIGV4LnRoaWdoLmluLFxyXG4gICAgICAgICAgICBleC50aGlnaC50b3AsXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge3NoYWRpbmdNZWRpdW0sIFNoYWRpbmdQYXJ0fSBmcm9tIFwiLi4vZHJhdy9zaGFkaW5nX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7UGFydCwgQm9keVBhcnR9IGZyb20gXCIuL3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGFkanVzdFBvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIGFkanVzdCxcclxuICAgIGJyZWFrUG9pbnQsXHJcbiAgICByZXZlcnNlRHJhd1BvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNvbnRpbnVlQ3VydmUsXHJcbiAgICBjbGFtcCxcclxuICAgIG5vbmVcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7Y29ubmVjdEVuZFBvaW50c30gZnJvbSBcIi4uXCI7XHJcblxyXG5jbGFzcyBMZWZ0QnJlYXN0U2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGZvcmNlZFNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBzaGFkaW5nTWVkaXVtO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4KSB7XHJcbiAgICAgICAgaWYgKGV4Lmhhc093blByb3BlcnR5KFwiYnJlYXN0XCIpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvcCA9IHtcclxuICAgICAgICAgICAgeDogZXguYnJlYXN0LmNsZWF2YWdlLnggKyAwLjUsXHJcbiAgICAgICAgICAgIHk6IGV4LmJyZWFzdC5jbGVhdmFnZS55ICsgdGhpcy5icmVhc3RTaXplICogMC40XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBib3QgPSBleHRyYWN0UG9pbnQoZXguYnJlYXN0LmJvdCk7XHJcblxyXG4gICAgICAgIC8vIGlubmVyIHRvIHRvcFxyXG4gICAgICAgIHRvcC5jcDEgPSBjb250aW51ZUN1cnZlKGV4LmJyZWFzdC5pbiwgZXguYnJlYXN0LmNsZWF2YWdlKTtcclxuXHJcblxyXG4gICAgICAgIGJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IHRvcC54LFxyXG4gICAgICAgICAgICB5OiB0b3AueSAqIDAuMyArIGJvdC55ICogMC43XHJcbiAgICAgICAgfTtcclxuICAgICAgICBib3QuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiBib3QueCAtIDYgKyB0aGlzLmJyZWFzdFNpemUgKiAwLjMyLFxyXG4gICAgICAgICAgICB5OiBib3QueSArIDdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gW2JvdCwgZXguYnJlYXN0LmluLCBleC5icmVhc3QuY2xlYXZhZ2UsIHRvcCwgYm90XTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgTGVmdEJyZWFzdFVuZGVyU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2NoZXN0XCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBmb3JjZWRTaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBpZiAoZXguaGFzT3duUHJvcGVydHkoXCJicmVhc3RcIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9wID0ge1xyXG4gICAgICAgICAgICB4OiBleC5icmVhc3QuY2xlYXZhZ2UueCArIDAuNSxcclxuICAgICAgICAgICAgeTogZXguYnJlYXN0LmNsZWF2YWdlLnkgKyB0aGlzLmJyZWFzdFNpemUgKiAwLjRcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGJvdCA9IGV4dHJhY3RQb2ludChleC5icmVhc3QuYm90KTtcclxuXHJcbiAgICAgICAgLy8gaW5uZXIgdG8gdG9wXHJcbiAgICAgICAgdG9wLmNwMSA9IGNvbnRpbnVlQ3VydmUoZXguYnJlYXN0LmluLCBleC5icmVhc3QuY2xlYXZhZ2UpO1xyXG5cclxuXHJcbiAgICAgICAgY29uc3QgY2xlYXZhZ2UgPSBleHRyYWN0UG9pbnQoZXguYnJlYXN0LmNsZWF2YWdlKTtcclxuICAgICAgICBjbGVhdmFnZS54IC09IHRoaXMuYnJlYXN0U2l6ZSAqIDAuMDU7XHJcbiAgICAgICAgY2xlYXZhZ2UueSAtPSB0aGlzLmJyZWFzdFNpemUgKiAwLjAyO1xyXG4gICAgICAgIGNsZWF2YWdlLmNwMSA9IHtcclxuICAgICAgICAgICAgeDogdG9wLnggKiAxLjAgKyBjbGVhdmFnZS54ICogMC4wLFxyXG4gICAgICAgICAgICB5OiB0b3AueSAtIHRoaXMuYnJlYXN0U2l6ZSAqIDAuMDJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNsZWF2YWdlLmNwMiA9IHtcclxuICAgICAgICAgICAgeDogY2xlYXZhZ2UueCxcclxuICAgICAgICAgICAgeTogY2xlYXZhZ2UueSAqIDAuNSArIHRvcC55ICogMC41XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgYm90LmNwMSA9IHtcclxuICAgICAgICAgICAgeDogY2xlYXZhZ2UueCAtIHRoaXMuYnJlYXN0U2l6ZSAqIDAuMDIsXHJcbiAgICAgICAgICAgIHk6IGNsZWF2YWdlLnkgLSB0aGlzLmJyZWFzdFNpemUgKiAwLjMgLSA1XHJcbiAgICAgICAgfTtcclxuICAgICAgICBib3QuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiBib3QueCAtIDIgLSB0aGlzLmJyZWFzdFNpemUgKiAwLjA1LFxyXG4gICAgICAgICAgICB5OiBib3QueSAtIDIgLSB0aGlzLmJyZWFzdFNpemUgKiAwLjAzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtib3QsIGV4LmJyZWFzdC5pbiwgZXguYnJlYXN0LmNsZWF2YWdlLCB0b3AsIGNsZWF2YWdlLCBib3RdO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBSaWdodEJyZWFzdFNoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBmb3JjZWRTaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNoYWRpbmdNZWRpdW07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBpZiAoZXguaGFzT3duUHJvcGVydHkoXCJicmVhc3RcIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYm90ID0gZXh0cmFjdFBvaW50KGV4LmJyZWFzdC5ib3QpO1xyXG5cclxuICAgICAgICBjb25zdCBbdGlwLCBjcDEsIGNwMl0gPSBhZGp1c3RQb2ludHMoLXRoaXMuYnJlYXN0U2l6ZSAqIDAuMjUsXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIGV4LmJyZWFzdC50aXAsXHJcbiAgICAgICAgICAgIGV4LmJyZWFzdC5ib3QuY3AxLFxyXG4gICAgICAgICAgICBleC5icmVhc3QuYm90LmNwMik7XHJcbiAgICAgICAgYm90LmNwMSA9IGNwMTtcclxuICAgICAgICBib3QuY3AyID0gY3AyO1xyXG5cclxuICAgICAgICBjb25zdCBbb3V0VGlwLCBvdXRUb3BdID0gYWRqdXN0UG9pbnRzKHRoaXMuYnJlYXN0U2l6ZSAqIDAuMSxcclxuICAgICAgICAgICAgLXRoaXMuYnJlYXN0U2l6ZSAqIDAuMTIsXHJcbiAgICAgICAgICAgIHJldmVyc2VEcmF3UG9pbnQoZXguYnJlYXN0LnRpcCwgZXguYnJlYXN0LmJvdCksXHJcbiAgICAgICAgICAgIHJldmVyc2VEcmF3UG9pbnQoZXguYnJlYXN0LnRvcCwgZXguYnJlYXN0LnRpcCkpO1xyXG4gICAgICAgIG91dFRvcC54ID0gZXguYnJlYXN0LnRvcC54O1xyXG4gICAgICAgIG91dFRvcC55ID0gZXguYnJlYXN0LnRvcC55O1xyXG5cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBleC5icmVhc3QudG9wLFxyXG4gICAgICAgICAgICB0aXAsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgb3V0VGlwLFxyXG4gICAgICAgICAgICBvdXRUb3BcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBSaWdodEJyZWFzdFVuZGVyU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2NoZXN0XCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGZvcmNlZFNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBpZiAoZXguaGFzT3duUHJvcGVydHkoXCJicmVhc3RcIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRpcCA9IGFkanVzdChleC5icmVhc3QudGlwLFxyXG4gICAgICAgICAgICB0aGlzLmJyZWFzdFNpemUgKiAwLjA0NSxcclxuICAgICAgICAgICAgLXRoaXMuYnJlYXN0U2l6ZSAqIDAuMDcpO1xyXG4gICAgICAgIGNvbnN0IGJvdCA9IGV4dHJhY3RQb2ludChleC5icmVhc3QuYm90KTtcclxuICAgICAgICBib3QuY3AxID0gY29udGludWVDdXJ2ZShleC5icmVhc3QudG9wLCB0aXAsIDEuNSk7XHJcbiAgICAgICAgYm90LmNwMiA9IHtcclxuICAgICAgICAgICAgeDogYm90LnggKyB0aGlzLmJyZWFzdFNpemUgKiAwLjA5LFxyXG4gICAgICAgICAgICB5OiBib3QueSAtIDEgLSB0aGlzLmJyZWFzdFNpemUgKiAwLjFcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBicmVhc3RGdWxsVGhyZXNob2xkID0gMTA7XHJcbiAgICAgICAgaWYgKHRoaXMuYnJlYXN0U2l6ZSA8IGJyZWFzdEZ1bGxUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgY29uc3QgYnJlYXN0TGFjayA9IGJyZWFzdEZ1bGxUaHJlc2hvbGQgLSB0aGlzLmJyZWFzdFNpemU7XHJcbiAgICAgICAgICAgIHRvcC5jcDEgPSBhZGp1c3QodG9wLmNwMSwgLWJyZWFzdExhY2sgKiAwLjUsIGJyZWFzdExhY2sgKiAwLjUpO1xyXG4gICAgICAgICAgICB0b3AuY3AyID0gYWRqdXN0KHRvcC5jcDIsIC1icmVhc3RMYWNrICogMC43LCBicmVhc3RMYWNrICogMC40KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGV4LmJyZWFzdC50b3AsXHJcbiAgICAgICAgICAgIHRpcCxcclxuICAgICAgICAgICAgYm90LFxyXG4gICAgICAgICAgICByZXZlcnNlRHJhd1BvaW50KGV4LmJyZWFzdC50aXAsIGV4LmJyZWFzdC5ib3QpLFxyXG4gICAgICAgICAgICByZXZlcnNlRHJhd1BvaW50KGV4LmJyZWFzdC50b3AsIGV4LmJyZWFzdC50aXApXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIENoZXN0IGV4dGVuZHMgQm9keVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJjaGVzdFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJhcm1cIl1cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENoZXN0SHVtYW4gZXh0ZW5kcyBDaGVzdCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtcclxuICAgICAgICAgICAgICAgIExlZnRCcmVhc3RTaGFkaW5nLFxyXG4gICAgICAgICAgICAgICAgTGVmdEJyZWFzdFVuZGVyU2hhZGluZyxcclxuICAgICAgICAgICAgICAgIFJpZ2h0QnJlYXN0U2hhZGluZyxcclxuICAgICAgICAgICAgICAgIC8vIFJpZ2h0QnJlYXN0VW5kZXJTaGFkaW5nXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJyZWFzdFNpemUgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGJyZWFzdEZ1bGxUaHJlc2hvbGQgPSAxMDtcclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBicmVhc3QgPSBleC5icmVhc3QgPSB7fTtcclxuICAgICAgICAgICAgbGV0IGJyZWFzdEZ1bGxuZXNzID0gKHRoaXMuYnJlYXN0U2l6ZSAtIGJyZWFzdEZ1bGxUaHJlc2hvbGQpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGJyZWFzdC50b3AgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5hcm1waXQueCAtIDIuMiArIHRoaXMuYnJlYXN0U2l6ZSAqIDAuMDIsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5hcm1waXQueSArIDAuNSArIHRoaXMuaGVpZ2h0ICogMC4wMjMgLSB0aGlzLmJyZWFzdFNpemUgKiAwLjA1LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuYnJlYXN0U2l6ZSA8IGJyZWFzdEZ1bGxUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFzdC50b3AueCArPSBicmVhc3RGdWxsbmVzcyAqIDAuMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2NhbGVzIHdpdGggZ3JlYXRlciBmdWxsbmVzc1xyXG4vL1dXQkIgREFIQUtNQSBcclxuXHJcbiAgICAgICAgICAgIGxldCBicmVhc3REcm9vcGluZXNzID0gTWF0aC5wb3coY2xhbXAoYnJlYXN0RnVsbG5lc3MgLSBtb2RzLmJyZWFzdFBlcmtpbmVzcyxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAxMDApLCAyKSAqIDAuMDA0NTtcclxuXHRcdFx0LypcclxuXHRcdFx0IGxldCBicmVhc3REcm9vcGluZXNzID0gTWF0aC5wb3coY2xhbXAoYnJlYXN0RnVsbG5lc3MgLSBtb2RzLmJyZWFzdFBlcmtpbmVzcyxcclxuICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAxMDApLCAyKSAqIDAuMDA2O1xyXG5cdFx0XHQqL1xyXG4gICAgICAgICAgICBicmVhc3QuY2VudGVyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguYXJtcGl0LnggLSAzICsgYnJlYXN0RnVsbG5lc3MgKiAwLjAyICsgYnJlYXN0RHJvb3BpbmVzcyAqIDAuMDIsXHJcbiAgICAgICAgICAgICAgICB5OiBicmVhc3QudG9wLnkgLSA2IC0gYnJlYXN0RnVsbG5lc3MgKiAwLjAzIC0gYnJlYXN0RHJvb3BpbmVzcyArXHJcbiAgICAgICAgICAgICAgICAgICBtb2RzLmJyZWFzdFBlcmtpbmVzcyAqIDAuMDJcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyB1bnRpbCBicmVhc3QgYmVjb21lcyBmdWxsLCBpbmNyZWFzaW5nIGJyZWFzdCBzaXplIHNpbXBseSBtYWtlcyBpdCBmdWxsZXJcclxuICAgICAgICAgICAgLy8gcmF0aGVyIHRoYW4gaW5jcmVhc2luZyBpdHMgc2l6ZVxyXG4gICAgICAgICAgICBicmVhc3RGdWxsbmVzcyA9IE1hdGgubWF4KDAsIGJyZWFzdEZ1bGxuZXNzKTtcclxuXHJcblxyXG4gICAgICAgICAgICBicmVhc3QudGlwID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiBicmVhc3QuY2VudGVyLnggKyAzLjMgKyBicmVhc3RGdWxsbmVzcyAqIDAuMDcgK1xyXG4gICAgICAgICAgICAgICAgICAgICBtb2RzLmJyZWFzdFBlcmtpbmVzcyAqIDAuMDQsXHJcbiAgICAgICAgICAgICAgICB5ICA6IGJyZWFzdC5jZW50ZXIueSArXHJcbiAgICAgICAgICAgICAgICAgICAgIG1vZHMuYnJlYXN0UGVya2luZXNzICogMC4wNyxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGJyZWFzdC50b3AueCArIDIgKyBicmVhc3RGdWxsbmVzcyAqIDAuMDcgLSBicmVhc3REcm9vcGluZXNzICogMC41LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGJyZWFzdC50b3AueSAtIDMgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGNsYW1wKG1vZHMuYnJlYXN0UGVya2luZXNzICogMC4xNSwgLTQsIDQpIC1cclxuICAgICAgICAgICAgICAgICAgICAgICBicmVhc3REcm9vcGluZXNzICogMC43XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBicmVhc3QudGlwLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGJyZWFzdC50aXAueCAtIGJyZWFzdERyb29waW5lc3MgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5OiBicmVhc3QudGlwLnkgKyAyICsgYnJlYXN0RnVsbG5lc3MgKiAwLjA3XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBicmVhc3QuYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYnJlYXN0LmNlbnRlci54IC0gMS41ICsgYnJlYXN0RnVsbG5lc3MgKiAwLjAxLFxyXG4gICAgICAgICAgICAgICAgeTogYnJlYXN0LmNlbnRlci55IC0gMy44IC0gYnJlYXN0RnVsbG5lc3MgKiAwLjA4IC0gYnJlYXN0RHJvb3BpbmVzcyAqIDAuMDUgK1xyXG4gICAgICAgICAgICAgICAgICAgbW9kcy5icmVhc3RQZXJraW5lc3MgKiAwLjA4LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBicmVhc3QuYm90LmNwMSA9IGNvbnRpbnVlQ3VydmUoYnJlYXN0LnRvcCwgYnJlYXN0LnRpcCxcclxuICAgICAgICAgICAgICAgIGNsYW1wKDAuNiArIGJyZWFzdERyb29waW5lc3MgKiAwLjA1LCAwLCAxKSk7XHJcbiAgICAgICAgICAgIGJyZWFzdC5ib3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYnJlYXN0LmJvdC54ICsgMy41ICsgYnJlYXN0RnVsbG5lc3MgKiAwLjA1LFxyXG4gICAgICAgICAgICAgICAgeTogYnJlYXN0LmJvdC55XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBvbmx5IHN0YXJ0IHNob3dpbmcgdXAgd2hlbiBicmVhc3RTaXplID4gMTVcclxuICAgICAgICAgICAgYnJlYXN0LmNsZWF2YWdlID0ge1xyXG4gICAgICAgICAgICAgICAgeDogMC41LFxyXG4gICAgICAgICAgICAgICAgeTogYnJlYXN0LnRpcC55LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBicmVhc3QuY2xlYXZhZ2UuY3AxID0gY29udGludWVDdXJ2ZShicmVhc3QudGlwLCBicmVhc3QuYm90KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFzdC5jbGVhdmFnZS5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBicmVhc3QuY2xlYXZhZ2UueCxcclxuICAgICAgICAgICAgICAgIHk6IGJyZWFzdC5jbGVhdmFnZS55IC0gMi41IC0gYnJlYXN0RnVsbG5lc3MgKiAwLjA1XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKGNsYW1wKChicmVhc3RGdWxsbmVzcyArIDUpIC8gMzAsIDAsIDEpLFxyXG4gICAgICAgICAgICAgICAgYnJlYXN0LmJvdCxcclxuICAgICAgICAgICAgICAgIGJyZWFzdC5jbGVhdmFnZSk7XHJcbiAgICAgICAgICAgIGJyZWFzdC5pbiA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgICAgIGJyZWFzdC5jbGVhdmFnZSA9IHNwLnJpZ2h0LnAyO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZShjbGFtcCgxIC0gdGhpcy5icmVhc3RTaXplIC8gYnJlYXN0RnVsbFRocmVzaG9sZCwgMCwgMSksIGV4LmJyZWFzdC50b3AsXHJcbiAgICAgICAgICAgIGV4LmJyZWFzdC50aXApO1xyXG4gICAgICAgIGNvbnN0IHRvcCA9IHNwLnJpZ2h0LnAxO1xyXG4gICAgICAgIGV4LmJyZWFzdC50aXAgPSBzcC5yaWdodC5wMjtcclxuICAgICAgICBleC5icmVhc3QudG9wID0gY29ubmVjdEVuZFBvaW50cyhleC5icmVhc3QuY2xlYXZhZ2UsIHRvcCk7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgYnJlYWtQb2ludCxcclxuICAgICAgICAgICAgLy8gZXguYnJlYXN0LnRvcCxcclxuICAgICAgICAgICAgdG9wLFxyXG4gICAgICAgICAgICBleC5icmVhc3QudGlwLFxyXG4gICAgICAgICAgICBleC5icmVhc3QuYm90LFxyXG4gICAgICAgICAgICBleC5icmVhc3QuaW4sXHJcbiAgICAgICAgICAgIGV4LmJyZWFzdC5jbGVhdmFnZSxcclxuICAgICAgICAgICAgZXguYnJlYXN0LnRvcCxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE5pcHBsZXNIdW1hbiBleHRlbmRzIENoZXN0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGZpbGwgICAgICA6IG5vbmUsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2NoZXN0XCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZUNsaXAoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZShpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4LmJhc2VMaXBDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMaW5lV2lkdGgoYXZhdGFyKSB7XHJcbiAgICAgICAgcmV0dXJuIGF2YXRhci5kaW0uYnJlYXN0U2l6ZSAqIDAuMDUgKyBhdmF0YXIuZGltLmFyZW9sYVNpemUgKiAwLjE7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGV4LmNoZXN0ID0gZXguY2hlc3QgfHwge307XHJcbiAgICAgICAgaWYgKGNhbGN1bGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAoZXguYnJlYXN0KSB7XHJcbiAgICAgICAgICAgICAgICBleC5jaGVzdC5uaXBwbGVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4LmJyZWFzdC5jZW50ZXIueCAtIDEuNSArIHRoaXMuYnJlYXN0U2l6ZSAqIDAuMDMsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogZXguYnJlYXN0LnRpcC55IC0gdGhpcy5icmVhc3RTaXplICogMC4wMyArIG1vZHMuYnJlYXN0UGVya2luZXNzICogMC4xXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGRyYXcgcmVsYXRpdmUgdG8gYXJtcGl0XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleC5jaGVzdC5uaXBwbGVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4LmFybXBpdC54IC0gNSAtIHRoaXMudXBwZXJNdXNjbGUgKiAwLjA4LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGV4LmFybXBpdC55IC0gMyxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0XHJcblx0XHRcdC8vQ0hBS1JBIC0gQ0VOVEVSIE9GIENIRVNULCBCRVRXRUVOIE1BTEUgTklQUExFUywgVE8gRklUIFRBVFRPT1MgQU5EIFNUVUZGXHJcblx0XHRcdCBleC5jaGVzdC5jZW50ZXIgPSB7XHJcblx0XHRcdFx0eDogMCxcclxuXHRcdFx0XHR5OiBleC5hcm1waXQueSAtIDMsXHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFticmVha1BvaW50LCBleC5jaGVzdC5uaXBwbGVzXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Qm9keVBhcnR9IGZyb20gXCIuL3BhcnRcIjtcclxuaW1wb3J0IHthdmVyYWdlUXVhZHJhdGljfSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcbmltcG9ydCB7TWF0ZXJpYWxzfSBmcm9tIFwiLi4vbWF0ZXJpYWxzXCI7XHJcblxyXG4vLyBjbGFzc2ljIG1peGluIHBhdHRlcm5cclxuY2xhc3MgRmVldCBleHRlbmRzIEJvZHlQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgOiBcImZlZXRcIixcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLkZST05ULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEZlZXRIdW1hbiBleHRlbmRzIEZlZXQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzLCBjYWxjdWxhdGUpIHtcclxuXHJcbiAgICAgICAgaWYgKGNhbGN1bGF0ZSkge1xyXG4gICAgICAgICAgICAvLyBleHBlY3RzIGFua2xlLm91dCB0byBleGlzdFxyXG4gICAgICAgICAgICBleC5hbmtsZS5vdXRib3QgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5hbmtsZS5vdXQueCArIDAuMixcclxuICAgICAgICAgICAgICAgIHk6IGV4LmFua2xlLm91dC55IC0gMi41LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC5hbmtsZS5vdXRib3QuY3AxID1cclxuICAgICAgICAgICAgICAgIGF2ZXJhZ2VRdWFkcmF0aWMoZXguYW5rbGUub3V0LCBleC5hbmtsZS5vdXRib3QsIDAuNSwgMC41LCAwLjUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9lID0gZXgudG9lID0gZXgudG9lIHx8IHt9O1xyXG4gICAgICAgICAgICB0b2UuY2VudGVyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguYW5rbGUub3V0LnggKiAwLjUgKyBleC5hbmtsZS5pbi54ICogMC41LFxyXG4gICAgICAgICAgICAgICAgeTogMSArIHRoaXMubGVnRmVtICogMC4wMiAtIG1vZHMuZmVldExlbmd0aCAqIDAuMVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0b2Uub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiB0b2UuY2VudGVyLnggKyA0IC0gdGhpcy5sZWdGZW0gKiAwLjA0ICsgbW9kcy5mZWV0V2lkdGggKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5ICA6IHRvZS5jZW50ZXIueSxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4LmFua2xlLm91dGJvdC54LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGV4LmFua2xlLm91dGJvdC55XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0b2Uub3V0LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRvZS5vdXQueCArIHRoaXMubGVnRmVtICogMC4wMixcclxuICAgICAgICAgICAgICAgIHk6IHRvZS5vdXQueSArIDFcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRvZS5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRvZS5jZW50ZXIueCAtIDMuMyAtIHRoaXMubGVnRmVtICogMC4wMiAtIG1vZHMuZmVldFdpZHRoICogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogdG9lLm91dC55IC0gMiAtIG1vZHMuZmVldExlbmd0aCAqIDAuMSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdG9lLmluLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRvZS5vdXQueCArIDEsXHJcbiAgICAgICAgICAgICAgICB5OiB0b2Uub3V0LnkgLSAxIC0gbW9kcy5mZWV0QmlhcyAqIDAuMSAqICh0b2Uub3V0LnkgLSB0b2UuaW4ueSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdG9lLmluLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRvZS5pbi54ICsgMi41LFxyXG4gICAgICAgICAgICAgICAgeTogdG9lLmluLnkgLSAwLjUgLSB0aGlzLmxlZ0ZlbSAqIDAuMDIsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBleC5hbmtsZS5pbmJvdCA9IHtcclxuICAgICAgICAgICAgICAgIHggIDogdG9lLmNlbnRlci54IC0gNCArIHRoaXMubGVnRmVtICogMC4wMyxcclxuICAgICAgICAgICAgICAgIHkgIDogZXguYW5rbGUub3V0Ym90LnkgLSAwLjUgKyB0aGlzLmxlZ0ZlbSAqIDAuMDMsXHJcbiAgICAgICAgICAgICAgICBjcDE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiB0b2UuaW4ueCAtIDEuNSxcclxuICAgICAgICAgICAgICAgICAgICB5OiB0b2UuaW4ueSArIDEuNVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGV4LmFua2xlLmluYm90LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmFua2xlLmluYm90LnggKyAxLFxyXG4gICAgICAgICAgICAgICAgeTogZXguYW5rbGUuaW5ib3QueSAtIDIsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBkZWZpbmUgZm9yIGxlZ1xyXG4gICAgICAgICAgICBleC5hbmtsZS5pbi5jcDEgPVxyXG4gICAgICAgICAgICAgICAgYXZlcmFnZVF1YWRyYXRpYyhleC5hbmtsZS5pbmJvdCwgZXguYW5rbGUuaW4sIDAuMywgLTAuNSwgMC41KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbZXguYW5rbGUub3V0Ym90LCBleC50b2Uub3V0LCBleC50b2UuaW4sIGV4LmFua2xlLmluYm90LF07XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSG9vZkhvcnNlIGV4dGVuZHMgRmVldCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICB1bmNvdmVyYWJsZTogdHJ1ZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGVyaWFscy5icm93bkZ1ci5zdHJva2U7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gTWF0ZXJpYWxzLmJyb3duRnVyLmZpbGw7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG5cclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIC8vIGV4cGVjdHMgYW5rbGUub3V0IHRvIGV4aXN0XHJcbiAgICAgICAgICAgIGV4LmFua2xlLm91dGJvdCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmFua2xlLm91dC54ICsgMC4yLFxyXG4gICAgICAgICAgICAgICAgeTogZXguYW5rbGUub3V0LnkgLSAyLjUsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV4LmFua2xlLm91dGJvdC5jcDEgPVxyXG4gICAgICAgICAgICAgICAgYXZlcmFnZVF1YWRyYXRpYyhleC5hbmtsZS5vdXQsIGV4LmFua2xlLm91dGJvdCwgMC41LCAwLjUsIDAuNSk7XHJcblxyXG4gICAgICAgICAgICBleC50b2UgPSBleC50b2UgfHwge307XHJcbiAgICAgICAgICAgIGV4LnRvZS5vdXQgPSB7XHJcbiAgICAgICAgICAgICAgICB4ICA6IGV4LmFua2xlLm91dGJvdC54ICsgMyAtIHRoaXMubGVnRmVtICogMC4wNyxcclxuICAgICAgICAgICAgICAgIHkgIDogMSArIHRoaXMubGVnRmVtICogMC4wMixcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4LmFua2xlLm91dGJvdC54LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGV4LmFua2xlLm91dGJvdC55XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC50b2Uub3V0LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LnRvZS5vdXQueCArIHRoaXMubGVnRmVtICogMC4wMixcclxuICAgICAgICAgICAgICAgIHk6IGV4LnRvZS5vdXQueSArIDFcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGV4LnRvZS5pbiA9IHtcclxuICAgICAgICAgICAgICAgIHggIDogZXgudG9lLm91dC54IC0gNyArIHRoaXMubGVnRmVtICogMC4wNSxcclxuICAgICAgICAgICAgICAgIHkgIDogZXgudG9lLm91dC55IC0gMixcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4LnRvZS5vdXQueCArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogZXgudG9lLm91dC55IC0gMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC50b2UuaW4uY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXgudG9lLmluLnggKyAyLjUsXHJcbiAgICAgICAgICAgICAgICB5OiBleC50b2UuaW4ueSAtIDAuNSAtIHRoaXMubGVnRmVtICogMC4wMixcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGV4LmFua2xlLmluYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiBleC50b2UuaW4ueCAtIDAuNSArIHRoaXMubGVnRmVtICogMC4wMixcclxuICAgICAgICAgICAgICAgIHkgIDogZXguYW5rbGUub3V0Ym90LnkgLSAwLjUgKyB0aGlzLmxlZ0ZlbSAqIDAuMDMsXHJcbiAgICAgICAgICAgICAgICBjcDE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiBleC50b2UuaW4ueCAtIDEuNSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBleC50b2UuaW4ueSArIDEuNVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGV4LmFua2xlLmluYm90LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmFua2xlLmluYm90LnggKyAxLFxyXG4gICAgICAgICAgICAgICAgeTogZXguYW5rbGUuaW5ib3QueSAtIDIsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBkZWZpbmUgZm9yIGxlZ1xyXG4gICAgICAgICAgICBleC5hbmtsZS5pbi5jcDEgPVxyXG4gICAgICAgICAgICAgICAgYXZlcmFnZVF1YWRyYXRpYyhleC5hbmtsZS5pbmJvdCwgZXguYW5rbGUuaW4sIDAuMywgLTAuNSwgMC41KTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW2V4LmFua2xlLm91dGJvdCwgZXgudG9lLm91dCwgZXgudG9lLmluLCBleC5hbmtsZS5pbmJvdCxdO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7RmFjZVBhcnR9IGZyb20gXCIuL2ZhY2VfcGFydFwiO1xyXG5pbXBvcnQge2FkanVzdENvbG9yfSBmcm9tIFwiLi4vdXRpbC91dGlsaXR5XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge2FkanVzdCwgZXh0cmFjdFBvaW50LCBjbGFtcCwgc3BsaXRDdXJ2ZSwgc2ltcGxlUXVhZHJhdGljfSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdGZpbmRCZXR3ZWVuLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuXHJcbmNsYXNzIEVhcnMgZXh0ZW5kcyBGYWNlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImVhcnNcIixcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgYmVsb3dQYXJ0czogW1wicGFydHMgaGVhZFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwRmlsbCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwU3Ryb2tlKCkge1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoaWdub3JlLCBleCkge1xyXG4gICAgICAgIHJldHVybiBhZGp1c3RDb2xvcihleC5iYXNlRmlsbCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgczogLTE4LFxyXG4gICAgICAgICAgICAgICAgbDogLTJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGluZVdpZHRoKGF2YXRhcikge1xyXG4gICAgICAgIHJldHVybiBjbGFtcCgxLjcgLSBhdmF0YXIuZGltLmZhY2VGZW0gKiAwLjA1LCAwLjcsIDEuNSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRWFyc0h1bWFuIGV4dGVuZHMgRWFycyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgY29uc3QgZWFyID0gZXguZWFyID0ge307XHJcbiAgICAgICAgICAgIGVhci50b3AgPSBleHRyYWN0UG9pbnQoZXguc2t1bGwuc2lkZSk7XHJcbiAgICAgICAgICAgIGVhci5ib3QgPSBleHRyYWN0UG9pbnQoZXguc2t1bGwuYm90KTtcclxuICAgICAgICAgICAgZWFyLm1pZCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci50b3AueCArIDAuNixcclxuICAgICAgICAgICAgICAgIHk6IGVhci50b3AueSAqIDAuNCArIGVhci5ib3QueSAqIDAuNlxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlYXIubWlkLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci50b3AueCArIDEuNSxcclxuICAgICAgICAgICAgICAgIHk6IGVhci50b3AueSArIDAuNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlYXIubWlkLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci5taWQueCArIDAuNSxcclxuICAgICAgICAgICAgICAgIHk6IGVhci5taWQueSArIDAuOVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlYXIuYm90LmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci5taWQueCxcclxuICAgICAgICAgICAgICAgIHk6IGVhci5taWQueSAtIDAuN1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlYXIuYm90LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci5ib3QueCArIDAuNixcclxuICAgICAgICAgICAgICAgIHk6IGVhci5ib3QueSAtIDAuMVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2V4LmVhci50b3AsIGV4LmVhci5taWQsIGV4LmVhci5ib3RdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEVhcnNFbGYgZXh0ZW5kcyBFYXJzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgaWYgKGNhbGN1bGF0ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBlYXIgPSBleC5lYXIgPSB7fTtcclxuICAgICAgICAgICAgZWFyLnRvcCA9IGV4dHJhY3RQb2ludChleC5za3VsbC5zaWRlKTtcclxuICAgICAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuMywgZXguc2t1bGwuc2lkZSwgZXguc2t1bGwuYm90KTtcclxuICAgICAgICAgICAgZWFyLmJvdCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgICAgIGVhci5taWQgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBlYXIudG9wLnggKyA2ICsgbW9kcy5lYXJsb2JlTGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgeTogZWFyLnRvcC55ICsgMC41XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGVhci5taWQuY3AxID0gc2ltcGxlUXVhZHJhdGljKGVhci50b3AsIGVhci5taWQsIDAuMzAsIDEpO1xyXG4gICAgICAgICAgICBlYXIuYm90LmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci5taWQueCAtIDIsXHJcbiAgICAgICAgICAgICAgICB5OiBlYXIubWlkLnkgLSAyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGVhci5ib3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLmJvdC54ICsgMixcclxuICAgICAgICAgICAgICAgIHk6IGVhci5ib3QueSArIDRcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbZXguZWFyLnRvcCwgZXguZWFyLm1pZCwgZXguZWFyLmJvdF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRWFyc0VsZjIgZXh0ZW5kcyBFYXJzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblx0XHRpZiAoY2FsY3VsYXRlKXtcclxuXHRcdFx0Y29uc3QgZWFyID0gZXguZWFyID0ge307XHJcblx0XHRcdFxyXG5cdFx0XHRlYXIudG9wID0gZXh0cmFjdFBvaW50KGV4LnNrdWxsLnNpZGUpO1xyXG5cdFx0XHRlYXIuYm90ID0gZXh0cmFjdFBvaW50KGV4LnNrdWxsLmJvdCk7XHJcblxyXG5cdFx0XHRlYXIubWlkID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLnRvcC54ICsgMC42LFxyXG4gICAgICAgICAgICAgICAgeTogZWFyLnRvcC55ICogMC40ICsgZWFyLmJvdC55ICogMC42XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGVhci5taWQuY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLnRvcC54ICsgMS41ICsgKDMgKiBtb2RzLmVhcmxvYmVMZW5ndGgpLCAvL29ubHkgdGhpc1xyXG4gICAgICAgICAgICAgICAgeTogZWFyLnRvcC55ICsgMC41ICsgKDQgKiBtb2RzLmVhcmxvYmVMZW5ndGgpIC8vdGhpc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlYXIubWlkLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci5taWQueCArIDAuNSAtICgwLjUgKiBtb2RzLmVhcmxvYmVMZW5ndGgpLCAvL2FuZCB0aGlzIGFyZSBkaWZmZXJlbnQgZnJvbSBodW1hbiBlYXJzLCBzbW9vdGggdHJhbnNpdGlvbiBiZXR3ZWVuIHRoZW0gcG9zc2libGVcclxuICAgICAgICAgICAgICAgIHk6IGVhci5taWQueSArIDAuOSBcclxuICAgICAgICAgICAgfTtcclxuXHRcdFx0XHJcblx0XHRcdGVhci5ib3QuY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLm1pZC54LFxyXG4gICAgICAgICAgICAgICAgeTogZWFyLm1pZC55IC0gMC43XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGVhci5ib3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLmJvdC54ICsgMC42LFxyXG4gICAgICAgICAgICAgICAgeTogZWFyLmJvdC55IC0gMC4xXHJcbiAgICAgICAgICAgIH07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gW1xyXG5cdFx0XHRleC5lYXIudG9wLCBcclxuXHRcdFx0ZXguZWFyLm1pZCwgXHJcblx0XHRcdGV4LmVhci5ib3RcclxuXHRcdF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENhdEVhcnMgZXh0ZW5kcyBFYXJzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbChpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmJhc2VMaXBDb2xvcixcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbDogLTEwLFxyXG4gICAgICAgICAgICAgICAgczogLTEwXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cdFxyXG5cdFxyXG5cdHN0cm9rZShpZ25vcmUsIGV4KSB7XHJcblx0XHRyZXR1cm4gYWRqdXN0Q29sb3IoZXguaGFpckZpbGwse1xyXG5cdFx0XHRsOiAtMTAsXHJcblx0XHRcdHM6IC0xMFxyXG5cdFx0fSk7XHJcbiAgICB9XHJcblx0XHJcblx0Z2V0TGluZVdpZHRoKGF2YXRhcikge1xyXG4gICAgICAgIHJldHVybiAyLjU7XHJcbiAgICB9XHJcblx0XHJcblx0XHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblx0XHRpZiAoY2FsY3VsYXRlKXtcclxuXHRcdFx0Y29uc3QgZWFyID0gZXguZWFyID0ge307XHJcblx0XHRcdFxyXG5cdFx0XHRlYXIudG9wID0gZmluZEJldHdlZW4oZXguc2t1bGwsZXguc2t1bGwuc2lkZSwgMC42NiApO1xyXG4gXHJcblx0XHRcdGVhci5ib3QgPSBleHRyYWN0UG9pbnQoZXguc2t1bGwuYm90KTtcclxuXHJcblx0XHRcdGVhci5taWQgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBlYXIudG9wLnggKyAoMTAgKiBtb2RzLmVhcmxvYmVMZW5ndGgvNCksXHJcbiAgICAgICAgICAgICAgICB5OiBlYXIudG9wLnkgKyAoNSAqIG1vZHMuZWFybG9iZUxlbmd0aC8zKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgIFxyXG4vKlxyXG5cdCAgIGVhci5taWQuY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLnRvcC54ICsgMS41ICsgKDMgKiBtb2RzLmVhcmxvYmVMZW5ndGgpLCAvL29ubHkgdGhpc1xyXG4gICAgICAgICAgICAgICAgeTogZWFyLnRvcC55ICsgMC41ICsgKDQgKiBtb2RzLmVhcmxvYmVMZW5ndGgpIC8vdGhpc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlYXIubWlkLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGVhci5taWQueCArIDAuNSAtICgwLjUgKiBtb2RzLmVhcmxvYmVMZW5ndGgpLCAvL2FuZCB0aGlzIGFyZSBkaWZmZXJlbnQgZnJvbSBodW1hbiBlYXJzLCBzbW9vdGggdHJhbnNpdGlvbiBiZXR3ZWVuIHRoZW0gcG9zc2libGVcclxuICAgICAgICAgICAgICAgIHk6IGVhci5taWQueSArIDAuOSBcclxuICAgICAgICAgICAgfTtcclxuXHRcdFx0XHJcblx0XHRcdGVhci5ib3QuY3AxID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLm1pZC54LFxyXG4gICAgICAgICAgICAgICAgeTogZWFyLm1pZC55IC0gMC43XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGVhci5ib3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZWFyLmJvdC54ICsgMC42LFxyXG4gICAgICAgICAgICAgICAgeTogZWFyLmJvdC55IC0gMC4xXHJcbiAgICAgICAgICAgIH07XHJcblx0XHRcdFxyXG5cdCovXHRcdFxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIFtcclxuXHRcdFx0ZXguZWFyLnRvcCwgXHJcblx0XHRcdGV4LmVhci5taWQsIFxyXG5cdFx0XHRleC5lYXIuYm90XHJcblx0XHRdO1xyXG4gICAgfVxyXG59XHJcbiAiLCJpbXBvcnQge0ZhY2VQYXJ0fSBmcm9tIFwiLi9mYWNlX3BhcnRcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgY2xhbXAsXHJcbiAgICBhZGp1c3QsXHJcbiAgICByb3RhdGVQb2ludHMsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuY2xhc3MgRXllcyBleHRlbmRzIEZhY2VQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZXllc1wiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBoZWFkXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEV5ZXNIdW1hbiBleHRlbmRzIEV5ZXMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwid2hpdGVcIjtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgbGV0IGggPSB0aGlzLmZhY2VMZW5ndGggKiAwLjE7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBleWVzID0gZXguZXllcyA9IHt9O1xyXG4gICAgICAgICAgICBleWVzLmNlbnRlciA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRoaXMuZmFjZVdpZHRoICogMC4wNDQ2OSAtIG1vZHMuZXllQ2xvc2VuZXNzICogMC4wMSArIHRoaXMuZXllU2l6ZSAqIDAuMDA1ICtcclxuICAgICAgICAgICAgICAgICAgIG1vZHMuZXllV2lkdGggKiAwLjA0LFxyXG4gICAgICAgICAgICAgICAgeTogZXguc2t1bGwueSAtIGggKiAwLjQyICsgbW9kcy5leWVIZWlnaHQgKiAwLjEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV5ZXMuaW4gPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleWVzLmNlbnRlci54IC0gMS43IC0gdGhpcy5leWVTaXplICogMC4wMDUgLSBtb2RzLmV5ZVdpZHRoICogMC4wNCxcclxuICAgICAgICAgICAgICAgIHk6IGV5ZXMuY2VudGVyLnkgLSAwLjUsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV5ZXMub3V0ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXllcy5pbi54ICsgMy41ICsgdGhpcy5leWVTaXplICogMC4wMTUgKyBtb2RzLmV5ZVdpZHRoICogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogZXllcy5pbi55ICsgMC4zXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCB3ID0gZXllcy5vdXQueCAtIGV5ZXMuaW4ueDtcclxuICAgICAgICAgICAgZXllcy50b3AgPSB7XHJcbiAgICAgICAgICAgICAgICB4ICA6IGV5ZXMuaW4ueCArIHcgKiAwLjQgKyB0aGlzLmZhY2VGZW0gKiAwLjAwOCxcclxuICAgICAgICAgICAgICAgIC8vIHg6IGV5ZXMuaW4ueCArIHcgKiAwLjUgKyBtb2RzLmV5ZUJpYXMgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5ICA6IGV5ZXMuaW4ueSArIDEgKyB0aGlzLmV5ZVNpemUgKiAwLjAxNSArIG1vZHMuZXllVG9wU2l6ZSAqIDAuMSxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV5ZXMuaW4ueCArIHcgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogZXllcy5pbi55ICsgY2xhbXAoMC45IC0gdGhpcy5mYWNlRmVtICogMC4wMTUsIDAuNCwgMikgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXllU2l6ZSAqIDAuMDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXllcy50b3AuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXllcy50b3AueCAtIHcgKiAwLjIgLSBtb2RzLmV5ZVRvcFNpemUgKiAwLjA1LFxyXG4gICAgICAgICAgICAgICAgeTogZXllcy50b3AueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleWVzLnRvcCA9IGFkanVzdChleWVzLnRvcCwgbW9kcy5leWVCaWFzICogMC4xLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGV5ZXMub3V0LmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV5ZXMudG9wLnggKyB3ICogMC4yLFxyXG4gICAgICAgICAgICAgICAgeTogZXllcy50b3AueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleWVzLm91dC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleWVzLm91dC54IC0gdyAqIDAuMSArIHRoaXMuZXllU2l6ZSAqIDAuMDEsXHJcbiAgICAgICAgICAgICAgICB5OiBleWVzLm91dC55ICsgMC41ICsgdGhpcy5leWVTaXplICogMC4wMVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gcmV0dXJuaW5nIGJhY2sgdG8gdGhlIGNlbnRlclxyXG4gICAgICAgICAgICBleWVzLmluLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV5ZXMub3V0LnggLSB3ICogY2xhbXAoMC4zIC0gbW9kcy5leWVCb3RCaWFzICogMC4wMywgMCwgMSksXHJcbiAgICAgICAgICAgICAgICAvLyB4OiBleWVzLm91dC54IC0gdyAqIDAuMyxcclxuICAgICAgICAgICAgICAgIHk6IGV5ZXMub3V0LnkgLSAwLjcgLSB0aGlzLmV5ZVNpemUgKiAwLjAyIC0gbW9kcy5leWVCb3RTaXplICogMC4xXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV5ZXMuaW4uY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXllcy5pbi54ICsgdyAqIGNsYW1wKDAuMiArIG1vZHMuZXllQm90QmlhcyAqIDAuMDIsIDAsIDEpLFxyXG4gICAgICAgICAgICAgICAgLy8geDogZXllcy5pbi54ICsgdyAqIDAuMixcclxuICAgICAgICAgICAgICAgIHk6IGV5ZXMuaW4ueVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcm90YXRlUG9pbnRzKGV5ZXMuY2VudGVyLCBtb2RzLmV5ZVRpbHQgKiBNYXRoLlBJIC8gMTgwLCBleWVzLnRvcCxcclxuICAgICAgICAgICAgICAgIGV5ZXMub3V0LFxyXG4gICAgICAgICAgICAgICAgZXllcy5pbik7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZXguZXllcy5pbixcclxuICAgICAgICAgICAgZXguZXllcy50b3AsXHJcbiAgICAgICAgICAgIGV4LmV5ZXMub3V0LCBleC5leWVzLmluXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtGYWNlUGFydH0gZnJvbSBcIi4vZmFjZV9wYXJ0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBicmVha1BvaW50LFxyXG5cdGFkanVzdCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5jbGFzcyBQdXBpbCBleHRlbmRzIEZhY2VQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwicHVwaWxcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wiaXJpc1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFB1cGlsSHVtYW4gZXh0ZW5kcyBQdXBpbCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMwMDBcIjtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwU3Ryb2tlKGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIFtleC5leWVzLmluLCBleC5leWVzLnRvcCwgZXguZXllcy5vdXQsIGV4LmV5ZXMuaW5dO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExpbmVXaWR0aChhdmF0YXIpIHtcclxuICAgICAgICByZXR1cm4gYXZhdGFyLk1vZHMucHVwaWxTaXplICogMC4xO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzKSB7XHJcbiAgICAgICAgcmV0dXJuIFticmVha1BvaW50LCBleC5leWVzLmlyaXNdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vL1dJUFxyXG5leHBvcnQgY2xhc3MgUHVwaWxDYXQgZXh0ZW5kcyBQdXBpbCB7IFxyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCIjMDAwXCI7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgY2xpcFN0cm9rZShleCkge1xyXG4gICAgICAgIHJldHVybiBbZXguZXllcy5pbiwgZXguZXllcy50b3AsIGV4LmV5ZXMub3V0LCBleC5leWVzLmluXTtcclxuICAgIH1cclxuXHRcclxuXHRjbGlwRmlsbChleCkge1xyXG4gICAgICAgIHJldHVybiBbZXguZXllcy5pbiwgZXguZXllcy50b3AsIGV4LmV5ZXMub3V0LCBleC5leWVzLmluXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMaW5lV2lkdGgoYXZhdGFyKSB7XHJcbiAgICAgICAgcmV0dXJuIGF2YXRhci5Nb2RzLnB1cGlsU2l6ZSAqIDAuMDU7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMpIHtcclxuXHRcdGNvbnN0IHRvcCA9IGFkanVzdChleC5leWVzLmlyaXMsMCwxKTtcclxuXHRcdGNvbnN0IGJvdCA9IGFkanVzdChleC5leWVzLmlyaXMsMCwtMSk7XHJcblx0XHRib3QuY3AxID0gYWRqdXN0KGV4LmV5ZXMuaXJpcywwLjIsMCk7XHJcblx0XHR0b3AuY3AxID0gYWRqdXN0KGV4LmV5ZXMuaXJpcywtMC4yLDApO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGJyZWFrUG9pbnQsXHJcbiAgICAgICAgICAgIHRvcCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHR0b3AsXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsImltcG9ydCB7RmFjZVBhcnR9IGZyb20gXCIuL2ZhY2VfcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgYnJlYWtQb2ludCxcclxuICAgIGFkanVzdCxcclxuICAgIGRyYXdDaXJjbGUsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuY2xhc3MgSXJpcyBleHRlbmRzIEZhY2VQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiaXJpc1wiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJleWVzXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIElyaXNIdW1hbiBleHRlbmRzIElyaXMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCIjMDAwXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbChpZ25vcmUsIGV4KSB7XHJcblxyXG4gICAgICAgIGxldCBoID0gZXguYXZhdGFyLk1vZHMuaXJpc0h1ZTtcclxuICAgICAgICBsZXQgcyA9IGV4LmF2YXRhci5Nb2RzLmlyaXNTYXR1cmF0aW9uO1xyXG4gICAgICAgIGxldCBsID0gZXguYXZhdGFyLk1vZHMuaXJpc0xpZ2h0bmVzcztcclxuICAgICAgICByZXR1cm4gYGhzbCgke2h9LCR7c30lLCR7bH0lKWA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGluZVdpZHRoKGF2YXRhcikge1xyXG4gICAgICAgIHJldHVybiBhdmF0YXIuTW9kcy5saW1iYWxSaW5nU2l6ZSAqIDAuMDE7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpcFN0cm9rZShleCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNsaXBGaWxsKGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwRmlsbChleCkge1xyXG4gICAgICAgIHJldHVybiBbZXguZXllcy5pbiwgZXguZXllcy50b3AsIGV4LmV5ZXMub3V0LCBleC5leWVzLmluXTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgaWYgKGNhbGN1bGF0ZSkge1xyXG4gICAgICAgICAgICBleC5leWVzLmlyaXMgPSBhZGp1c3QoZXguZXllcy5jZW50ZXIsIDAsIG1vZHMuaXJpc0hlaWdodCAqIDAuMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGJyZWFrUG9pbnQsXHJcbiAgICAgICAgICAgIC4uLmRyYXdDaXJjbGUoZXguZXllcy5pcmlzLFxyXG4gICAgICAgICAgICAgICAgbW9kcy5pcmlzU2l6ZSAqIDAuMSlcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7RmFjZVBhcnR9IGZyb20gXCIuL2ZhY2VfcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgYWRqdXN0LFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmNsYXNzIEV5ZWxpZCBleHRlbmRzIEZhY2VQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZXllbGlkXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcImV5ZXNcIiwgXCJpcmlzXCIsIFwicHVwaWxcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRXllbGlkSHVtYW4gZXh0ZW5kcyBFeWVsaWQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoaWdub3JlLCBleCkge1xyXG4gICAgICAgIHJldHVybiBleC5leWVsaWRDb2xvcjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgZXguZXllbGlkID0ge307XHJcbiAgICAgICAgICAgIGxldCB0b3AgPSBhZGp1c3QoZXguZXllcy50b3AsIG1vZHMuZXllbGlkQmlhcyAqIDAuMSxcclxuICAgICAgICAgICAgICAgIC0wLjMgKyBtb2RzLmV5ZWxpZEhlaWdodCAqIDAuMSk7XHJcbiAgICAgICAgICAgIGxldCBvdXQgPSBhZGp1c3QoZXguZXllcy5vdXQsIG1vZHMuZXllbGlkQmlhcyAqIDAuMSxcclxuICAgICAgICAgICAgICAgIC0wLjMgKyBtb2RzLmV5ZWxpZEhlaWdodCAqIDAuMSk7XHJcblxyXG4gICAgICAgICAgICBleC5leWVsaWQudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogdG9wLngsXHJcbiAgICAgICAgICAgICAgICB5OiB0b3AueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC5leWVsaWQudG9wLmNwMSA9IG91dC5jcDI7XHJcbiAgICAgICAgICAgIGV4LmV5ZWxpZC50b3AuY3AyID0gb3V0LmNwMTtcclxuXHJcbiAgICAgICAgICAgIGV4LmV5ZWxpZC5pbiA9IGV4dHJhY3RQb2ludChleC5leWVzLmluKTtcclxuICAgICAgICAgICAgLy8gbmVlZCB0byBpbnZlcnQgc2luY2Ugb3JpZ2luYWxseSB0aGUgcG9pbnQgaXMgZnJvbSBleWVzLmluIHRvIGV5ZXMudG9wXHJcbiAgICAgICAgICAgIGV4LmV5ZWxpZC5pbi5jcDEgPSB0b3AuY3AyO1xyXG4gICAgICAgICAgICBleC5leWVsaWQuaW4uY3AyID0gdG9wLmNwMTtcclxuICAgICAgICAgICAgaWYgKG1vZHMuZXllbGlkSGVpZ2h0ID4gNSkge1xyXG4gICAgICAgICAgICAgICAgZXguZXllbGlkLmluLmNwMS54IC09IG1vZHMuZXllbGlkSGVpZ2h0ICogMC4wMjtcclxuICAgICAgICAgICAgICAgIGV4LmV5ZWxpZC5pbi5jcDIueCAtPSBtb2RzLmV5ZWxpZEhlaWdodCAqIDAuMDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbZXguZXllcy5pbiwgZXguZXllcy50b3AsIGV4LmV5ZXMub3V0LCBleC5leWVsaWQudG9wLCBleC5leWVsaWQuaW5dO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIiwiaW1wb3J0IHtGYWNlUGFydH0gZnJvbSBcIi4vZmFjZV9wYXJ0XCI7XHJcbmltcG9ydCB7YWRqdXN0Q29sb3J9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIGNsYW1wLFxyXG4gICAgYnJlYWtQb2ludCxcclxuICAgIGNvbnRpbnVlQ3VydmUsXHJcbiAgICBhZGp1c3QsXHJcbiAgICByb3RhdGVQb2ludHMsXHJcbiAgICBlbmRQb2ludFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmNsYXNzIEV5ZWxhc2ggZXh0ZW5kcyBGYWNlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImV5ZWxhc2hcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wiZXllbGlkXCJdLFxyXG4gICAgICAgICAgICBwYXJlbnRQYXJ0OiBcImV5ZWxpZFwiXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFeWVsYXNoSHVtYW4gZXh0ZW5kcyBFeWVsYXNoIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKGlnbm9yZSwgZXgpIHtcclxuICAgICAgICByZXR1cm4gZXgubGFzaEZpbGw7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgY29uc3QgZXllbGFzaCA9IGV4LmV5ZWxhc2ggPSB7fTtcclxuICAgICAgICAgICAgY29uc3QgZXllbGlkID0gZXguZXllbGlkO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbGFzaFZpc2liaWxpdHkgPSBtb2RzLmV5ZWxhc2hBbmdsZSAqIHRoaXMuZXllbGFzaExlbmd0aCAqIDAuMTtcclxuXHJcbiAgICAgICAgICAgIGV5ZWxhc2gudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguZXllcy50b3AueCArIG1vZHMuZXllbGFzaEJpYXMgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5OiBleWVsaWQudG9wLnkgKyBsYXNoVmlzaWJpbGl0eVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleWVsYXNoLnRvcC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleWVsaWQuaW4ueCAqIDAuNyArIGV5ZWxhc2gudG9wLnggKiAwLjMsXHJcbiAgICAgICAgICAgICAgICB5OiBleWVsaWQuaW4ueSAqIDAuNSArIGV5ZWxhc2gudG9wLnkgKiAwLjVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXllbGFzaC50b3AuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXllbGlkLmluLnggKiAwLjQgKyBleWVsYXNoLnRvcC54ICogMC42LFxyXG4gICAgICAgICAgICAgICAgeTogZXllbGFzaC50b3AueVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZXllbGFzaC5vdXQgPSBleHRyYWN0UG9pbnQoZXguZXllcy5vdXQpO1xyXG4gICAgICAgICAgICBleWVsYXNoLm91dC5jcDEgPSBjb250aW51ZUN1cnZlKGV4LmV5ZXMub3V0LCBleWVsYXNoLnRvcCwgMSk7XHJcblxyXG5cclxuICAgICAgICAgICAgZXllbGFzaC5vdXRCb3QgPSBleHRyYWN0UG9pbnQoZXguZXllcy5vdXQpO1xyXG4gICAgICAgICAgICBleWVsYXNoLm91dEJvdC5jcDEgPSBhZGp1c3QoZXguZXllcy5pbi5jcDIsXHJcbiAgICAgICAgICAgICAgICBtb2RzLmV5ZWxhc2hCaWFzICogY2xhbXAodGhpcy5leWVsYXNoTGVuZ3RoLCAwLCA0KSAqIDAuMDEsXHJcbiAgICAgICAgICAgICAgICAtdGhpcy5leWVsYXNoTGVuZ3RoICogMC4wMyk7XHJcbiAgICAgICAgICAgIGV5ZWxhc2gub3V0Qm90LmNwMiA9IGFkanVzdChleC5leWVzLmluLmNwMSxcclxuICAgICAgICAgICAgICAgIG1vZHMuZXllbGFzaEJpYXMgKiBjbGFtcCh0aGlzLmV5ZWxhc2hMZW5ndGgsIDAsIDUpICogMC4wMSxcclxuICAgICAgICAgICAgICAgIC10aGlzLmV5ZWxhc2hMZW5ndGggKiAwLjAzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGV5ZXMgPSBleC5leWVzO1xyXG4gICAgICAgICAgICByb3RhdGVQb2ludHMoZXllcy5jZW50ZXIsIG1vZHMuZXllVGlsdCAqIE1hdGguUEkgLyAxODAsIGV5ZWxhc2gudG9wLFxyXG4gICAgICAgICAgICAgICAgZXllbGFzaC5vdXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZXguZXllcy5vdXQsXHJcbiAgICAgICAgICAgIGV4LmV5ZWxpZC50b3AsXHJcbiAgICAgICAgICAgIGV4LmV5ZWxpZC5pbixcclxuICAgICAgICAgICAgZXguZXllbGFzaC50b3AsXHJcbiAgICAgICAgICAgIGV4LmV5ZWxhc2gub3V0LFxyXG4gICAgICAgICAgICBicmVha1BvaW50LFxyXG4gICAgICAgICAgICBleC5leWVzLm91dCxcclxuICAgICAgICAgICAgZXguZXllcy5pbixcclxuICAgICAgICAgICAgZXguZXllbGFzaC5vdXRCb3QsXHJcbiAgICAgICAgICAgIGVuZFBvaW50XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHtGYWNlUGFydH0gZnJvbSBcIi4vZmFjZV9wYXJ0XCI7XHJcbmltcG9ydCB7YWRqdXN0Q29sb3J9IGZyb20gXCIuLi91dGlsL3V0aWxpdHlcIjtcclxuaW1wb3J0IHtjbGFtcCwgc2ltcGxlUXVhZHJhdGljLCByb3RhdGVQb2ludHN9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmNsYXNzIEJyb3cgZXh0ZW5kcyBGYWNlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImJyb3dcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgaGVhZFwiLCBcImZhY2VQYXJ0cyBleWVsaWRcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQnJvd0h1bWFuIGV4dGVuZHMgQnJvdyB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCAuLi5kYXRhKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbChpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4LmJyb3dGaWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzLCBjYWxjdWxhdGUpIHtcclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJyb3cgPSBleC5icm93ID0ge307XHJcbiAgICAgICAgICAgIGNvbnN0IG5hdHVyYWxIZWlnaHQgPSAwLjcgKyB0aGlzLmZhY2VGZW0gKiAwLjAxO1xyXG4gICAgICAgICAgICBicm93LmluYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguZXllcy5jZW50ZXIueCAtIDIgKyBtb2RzLmJyb3dDbG9zZW5lc3MgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5leWVzLmNlbnRlci55ICsgbmF0dXJhbEhlaWdodCAtIDAuNSArIG1vZHMuYnJvd0hlaWdodCAqIDAuMSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRoaWNrbmVzcyA9IG1vZHMuYnJvd1RoaWNrbmVzcyAqIDAuMSAtIHRoaXMuZmFjZUZlbSAqIDAuMDA1O1xyXG4gICAgICAgICAgICBicm93LmludG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYnJvdy5pbmJvdC54ICsgbW9kcy5icm93U2hhcnBuZXNzICogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogYnJvdy5pbmJvdC55ICsgY2xhbXAoMC45NSArIHRoaWNrbmVzcywgMCwgNSlcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYnJvdy5pbnRvcC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYnJvdy5pbmJvdCwgYnJvdy5pbnRvcCwgMC41LCAwLjUpO1xyXG5cclxuICAgICAgICAgICAgYnJvdy5vdXRib3QgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5leWVzLmNlbnRlci54ICsgMi41ICsgbW9kcy5icm93TGVuZ3RoICogMC4xLFxyXG4gICAgICAgICAgICAgICAgeTogZXguZXllcy5jZW50ZXIueSArIG5hdHVyYWxIZWlnaHQgKyBtb2RzLmJyb3dIZWlnaHQgKiAwLjFcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGJyb3cub3V0dG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogYnJvdy5vdXRib3QueCArIG1vZHMuYnJvd091dEJpYXMgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5OiBicm93Lm91dGJvdC55ICtcclxuICAgICAgICAgICAgICAgICAgIGNsYW1wKDAuNyArIHRoaWNrbmVzcyArIG1vZHMuYnJvd091dEJpYXMgKiAwLjA1LCAwLCA1KSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYnJvdy5vdXR0b3AuY3AxID1cclxuICAgICAgICAgICAgICAgIHNpbXBsZVF1YWRyYXRpYyhicm93LmludG9wLCBicm93Lm91dHRvcCwgMC40LCBtb2RzLmJyb3dUb3BDdXJsICogMC4xKTtcclxuICAgICAgICAgICAgaWYgKG1vZHMuYnJvd091dEJpYXMgPiAtNSkge1xyXG4gICAgICAgICAgICAgICAgYnJvdy5vdXRib3QuY3AxID1cclxuICAgICAgICAgICAgICAgICAgICBzaW1wbGVRdWFkcmF0aWMoYnJvdy5vdXR0b3AsIGJyb3cub3V0Ym90LCAwLjUsIDAuNSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJvdy5pbmJvdC5jcDEgPVxyXG4gICAgICAgICAgICAgICAgc2ltcGxlUXVhZHJhdGljKGJyb3cub3V0Ym90LCBicm93LmludG9wLCAwLjYsIC1tb2RzLmJyb3dCb3RDdXJsICogMC4xKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFwcGx5IHRpbHRcclxuICAgICAgICAgICAgcm90YXRlUG9pbnRzKGJyb3cuaW5ib3QsIG1vZHMuYnJvd1RpbHQgKiBNYXRoLlBJIC8gMTgwLCBicm93LmluYm90LFxyXG4gICAgICAgICAgICAgICAgYnJvdy5pbnRvcCxcclxuICAgICAgICAgICAgICAgIGJyb3cub3V0dG9wLCBicm93Lm91dGJvdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW2V4LmJyb3cuaW5ib3QsIGV4LmJyb3cuaW50b3AsIGV4LmJyb3cub3V0dG9wLCBleC5icm93Lm91dGJvdCwgZXguYnJvdy5pbmJvdF07XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7c2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uL3V0aWwvZHJhd1wiO1xyXG5pbXBvcnQge1xyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGdldFBvaW50T25DdXJ2ZSxcclxuICAgIGFkanVzdCxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHRyYWNlUG9pbnRcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7YXZlcmFnZVBvaW50fSBmcm9tIFwiLi5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDYXBCYXNlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXI6IExheWVyLkFCT1ZFX0hBSVIsXHJcbiAgICAgICAgICAgICAgICBsb2MgIDogXCJoZWFkXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIGhvdyBoaWdoIHRoZSB0b3Agb2YgdGhlIGNhcCBzaG91bGQgYmVcclxuICAgICAgICAgICAgICAgIGhlaWdodCAgICAgIDogNC41LFxyXG4gICAgICAgICAgICAgICAgLy8gWy0wLjUsIDAuNV0gd2hpY2ggc2lkZSB0aGUgY2FwIGlzIHRpbHRlZCB0b3dhcmRzIChuZWdhdGl2ZSBpcyB0b3AgdGlsdGVkIHRvd2FyZHMgbGVmdClcclxuICAgICAgICAgICAgICAgIHNpZGVCaWFzICAgIDogLTAuMTUsXHJcbiAgICAgICAgICAgICAgICAvLyBkZWdyZWUgb2YgY3VydmUgZm9yIGJvdHRvbSBvZiBoYXRcclxuICAgICAgICAgICAgICAgIGN1cnZhdHVyZSAgIDogNyxcclxuICAgICAgICAgICAgICAgIC8vIFstMSwgMV0gKHJlYXNvbmFibGUgdmFsdWVzKSBob3cgbXVjaCBvZiB0aGUgZm9yZWhlYWQgc2hvdWxkIGJlIGNvdmVyZWQgKG5lZ2F0aXZlIGRvZXNuJ3QgY292ZXIgZm9yZWhlYWQpXHJcbiAgICAgICAgICAgICAgICBoZWFkQ292ZXJhZ2U6IDAuMixcclxuICAgICAgICAgICAgICAgIC8vIGhvdyB3aWRlIHRvIG1ha2UgdGhlIGhhdCB0byBhZGp1c3QgZm9yIGVhcnMgYW5kIHN0dWZmXHJcbiAgICAgICAgICAgICAgICBzaWRlT2Zmc2V0ICA6IDIuMyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHtyaWdodEJvdCwgbGVmdEJvdCwgdG9wfSA9IGNhbGNDYXAuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIHJpZ2h0Qm90LFxyXG4gICAgICAgICAgICBsZWZ0Qm90LFxyXG4gICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgIHJpZ2h0Qm90KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDYXBCYW5kUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQUJPVkVfSEFJUixcclxuICAgICAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2hlYWRcIixcclxuICAgICAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcImNsb3RoaW5nUGFydHMgaGVhZFwiXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBiYW5kV2lkdGggIDogMS42LFxyXG4gICAgICAgICAgICAgICAgYmFuZFBhdHRlcm46IFwiYmxhY2tcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHtyaWdodEJvdCwgbGVmdEJvdCwgdG9wfSA9IGNhbGNDYXAuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgY29uc3QgbGVmdFRvcCA9IGFkanVzdChnZXRQb2ludE9uQ3VydmUodGhpcy5iYW5kV2lkdGggKiAwLjEsIGxlZnRCb3QsIHRvcCksIC0wLjUsIDApO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0VG9wID0gYWRqdXN0KGdldFBvaW50T25DdXJ2ZSgxLXRoaXMuYmFuZFdpZHRoICogMC4xLCB0b3AsIHJpZ2h0Qm90KSwgMC41LCAwKTtcclxuXHJcbiAgICAgICAgcmlnaHRUb3AuY3AxID0gYWRqdXN0KGxlZnRCb3QuY3AxLCAwLCByaWdodFRvcC55IC0gcmlnaHRCb3QueSk7XHJcblxyXG4gICAgICAgIGxlZnRUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGxlZnRCb3QsIGxlZnRUb3AsIDAuNSwgMSk7XHJcbiAgICAgICAgY29uc3QgcmlnaHRCb3RBZ2FpbiA9IGV4dHJhY3RQb2ludChyaWdodEJvdCk7XHJcbiAgICAgICAgcmlnaHRCb3RBZ2Fpbi5jcDEgPSBzaW1wbGVRdWFkcmF0aWMocmlnaHRUb3AsIHJpZ2h0Qm90QWdhaW4sIDAuNSwgMSk7XHJcblxyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuYmFuZFBhdHRlcm4sXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuc3Ryb2tlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIHJpZ2h0Qm90LFxyXG4gICAgICAgICAgICBsZWZ0Qm90LFxyXG4gICAgICAgICAgICBsZWZ0VG9wLFxyXG4gICAgICAgICAgICByaWdodFRvcCxcclxuICAgICAgICAgICAgcmlnaHRCb3RBZ2Fpbik7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY0NhcChleCkge1xyXG4gICAgLy8gcmlnaHQgdG8gbGVmdCBib3R0b20gb2YgaGF0XHJcbiAgICBjb25zdCByaWdodEJvdCA9IGFkanVzdChnZXRQb2ludE9uQ3VydmUodGhpcy5oZWFkQ292ZXJhZ2UsIGV4LnNrdWxsLnNpZGUsIGV4LnNrdWxsLmJvdCksXHJcbiAgICAgICAgdGhpcy5zaWRlT2Zmc2V0LFxyXG4gICAgICAgIDApO1xyXG4gICAgY29uc3QgbGVmdEJvdCA9IHtcclxuICAgICAgICB4OiAtcmlnaHRCb3QueCxcclxuICAgICAgICB5OiByaWdodEJvdC55XHJcbiAgICB9O1xyXG4gICAgbGVmdEJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMocmlnaHRCb3QsIGxlZnRCb3QsIHRoaXMuc2lkZUJpYXMgKyAwLjUsIC10aGlzLmN1cnZhdHVyZSk7XHJcblxyXG4gICAgY29uc3QgdG9wID0ge1xyXG4gICAgICAgIHg6IHRoaXMuc2lkZUJpYXMgKiAwLjUgKiByaWdodEJvdC54LFxyXG4gICAgICAgIHk6IGV4LnNrdWxsLnkgKyB0aGlzLmhlaWdodFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBzaWRlRGVmbGVjdGlvbiA9IDI7XHJcbiAgICBjb25zdCBzaWRlQ3B5ID0gYXZlcmFnZVBvaW50KGxlZnRCb3QsIHRvcCwgMC42NSkueTtcclxuICAgIHRvcC5jcDEgPSB7XHJcbiAgICAgICAgeDogbGVmdEJvdC54IC0gc2lkZURlZmxlY3Rpb24sXHJcbiAgICAgICAgeTogc2lkZUNweVxyXG4gICAgfTtcclxuXHJcbiAgICB0b3AuY3AyID0ge1xyXG4gICAgICAgIHg6IGF2ZXJhZ2VQb2ludChsZWZ0Qm90LCB0b3AsIDAuNSkueCxcclxuICAgICAgICB5OiB0b3AueVxyXG4gICAgfTtcclxuXHJcbiAgICByaWdodEJvdC5jcDEgPSB7XHJcbiAgICAgICAgeDogYXZlcmFnZVBvaW50KHJpZ2h0Qm90LCB0b3AsIDAuNSkueCxcclxuICAgICAgICB5OiB0b3AueVxyXG4gICAgfTtcclxuICAgIHJpZ2h0Qm90LmNwMiA9IHtcclxuICAgICAgICB4OiByaWdodEJvdC54ICsgc2lkZURlZmxlY3Rpb24sXHJcbiAgICAgICAgeTogc2lkZUNweVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJpZ2h0Qm90LFxyXG4gICAgICAgIGxlZnRCb3QsXHJcbiAgICAgICAgdG9wXHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSGF0IGV4dGVuZHMgQ2xvdGhpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk9VVEVSfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNpbXBsZUNhcCBleHRlbmRzIEhhdCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDYXBCYXNlUGFydFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJhbmRlZENhcCBleHRlbmRzIEhhdCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDYXBCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ2FwQmFuZFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtzZWFtV2lkdGgsIExheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcbmltcG9ydCB7XHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNsb25lLFxyXG5cdGFkanVzdCxcclxuXHRicmVha1BvaW50LFxyXG5cdGludGVycG9sYXRlQ3VydmUsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRsaW5lTGluZUludGVyc2VjdGlvbixcclxuXHRwb2ludExpbmVJbnRlcnNlY3Rpb24sXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5pbXBvcnQge1VuZGVyd2VhcixjYWxjQnJhfSBmcm9tIFwiLi91bmRlcndlYXJcIjtcclxuaW1wb3J0IHt3d2JiX2Z0d30gZnJvbSBcIi4vd3diYlwiO1xyXG5pbXBvcnQge2NhbGNTdXBlckJyYSxjYWxjU3VwZXJCcmFTdHJhcCxjYWxjUGFudGllczJ9IGZyb20gXCIuL3N1cGVyX3VuZGVyd2VhclwiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyQnJhR2VuaXRhbFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IGJyYSA9IGNhbGNTdXBlckJyYShleCk7XHJcbiAgICAgICAgaWYgKGJyYSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cdFx0Y29uc3Qgc3RyYXAgPSBjYWxjU3VwZXJCcmFTdHJhcC5jYWxsKHRoaXMsZXgpO1xyXG5cdFx0XHRcclxuXHRcdC8vVE9QIFNUUkFQXHJcblx0XHRpZih0aGlzLnNob3dTdHJhcCl7XHJcblx0XHRcdC8qXHJcblx0Ly9UTyBETyEhXHJcbmN0eC5saW5lV2lkdGggPSB0aGlzLnN0cmFwV2lkdGg7IC8vIHRvcCBzdHJhcFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0O1xyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsc3RyYXAuYnJlYXN0VG9wLHN0cmFwLmJyZWFzdE91dCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0Ki9cclxuXHRcdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXSxbXHJcblx0XHRcdFx0XHRzdHJhcC5icmVhc3RUb3AsXHJcblx0XHRcdFx0XHRzdHJhcC5icmVhc3RPdXRcclxuXHRcdFx0XHRdLFxyXG5cdFx0XHRcdHtsaW5lV2lkdGg6dGhpcy5zdHJhcFdpZHRofSxcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHQvKlxyXG5cdFx0c2V0U3Ryb2tlQW5kRmlsbChjdHgsIHtcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5maWxsLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLnN0cm9rZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIGV4KTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnRoaWNrbmVzcztcclxuXHQqL1x0XHJcblx0XHQvL0JSQVxyXG5cdFx0Ly9ub3Qgc3VyZSB3aHkgdGhleSBhcmUgYWRqdXN0ZWQgdGhpcyB3YXkgYnV0IGRyZXNzIGlzIHVzaW5nIHRoaXMgXHJcblx0XHRjb25zdCB0b3AgPSBhZGp1c3QoZXguYnJlYXN0LnRvcCwgMC4xLCAwLjIpO1xyXG5cdFx0Y29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcblx0XHRjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuMSk7XHJcblx0XHRjb25zdCBpbm5lciA9IGFkanVzdChleC5icmVhc3QuaW4sIC0wLjQsIDApO1xyXG5cdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0YnJhLnRvcCxcclxuXHRcdFx0YnJhLm91dCxcclxuXHRcdFx0YnJhLnRpcCxcclxuXHRcdFx0YnJhLmJvdCxcclxuXHRcdFx0YnJhLmlubmVyLFxyXG5cdFx0XHRicmEuY2xlYXZhZ2UsXHJcblx0XHRcdGJyYS50b3BcclxuXHRcdF0pO1xyXG5cdFx0XHRcclxuXHRcdC8qXHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0YnJhLnRvcCxcclxuXHRcdFx0YnJhLm91dCxcclxuXHRcdFx0YnJhLnRpcCxcclxuXHRcdFx0YnJhLmJvdCxcclxuXHRcdFx0YnJhLmlubmVyLFxyXG5cdFx0XHRicmEuY2xlYXZhZ2UsXHJcblx0XHRcdGJyYS50b3BcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Ki9cclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdTdXBlckJyYUNoZXN0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgdG9yc29cIl0sXHJcblx0XHRcdGJlbG93UGFydHM6IFtcInBhcnRzIGNoZXN0XCJdXHJcblx0XHRcdC8vYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBjb25zdCBicmEgPSBjYWxjU3VwZXJCcmEoZXgpO1xyXG4gICAgICAgIGlmIChicmEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHRcdGNvbnN0IHN0cmFwID0gY2FsY1N1cGVyQnJhU3RyYXAuY2FsbCh0aGlzLGV4KTtcclxuXHQvKlx0XHJcblx0XHRzZXRTdHJva2VBbmRGaWxsKGN0eCwge1xyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmZpbGwsXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuc3Ryb2tlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgZXgpO1xyXG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMudGhpY2tuZXNzO1xyXG5cdCovXHRcclxuXHRcdC8vQk9UVE9NIFNUUkFQXHJcblx0XHQvKlxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIHN0cmFwLm91dCwgc3RyYXAub3V0Ym90LCBzdHJhcC5ib3QsIHN0cmFwLm1pZCwgc3RyYXAub3V0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHQqL1xyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdHN0cmFwLm91dCwgXHJcblx0XHRcdHN0cmFwLm91dGJvdCwgXHJcblx0XHRcdHN0cmFwLmJvdCwgXHJcblx0XHRcdHN0cmFwLm1pZCwgXHJcblx0XHRcdHN0cmFwLm91dFxyXG5cdFx0XSxbXSk7XHJcblx0XHRcclxuXHRcdC8vVE9QIFNUUkFQXHJcblx0XHRpZih0aGlzLnNob3dTdHJhcCl7XHJcblx0XHRcdC8qXHJcblx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnN0cmFwV2lkdGg7IC8vIHRvcCBzdHJhcFxyXG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgc3RyYXAuc3RyYXBUb3AsIHN0cmFwLmJyZWFzdFRvcCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0Ki9cclxuXHRcdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXSxbXHJcblx0XHRcdFx0XHRzdHJhcC5zdHJhcFRvcCwgXHJcblx0XHRcdFx0XHRzdHJhcC5icmVhc3RUb3BcclxuXHRcdFx0XHRdLFxyXG5cdFx0XHRcdHtsaW5lV2lkdGg6dGhpcy5zdHJhcFdpZHRofSxcclxuXHRcdFx0KTtcclxuXHRcdFx0XHJcblx0XHR9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyUGFudGllc1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZ3JvaW5cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyB0b3Jzb1wiLFwicGFydHMgbGVnXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJjbG90aGluZ1BhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgaWYgKGV4Lmhhc093blByb3BlcnR5KFwiZ3JvaW5cIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblx0XHRcclxuXHRcdGNvbnN0IHBhbnRpZXMgPSB7fTtcclxuXHRcdGxldCB0ZW1wO1xyXG5cclxuXHRcdC8vdG9wIGFsd2F5cyBhYm92ZSBib3QgXHJcblx0XHRpZih0aGlzLndhaXN0Q292ZXJhZ2VMb3dlcj50aGlzLndhaXN0Q292ZXJhZ2UpdGhpcy53YWlzdENvdmVyYWdlTG93ZXI9dGhpcy53YWlzdENvdmVyYWdlO1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLndhaXN0Q292ZXJhZ2U+MCAmJiB0aGlzLndhaXN0Q292ZXJhZ2VMb3dlcj4wKXtcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUoKDEtdGhpcy53YWlzdENvdmVyYWdlKSwgZXgud2Fpc3QsZXguaGlwKTtcclxuXHRcdFx0cGFudGllcy5zaWRlVG9wID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRsZXQgaGlwID0gdGVtcC5yaWdodC5wMjtcclxuXHRcdFx0XHJcblx0XHRcdGxldCB3YUNvID0gKHRoaXMud2Fpc3RDb3ZlcmFnZSAtIHRoaXMud2Fpc3RDb3ZlcmFnZUxvd2VyKSAvIHRoaXMud2Fpc3RDb3ZlcmFnZTtcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUod2FDbyxwYW50aWVzLnNpZGVUb3AsaGlwKTtcclxuXHRcdFx0cGFudGllcy5zaWRlQm90ID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRwYW50aWVzLnNpZGVUb3AgPSBleHRyYWN0UG9pbnQocGFudGllcy5zaWRlVG9wKTtcclxuXHJcblx0XHR9ZWxzZSBpZih0aGlzLndhaXN0Q292ZXJhZ2U8MCAmJiB0aGlzLndhaXN0Q292ZXJhZ2VMb3dlcjwwKXtcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy53YWlzdENvdmVyYWdlKSxleC5oaXAsZXgudGhpZ2gub3V0KTtcclxuXHRcdFx0cGFudGllcy5zaWRlVG9wID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRsZXQgdGhpZ2ggPSB0ZW1wLnJpZ2h0LnAyO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IHdhQ28gPSBNYXRoLmFicyggICggKDErdGhpcy53YWlzdENvdmVyYWdlKSAtICgxK3RoaXMud2Fpc3RDb3ZlcmFnZUxvd2VyKSApIC8gKDErdGhpcy53YWlzdENvdmVyYWdlKSAgKTtcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUod2FDbyxwYW50aWVzLnNpZGVUb3AsdGhpZ2gpO1xyXG5cdFx0XHRwYW50aWVzLnNpZGVCb3QgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCA9IGV4dHJhY3RQb2ludChwYW50aWVzLnNpZGVUb3ApO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKCgxLXRoaXMud2Fpc3RDb3ZlcmFnZSksIGV4LndhaXN0LGV4LmhpcCk7XHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0XHRcclxuXHRcdFx0cGFudGllcy5oaXAgPSB0ZW1wLnJpZ2h0LnAyO1xyXG5cdFx0XHRcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy53YWlzdENvdmVyYWdlTG93ZXIpLGV4LmhpcCxleC50aGlnaC5vdXQpO1x0XHJcblx0XHRcdHBhbnRpZXMuc2lkZUJvdCA9IHRlbXAubGVmdC5wMjtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly90b3AgJiBjdXJ2ZVxyXG5cdFx0cGFudGllcy50b3AgPSB7eDotMC4xLHk6KHBhbnRpZXMuc2lkZVRvcC55K3RoaXMudG9wWS04KX07IFxyXG5cdFx0XHJcblx0XHRwYW50aWVzLnNpZGVUb3AuY3AxID0ge1xyXG5cdFx0XHR4OiAocGFudGllcy5zaWRlVG9wLnggKiAwLjUpICsgKHBhbnRpZXMudG9wLnggKiAwLjUpLFxyXG5cdFx0XHR5OiBwYW50aWVzLnNpZGVUb3AueSxcclxuXHRcdH07XHJcblx0XHRwYW50aWVzLnNpZGVUb3AuY3AxLngrPXRoaXMuY3VydmVUb3BYO1xyXG5cdFx0cGFudGllcy5zaWRlVG9wLmNwMS55Kz10aGlzLmN1cnZlVG9wWS05O1xyXG5cdFx0XHJcblx0XHQvL2JvdHRvbVxyXG5cdFx0cGFudGllcy5ib3QgPSBhZGp1c3QoY2xvbmUoZXguZ3JvaW4pLC0wLjEsMCk7XHRcdFxyXG5cdFx0XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmdlbkNvdmVyYWdlLGV4Lmdyb2luLGV4dHJhY3RQb2ludChleC50aGlnaC50b3ApKTtcdFxyXG5cdFx0cGFudGllcy5ib3RPdXQgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdFxyXG5cdFx0Ly9ib3R0b20gY3VydmVcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuNSxwYW50aWVzLnNpZGVCb3QscGFudGllcy5ib3RPdXQpO1x0XHJcblx0XHRwYW50aWVzLmJvdE91dC5jcDEgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdHBhbnRpZXMuYm90T3V0LmNwMS54Kz10aGlzLmN1cnZlQm90WC05O1xyXG5cdFx0cGFudGllcy5ib3RPdXQuY3AxLnkrPXRoaXMuY3VydmVCb3RZKzU7XHJcblx0XHRcclxuICAgICAgICB3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0cGFudGllcy50b3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCxcclxuXHRcdFx0cGFudGllcy5oaXAsXHJcblx0XHRcdHBhbnRpZXMuc2lkZUJvdCxcclxuXHRcdFx0cGFudGllcy5ib3RPdXQsXHJcblx0XHRcdHBhbnRpZXMuYm90IFxyXG5cdFx0XSk7XHJcblx0XHJcblx0XHRpZih0aGlzLmJvdyl7XHJcblx0XHRcdGNvbnN0IGNlbnRlciA9IGFkanVzdChwYW50aWVzLnRvcCwgMCwgLTIpO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IHRvcEluID0gYWRqdXN0KGNlbnRlciwgMCwgMSk7XHJcblx0XHRcdGxldCBib3RJbiA9IGFkanVzdChjZW50ZXIsIDAsIC0xKTtcclxuXHRcdFx0XHJcblx0XHRcdGxldCB0b3BPdXQgPSBhZGp1c3QoY2VudGVyLCAzLCAyKTtcclxuXHRcdFx0bGV0IGJvdE91dCA9IGFkanVzdChjZW50ZXIsIDMsIC0yKTtcclxuXHRcdFx0XHJcblx0XHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRcdHRvcEluLFxyXG5cdFx0XHRcdHRvcE91dCxcclxuXHRcdFx0XHRib3RPdXQsXHJcblx0XHRcdFx0Ym90SW4sXHJcblx0XHRcdF0sW10se2ZpbGxXaXRoSGlnaGxpZ2h0ZWRGaWxsOnRydWV9KTtcclxuXHRcdH1cclxuXHQvKlx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgcGFudGllcy50b3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCxcclxuXHRcdFx0cGFudGllcy5oaXAsXHJcblx0XHRcdHBhbnRpZXMuc2lkZUJvdCxcclxuXHRcdFx0cGFudGllcy5ib3RPdXQsXHJcblx0XHRcdHBhbnRpZXMuYm90ICAgICBcclxuICAgICAgICAgICAvLyBwYW50aWVzLnRvcFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIHBhbnRpZXMudG9wLFxyXG5cdFx0XHRwYW50aWVzLnNpZGVUb3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZUJvdCxcclxuXHRcdFx0cGFudGllcy5ib3RPdXQsXHJcblx0XHRcdHBhbnRpZXMuYm90LFxyXG4gICAgICAgICAgIC8vcGFudGllcy50b3BcclxuXHRcdCk7XHJcblx0XHRcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyQnJhIGV4dGVuZHMgVW5kZXJ3ZWFyIHsgXHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRzaG93U3RyYXA6ZmFsc2UsXHJcblx0XHRcdHN0cmFwV2lkdGg6MixcclxuXHRcdFx0bmVja0NvdmVyYWdlOjAuNyxcclxuXHRcdFx0dGhpY2tuZXNzOjAuNSxcclxuXHRcdFx0aGlnaGxpZ2h0OlwiaHNsKDM0NiwgNTAlLCA3MCUpXCIsXHJcblx0XHRcdFxyXG5cdFx0XHRib3RTdHJhcFdpZHRoOiAwLFxyXG5cdFx0XHR0b3BTdHJhcEN1cnZlWDogMCxcclxuXHRcdFx0dG9wU3RyYXBDdXJ2ZVk6IDAsXHJcblx0XHRcdFxyXG5cdFx0XHRodWU6IDMxOSwgXHJcblx0XHRcdHNhdHVyOiA2OSwgXHJcblx0XHRcdGxpZ2h0OiA0MixcclxuXHRcdFx0YWxwaGE6IDEsXHJcblx0XHRcdFxyXG5cdFx0XHRmaXNobmVzczogMCxcclxuXHRcdFx0cGF0OiBcImZpc2huZXRcIixcclxuXHRcdFx0cGF0X3NpemU6IDc1LFxyXG5cdFx0XHRcclxuXHRcdFx0Ym9keXN1aXQ6ZmFsc2UsXHJcblx0XHRcdGludmlzaWJsZTogMCxcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0LypcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDM0NiwgNTAlLCA3MCUpXCI7XHJcbiAgICB9XHJcblx0Ki9cclxuIFxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDM0NiwgNTclLCA4MiUpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0Z2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlckJyYUNoZXN0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyQnJhR2VuaXRhbFBhcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyB3U3VwZXJQYW50aWVzIGV4dGVuZHMgVW5kZXJ3ZWFyIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHdhaXN0Q292ZXJhZ2U6MC4xMSxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZUxvd2VyOi0wLjA1LFxyXG5cdFx0XHRnZW5Db3ZlcmFnZToxLFxyXG5cdFx0XHR0b3BZOjAsXHJcblx0XHRcdGN1cnZlVG9wWDowLFxyXG5cdFx0XHRjdXJ2ZVRvcFk6MCxcclxuXHRcdFx0Y3VydmVCb3RYOjAsXHJcblx0XHRcdGN1cnZlQm90WTowLFxyXG5cdFx0XHRcclxuXHRcdFx0aHVlOiAzMTksIFxyXG5cdFx0XHRzYXR1cjogNjksIFxyXG5cdFx0XHRsaWdodDogNDIsXHJcblx0XHRcdGFscGhhOiAxLFxyXG5cdFx0XHRcclxuXHRcdFx0ZmlzaG5lc3M6IDAsXHJcblx0XHRcdHBhdDogXCJmaXNobmV0XCIsXHJcblx0XHRcdHBhdF9zaXplOiA3NSxcclxuXHRcdFx0XHJcblx0XHRcdGJvZHlzdWl0OmZhbHNlLFxyXG5cdFx0XHRpbnZpc2libGU6IDAsXHJcblx0XHRcdFxyXG5cdFx0XHRib3c6IGZhbHNlLFxyXG5cdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgzNDYsIDU3JSwgODIlKVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyUGFudGllc1BhcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyUGFudGllczJQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImdyb2luXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGdyb2luXCIsIFwicGFydHMgdG9yc29cIixcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICAgICAgYmVsb3dTYW1lTGF5ZXJQYXJ0czogW1wiY2xvdGhpbmdQYXJ0cyBsZWdcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGlmIChleC5oYXNPd25Qcm9wZXJ0eShcImdyb2luXCIpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cdFx0XHJcblx0XHRjb25zdCBwYW50aWVzID0gY2FsY1BhbnRpZXMyLmNhbGwodGhpcywgZXgpO1xyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuICAgICAgIFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdCBwYW50aWVzLmNlbnRlcixcclxuXHRcdFx0cGFudGllcy50b3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCxcclxuXHRcdC8vXHRwYW50aWVzLmhpcCxcclxuXHRcdFx0cGFudGllcy5zaWRlQm90LFxyXG5cdFx0XHRwYW50aWVzLmJvdE91dCxcclxuXHRcdFx0cGFudGllcy5ib3QgICAgIFxyXG4gICAgICAgICAgIC8vIHBhbnRpZXMudG9wXHJcblx0XHQgICBcclxuXHQvKlx0ICAgXHJcblx0XHQgICBwYW50aWVzLmNlbnRlcixcclxuXHRcdFx0cGFudGllcy50b3AsXHJcblx0XHRcdHBhbnRpZXMuc2lkZVRvcCxcclxuXHRcdC8vXHRwYW50aWVzLmhpcCxcclxuXHRcdFx0cGFudGllcy5zaWRlQm90LFxyXG5cdFx0XHRwYW50aWVzLmJvdE91dCxcclxuXHRcdFx0cGFudGllcy5ib3QsXHJcblx0XHRcdFxyXG5cdFx0XHRwYW50aWVzLmNlbnRlcixcdFx0XHJcblxyXG4qL1x0XHRcdFxyXG5cdFx0XSk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdCaWtpbmlCb3R0b20gZXh0ZW5kcyBVbmRlcndlYXIge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgIHdhaXN0Q292ZXJhZ2U6IDAuMTEsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2VMb3dlcjogLTAuMDUsXHJcblx0XHRcdGdlbkNvdmVyYWdlOiAxLFxyXG5cdFx0XHR0b3BZOiAwLFxyXG5cdFx0XHRjdXJ2ZVRvcFg6IDAsXHJcblx0XHRcdGN1cnZlVG9wWTogMCxcclxuXHRcdFx0Y3VydmVCb3RYOiAwLFxyXG5cdFx0XHRjdXJ2ZUJvdFk6IDAsXHJcblx0XHRcdHJhZGl1czogMi44LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNixcclxuXHRcdFx0XHJcblx0XHQvKndhaXN0Q292ZXJhZ2U6MC4xMSxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZUxvd2VyOi0wLjA1LFxyXG5cdFx0XHRnZW5Db3ZlcmFnZToxLFxyXG5cdFx0XHR0b3BZOjAsXHJcblx0XHRcdGN1cnZlVG9wWDowLFxyXG5cdFx0XHRjdXJ2ZVRvcFk6MCxcclxuXHRcdFx0Y3VydmVCb3RYOjAsXHJcblx0XHRcdGN1cnZlQm90WTowLFxyXG5cdFx0XHQqL1xyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDM0NiwgNTclLCA4MiUpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3U3VwZXJQYW50aWVzMlBhcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZGVyUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5FRkZFQ1RTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIit0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgLy9hYm92ZVBhcnRzOiBbXCJwYXJ0cyBncm9pblwiLCBcInBhcnRzIHRvcnNvXCIsXCJwYXJ0cyBsZWdcIl0sXHJcbiAgICAgICAgICAgIC8vYmVsb3dTYW1lTGF5ZXJQYXJ0czogW1wiY2xvdGhpbmdQYXJ0cyBsZWdcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgICBcclxuICAgICAgIFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdGV4LmNoZXN0LmNlbnRlcixcclxuXHRcdFx0ZXgud2Fpc3QsXHJcblx0XHRcdGV4LnBlbHZpc1xyXG5cdFx0XSk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0xvYWRlciBleHRlbmRzIFVuZGVyd2VhciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgzNDYsIDU3JSwgODIlKVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogTG9hZGVyUGFydCBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZywgcHJvY2Vzc0Nsb3RoaW5nUGFydExvY2F0aW9ufSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtsb2NhdGVSZWxhdGl2ZVRvRHJhd3BvaW50LCBMb2NhdGlvbn0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7XHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgcmFkLFxyXG4gICAgcG9pbnQsXHJcbiAgICBub3JtLFxyXG4gICAgZGlmZixcclxuXHRnZXRQb2ludE9uQ3VydmUsXHJcblx0ZHJhd0NpcmNsZSxcclxuXHRicmVha1BvaW50LFxyXG5cdFxyXG5cdGV4dHJhY3RQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBhZGp1c3QsXHJcbiAgICByZWZsZWN0LFxyXG5cdFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmltcG9ydCB7TmVja0FjY2Vzc29yeX0gZnJvbSBcIi4vbmVja19hY2Nlc3NvcnlcIjtcclxuXHJcbmltcG9ydCB7XHJcblx0Ly9nZXRMYWNpbmdQb2ludHMsXHJcblx0ZmluZEJldHdlZW4sXHJcblx0ZHJhd1N0YXIsXHJcblx0Y29weUN1cnZlXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5mdW5jdGlvbiBjYWxjTmVjayhleCl7XHJcblx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMubmVja0NvdmVyYWdlLCBleC5uZWNrLmN1c3AsIGV4LmNvbGxhcmJvbmUpO1xyXG5cdGxldCB0b3AgID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0dG9wLnkgLT0gMC41ICogdGhpcy50aGlja25lc3M7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmNsZWF2YWdlQ292ZXJhZ2UsIGV4Lm5lY2suY3VzcCwgZXguZ3JvaW4pO1xyXG5cdGxldCBib3QgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRib3QueCA9IDA7XHJcblx0XHRcclxuXHR0b3AuY3AxID0ge1xyXG5cdFx0eDogdG9wLnggKiAwLjUgKyBib3QueCAqIDAuNSxcclxuXHRcdHk6IGJvdC55IFxyXG5cdH07XHJcblx0dG9wLmNwMS54IC09IDE7XHJcblx0dG9wLmNwMS54ICs9IHRoaXMuY3VydmVYO1xyXG5cdHRvcC5jcDEueSArPSB0aGlzLmN1cnZlWTtcclxuXHRcdFxyXG5cdHJldHVybiB7XHJcblx0XHR0b3AsXHJcblx0XHRib3RcclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmlDaGFpblBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK25lY2tcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCB7XHJcblx0XHRcdC8vY2hhaW46IGZhbHNlLFxyXG5cdFx0XHQvL25lY2tDb3ZlcmFnZTogMC4xNCxcclxuXHRcdFx0Ly9jbGVhdmFnZUNvdmVyYWdlOiAwLjA5LFxyXG5cdFx0XHRjdXJ2ZVg6IDAsXHJcblx0XHRcdGN1cnZlWTogMCxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRcclxuXHRcdFx0Ly9iZWFkc1NpemU6IDQsXHJcblx0XHRcdC8vc3BhY2VTaXplOiA0LFxyXG5cdFx0XHQvL2JlYWRUaGlja25lc3M6IDEsXHJcblx0XHRcdC8vaGlnaGxpZ2h0OiBcInJlZFwiXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcdFxyXG5cdFx0Y29uc3Qge3RvcCxib3R9ID0gY2FsY05lY2suY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnRoaWNrbmVzcztcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRib3QsXHJcblx0XHRcdHRvcFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcdFx0XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGlmKHRoaXMuY2hhaW4pe1xyXG5cdFx0XHRjdHguc2V0TGluZURhc2goW3RoaXMuYmVhZHNTaXplLCB0aGlzLnNwYWNlU2l6ZV0pXHJcblx0XHR9XHJcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDsgLy9jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmZpbGxTdHlsZSB3b3VsZCBiZSBiZXR0ZXJcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLmJlYWRUaGlja25lc3M7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHR0b3BcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUZWFyUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHtcclxuXHRcdFx0d2lkdGg6IDMuNSxcclxuXHRcdFx0bGVuZ3RoOiAwLjUsXHJcblx0XHRcdHNpemU6IDEsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9ICBcclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFx0XHJcblx0XHRpZih0aGlzLmhpZ2hsaWdodCl7XHJcblx0XHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Y29uc3Qge3RvcCxib3R9ID0gY2FsY05lY2suY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdGxldCBib3R0b20gPSBhZGp1c3QoYm90LDAsLTYqdGhpcy5zaXplKTtcclxuXHRcdGJvdHRvbS5jcDEgPSBhZGp1c3QoYm90dG9tLHRoaXMud2lkdGgqdGhpcy5zaXplLHRoaXMubGVuZ3RoKnRoaXMuc2l6ZSk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRib3QsXHJcblx0XHRcdGJvdHRvbVxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIERvdWJsZU5lY2tsYWNlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHtcclxuXHRcdFx0bmVja0NvdmVyYWdlOiAwLjE0LFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjEzLFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlVG9wOiAwLjA1LFxyXG5cdFx0XHRjdXJ2ZVg6IDAsXHJcblx0XHRcdGN1cnZlWTogMCxcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjUsXHJcblx0XHRcdFxyXG5cdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFx0XHJcblx0XHRjb25zdCB7dG9wLGJvdH0gPSBjYWxjTmVjay5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5jaGFpbil7XHJcblx0XHRcdGN0eC5zZXRMaW5lRGFzaChbMywgM10pXHJcblx0XHR9XHJcblx0XHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRib3QsXHJcblx0XHRcdHRvcFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcdFxyXG5cclxuXHRcdGlmKHRoaXMuY2xlYXZhZ2VDb3ZlcmFnZVRvcD50aGlzLmNsZWF2YWdlQ292ZXJhZ2UtMC4wMyl7XHJcblx0XHRcdHRoaXMuY2xlYXZhZ2VDb3ZlcmFnZVRvcCA9IHRoaXMuY2xlYXZhZ2VDb3ZlcmFnZSAtIDAuMDM7XHJcblx0XHR9XHJcblx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUodGhpcy5jbGVhdmFnZUNvdmVyYWdlVG9wLCBleC5uZWNrLmN1c3AsIGV4Lmdyb2luKTtcclxuXHRcdFxyXG5cdFx0bGV0IGJvdDIgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRib3QyLnggPSAwO1xyXG5cdFx0Ym90Mi5jcDEgPSB7XHJcblx0XHRcdHg6IGJvdDIueCAqIDAuNSArIHRvcC54ICogMC41LFxyXG5cdFx0XHR5OiBib3QyLnkgXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0dG9wLFxyXG5cdFx0XHRib3QyLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNdWx0aU5lY2tsYWNlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHtcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMyxcclxuXHRcdFx0bmVja0NvdmVyYWdlOiAwLjA1LFxyXG5cdFx0XHRjdXJ2ZVg6IDAsXHJcblx0XHRcdGN1cnZlWTogMCxcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjUsXHJcblx0XHRcdFxyXG5cdFx0XHRzaXplOiAxLjIsXHJcblx0XHRcdG11bHRpcGxlOiAyLFxyXG5cdFx0XHRkaXN0YW5jZTogNVxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFx0XHJcblx0XHRjb25zdCB7dG9wLGJvdH0gPSBjYWxjTmVjay5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5jaGFpbil7XHJcblx0XHRcdGN0eC5zZXRMaW5lRGFzaChbMywgM10pXHJcblx0XHR9XHJcblx0XHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHR0b3AsXHJcblx0XHQpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHRsZXQgc3BhY2UgPSAtdGhpcy5kaXN0YW5jZTtcclxuXHRcdFxyXG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IHRoaXMubXVsdGlwbGU7IGkrKyl7XHJcblx0XHRcdGxldCBsb3cgPSBhZGp1c3QoYm90LDAsc3BhY2UpXHJcblx0XHRcdGxldCB1cCA9IGFkanVzdCh0b3AsMC4wMiwwKVxyXG5cdFx0XHQvL2NvcHlDdXJ2ZShib3QsdG9wLGxvdyx1cCk7XHJcblx0XHRcdHVwLmNwMSA9IHtcclxuXHRcdFx0XHR4OiB1cC54ICogMC41ICsgbG93LnggKiAwLjUrIHRoaXMuY3VydmVYICsgNCppLFxyXG5cdFx0XHRcdHk6IGxvdy55ICsgdGhpcy5jdXJ2ZVkgKyBpXHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdGxvdyxcclxuXHRcdFx0XHR1cFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdHNwYWNlIC09IHRoaXMuZGlzdGFuY2U7XHJcblx0XHR9XHJcblx0XHRcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ2hhaW5QYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcIituZWNrXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHMgICAgICAgICA6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXSxcclxuICAgICAgICAgICAgYmVsb3dTYW1lTGF5ZXJQYXJ0czogW1widG9yc29cIl0sXHJcbiAgICAgICAgfSwge1xyXG5cdFx0XHRjaGFpbjogZmFsc2UsXHJcblx0XHRcdG5lY2tDb3ZlcmFnZTogMC4xNCxcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4wOSxcclxuXHRcdFx0Y3VydmVYOiAwLFxyXG5cdFx0XHRjdXJ2ZVk6IDAsXHJcblx0XHRcdHRoaWNrbmVzczogMC41LFxyXG5cdFx0XHRkYXNoOiAyLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcdFx0XHRcclxuXHRcdGNvbnN0IHt0b3AsYm90fSA9IGNhbGNOZWNrLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRpZih0aGlzLmNoYWluKXtcclxuXHRcdFx0Y3R4LnNldExpbmVEYXNoKFt0aGlzLmRhc2gsIHRoaXMuZGFzaF0pXHJcblx0XHR9XHJcblx0XHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHR0b3BcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHRcdFxyXG4gICAgfVxyXG59XHJcbiBcclxuIFxyXG5leHBvcnQgY2xhc3MgU3RhclBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK25lY2tcIixcclxuICAgICAgICAvLyAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHtcclxuXHRcdFx0c3RhclRoaWNrbmVzczogMC42LFxyXG5cdFx0XHRyYWRpdXM6IDQsXHJcblx0XHRcdHNwaWtlczogNSxcclxuXHRcdFx0dXB3YXJkczogdHJ1ZSxcclxuXHRcdFx0c3R5bGVPdXRlcjogMSwgLy8xID0gY2lyY2xlIGFyb3VuZDsgMCA9IG5vdGhpbmc7IC0xID0gcG9seWdvbiBhcm91bmQgXHJcblx0XHRcdHN0eWxlSW5uZXI6IC0xLCAvLzEgPSBjaXJjbGUgaW5zaWRlOyAwID0gbm90aGluZzsgLTEgPSBwb2x5Z29uIGluc2lkZSBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH0gIFxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcdFx0XHRcclxuXHRcdGNvbnN0IHt0b3AsYm90fSA9IGNhbGNOZWNrLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHRcclxuXHRcdC8vZHJhd1N0YXIoe3gseX0sc3Bpa2VzLG91dGVyUmFkaXVzLGlubmVyUmFkaXVzLHVwID0gdHJ1ZSxvdXRlciA9IDAsIGlubmVyID0gMCl7XHJcblx0XHRsZXQgcG9pbnRzID0gZHJhd1N0YXIoe3g6IDAsIHk6IGJvdC55IC0gdGhpcy5yYWRpdXN9LCB0aGlzLnNwaWtlcywgdGhpcy5yYWRpdXMsIDAuMzMgKiB0aGlzLnJhZGl1cywgdGhpcy51cHdhcmRzLCB0aGlzLnN0eWxlT3V0ZXIsIHRoaXMuc3R5bGVJbm5lciApXHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnN0YXJUaGlja25lc3M7XHJcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdC4uLnBvaW50cyxcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFROZWNrbGFjZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK25lY2tcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCB7XHJcblx0XHRcdGNoYWluOiBmYWxzZSxcclxuXHRcdFx0bmVja0NvdmVyYWdlOiAwLjE0LFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjA5LFxyXG5cdFx0XHRjdXJ2ZVg6IDAsXHJcblx0XHRcdGN1cnZlWTogMCxcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjUsXHJcblx0XHRcdFxyXG5cdFx0XHRzaXplOiAxLjJcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFx0XHJcblx0XHRjb25zdCB7dG9wLGJvdH0gPSBjYWxjTmVjay5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdGNvbnN0IGJvdHRvbSA9IGFkanVzdChib3QsMCwtMTIpIFxyXG5cdFx0XHJcblx0XHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0Ym90dG9tLFxyXG5cdFx0XHRib3QsXHJcblx0XHRcdHRvcCxcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHRcclxuXHJcblx0XHRiYWxsKCBnZXRQb2ludE9uQ3VydmUoMC40LGJvdCx0b3ApLCB0aGlzLnNpemUgKTtcclxuXHRcdGJhbGwoIGdldFBvaW50T25DdXJ2ZSgwLjgsYm90LHRvcCksIHRoaXMuc2l6ZSApO1xyXG5cdFx0YmFsbCggZmluZEJldHdlZW4oYm90LGJvdHRvbSwwLjMpLCB0aGlzLnNpemUgKTtcclxuXHRcdGJhbGwoIGZpbmRCZXR3ZWVuKGJvdCxib3R0b20sMC43KSwgdGhpcy5zaXplICk7XHJcblx0XHRmdW5jdGlvbiBiYWxsKGNlbnRlcixzaXplKXtcclxuXHRcdFx0bGV0IHBvaW50cyA9IGRyYXdDaXJjbGUoY2VudGVyLCBzaXplKTsgXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0Li4ucG9pbnRzXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHRcclxuXHRcdH07XHJcblx0XHRcdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQmFzZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTmVja2xhY2UgZXh0ZW5kcyBOZWNrQWNjZXNzb3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuT1VURVIsXHJcbiAgICAgICAgICAgIHN0cm9rZSAgICAgICA6IFwiIzVjNWM1Y1wiLFxyXG4gICAgICAgICAgICBmaWxsICAgICAgICAgOiBcIiM1YzVjNWNcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCaUNoYWluIGV4dGVuZHMgTmVja2xhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xLFxyXG5cdFx0XHRjaGFpbjogdHJ1ZSxcclxuXHRcdFx0Y3VydmVYOiAyLFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjEsXHJcblx0XHRcdG5lY2tDb3ZlcmFnZTogMC4wNyxcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRiZWFkc1NpemU6IDQsXHJcblx0XHRcdHNwYWNlU2l6ZTogOCxcclxuXHRcdFx0YmVhZFRoaWNrbmVzczogMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRcclxuXHRcdFx0aGlnaGxpZ2h0OiBcInJlZFwiXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiYmx1ZVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJyZWRcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJpQ2hhaW5QYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERvdWJsZU5lY2tsYWNlIGV4dGVuZHMgTmVja2xhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMyxcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZVRvcDogMC4wNSxcclxuXHRcdFx0Y2hhaW46IHRydWUsXHJcblx0XHRcdG5lY2tDb3ZlcmFnZTogMC4wNSxcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjcsXHJcblx0XHRcdGhpZ2hsaWdodDogXCJcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IERvdWJsZU5lY2tsYWNlUGFydCxcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogVGVhclBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTXVsdGlOZWNrbGFjZSBleHRlbmRzIE5lY2tsYWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdC8vY3VydmVYOiAtMSxcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMyxcclxuXHRcdFx0bmVja0NvdmVyYWdlOiAwLjA1LFxyXG5cdFx0XHRjaGFpbjogdHJ1ZSxcclxuXHRcdFx0Y3VydmVYOiAyLFxyXG5cdFx0XHRcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjcsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBNdWx0aU5lY2tsYWNlUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQZWFybE5lY2tsYWNlIGV4dGVuZHMgTmVja2xhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Ly9jdXJ2ZVg6IC0xLFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjEsXHJcblx0XHRcdGNoYWluOiB0cnVlLFxyXG5cdFx0XHRjdXJ2ZVg6IDIsXHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMSxcclxuXHRcdFx0bmVja0NvdmVyYWdlOiAwLjA3LFxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0YmVhZHNTaXplOiAwLjMsXHJcblx0XHRcdGJlYWRUaGlja25lc3M6IDIsXHJcblx0XHRcdHNwYWNlU2l6ZTogOC44LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuMixcclxuXHRcdFx0aGlnaGxpZ2h0OiBcIndoaXRlXCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCaUNoYWluUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaW1wbGVDaGFpbiBleHRlbmRzIE5lY2tsYWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdC8vY3VydmVYOiAtMSxcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMyxcclxuXHRcdFx0Y2hhaW46IHRydWUsXHJcblx0XHRcdGN1cnZlWDogMixcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMSxcclxuXHRcdFx0bmVja0NvdmVyYWdlOiAwLjA1LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNixcdFxyXG5cdFx0XHRkYXNoOiAyLjVcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0Z2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDaGFpblBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3Rhck5lY2tsYWNlIGV4dGVuZHMgTmVja2xhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Y3VydmVYOiAtMSxcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMyxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENoYWluUGFydCxcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3RhclBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVE5lY2tsYWNlIGV4dGVuZHMgTmVja2xhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Ly9jdXJ2ZVg6IC0xLFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjEzLFxyXG5cdFx0XHRjaGFpbjogdHJ1ZSxcclxuXHRcdFx0Y3VydmVYOiAyLFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjExLFxyXG5cdFx0XHRuZWNrQ292ZXJhZ2U6IDAuMDUsXHJcblx0XHRcdHRoaWNrbmVzczogMC43LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFROZWNrbGFjZVBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGVhck5lY2tsYWNlIGV4dGVuZHMgTmVja2xhY2Uge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMyxcclxuXHRcdFx0Y2hhaW46IHRydWUsXHJcblx0XHRcdGN1cnZlWDogMCxcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZTogMC4xMSxcclxuXHRcdFx0bmVja0NvdmVyYWdlOiAwLjA1LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNyxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENoYWluUGFydCxcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogVGVhclBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGhpY2tDaGFpbiBleHRlbmRzIE5lY2tsYWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMTMsXHJcblx0XHRcdGNoYWluOiB0cnVlLFxyXG5cdFx0XHRjdXJ2ZVg6IDIsXHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMTYsXHJcblx0XHRcdG5lY2tDb3ZlcmFnZTogMC4xLFxyXG5cdFx0XHR0aGlja25lc3M6IDEuNSxcclxuXHRcdFx0ZGFzaDogNSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENoYWluUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCIvKmVzbGludCBuby11bnVzZWQtdmFyczogW1wiZXJyb3JcIiwge1widmFyc0lnbm9yZVBhdHRlcm5cIjogXCJcXCRbXlxcYl0qXFwkXCJ9XSovXHJcbmltcG9ydCB7SU1BR0VfTUFYU0laRSwgZ2V0UGF0dGVybiwgZ2V0UGF0dGVybkJhc2VOYW1lLCBpc1BhdHRlcm59IGZyb20gXCIuL3BhdHRlcm5cIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge0Nsb3RoZXN9IGZyb20gXCIuLi9jbG90aGVzL2Nsb3RoaW5nXCI7XHJcblxyXG4vLyBVdGlsaXR5IG1ldGhvZCB0byBhbGxvdyB1c2VycyB0byBlYXNpbHkgd3JhcCB0aGVpciBjb2RlIGluIHRoZSByZXZpdmUgd3JhcHBlci5cclxuaWYgKCFKU09OLnJldml2ZVdyYXBwZXIpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShKU09OLCBcInJldml2ZVdyYXBwZXJcIiwge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICB3cml0YWJsZSAgICA6IHRydWUsXHJcblxyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoY29kZSwgZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvZGUgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJKU09OLnJldml2ZVdyYXBwZXIgY29kZSBwYXJhbWV0ZXIgbXVzdCBiZSBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFtcIihyZXZpdmU6ZXZhbClcIiwgW2NvZGUsIGRhdGFdXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gU2VyaWFsaXplIGRhdGEgaW50byBhIEpTT04tZW5jb2RlZCBzdHJpbmcuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUodmFsdWUsIHNwYWNlKSB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgLy8gX293bmVyIG9mdGVuIGhhcyBzZWxmLXJlZmVyZW5jZSBhbmQgc2hvdWxkIG5vdCBiZSBzZXJpYWxpemVkXHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfb3duZXJcIiB8fCBrZXkgPT09IFwic2hhZGluZ1BhcnRzXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfSwgc3BhY2UpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemUodGV4dCkge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCwgZnVuY3Rpb24gKGtleSwgdmFsKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdmFsO1xyXG5cclxuICAgICAgICAvLyBBdHRlbXB0IHRvIHJldml2ZSB3cmFwcGVkIHZhbHVlcy5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyICYmIHZhbHVlWzBdID09PSBcIihyZXZpdmU6ZXZhbClcIikge1xyXG4gICAgICAgICAgICBjb25zdCAkUmV2aXZlRGF0YSQgPSB2YWx1ZVsxXVsxXTtcclxuICAgICAgICAgICAgdmFsdWUgPSBldmFsKHZhbHVlWzFdWzBdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXHJcbiAgICAgICAgfSBlbHNlIGlmIChpc1BhdHRlcm4odmFsdWUpKSB7XHJcbiAgICAgICAgICAgIC8vIHJldml2ZSBwYXR0ZXJuIG9iamVjdFxyXG4gICAgICAgICAgICBjb25zdCB7cGF0dGVybk5hbWUsIHBhdHRlcm5TaXplID0gSU1BR0VfTUFYU0laRX0gPSB2YWx1ZVsxXTtcclxuICAgICAgICAgICAgdmFsdWUgPSBnZXRQYXR0ZXJuKGdldFBhdHRlcm5CYXNlTmFtZShwYXR0ZXJuTmFtZSksIHBhdHRlcm5TaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBleHRlbmRTZXJpYWxpemFiaWxpdHkoZ2xvYmFsQ2xhc3NJZGVudGlmaWVyKSB7XHJcbiAgICBjb25zdCBjbGFzc0NvbnN0cnVjdG9yID0gZXZhbChnbG9iYWxDbGFzc0lkZW50aWZpZXIpO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2xhc3NDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcclxuICAgICAgICAvKlxyXG4gICAgICAgICBSZXR1cm5zIGEgc2ltcGxlIG9iamVjdCBlbmNhcHN1bGF0aW5nIG91ciBvd24gZGF0YSBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9nZXREYXRhOiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge307XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCByZWN1cnNpdmUgZGVzZXJpYWxpemF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtrZXldID0gdGhpc1trZXldO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICBDbG9uZXMgdmFsdWVzIGZyb20gdGhlIGdpdmVuIG9iamVjdCB0byBvdXIgb3duIGRhdGEgcHJvcGVydGllcy5cclxuXHJcbiAgICAgICAgIFJldHVybnMgYSBzZWxmLXJlZmVyZW5jZSB3aGljaCBhbGxvd3MgYHRvSlNPTigpYCB0byBiZSBzaW1wbGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIF9zZXREYXRhOiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgIEFsbG93cyB0aGUgb2JqZWN0IHRvIGJlIHByb3Blcmx5IGNsb25lZCBmcm9tIHBhc3NhZ2UgdG8gcGFzc2FnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbG9uZToge1xyXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjbGFzc0NvbnN0cnVjdG9yKHRoaXMuX2dldERhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgQWxsb3dzIHRoZSBvYmplY3QgdG8gYmUgcHJvcGVybHkgcmVzdG9yZWQgZnJvbSBzZXJpYWxpemF0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b0pTT046IHtcclxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnJldml2ZVdyYXBwZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgXCIobmV3IFwiICsgZ2xvYmFsQ2xhc3NJZGVudGlmaWVyICsgXCIoJFJldml2ZURhdGEkKSlcIixcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXREYXRhKClcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTZXJpYWxpemF0aW9uKCkge1xyXG4gICAgLypcclxuICAgICBNZXJnZSB0aGUgcmVxdWlzaXRlIHByb3BlcnRpZXMgb250byBpbnN0YW50aWFibGUgY2xhc3NlcyAob25seSkuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IGdsb2JhbENsYXNzTmFtZXMgPSBbXTtcclxuICAgIGNvbnN0IG5hbWVzcGFjZSA9IHdpbmRvdy5kYTtcclxuXHJcbiAgICBmb3IgKGxldCBjbGFzc05hbWUgaW4gbmFtZXNwYWNlKSB7XHJcbiAgICAgICAgaWYgKG5hbWVzcGFjZS5oYXNPd25Qcm9wZXJ0eShjbGFzc05hbWUpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXhwb3J0ZWRDbGFzcyA9IG5hbWVzcGFjZVtjbGFzc05hbWVdO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGV4cG9ydGVkQ2xhc3MgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAvLyBoZXVyaXN0aWMgb2YgY29uc3RydWN0b3JzIGFsd2F5cyBoYXZpbmcgYSBjYXBpdGFsIGxldHRlci4uLlxyXG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lLmxlbmd0aCA+IDEgJiZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZS5jaGFyQXQoMCkgPT09IGNsYXNzTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsQ2xhc3NOYW1lcy5wdXNoKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIGVudHJpZXMgZm9yIHRoZSByZXN0IG9mIERBRCdzIGluc3RhbnRpYWJsZSBjbGFzc2VzIGhlcmUuXHJcbiAgICBnbG9iYWxDbGFzc05hbWVzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGV4dGVuZFNlcmlhbGl6YWJpbGl0eShcImRhLlwiICsgY2xhc3NOYW1lKTtcclxuICAgIH0pO1xyXG59XHJcbiIsImltcG9ydCB7U2tlbGV0b259IGZyb20gXCIuL3NrZWxldG9uXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtUZXN0aWNsZXNIdW1hbn0gZnJvbSBcIi4uL3BhcnRzL3Rlc3RpY2xlc1wiO1xyXG5pbXBvcnQge1BlbmlzSGVhZEh1bWFuLCBQZW5pc0h1bWFufSBmcm9tIFwiLi4vcGFydHMvcGVuaXNcIjtcclxuaW1wb3J0IHtWYWdpbmFIdW1hbn0gZnJvbSBcIi4uL3BhcnRzL3ZhZ2luYVwiO1xyXG5pbXBvcnQge0hlYWRIdW1hbn0gZnJvbSBcIi4uL3BhcnRzL2hlYWRcIjtcclxuaW1wb3J0IHtOZWNrSHVtYW59IGZyb20gXCIuLi9wYXJ0cy9uZWNrXCI7XHJcbmltcG9ydCB7QXJtSHVtYW59IGZyb20gXCIuLi9wYXJ0cy9hcm1cIjtcclxuaW1wb3J0IHtIYW5kSHVtYW59IGZyb20gXCIuLi9wYXJ0cy9oYW5kXCI7XHJcbmltcG9ydCB7VG9yc29IdW1hbn0gZnJvbSBcIi4uL3BhcnRzL3RvcnNvXCI7XHJcbmltcG9ydCB7TGVnSHVtYW59IGZyb20gXCIuLi9wYXJ0cy9sZWdcIjtcclxuaW1wb3J0IHtHcm9pbkh1bWFufSBmcm9tIFwiLi4vcGFydHMvZ3JvaW5cIjtcclxuaW1wb3J0IHtCdXR0SHVtYW59IGZyb20gXCIuLi9wYXJ0cy9idXR0XCI7XHJcbmltcG9ydCB7Q2hlc3RIdW1hbiwgTmlwcGxlc0h1bWFufSBmcm9tIFwiLi4vcGFydHMvY2hlc3RcIjtcclxuaW1wb3J0IHtGZWV0SHVtYW59IGZyb20gXCIuLi9wYXJ0cy9mZWV0XCI7XHJcbmltcG9ydCB7RWFyc0h1bWFufSBmcm9tIFwiLi4vZmFjZV9wYXJ0cy9lYXJzXCI7XHJcbmltcG9ydCB7RXllc0h1bWFufSBmcm9tIFwiLi4vZmFjZV9wYXJ0cy9leWVzXCI7XHJcbmltcG9ydCB7TW91dGhIdW1hbn0gZnJvbSBcIi4uL2ZhY2VfcGFydHMvbW91dGhcIjtcclxuaW1wb3J0IHtMaXBzSHVtYW59IGZyb20gXCIuLi9mYWNlX3BhcnRzL2xpcHNcIjtcclxuaW1wb3J0IHtOb3NlSHVtYW59IGZyb20gXCIuLi9mYWNlX3BhcnRzL25vc2VcIjtcclxuaW1wb3J0IHtQdXBpbEh1bWFufSBmcm9tIFwiLi4vZmFjZV9wYXJ0cy9wdXBpbFwiO1xyXG5pbXBvcnQge0lyaXNIdW1hbn0gZnJvbSBcIi4uL2ZhY2VfcGFydHMvaXJpc1wiO1xyXG5pbXBvcnQge0V5ZWxpZEh1bWFufSBmcm9tIFwiLi4vZmFjZV9wYXJ0cy9leWVsaWRcIjtcclxuaW1wb3J0IHtFeWVsYXNoSHVtYW59IGZyb20gXCIuLi9mYWNlX3BhcnRzL2V5ZWxhc2hcIjtcclxuaW1wb3J0IHtCcm93SHVtYW59IGZyb20gXCIuLi9mYWNlX3BhcnRzL2V5ZWJyb3dcIjtcclxuaW1wb3J0IHtcclxuICAgIEJlbGx5QnV0dG9uT3V0bGluZSxcclxuICAgIERlbHRvaWRzT3V0bGluZSxcclxuICAgIENvbGxhcmJvbmVPdXRsaW5lLFxyXG4gICAgUGVjdG9yYWxPdXRsaW5lLFxyXG4gICAgQWJkb21pbmFsT3V0bGluZSxcclxuICAgIFF1YWRyaWNlcHNPdXRsaW5lXHJcbn0gZnJvbSBcIi4uL2RlY29yYXRpdmVfcGFydHMvb3V0bGluZVwiO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSB0aGUgZGVmYXVsdCBib2R5IHBhcnRzXHJcbiAqIFNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgeW91IGZpbmlzaCBtdXRhdGluZyB0aGUgcGFydCB0ZW1wbGF0ZXNcclxuICogQnV0IGJlZm9yZSB5b3UgY3JlYXRlIGFueSBwYXJ0cyBvciBwbGF5ZXJzXHJcbiAqIGNvbXBvc2UgdGhpcyB0byBhZGQgbW9yZSBkZWZhdWx0IHBhcnRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9hZERlZmF1bHRQYXJ0cygpIHtcclxuXHJcbiAgICBTa2VsZXRvbi5odW1hbi5tYWxlUGFydHMgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXJ0R3JvdXA6IFwicGFydHNcIixcclxuICAgICAgICAgICAgc2lkZSAgICAgOiBudWxsLFxyXG4gICAgICAgICAgICBwYXJ0ICAgICA6IFRlc3RpY2xlc0h1bWFuLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwYXJ0R3JvdXA6IFwicGFydHNcIixcclxuICAgICAgICAgICAgc2lkZSAgICAgOiBudWxsLFxyXG4gICAgICAgICAgICBwYXJ0ICAgICA6IFBlbmlzSHVtYW4sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhcnRHcm91cDogXCJkZWNvcmF0aXZlUGFydHNcIixcclxuICAgICAgICAgICAgc2lkZSAgICAgOiBudWxsLFxyXG4gICAgICAgICAgICBwYXJ0ICAgICA6IFBlbmlzSGVhZEh1bWFuLFxyXG4gICAgICAgIH0sXHJcbiAgICBdO1xyXG5cclxuICAgIFNrZWxldG9uLmh1bWFuLmZlbWFsZVBhcnRzID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcGFydEdyb3VwOiBcInBhcnRzXCIsXHJcbiAgICAgICAgICAgIHNpZGUgICAgIDogbnVsbCxcclxuICAgICAgICAgICAgcGFydCAgICAgOiBWYWdpbmFIdW1hbixcclxuICAgICAgICB9LFxyXG4gICAgXTtcclxuICAgIFNrZWxldG9uLmh1bWFuLmRlZmF1bHRQYXJ0cyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcnQ6IEhlYWRIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICBwYXJ0OiBOZWNrSHVtYW5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICBwYXJ0OiBBcm1IdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBBcm1IdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgIHBhcnQ6IEhhbmRIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBIYW5kSHVtYW5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgcGFydDogVG9yc29IdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgIHBhcnQ6IExlZ0h1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgIHBhcnQ6IExlZ0h1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgcGFydDogRmVldEh1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgIHBhcnQ6IEZlZXRIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICBwYXJ0OiBHcm9pbkh1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcnQ6IEJ1dHRIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICBwYXJ0OiBDaGVzdEh1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcnQ6IE5pcHBsZXNIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICBdO1xyXG5cclxuICAgIC8vIGZhY2VcclxuICAgIFNrZWxldG9uLmh1bWFuLmRlZmF1bHRGYWNlUGFydHMgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgIHBhcnQ6IEVhcnNIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBFYXJzSHVtYW5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgcGFydDogTm9zZUh1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcnQ6IExpcHNIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICBwYXJ0OiBNb3V0aEh1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgcGFydDogRXllc0h1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgIHBhcnQ6IEV5ZXNIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgIHBhcnQ6IElyaXNIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBJcmlzSHVtYW5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICBwYXJ0OiBQdXBpbEh1bWFuXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgIHBhcnQ6IFB1cGlsSHVtYW5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICBwYXJ0OiBFeWVsaWRIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBFeWVsaWRIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgIHBhcnQ6IEV5ZWxhc2hIdW1hblxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBFeWVsYXNoSHVtYW5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICBwYXJ0OiBCcm93SHVtYW5cclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgcGFydDogQnJvd0h1bWFuXHJcbiAgICAgICAgfSxcclxuICAgIF07XHJcblxyXG4gICAgU2tlbGV0b24uaHVtYW4uZGVmYXVsdERlY29yYXRpdmVQYXJ0cyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcnQ6IEJlbGx5QnV0dG9uT3V0bGluZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgIHBhcnQ6IERlbHRvaWRzT3V0bGluZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBEZWx0b2lkc091dGxpbmVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgcGFydDogQ29sbGFyYm9uZU91dGxpbmVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgcGFydDogUGVjdG9yYWxPdXRsaW5lXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgIHBhcnQ6IEFiZG9taW5hbE91dGxpbmVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICBwYXJ0OiBRdWFkcmljZXBzT3V0bGluZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICBwYXJ0OiBRdWFkcmljZXBzT3V0bGluZVxyXG4gICAgICAgIH0sXHJcbiAgICBdO1xyXG59XHJcbiIsImltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge0JvZHlQYXJ0fSBmcm9tIFwiLi9wYXJ0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBhZGp1c3QsXHJcbiAgICBjbGFtcCxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5jbGFzcyBUZXN0aWNsZXMgZXh0ZW5kcyBCb2R5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgICA6IFwidGVzdGljbGVzXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICAgIDogTGF5ZXIuTUFMRV9HRU5JVEFMUyxcclxuICAgICAgICAgICAgY292ZXJDb25jZWFsOiBbXCJncm9pblwiLCBcImxlZnQgbGVnXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRlc3RpY2xlc0h1bWFuIGV4dGVuZHMgVGVzdGljbGVzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHJlZmxlY3Q6IHRydWUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGluZVdpZHRoKGF2YXRhcikge1xyXG4gICAgICAgIHJldHVybiBjbGFtcChhdmF0YXIuZ2V0RGltKFwidGVzdGljbGVTaXplXCIpIC8gNjAsIDAuNSwgMik7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcImluaGVyaXRcIjtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgbGV0IHRlc3RpY2xlcyA9IGV4LnRlc3RpY2xlcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgdGVzdGljbGVzLmNlbnRlciA9IHtcclxuICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5ncm9pbi55ICsgM1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGVzdGljbGVzLnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRlc3RpY2xlcy5jZW50ZXIueCArIDEuNSArIHRoaXMudGVzdGljbGVTaXplICogMC4wMDMsXHJcbiAgICAgICAgICAgICAgICB5OiB0ZXN0aWNsZXMuY2VudGVyLnkgKyB0aGlzLnRlc3RpY2xlU2l6ZSAqIDAuMDA2LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0ZXN0aWNsZXMuc2lkZSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRlc3RpY2xlcy5jZW50ZXIueCArIHRoaXMudGVzdGljbGVTaXplICogMC4wNixcclxuICAgICAgICAgICAgICAgIHk6IHRlc3RpY2xlcy5jZW50ZXIueSAtIHRoaXMudGVzdGljbGVTaXplICogMC4xXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRlc3RpY2xlcy5ib3QgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiB0ZXN0aWNsZXMuY2VudGVyLngsXHJcbiAgICAgICAgICAgICAgICB5OiB0ZXN0aWNsZXMuc2lkZS55IC0gdGhpcy50ZXN0aWNsZVNpemUgKiAwLjAyXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0ZXN0aWNsZXMuc2lkZS5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiB0ZXN0aWNsZXMudG9wLngsXHJcbiAgICAgICAgICAgICAgICB5OiB0ZXN0aWNsZXMudG9wLnkgLSB0aGlzLnRlc3RpY2xlU2l6ZSAqIDAuMDRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGVzdGljbGVzLnNpZGUuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogdGVzdGljbGVzLnNpZGUueCArIHRoaXMudGVzdGljbGVTaXplICogMC4wMSxcclxuICAgICAgICAgICAgICAgIHk6IHRlc3RpY2xlcy5zaWRlLnkgKyB0aGlzLnRlc3RpY2xlU2l6ZSAqIDAuMDVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGVzdGljbGVzLmJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWModGVzdGljbGVzLnNpZGUsXHJcbiAgICAgICAgICAgICAgICB0ZXN0aWNsZXMuYm90LFxyXG4gICAgICAgICAgICAgICAgMC41LFxyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXN0aWNsZVNpemUgKiAwLjA1KTtcclxuICAgICAgICAgICAgdGVzdGljbGVzLmNlbnRlci5jcDEgPSBzaW1wbGVRdWFkcmF0aWModGVzdGljbGVzLmJvdCxcclxuICAgICAgICAgICAgICAgIHRlc3RpY2xlcy5jZW50ZXIsXHJcbiAgICAgICAgICAgICAgICAwLjMsXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRlc3RpY2xlU2l6ZSAqIDAuMDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnRlc3RpY2xlU2l6ZSA+IDIwKSA/IFtcclxuICAgICAgICAgICAgZXgudGVzdGljbGVzLnRvcCxcclxuICAgICAgICAgICAgZXgudGVzdGljbGVzLnNpZGUsXHJcbiAgICAgICAgICAgIGV4LnRlc3RpY2xlcy5ib3QsXHJcbiAgICAgICAgICAgIGFkanVzdChleC50ZXN0aWNsZXMuY2VudGVyLCAwLCAtNClcclxuICAgICAgICBdIDogW107XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Qm9keVBhcnR9IGZyb20gXCIuL3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5jbGFzcyBWYWdpbmEgZXh0ZW5kcyBCb2R5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcInZhZ2luYVwiLFxyXG4gICAgICAgICAgICBmb3JjZWRTaWRlOiBudWxsLFxyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgZ3JvaW5cIl0sXHJcbiAgICAgICAgICAgIGJlbG93UGFydHM6IFtcImxlZ1wiLCBcImNsb3RoaW5nUGFydHMgZ3JvaW5cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVmFnaW5hSHVtYW4gZXh0ZW5kcyBWYWdpbmEge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgcmVmbGVjdDogdHJ1ZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaW5oZXJpdFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzLCBjYWxjdWxhdGUpIHtcclxuXHJcbiAgICAgICAgaWYgKGNhbGN1bGF0ZSkge1xyXG4gICAgICAgICAgICBleC52YWdpbmEgPSB7fTtcclxuICAgICAgICAgICAgZXguY292ZXJHcm9pbiA9IHRydWU7XHJcblxyXG5cclxuICAgICAgICAgICAgZXgudmFnaW5hLnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4Lmdyb2luLngsXHJcbiAgICAgICAgICAgICAgICAvLyB2aWV3ZWQgYXQgYW4gYW5nbGUsIHNvIGxlbmd0aCBpcyByZWR1Y2VkXHJcbiAgICAgICAgICAgICAgICB5OiBleC5ncm9pbi55ICsgdGhpcy52YWdpbmFTaXplICogMC4wMjIgKyBtb2RzLmxhYmlhRnVsbG5lc3MgKiAwLjAwNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC52YWdpbmEuc2lkZSA9IGV4dHJhY3RQb2ludChleC50aGlnaC50b3ApO1xyXG4gICAgICAgICAgICBleC52YWdpbmEuc2lkZS55ICs9IDAuNSArIChtb2RzLmxhYmlhRnVsbG5lc3MgKiAwLjEgKyB0aGlzLnZhZ2luYVNpemUgKiAwLjAwNSk7XHJcbiAgICAgICAgICAgIGV4LnZhZ2luYS5zaWRlLnggKz0gKG1vZHMubGFiaWFGdWxsbmVzcyAqIDAuMDIgKyB0aGlzLnZhZ2luYVNpemUgKiAwLjAwMik7XHJcblxyXG4gICAgICAgICAgICBleC52YWdpbmEudG9wLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LnZhZ2luYS5zaWRlLngsXHJcbiAgICAgICAgICAgICAgICB5OiBleC52YWdpbmEuc2lkZS55IC0gMC44IC1cclxuICAgICAgICAgICAgICAgICAgIChtb2RzLmxhYmlhRnVsbG5lc3MgKiAwLjEgKyB0aGlzLnZhZ2luYVNpemUgKiAwLjAwNSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV4LnZhZ2luYS50b3AuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXgudmFnaW5hLnRvcC54LFxyXG4gICAgICAgICAgICAgICAgeTogZXgudmFnaW5hLnRvcC55IC0gdGhpcy52YWdpbmFTaXplICogMC4wMzJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW2V4LnZhZ2luYS5zaWRlLCBleC52YWdpbmEudG9wXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtTaGFkaW5nUGFydH0gZnJvbSBcIi4uL2RyYXcvc2hhZGluZ19wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge0JvZHlQYXJ0fSBmcm9tIFwiLi9wYXJ0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICBhZGp1c3QsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG4gICAgY2xhbXAsXHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBjb250aW51ZUN1cnZlLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmNsYXNzIEhlYWQgZXh0ZW5kcyBCb2R5UGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImhlYWRcIixcclxuICAgICAgICAgICAgZm9yY2VkU2lkZTogbnVsbCxcclxuICAgICAgICAgICAgLy8gY2FuJ3QgaGF2ZSBoZWFkIHdpdGhvdXQgbmVja1xyXG4gICAgICAgICAgICBwYXJlbnRQYXJ0OiBcIm5lY2tcIixcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgLy8gd2FudCByZWZsZWN0aW9uIHRvIGJlIGRyYXduXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBCcm93U2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgOiBcIitoZWFkXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5IQUlSLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4KSB7XHJcbiAgICAgICAgY29uc3Qgc3AgPSBzcGxpdEN1cnZlKDAuNSwgZXguYnJvdy5vdXRib3QsIGV4LmJyb3cuaW5ib3QpO1xyXG4gICAgICAgIGNvbnN0IG91dCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgY29uc3QgaW5uZXIgPSBzcC5yaWdodC5wMjtcclxuXHJcbiAgICAgICAgY29uc3QgYm90ID0gZXh0cmFjdFBvaW50KGV4Lm5vc2UudG9wKTtcclxuICAgICAgICBib3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKGlubmVyLCBib3QsIDAuNSwgLTEpO1xyXG5cclxuICAgICAgICBvdXQuY3AxID0ge1xyXG4gICAgICAgICAgICB4OiBib3QueCArIDAuNCxcclxuICAgICAgICAgICAgeTogYm90LnkgLSAwLjMsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBvdXQuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiBvdXQueCArIDAuNSxcclxuICAgICAgICAgICAgeTogb3V0LnkgKyAxXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtvdXQsIGlubmVyLCBib3QsIG91dF07XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgSGVhZEh1bWFuU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgOiBcIitoZWFkXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5IQUlSLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHt0b3AsIHNrdWxsU2lkZSwgc2t1bGxCb3QsIGNoaW5PdXQsIGNoaW5Cb3R9ID0gY2FsY0hlYWRTaGFkaW5nKGV4LFxyXG4gICAgICAgICAgICB0aGlzLmZhY2VXaWR0aCk7XHJcblxyXG4gICAgICAgIHRvcC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IGNoaW5Cb3QueCArIHRoaXMuZmFjZVdpZHRoICogMC4zLFxyXG4gICAgICAgICAgICB5OiBjaGluQm90LnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRvcC5jcDIgPSB7XHJcbiAgICAgICAgICAgIHg6IHRvcC54ICsgdGhpcy5mYWNlV2lkdGggKiAwLjQsXHJcbiAgICAgICAgICAgIHk6IHRvcC55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgdG9wLCBza3VsbFNpZGUsIHNrdWxsQm90LCBjaGluT3V0LCBjaGluQm90LCB0b3BcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY2FsY0hlYWRTaGFkaW5nKGV4LCBmYWNlV2lkdGgpIHtcclxuICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC40LCBleC5za3VsbCwgZXguc2t1bGwuc2lkZSk7XHJcbiAgICBjb25zdCB0b3AgPSBleHRyYWN0UG9pbnQoc3AubGVmdC5wMik7XHJcbiAgICBsZXQgc2t1bGxTaWRlID0gc3AucmlnaHQucDI7XHJcbiAgICBza3VsbFNpZGUgPSBhZGp1c3Qoc2t1bGxTaWRlLCAtZmFjZVdpZHRoICogMC4wNDUsIDApO1xyXG5cclxuICAgIGNvbnN0IHNrdWxsQm90ID0gYWRqdXN0KGV4LnNrdWxsLmJvdCwgLWZhY2VXaWR0aCAqIDAuMDMsIDApO1xyXG4gICAgc2t1bGxCb3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKHNrdWxsU2lkZSwgc2t1bGxCb3QsIDAuNSwgMC41KTtcclxuICAgIC8vIGNvbnN0IGphdyA9IGFkanVzdChleC5qYXcsIC13ICogMC4wNCwgMCk7XHJcbiAgICAvLyBUT0RPIGFkanVzdCB0aGlzIHdpdGggYSBmYWNlIGdhdW50bmVzcyBtb2RcclxuICAgIGNvbnN0IGNoaW5PdXQgPSAoZXguY2hpbi5vdXQpID8gYWRqdXN0KGV4dHJhY3RQb2ludChleC5jaGluLm91dCksIC1mYWNlV2lkdGggKiAwLjAyNiwgMCkgOiB7fTtcclxuXHJcbiAgICBzcCA9IHNwbGl0Q3VydmUoMC44LCBjaGluT3V0LCBleC5jaGluLmJvdCk7XHJcbiAgICBjb25zdCBjaGluQm90ID0gc3AubGVmdC5wMjtcclxuICAgIGNoaW5Cb3QuY3AxID0gY29udGludWVDdXJ2ZShza3VsbEJvdCwgY2hpbk91dCwgMC43KTtcclxuICAgIGNoaW5Cb3QuY3AyID0gYWRqdXN0KGNoaW5Cb3QuY3AyLCAtZmFjZVdpZHRoICogMC4wMiwgMC4xKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRvcCxcclxuICAgICAgICBza3VsbFNpZGUsXHJcbiAgICAgICAgc2t1bGxCb3QsXHJcbiAgICAgICAgY2hpbk91dCxcclxuICAgICAgICBjaGluQm90XHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBoZWFkIHdpbGwgZXhwb3J0IHNrdWxsLCBlYXIudG9wLCBlYXIuYm90LCBqYXcsIGNoaW4ub3V0LCBjaGluLmJvdFxyXG5leHBvcnQgY2xhc3MgSGVhZEh1bWFuIGV4dGVuZHMgSGVhZCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtIZWFkSHVtYW5TaGFkaW5nXVxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExpbmVXaWR0aChhdmF0YXIpIHtcclxuICAgICAgICByZXR1cm4gY2xhbXAoMS43IC0gYXZhdGFyLmRpbS5mYWNlRmVtICogMC4wNSwgMC43LCAxLjUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzLCBjYWxjdWxhdGUpIHtcclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgbGV0IHNrdWxsID0gZXguc2t1bGwgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgeTogaFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC5lYXIgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIHNrdWxsLnNpZGUgPSB7XHJcbiAgICAgICAgICAgICAgICB4ICA6IHRoaXMuZmFjZVdpZHRoICogMC4wOTUgLSB0aGlzLmZhY2VGZW0gKiAwLjAxLFxyXG4gICAgICAgICAgICAgICAgeSAgOiBleC5za3VsbC55IC0gdGhpcy5mYWNlTGVuZ3RoICogMC4wMzUsXHJcbiAgICAgICAgICAgICAgICBjcDE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLmZhY2VXaWR0aCAqIDAuMDQ1LFxyXG4gICAgICAgICAgICAgICAgICAgIHk6IGhcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNrdWxsLnNpZGUuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogc2t1bGwuc2lkZS54LFxyXG4gICAgICAgICAgICAgICAgeTogaCAtIDJcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc2t1bGwuYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogc2t1bGwuc2lkZS54IC0gdGhpcy5mYWNlRmVtICogMC4wMTM1LFxyXG4gICAgICAgICAgICAgICAgeTogc2t1bGwuc2lkZS55IC0gKDUpICogdGhpcy5mYWNlTGVuZ3RoIC8gMjIwLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gYWx3YXlzIGRpcmVjdGx5IGJlbG93IHRoZSBib3R0b20gb2YgdGhlIGVhciwgYnV0IGRpc3RhbmNlIHRvIGl0IGNoYW5nZXNcclxuICAgICAgICAgICAgZXguamF3ID0ge1xyXG4gICAgICAgICAgICAgICAgLy8geDogc2t1bGwuYm90LnggLSAoMC43IC0gdGhpcy5mYWNlRmVtICogMC4wMikgKyBtb2RzLmphd0p1dCAqIDAuMSxcclxuICAgICAgICAgICAgICAgIHg6IHNrdWxsLmJvdC54IC0gY2xhbXAoMS41IC0gdGhpcy5mYWNlRmVtICogMC4wNSAtIG1vZHMuamF3SnV0ICogMC4xLFxyXG4gICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWNlV2lkdGggKiAwLjIpLFxyXG4gICAgICAgICAgICAgICAgeTogc2t1bGwuYm90LnkgLSBjbGFtcCh0aGlzLmZhY2VMZW5ndGggKiAwLjAyNSAtIHRoaXMuZmFjZUZlbSAqIDAuMixcclxuICAgICAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjZUxlbmd0aCAqIDAuMDMpXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBleC5jaGluID0ge307XHJcbiAgICAgICAgICAgIC8vIHdlIGRlZmluZSBib3R0b20gb2YgdGhlIGNoaW4gYmVjYXVzZSBzb21ldGltZXMgY2hpbi5vdXQgaXMganVzdCBhIHNsaWNlIG9mIHRoZVxyXG4gICAgICAgICAgICAvLyBiZXppZXJcclxuICAgICAgICAgICAgLy8gdG8gaXRcclxuICAgICAgICAgICAgZXguY2hpbi5ib3QgPSB7XHJcbiAgICAgICAgICAgICAgICB4ICA6IDAsXHJcbiAgICAgICAgICAgICAgICB5ICA6IGV4LnNrdWxsLnkgLSB0aGlzLmZhY2VMZW5ndGggKiAwLjEgKyB0aGlzLmZhY2VGZW0gKiAwLjAzNSAtIG1vZHMuY2hpbkxlbmd0aCAqXHJcbiAgICAgICAgICAgICAgICAgICAgIDAuMSxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4Lmphdy54IC0gY2xhbXAoMS41IC0gdGhpcy5mYWNlRmVtICogMC4wMiwgMC41LCAyKSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBleC5qYXcueSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgY2xhbXAoMSArIHRoaXMuZmFjZUZlbSAqIDAuMDUgKyBtb2RzLmNoZWVrRnVsbG5lc3MgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjZUxlbmd0aCAqIDAuMDI1KVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA7XHJcbiAgICAgICAgICAgIGV4LmNoaW4uYm90LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IHRoaXMuY2hpbldpZHRoICogMC4xIC0gY2xhbXAodGhpcy5mYWNlRmVtICogMC4yMiwgMCwgMyksXHJcbiAgICAgICAgICAgICAgICB5OiBleC5jaGluLmJvdC55IC0gMSArIGNsYW1wKHRoaXMuZmFjZUZlbSAqIDAuMDM1LCAwLCAyKSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzID0gc3BsaXRDdXJ2ZSgxIC0gMC43OCwgZXguamF3LCBleC5jaGluLmJvdCk7XHJcbiAgICAgICAgICAgIGV4LmNoaW4ub3V0ID0gcy5yaWdodC5wMTtcclxuICAgICAgICAgICAgZXguY2hpbi5vdXQuY3AxID0gcy5sZWZ0LnAyLmNwMTtcclxuICAgICAgICAgICAgZXguY2hpbi5ib3QgPSBzLnJpZ2h0LnAyO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mYWNlRmVtIDwgMTMpIHtcclxuICAgICAgICAgICAgICAgIGV4LmNoaW4ub3V0LmNwMSA9XHJcbiAgICAgICAgICAgICAgICAgICAgc2ltcGxlUXVhZHJhdGljKGV4LmphdywgZXguY2hpbi5vdXQsIDAuNSwgdGhpcy5mYWNlRmVtICogMC4wMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZXguc2t1bGwsXHJcbiAgICAgICAgICAgIGV4LnNrdWxsLnNpZGUsXHJcbiAgICAgICAgICAgIGV4LnNrdWxsLmJvdCxcclxuICAgICAgICAgICAgZXguamF3LFxyXG4gICAgICAgICAgICBleC5jaGluLm91dCxcclxuICAgICAgICAgICAgZXguY2hpbi5ib3RcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7U2hhZGluZ1BhcnR9IGZyb20gXCIuLi9kcmF3L3NoYWRpbmdfcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtCb2R5UGFydH0gZnJvbSBcIi4vcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgYWRqdXN0UG9pbnRzLFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNsYW1wLFxyXG4gICAgcmVmbGVjdCxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGNsb25lLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHthdmVyYWdlUXVhZHJhdGljfSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcblxyXG5jbGFzcyBDaGluU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgOiBcIituZWNrXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCkge1xyXG4gICAgICAgIGxldCBbc2t1bGxTaWRlLCBza3VsbEJvdCwgamF3LCBjaGluT3V0LCBjaGluQm90XSA9IGFkanVzdFBvaW50cygwLFxyXG4gICAgICAgICAgICAtMixcclxuICAgICAgICAgICAgZXguc2t1bGwuc2lkZSxcclxuICAgICAgICAgICAgZXguc2t1bGwuYm90LFxyXG4gICAgICAgICAgICBleC5qYXcsXHJcbiAgICAgICAgICAgIGV4LmNoaW4ub3V0LFxyXG4gICAgICAgICAgICBleC5jaGluLmJvdCk7XHJcblxyXG4gICAgICAgIGxldCBsZWZ0Q2hpbk91dCA9IHJlZmxlY3QoY2hpbk91dCk7XHJcbiAgICAgICAgbGVmdENoaW5PdXQuY3AxID0gcmVmbGVjdChjaGluQm90LmNwMik7XHJcbiAgICAgICAgbGVmdENoaW5PdXQuY3AyID0gcmVmbGVjdChjaGluQm90LmNwMSk7XHJcbiAgICAgICAgbGV0IGxlZnRKYXcgPSByZWZsZWN0KGphdyk7XHJcbiAgICAgICAgbGVmdEphdy5jcDEgPSByZWZsZWN0KGNoaW5PdXQuY3AyKTtcclxuICAgICAgICBsZWZ0SmF3LmNwMiA9IHJlZmxlY3QoY2hpbk91dC5jcDEpO1xyXG5cclxuICAgICAgICByZXR1cm4gYWRqdXN0UG9pbnRzKDEuMyxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgLi4uYWRqdXN0UG9pbnRzKDEuOCwgMCwgc2t1bGxTaWRlLCBza3VsbEJvdCwgamF3LCBjaGluT3V0LCBjaGluQm90KSxcclxuICAgICAgICAgICAgbGVmdENoaW5PdXQsXHJcbiAgICAgICAgICAgIGxlZnRKYXcpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgTmVja1NoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICBsYXllcjogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBjb25zdCB0b3AgPSB7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IGV4Lm5lY2sudG9wLnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGJvdCA9IHtcclxuICAgICAgICAgICAgeDogZXgubmVjay5jdXNwLngsXHJcbiAgICAgICAgICAgIHk6IGV4Lm5lY2suY3VzcC55IC0gM1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9wLCBib3QsIDAuMywgMyk7XHJcbiAgICAgICAgYm90LmNwMSA9IGV4Lm5lY2suY3VzcC5jcDE7XHJcbiAgICAgICAgY29uc3Qgb3V0ID0ge1xyXG4gICAgICAgICAgICB4OiBleC5uZWNrLnRvcC54ICsgMSxcclxuICAgICAgICAgICAgeTogZXgubmVjay50b3AueVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgb3V0LmNwMSA9IGV4Lm5lY2suY3VzcC5jcDE7XHJcbiAgICAgICAgcmV0dXJuIFt0b3AsIGJvdCwgb3V0LCB0b3BdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgTmVjayBleHRlbmRzIEJvZHlQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgIDogXCJuZWNrXCIsXHJcbiAgICAgICAgICAgIGZvcmNlZFNpZGUgIDogbnVsbCxcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtDaGluU2hhZGluZywgTmVja1NoYWRpbmddLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLy8gbmVjayB3aWxsIGV4cG9ydCBuZWNrLm5hcGUsIG5lY2sudG9wLCBuZWNrLmN1c3AsIHRyYXBleml1cy50b3AsIGNvbGxhcmJvbmVcclxuZXhwb3J0IGNsYXNzIE5lY2tIdW1hbiBleHRlbmRzIE5lY2sge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzLCBjYWxjdWxhdGUpIHtcclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5lY2sgPSBleC5uZWNrID0ge307XHJcbiAgICAgICAgICAgIG5lY2submFwZSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5za3VsbC55IC0gdGhpcy5mYWNlTGVuZ3RoICogMC4wNjgsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyB3aWR0aCBkZXBlbmRzIG9uIG11c2N1bGF0dXJlXHJcbiAgICAgICAgICAgIG5lY2sudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogdGhpcy5uZWNrV2lkdGggKiAwLjEgKyB0aGlzLnVwcGVyTXVzY2xlICogMC4wNSAtIHRoaXMuZmFjZUZlbSAqIDAuMDEsXHJcbiAgICAgICAgICAgICAgICB5OiBuZWNrLm5hcGUueVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbmVjay5jdXNwID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmVjay50b3AueCArIDAuMixcclxuICAgICAgICAgICAgICAgIHk6IG5lY2sudG9wLnkgLSB0aGlzLm5lY2tMZW5ndGggKiAwLjEsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBuZWNrLmN1c3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKG5lY2sudG9wLCBuZWNrLmN1c3AsIDAuNywgbW9kcy5uZWNrQ3VydmUgKiAwLjEpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudXBwZXJNdXNjbGUgPiAxMikge1xyXG4gICAgICAgICAgICAgICAgbGV0IHMgPSBzcGxpdEN1cnZlKGNsYW1wKDEgLSAodGhpcy51cHBlck11c2NsZSAtIDEyKSAvIDgwLCAwLCAxKSwgbmVjay50b3AsXHJcbiAgICAgICAgICAgICAgICAgICAgbmVjay5jdXNwKTtcclxuICAgICAgICAgICAgICAgIGV4LnRyYXBleml1cyA9IHMucmlnaHQucDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleC50cmFwZXppdXMgPSBjbG9uZShuZWNrLmN1c3ApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleC5jb2xsYXJib25lID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbmVjay5jdXNwLnggKyB0aGlzLnNob3VsZGVyV2lkdGggKiAwLjEgKyB0aGlzLnVwcGVyTXVzY2xlICogMC4wMSxcclxuICAgICAgICAgICAgICAgIHk6IG5lY2suY3VzcC55IC0gdGhpcy50b3Jzb0xlbmd0aCAqIDAuMTA1ICsgdGhpcy51cHBlck11c2NsZSAqIDAuMDUsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy51cHBlck11c2NsZSA+IDEyKSB7XHJcbiAgICAgICAgICAgICAgICBleC5jb2xsYXJib25lLnggKz0gKHRoaXMudXBwZXJNdXNjbGUgLSAxMikgKiAwLjE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY3VydmUgb2YgdGhlIHRyYXBleml1c1xyXG4gICAgICAgICAgICAgICAgZXguY29sbGFyYm9uZS5jcDEgPVxyXG4gICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VRdWFkcmF0aWMoZXgudHJhcGV6aXVzLCBleC5jb2xsYXJib25lLCAwLjcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBwZXJNdXNjbGUgKiAwLjAyLCB0aGlzLnVwcGVyTXVzY2xlICogMC4wMik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleC5jb2xsYXJib25lLmNwMSA9IGF2ZXJhZ2VRdWFkcmF0aWMobmVjay5jdXNwLCBleC5jb2xsYXJib25lLCAwLjMsXHJcbiAgICAgICAgICAgICAgICAgICAgKDEyIC0gdGhpcy51cHBlck11c2NsZSkgKiAtMC4wNSxcclxuICAgICAgICAgICAgICAgICAgICAoMTIgLSB0aGlzLnVwcGVyTXVzY2xlKSAqIC0wLjA1KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2V4Lm5lY2submFwZSwgZXgubmVjay50b3AsIGV4Lm5lY2suY3VzcCwgZXgudHJhcGV6aXVzLCBleC5jb2xsYXJib25lXTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge3NoYWRpbmdNZWRpdW0sIFNoYWRpbmdQYXJ0fSBmcm9tIFwiLi4vZHJhdy9zaGFkaW5nX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Qm9keVBhcnR9IGZyb20gXCIuL3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGFkanVzdCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBjbGFtcCxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGZpbGxlckRlZmluaXRpb24sXHJcbiAgICBlbmRQb2ludCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7ZGlzdH0gZnJvbSBcIi4uXCI7XHJcblxyXG5mdW5jdGlvbiBjYWxjVG9yc29TaGFkaW5nKGV4KSB7XHJcbiAgICBsZXQgYXJtcGl0QmFzZSA9IGV4LmFybXBpdDtcclxuICAgIGlmIChleC5icmVhc3QpIHtcclxuICAgICAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUoMC4xLCBleC5hcm1waXQsIGV4LndhaXN0KTtcclxuICAgICAgICBhcm1waXRCYXNlID0gc3AubGVmdC5wMjtcclxuICAgIH1cclxuICAgIGNvbnN0IGJlbGx5ID0gdGhpcy5iZWxseVByb3RydXNpb24gKiAwLjE7XHJcbiAgICBjb25zdCBhcm1waXQgPSBhZGp1c3QoYXJtcGl0QmFzZSwgLTIgLSB0aGlzLnNob3VsZGVyV2lkdGggKiAwLjAzLCAtNSk7XHJcbiAgICBjb25zdCB3YWlzdCA9IGFkanVzdChleC53YWlzdCwgLTEgLSB0aGlzLndhaXN0V2lkdGggKiAwLjAzICsgYmVsbHkgKiAwLjMsIC00KTtcclxuICAgIHdhaXN0LmNwMS54IC09IGJlbGx5ICogMC41O1xyXG4gICAgY29uc3QgaGlwID0gYWRqdXN0KGV4LmhpcCwgLTMgLSB0aGlzLmhpcFdpZHRoICogMC4wNCAtIGJlbGx5LCAtYmVsbHkpO1xyXG4gICAgaGlwLmNwMSA9IGFkanVzdChoaXAuY3AxLCB0aGlzLmhpcFdpZHRoICogMC4wMiArIGJlbGx5ICogMS44LCAtYmVsbHkqMC4yKTtcclxuICAgIGhpcC5jcDIgPSBhZGp1c3QoaGlwLmNwMiwgYmVsbHkgKiAwLjMsIC1iZWxseSAqIDAuMSk7XHJcblxyXG4gICAgY29uc3Qgb3V0QW1vdW50ID0gNTtcclxuICAgIGNvbnN0IG91dEJvdCA9IHtcclxuICAgICAgICB4OiBleC5oaXAueCArIG91dEFtb3VudCxcclxuICAgICAgICB5OiBleC5oaXAueSArIGJlbGx5ICogMC4xXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb3V0TWlkID0ge1xyXG4gICAgICAgIHg6IGV4LndhaXN0LnggKyBvdXRBbW91bnQsXHJcbiAgICAgICAgeTogZXgud2Fpc3QueVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG91dFRvcCA9IHtcclxuICAgICAgICB4OiBleC5hcm1waXQueCArIG91dEFtb3VudCxcclxuICAgICAgICB5OiBhcm1waXRCYXNlLnlcclxuICAgIH07XHJcbiAgICBhcm1waXQuY3AxID0gc2ltcGxlUXVhZHJhdGljKG91dFRvcCwgYXJtcGl0LCAwLjcsIC00KTtcclxuICAgIHJldHVybiBbYXJtcGl0LCB3YWlzdCwgaGlwLCBvdXRCb3QsIG91dE1pZCwgb3V0VG9wLCBhcm1waXRdO1xyXG59XHJcblxyXG5jbGFzcyBCZWxseVRvcFNoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLkZST05ULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNoYWRpbmdNZWRpdW07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBjb25zdCBiZWxseSA9IHRoaXMuYmVsbHlQcm90cnVzaW9uICogMC4xO1xyXG4gICAgICAgIGlmIChiZWxseSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBbYXJtcGl0LHdhaXN0XSA9IGNhbGNUb3Jzb1NoYWRpbmcuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjUsIGFybXBpdCwgd2Fpc3QpO1xyXG4gICAgICAgIGNvbnN0IG1pZCA9IGFkanVzdChzcC5sZWZ0LnAyLCAtYmVsbHksIDApO1xyXG4gICAgICAgIG1pZC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYXJtcGl0LCBtaWQsIDAuNSwgZGlzdChhcm1waXQsIG1pZCkgKiAwLjIpO1xyXG4gICAgICAgIG1pZC5jcDIgPSBudWxsO1xyXG4gICAgICAgIHdhaXN0LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhtaWQsIHdhaXN0LCAwLjMsIDIpO1xyXG4gICAgICAgIHdhaXN0LmNwMiA9IG51bGw7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gW2FybXBpdCwgbWlkLCB3YWlzdCwgYXJtcGl0XTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgVG9yc29TaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICA6IFwiK3RvcnNvXCIsXHJcbiAgICAgICAgICAgIGxheWVyOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNoYWRpbmdNZWRpdW07XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICByZXR1cm4gY2FsY1RvcnNvU2hhZGluZy5jYWxsKHRoaXMsIGV4KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFRvcnNvIGV4dGVuZHMgQm9keVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIGZvcmNlZFNpZGUgIDogbnVsbCxcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBsYXllciAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtUb3Jzb1NoYWRpbmcsIEJlbGx5VG9wU2hhZGluZ10sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVG9yc29IdW1hbiBleHRlbmRzIFRvcnNvIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgLy8gcmVtYWluaW5nIGhlaWdodC4uLlxyXG4gICAgICAgICAgICBmaWxsZXJEZWZpbml0aW9uKGV4LCBcImFybXBpdFwiLCB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5jb2xsYXJib25lLnggLSB0aGlzLnVwcGVyTXVzY2xlICogMC4wMyxcclxuICAgICAgICAgICAgICAgIHk6IGV4LmNvbGxhcmJvbmUueSAtIDEyIC0gdGhpcy51cHBlck11c2NsZSAqIDAuMVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChleC5oYXNPd25Qcm9wZXJ0eShcImVsYm93XCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKGNsYW1wKDEuMiAtIHRoaXMudXBwZXJNdXNjbGUgLyA0MCwgMC42LCAxKSwgZXguZWxib3cuaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgZXguYXJtcGl0KTtcclxuICAgICAgICAgICAgICAgIGV4LmxhdCA9IHNwLnJpZ2h0LnAxO1xyXG4gICAgICAgICAgICAgICAgZXgubGF0LmNwMSA9IHNwLnJpZ2h0LnAyLmNwMjtcclxuICAgICAgICAgICAgICAgIGV4LmxhdC5jcDIgPSBzcC5yaWdodC5wMi5jcDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWxsZXJEZWZpbml0aW9uKGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIFwibGF0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBleC5hcm1waXQueCArIDAuNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogZXguYXJtcGl0LnkgLSAzXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJlbGx5ID0gdGhpcy5iZWxseVByb3RydXNpb24gKiAwLjE7XHJcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZGVyQ2F1c2VkVG9yc29XaWR0aCA9ICh0aGlzLnNob3VsZGVyV2lkdGggLSA4MCkgKiAwLjE7XHJcbiAgICAgICAgICAgIGV4LndhaXN0ID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiB0aGlzLndhaXN0V2lkdGggKiAwLjEgKyBzaG91bGRlckNhdXNlZFRvcnNvV2lkdGggKiAwLjcgKyBiZWxseSAqIDAuNSxcclxuICAgICAgICAgICAgICAgIHkgIDogZXguYXJtcGl0LnkgLSB0aGlzLnRvcnNvTGVuZ3RoICogMC4zMyAtIGJlbGx5ICogMC41LFxyXG4gICAgICAgICAgICAgICAgY3AxOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogZXguYXJtcGl0LnggLSBiZWxseSAqIDAuMSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBleC5hcm1waXQueSAtIDUgLSBiZWxseSAqIDAuNVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXgud2Fpc3QuY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXgud2Fpc3QueCAtIGJlbGx5ICogMC41LFxyXG4gICAgICAgICAgICAgICAgeTogZXgud2Fpc3QueSArIHRoaXMud2Fpc3RXaWR0aCAqIDAuMDEgKyBzaG91bGRlckNhdXNlZFRvcnNvV2lkdGggKiAwLjEgKyBiZWxseVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgZXguaGlwID0ge1xyXG4gICAgICAgICAgICAgICAgeCAgOiB0aGlzLmhpcFdpZHRoICogMC4xICsgc2hvdWxkZXJDYXVzZWRUb3Jzb1dpZHRoICogMC41LFxyXG4gICAgICAgICAgICAgICAgeSAgOiBleC53YWlzdC55IC0gdGhpcy50b3Jzb0xlbmd0aCAqIDAuMzIgKyBiZWxseSAqIDAuNSxcclxuICAgICAgICAgICAgICAgIGNwMToge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGV4LndhaXN0LnggKyBiZWxseSAqIDAuNSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBleC53YWlzdC55IC0gdGhpcy50b3Jzb0xlbmd0aCAqIDAuMlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXguaGlwLmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmhpcC54IC0gdGhpcy5idXR0RnVsbG5lc3MgKiAwLjAzIC0gdGhpcy5sZWdGZW0gKiAwLjA1ICsgYmVsbHkgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5oaXAueSArIDQgKyB0aGlzLmJ1dHRGdWxsbmVzcyAqIDAuMDE1IC0gYmVsbHkgKiAwLjUsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBleC5wZWx2aXMgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICAgICAgeTogZXguaGlwLnkgLSB0aGlzLnRvcnNvTGVuZ3RoICogMC4wNVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbm9ybWFsLCBjYW4gYmUgY2xvc2VkIGJ5IGxlZ1xyXG4gICAgICAgIGlmIChleC5oYXNPd25Qcm9wZXJ0eShcImtuZWVcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtleC5hcm1waXQsIGV4LmxhdCwgZXgud2Fpc3QsIGV4LmhpcCwgZW5kUG9pbnRdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbZXguYXJtcGl0LCBleC5sYXQsIGV4LndhaXN0LCBleC5oaXAsIGV4Lmdyb2luXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtTaGFkaW5nUGFydH0gZnJvbSBcIi4uL2RyYXcvc2hhZGluZ19wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge0JvZHlQYXJ0fSBmcm9tIFwiLi9wYXJ0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgcmVmbGVjdCxcclxuICAgIGZpbGxlckRlZmluaXRpb24sXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuY2xhc3MgR3JvaW5TaGFkaW5nIGV4dGVuZHMgU2hhZGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICA6IFwiZ3JvaW5cIixcclxuICAgICAgICAgICAgbGF5ZXI6IExheWVyLkZST05ULFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4KSB7XHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjIsIGV4LnRoaWdoLnRvcCwgZXgudGhpZ2guZm9sZCk7XHJcbiAgICAgICAgY29uc3QgcmlnaHQgPSBzcC5sZWZ0LnAyO1xyXG4gICAgICAgIGNvbnN0IGdyb2luID0gZXh0cmFjdFBvaW50KGV4Lmdyb2luKTtcclxuICAgICAgICBncm9pbi5jcDEgPSBzaW1wbGVRdWFkcmF0aWMocmlnaHQsIGdyb2luLCAwLjUsIDIpO1xyXG5cclxuICAgICAgICBzcCA9IHNwbGl0Q3VydmUoMC44LCBleC50aGlnaC50b3AsIGV4LnRoaWdoLmZvbGQpO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSByZWZsZWN0KHNwLmxlZnQucDIpO1xyXG4gICAgICAgIGxlZnQuY3AxID0gcmVmbGVjdChzcC5sZWZ0LnAyLmNwMSk7XHJcbiAgICAgICAgaWYgKHNwLmxlZnQucDIuY3AyKSB7XHJcbiAgICAgICAgICAgIGxlZnQuY3AyID0gcmVmbGVjdChzcC5sZWZ0LnAyLmNwMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0aGlnaFRvcCA9IHJlZmxlY3QoZXgudGhpZ2gudG9wKTtcclxuXHJcbiAgICAgICAgcmlnaHQuY3AxID0gc2ltcGxlUXVhZHJhdGljKGxlZnQsIHJpZ2h0LCAwLjcsIC00KTtcclxuICAgICAgICByZXR1cm4gW3JpZ2h0LCBncm9pbiwgdGhpZ2hUb3AsIGxlZnQsIHJpZ2h0XTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIEdyb2luIGV4dGVuZHMgQm9keVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jICAgICAgICAgOiBcImdyb2luXCIsXHJcbiAgICAgICAgICAgIGZvcmNlZFNpZGUgIDogbnVsbCxcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBsYXllciAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBiZWxvd1BhcnRzICA6IFtcInBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBzaGFkaW5nUGFydHM6IFtHcm9pblNoYWRpbmddXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHcm9pbkh1bWFuIGV4dGVuZHMgR3JvaW4ge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExpbmVXaWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgLy8gcmVtYWluaW5nIGhlaWdodC4uLlxyXG4gICAgICAgICAgICBjb25zdCB0b3Jzb0xlbmd0aCA9IHRoaXMuaGVpZ2h0ICogMC44NSAtIHRoaXMubGVnTGVuZ3RoO1xyXG4gICAgICAgICAgICBmaWxsZXJEZWZpbml0aW9uKGV4LCBcInRoaWdoXCIpO1xyXG4gICAgICAgICAgICBmaWxsZXJEZWZpbml0aW9uKGV4LnRoaWdoLCBcInRvcFwiLCB7XHJcbiAgICAgICAgICAgICAgICB4OiAxLjYsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5oaXAueSAtIHRoaXMubGVnTGVuZ3RoICogMC4xNSxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBleC5ncm9pbiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgICAgICB5OiBleC50aGlnaC50b3AueSAtIHRvcnNvTGVuZ3RoICogMC4wMTVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZXguZ3JvaW4udG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXgudGhpZ2gudG9wLnggKyA1LFxyXG4gICAgICAgICAgICAgICAgeTogZXgudGhpZ2gudG9wLnkgKyAxLjEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb3ZlcmVkIGJ5IHNvbWV0aGluZyBlbHNlLCBkb24ndCBzaG93XHJcbiAgICAgICAgcmV0dXJuIFtleC5ncm9pbi50b3AsIGV4Lmdyb2luLCB7ZmlsbE9ubHk6IFtleC5uZWNrLm5hcGUsIGV4Lmdyb2luLnRvcF19XTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7Qm9keVBhcnR9IGZyb20gXCIuL3BhcnRcIjtcclxuaW1wb3J0IHtcclxuICAgIGNsYW1wXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuY2xhc3MgQnV0dCBleHRlbmRzIEJvZHlQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICA6IFwiYnV0dFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICBsYXllciAgOiBMYXllci5CQUNLXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQnV0dEh1bWFuIGV4dGVuZHMgQnV0dCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGluZVdpZHRoKGF2YXRhcikge1xyXG4gICAgICAgIHJldHVybiBjbGFtcCgwLjUgKyBhdmF0YXIuZGltLmJ1dHRGdWxsbmVzcyAqIDAuMDUsIDAuNSwgMS41KTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgZXguYnV0dCA9IHt9O1xyXG4gICAgICAgICAgICBleC5idXR0LmluID0ge1xyXG4gICAgICAgICAgICAgICAgeDogMC41LFxyXG4gICAgICAgICAgICAgICAgeTogZXguZ3JvaW4ueSAtIHRoaXMuYnV0dEZ1bGxuZXNzICogMC4wMSxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZXgudGhpZ2gub3V0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXguYnV0dC5vdXQgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC50aGlnaC5vdXQueCAtIDIsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5idXR0LmluLnkgKyAxLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBleC5idXR0Lm91dC5jcDEgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBleC5idXR0LmluLnggKiAwLjcgKyBleC5idXR0Lm91dC54ICogMC4zIC0gdGhpcy5idXR0RnVsbG5lc3MgKiAwLjEwLFxyXG4gICAgICAgICAgICAgICAgeTogZXguYnV0dC5pbi55IC0gdGhpcy5idXR0RnVsbG5lc3MgKiAwLjM1XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV4LmJ1dHQub3V0LmNwMiA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmJ1dHQuaW4ueCAqIDAuMyArIGV4LmJ1dHQub3V0LnggKiAwLjcgKyB0aGlzLmJ1dHRGdWxsbmVzcyAqIDAuMTIsXHJcbiAgICAgICAgICAgICAgICB5OiBleC5idXR0Lm91dC55IC0gMiAtIHRoaXMuYnV0dEZ1bGxuZXNzICogMC4yXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBleC5idXR0LmluLmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGV4LmJ1dHQub3V0LmNwMi54LFxyXG4gICAgICAgICAgICAgICAgeTogZXguYnV0dC5vdXQueSArIHRoaXMuYnV0dEZ1bGxuZXNzICogMC4yXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGV4LmJ1dHQuaW4uY3AyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogZXguYnV0dC5pbi54LFxyXG4gICAgICAgICAgICAgICAgeTogZXguYnV0dC5pbi55ICsgMyArIHRoaXMuYnV0dEZ1bGxuZXNzICogMC4yXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gW2V4LmJ1dHQuaW4sIGV4LmJ1dHQub3V0LCBleC5idXR0LmluXTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge0ZhY2VQYXJ0fSBmcm9tIFwiLi9mYWNlX3BhcnRcIjtcclxuaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5pbXBvcnQge1xyXG4gICAgYnJlYWtQb2ludCxcclxuICAgIGVuZFBvaW50XHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuY2xhc3MgTW91dGggZXh0ZW5kcyBGYWNlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIm1vdXRoXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGhlYWRcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTW91dGhIdW1hbiBleHRlbmRzIE1vdXRoIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKGlnbm9yZSwgZXgpIHtcclxuICAgICAgICByZXR1cm4gYWRqdXN0Q29sb3IoZXguYmFzZUxpcENvbG9yLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzOiAtMzAsXHJcbiAgICAgICAgICAgICAgICBsOiAtMjBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpcEZpbGwoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBicmVha1BvaW50LFxyXG4gICAgICAgICAgICBleC5saXBzLnRvcCxcclxuICAgICAgICAgICAgZXgubGlwcy5vdXQsXHJcbiAgICAgICAgICAgIGV4LmxpcHMuYm90LFxyXG4gICAgICAgICAgICBleC5saXBzLnRvcCxcclxuICAgICAgICAgICAgZW5kUG9pbnQsXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtGYWNlUGFydH0gZnJvbSBcIi4vZmFjZV9wYXJ0XCI7XHJcbmltcG9ydCB7U2hhZGluZ1BhcnR9IGZyb20gXCIuLi9kcmF3L3NoYWRpbmdfcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIGNsYW1wLFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGJyZWFrUG9pbnQsXHJcbiAgICBlbmRQb2ludCxcclxuICAgIGNsb25lXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuY2xhc3MgTGlwU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2xpcHNcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wiZmFjZVBhcnRzIGxpcHNcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2woMCwwJSw4NSUpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBsZXQgY2VudGVyID0gY2xvbmUoZXgubGlwcy5ib3QudG9wKTtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBicmVha1BvaW50LFxyXG4gICAgICAgICAgICBjZW50ZXIsXHJcbiAgICAgICAgICAgIGV4LmxpcHMub3V0Lmxvd2VyLFxyXG4gICAgICAgICAgICBleC5saXBzLmJvdCxcclxuICAgICAgICAgICAgY2VudGVyLFxyXG4gICAgICAgICAgICBlbmRQb2ludCxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgTGlwcyBleHRlbmRzIEZhY2VQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgIDogXCJsaXBzXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgOiBbXCJtb3V0aFwiXSxcclxuICAgICAgICAgICAgc2hhZGluZ1BhcnRzOiBbTGlwU2hhZGluZ10sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTGlwc0h1bWFuIGV4dGVuZHMgTGlwcyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbChpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4LmJhc2VMaXBDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwRmlsbCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmIChjYWxjdWxhdGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaCA9IHRoaXMuZmFjZUxlbmd0aCAqIDAuMTtcclxuICAgICAgICAgICAgY29uc3QgZmFjZU1hc2N1bGluaXR5ID0gNDAgLSB0aGlzLmZhY2VGZW07XHJcblxyXG4gICAgICAgICAgICAvLyBoZWlnaHQgdGhhdCBwYXJ0aW5nIG9mZnNldHMgdGhlIGJvdHRvbSBsaXBzXHJcbiAgICAgICAgICAgIGNvbnN0IHRvcFBhcnRpbmdIZWlnaHQgPSBtb2RzLmxpcFBhcnRpbmcgKiAwLjAwNztcclxuICAgICAgICAgICAgY29uc3QgYm90UGFydGluZ0hlaWdodCA9IC1tb2RzLmxpcFBhcnRpbmcgKiAwLjAxNTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxpcHMgPSBleC5saXBzID0ge307XHJcbiAgICAgICAgICAgIGxpcHMuY2VudGVyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogLTAuMSxcclxuICAgICAgICAgICAgICAgIHk6IGV4LnNrdWxsLnkgLSBoICogMC43OCArIG1vZHMubGlwSGVpZ2h0ICogMC4xICtcclxuICAgICAgICAgICAgICAgICAgIHRoaXMuZmFjZUZlbSAqIDAuMDE4XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxpcHMudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbGlwcy5jZW50ZXIueCxcclxuICAgICAgICAgICAgICAgIHk6IGxpcHMuY2VudGVyLnkgKyBjbGFtcCh0aGlzLmxpcFNpemUgKiAwLjAxNSArIHRoaXMuZmFjZUZlbSAqIDAuMDA1ICtcclxuICAgICAgICAgICAgICAgICAgIG1vZHMubGlwVG9wU2l6ZSAqIDAuMDEsIDAsIDMpICsgdG9wUGFydGluZ0hlaWdodFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gdGlwIG9mIHRoZSBDdXBpZCdzIGJvd1xyXG4gICAgICAgICAgICBsaXBzLnRpcCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGNsYW1wKDAuNyAtIHRoaXMuZmFjZUZlbSAqIDAuMDAzICsgbW9kcy5saXBDdXBpZHNCb3cgKiAwLjAxLCAwLCA1KSAqXHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLmxpcFNpemUgLyAyMCxcclxuICAgICAgICAgICAgICAgIHk6IGxpcHMudG9wLnkgKyBtb2RzLmxpcFRvcFNpemUgKiAwLjAwNSArXHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLmZhY2VGZW0gKiAwLjAwMyArIHRoaXMubGlwU2l6ZSAqIDAuMDEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxpcHMudGlwLmNwMSA9XHJcbiAgICAgICAgICAgICAgICBzaW1wbGVRdWFkcmF0aWMobGlwcy50b3AsIGxpcHMudGlwLCAwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgMC4xICsgbW9kcy5saXBUb3BDdXJ2ZSAqIDAuMDAxKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG91dGVyIGNvcm5lclxyXG4gICAgICAgICAgICBsaXBzLm91dCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IDEgKyB0aGlzLmxpcFNpemUgKiAwLjA4ICsgbW9kcy5saXBXaWR0aCAqIDAuMDA1ICsgZmFjZU1hc2N1bGluaXR5ICogMC4wMSxcclxuICAgICAgICAgICAgICAgIHk6IGxpcHMuY2VudGVyLnkgKyBtb2RzLmxpcEN1cmwgKiAwLjAyLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBsaXBzLm91dC5jcDEgPVxyXG4gICAgICAgICAgICAvLyAgICAgc2ltcGxlUXVhZHJhdGljKGxpcHMudGlwLCBsaXBzLm91dCwgMC4zLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgIGNsYW1wKG1vZHMubGlwVG9wQ3VydmUgKiAwLjAxLCAtMC4yLCAyKSk7XHJcbiAgICAgICAgICAgIGxpcHMub3V0LmNwMSA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGxpcHMudGlwLnggKiAwLjUgKyBsaXBzLm91dC54ICogMC41ICsgbW9kcy5saXBUb3BDdXJ2ZSAqIDAuMDAyLFxyXG4gICAgICAgICAgICAgICAgeTogbGlwcy50aXAueVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsaXBzLm91dC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBsaXBzLnRpcC54ICogMC4zICsgbGlwcy5vdXQueCAqIDAuNyxcclxuICAgICAgICAgICAgICAgIHk6IGxpcHMudGlwLnkgKiAwLjUgKyBsaXBzLm91dC55ICogMC41ICsgbW9kcy5saXBUb3BDdXJ2ZSAqIDAuMDFcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJvdHRvbSBvZiBsaXBzXHJcbiAgICAgICAgICAgIGxpcHMuYm90ID0ge1xyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIHk6IGxpcHMuY2VudGVyLnkgLSAwLjMgLSB0aGlzLmxpcFNpemUgKiAwLjAyIC0gdGhpcy5mYWNlRmVtICogMC4wMDggLVxyXG4gICAgICAgICAgICAgICAgICAgbW9kcy5saXBCb3RTaXplICogMC4wMDQgKyBib3RQYXJ0aW5nSGVpZ2h0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxpcHMuYm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhsaXBzLm91dCwgbGlwcy5ib3QsIDAuNSxcclxuICAgICAgICAgICAgICAgIHRoaXMubGlwU2l6ZSAqIDAuMDIgKyB0aGlzLmZhY2VGZW0gKiAwLjAwMyArIG1vZHMubGlwQm90U2l6ZSAqIDAuMDAzIC1cclxuICAgICAgICAgICAgICAgIGJvdFBhcnRpbmdIZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICBsaXBzLmJvdC5jcDEueSAtPSBtb2RzLmxpcEN1cmwgKiAwLjAxO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGJpYXNIZWlnaHRPZmZzZXQgPSAtMC4xIC0gbW9kcy5saXBCaWFzICogMC4wMDY7XHJcbiAgICAgICAgICAgIC8vIHRvcCBvZiB0aGUgYm90IGxpcHNcclxuICAgICAgICAgICAgbGlwcy5ib3QudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbGlwcy5jZW50ZXIueCxcclxuICAgICAgICAgICAgICAgIHk6IGxpcHMuY2VudGVyLnkgKyBib3RQYXJ0aW5nSGVpZ2h0ICsgYmlhc0hlaWdodE9mZnNldFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBib3Qgb2YgdGhlIHRvcCBsaXBzXHJcbiAgICAgICAgICAgIGxpcHMudG9wLmJvdCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IGxpcHMuY2VudGVyLngsXHJcbiAgICAgICAgICAgICAgICB5OiBsaXBzLmNlbnRlci55ICsgdG9wUGFydGluZ0hlaWdodCAqIDEuMiArIGJpYXNIZWlnaHRPZmZzZXQsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBsb3dlciBsaXBzXHJcbiAgICAgICAgICAgIGxpcHMub3V0Lmxvd2VyID0gZXh0cmFjdFBvaW50KGxpcHMub3V0KTtcclxuICAgICAgICAgICAgbGlwcy5vdXQubG93ZXIuY3AxID1cclxuICAgICAgICAgICAgICAgIHNpbXBsZVF1YWRyYXRpYyhsaXBzLmJvdC50b3AsXHJcbiAgICAgICAgICAgICAgICAgICAgbGlwcy5vdXQubG93ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgMC4zLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZHMubGlwQmlhcyAqIDAuMDIgLSBtb2RzLmxpcFBhcnRpbmcgKiAwLjAwNSk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gaW5uZXIgY29ybmVyIG9mIHRoZSBsaXBzLCBhbG9uZyB0aGUgY3VydmUgZnJvbSBib3QudG9wIHRvIG91dFxyXG4gICAgICAgICAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUoMC42ICsgbW9kcy5saXBQYXJ0aW5nIC8gNDAwLCBsaXBzLmJvdC50b3AsIGxpcHMub3V0Lmxvd2VyKTtcclxuICAgICAgICAgICAgbGlwcy5vdXQuaW4gPSBzcC5sZWZ0LnAyO1xyXG5cclxuICAgICAgICAgICAgLy8gY3VydmUgdXAgdG8gdGhlIHRvcCBvZiB0aGUgYm90dG9tIGxpcHNcclxuICAgICAgICAgICAgbGlwcy50b3AuYm90LmNwMSA9XHJcbiAgICAgICAgICAgICAgICBzaW1wbGVRdWFkcmF0aWMobGlwcy5vdXQuaW4sIGxpcHMudG9wLmJvdCwgMC43LCAtbW9kcy5saXBQYXJ0aW5nICogMC4wMDUpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGJyZWFrUG9pbnQsXHJcbiAgICAgICAgICAgIGV4LmxpcHMudG9wLFxyXG4gICAgICAgICAgICBleC5saXBzLnRpcCxcclxuICAgICAgICAgICAgLy8gdHJhY2VQb2ludChleC5saXBzLm91dCwgMC41KSxcclxuICAgICAgICAgICAgZXgubGlwcy5vdXQsXHJcbiAgICAgICAgICAgIGV4LmxpcHMuYm90LFxyXG4gICAgICAgICAgICBleC5saXBzLmJvdC50b3AsXHJcbiAgICAgICAgICAgIGV4LmxpcHMub3V0LmluLFxyXG4gICAgICAgICAgICBleC5saXBzLnRvcC5ib3QsXHJcbiAgICAgICAgICAgIGV4LmxpcHMudG9wLFxyXG4gICAgICAgICAgICBlbmRQb2ludCxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQge0ZhY2VQYXJ0fSBmcm9tIFwiLi9mYWNlX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7U2hhZGluZ1BhcnR9IGZyb20gXCIuLi9kcmF3L3NoYWRpbmdfcGFydFwiO1xyXG5pbXBvcnQge1xyXG4gICAgY2xhbXAsXHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBicmVha1BvaW50LFxyXG4gICAgY29udGludWVDdXJ2ZSxcclxuICAgIGFkanVzdCxcclxuICAgIGVuZFBvaW50LFxyXG4gICAgcmVmbGVjdCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5jbGFzcyBOb3NlIGV4dGVuZHMgRmFjZVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbG9jOiBcIm5vc2VcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIE5vc2VIdW1hblNoYWRpbmcgZXh0ZW5kcyBTaGFkaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgIDogXCIrbm9zZVwiLFxyXG4gICAgICAgICAgICBsYXllcjogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgbW9kcykge1xyXG4gICAgICAgIGNvbnN0IG5vc2UgPSBleC5ub3NlO1xyXG4gICAgICAgIGNvbnN0IHRvcCA9IG5vc2UudG9wO1xyXG4gICAgICAgIGNvbnN0IGJvdCA9IG5vc2UuYm90O1xyXG5cclxuICAgICAgICAvLyBkcmF3IGZyb20gdG9wIHRvIGJvdHRvbSBhbmQgdGhlbiBib3R0b20gdG8gdG9wXHJcbiAgICAgICAgLy8gYm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyh0b3AsIGJvdCwgMC44LCAwLjMpO1xyXG4gICAgICAgIGJvdC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IHRvcC54LFxyXG4gICAgICAgICAgICB5OiB0b3AueSAtIG1vZHMubm9zZUxlbmd0aCAqIDAuMDVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGJvdC5jcDIgPSB7XHJcbiAgICAgICAgICAgIHg6IGJvdC54ICsgMC42ICsgbW9kcy5ub3NlUm91bmRuZXNzICogMC4xLFxyXG4gICAgICAgICAgICB5OiBib3QueSArIG1vZHMubm9zZUxlbmd0aCAqIDAuMDJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBvdXQgPSBhZGp1c3Qobm9zZS5vdXQsIDAsIDApO1xyXG4gICAgICAgIG91dC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYm90LCBvdXQsIDAuNSwgbW9kcy5ub3N0cmlsU2l6ZSAqIDAuMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5vc3RyaWxSYXRpbyA9IGNsYW1wKG1vZHMubm9zdHJpbFNpemUgKiAwLjAxIC0gbW9kcy5ub3NlUmlkZ2VIZWlnaHQgKiAwLjAyLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAwLjMpO1xyXG4gICAgICAgIGNvbnN0IG1pZCA9IHtcclxuICAgICAgICAgICAgeDogYm90LnggKiBub3N0cmlsUmF0aW8gKyBvdXQueCAqICgxIC0gbm9zdHJpbFJhdGlvKSxcclxuICAgICAgICAgICAgeTogYm90LnkgKyAxICsgbW9kcy5ub3N0cmlsU2l6ZSAqIDAuMDVcclxuICAgICAgICB9O1xyXG4gICAgICAgIG1pZC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IG91dC54ICsgbW9kcy5ub3N0cmlsU2l6ZSAqIDAuMDIsXHJcbiAgICAgICAgICAgIHk6IG91dC55ICsgbW9kcy5ub3N0cmlsU2l6ZSAqIDAuMDUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBtaWQuY3AyID0ge1xyXG4gICAgICAgICAgICB4OiBtaWQueCArIDAuNixcclxuICAgICAgICAgICAgeTogbWlkLnkgLSAwLjMsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdG9wLmNwMSA9IGNvbnRpbnVlQ3VydmUob3V0LCBtaWQsIG1vZHMubm9zdHJpbFNpemUgKiAwLjEpO1xyXG4gICAgICAgIHRvcC5jcDIgPSB7XHJcbiAgICAgICAgICAgIHg6IGNsYW1wKHRvcC54ICsgMC4xICsgbW9kcy5ub3NlV2lkdGggKiAwLjA2ICsgbW9kcy5ub3NlUmlkZ2VIZWlnaHQgKiAwLjEgLVxyXG4gICAgICAgICAgICAgICAgICAgICBtb2RzLm5vc2VSb3VuZG5lc3MgKiAwLjEsXHJcbiAgICAgICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAgICAgMTAwKSxcclxuICAgICAgICAgICAgeTogdG9wLnkgKyAwLjJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gW3RvcCwgYm90LCBvdXQsIG1pZCwgdG9wXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBOb3NlSHVtYW4gZXh0ZW5kcyBOb3NlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHNoYWRpbmdQYXJ0czogW05vc2VIdW1hblNoYWRpbmddXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbChpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4LmJhc2VTdHJva2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpcEZpbGwoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG5cclxuICAgICAgICBpZiAoY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgICAgIGxldCBub3NlID0gZXgubm9zZSA9IHt9O1xyXG4gICAgICAgICAgICBsZXQgaCA9IHRoaXMuZmFjZUxlbmd0aCAqIDAuMTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vc3RyaWxzXHJcbiAgICAgICAgICAgIG5vc2UuY2VudGVyID0ge1xyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIHk6IGV4LnNrdWxsLnkgLSBoICogMC42NSArIG1vZHMubm9zZUhlaWdodCAqIDAuMSArIHRoaXMuZmFjZUZlbSAqIDAuMDJcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIG5vc2UuaW4gPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBub3NlLmNlbnRlci54ICsgbW9kcy5ub3NlV2lkdGggKiAwLjAzNyAtIHRoaXMuZmFjZUZlbSAqIDAuMDA3ICtcclxuICAgICAgICAgICAgICAgICAgIG1vZHMubm9zdHJpbFNpemUgKiAwLjAxLFxyXG4gICAgICAgICAgICAgICAgeTogbm9zZS5jZW50ZXIueSAtIDAuM1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBub3NlLm91dCA9IHtcclxuICAgICAgICAgICAgICAgIHg6IG5vc2UuY2VudGVyLnggKyBtb2RzLm5vc2VXaWR0aCAqIDAuMDQzIC0gdGhpcy5mYWNlRmVtICogMC4wMTcgK1xyXG4gICAgICAgICAgICAgICAgICAgMC4yNSArIG1vZHMubm9zdHJpbFNpemUgKiAwLjA4LFxyXG4gICAgICAgICAgICAgICAgeTogbm9zZS5jZW50ZXIueSArIDAuM1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IG5vc3RyaWxWaXNpYmlsaXR5ID0gY2xhbXAoMC41IC0gdGhpcy5mYWNlRmVtICogMC4wMDUsIDAsIDAuNCk7XHJcbiAgICAgICAgICAgIG5vc2Uub3V0LmNwMSA9XHJcbiAgICAgICAgICAgICAgICBzaW1wbGVRdWFkcmF0aWMobm9zZS5pbiwgbm9zZS5vdXQsIDAuNSwgbm9zdHJpbFZpc2liaWxpdHkpO1xyXG4gICAgICAgICAgICBub3NlLmluLmNwMSA9XHJcbiAgICAgICAgICAgICAgICBzaW1wbGVRdWFkcmF0aWMobm9zZS5vdXQsIG5vc2UuaW4sIDAuNSwgbm9zdHJpbFZpc2liaWxpdHkpO1xyXG5cclxuICAgICAgICAgICAgLy8gbm9ybWFsbHkgcmVmbGVjdCBmb3IgdGhlIG90aGVyIG5vc3RyaWxcclxuICAgICAgICAgICAgbm9zZS5sZWZ0ID0ge307XHJcbiAgICAgICAgICAgIG5vc2UubGVmdC5pbiA9IHJlZmxlY3Qobm9zZS5pbik7XHJcbiAgICAgICAgICAgIG5vc2UubGVmdC5vdXQgPSByZWZsZWN0KG5vc2Uub3V0KTtcclxuICAgICAgICAgICAgbm9zZS5sZWZ0LmluLmNwMSA9IHJlZmxlY3Qobm9zZS5pbi5jcDEpO1xyXG4gICAgICAgICAgICBub3NlLmxlZnQub3V0LmNwMSA9IHJlZmxlY3Qobm9zZS5vdXQuY3AxKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5vc2UgYnJpZGdlXHJcbiAgICAgICAgICAgIG5vc2UudG9wID0ge1xyXG4gICAgICAgICAgICAgICAgeDogbm9zZS5jZW50ZXIueCArIG1vZHMubm9zZVdpZHRoICogMC4wMSArXHJcbiAgICAgICAgICAgICAgICAgICBjbGFtcChtb2RzLm5vc2VSb3VuZG5lc3MgKiAwLjAxLCAwLCA1KSxcclxuICAgICAgICAgICAgICAgIHk6IG5vc2UuY2VudGVyLnkgK1xyXG4gICAgICAgICAgICAgICAgICAgKG1vZHMubm9zZUxlbmd0aCAqIDAuMSAtIG1vZHMubm9zZVJvdW5kbmVzcyAqIDAuMSkgKiBoICogMC4wNDVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbm9zZS5ib3QgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBub3NlLnRvcC54LFxyXG4gICAgICAgICAgICAgICAgeTogbm9zZS5jZW50ZXIueSArIDAuM1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBicmVha1BvaW50LFxyXG4gICAgICAgICAgICBleC5ub3NlLmluLFxyXG4gICAgICAgICAgICBleC5ub3NlLm91dCxcclxuICAgICAgICAgICAgZXgubm9zZS5pbixcclxuICAgICAgICAgICAgYnJlYWtQb2ludCxcclxuICAgICAgICAgICAgZXgubm9zZS5sZWZ0LmluLFxyXG4gICAgICAgICAgICBleC5ub3NlLmxlZnQub3V0LFxyXG4gICAgICAgICAgICBleC5ub3NlLmxlZnQuaW4sXHJcbiAgICAgICAgICAgIGVuZFBvaW50LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtjbG9uZX0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuLyoqXHJcbiAqIEZhY2lhbCBleHByZXNzaW9uc1xyXG4gKiBAbmFtZXNwYWNlIEV4cHJlc3Npb25cclxuICogQG1lbWJlcm9mIG1vZHVsZTpkYVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEV4cHJlc3Npb24gPSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhbiBleHByZXNzaW9uIHRvIGEgY2VydGFpbiBkZWdyZWVcclxuICAgICAqIEBtZW1iZXJvZiBtb2R1bGU6ZGFcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBleHByZXNzaW9uIEV4cHJlc3Npb24gb2JqZWN0IHdpdGggbW9kaWZpZXJzIGluIE1vZHNcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWdyZWUgSG93IGZ1bGx5IHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBkaXNwbGF5ZWQ7ID4gMFxyXG4gICAgICogQHJldHVybnMge29iamVjdH0gVGhlIGV4cHJlc3Npb24gdG8gYmUgYXBwbGllZFxyXG4gICAgICovXHJcbiAgICBjcmVhdGUoZXhwcmVzc2lvbiwgZGVncmVlID0gMSkge1xyXG4gICAgICAgIGNvbnN0IG5ld0V4cHJlc3Npb24gPSBjbG9uZShleHByZXNzaW9uKTtcclxuICAgICAgICBmb3IgKGxldCBtb2QgaW4gbmV3RXhwcmVzc2lvbi5Nb2RzKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXdFeHByZXNzaW9uLk1vZHMuaGFzT3duUHJvcGVydHkobW9kKSkge1xyXG4gICAgICAgICAgICAgICAgbmV3RXhwcmVzc2lvbi5Nb2RzW21vZF0gKj0gZGVncmVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdFeHByZXNzaW9uO1xyXG4gICAgfSxcclxuXHJcbiAgICBuZXV0cmFsOiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBNb2RzOiB7fSxcclxuICAgIH0pLFxyXG5cclxuICAgIHN1c3BpY2lvdXM6IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIE1vZHM6IHtcclxuICAgICAgICAgICAgZXllQm90U2l6ZTogLTcsXHJcbiAgICAgICAgICAgIGJyb3dIZWlnaHQ6IC0yLFxyXG4gICAgICAgICAgICBsaXBCb3RTaXplOiAtMjAsXHJcbiAgICAgICAgICAgIGxpcFRvcFNpemU6IC04LFxyXG4gICAgICAgICAgICBsaXBXaWR0aCAgOiAtMjUsXHJcbiAgICAgICAgfSxcclxuICAgIH0pLFxyXG5cclxuICAgIGFuZ3J5OiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBNb2RzOiB7XHJcbiAgICAgICAgICAgIGJyb3dUaWx0ICAgICA6IDcsXHJcbiAgICAgICAgICAgIGJyb3dDbG9zZW5lc3M6IC0zLFxyXG4gICAgICAgICAgICBicm93SGVpZ2h0ICAgOiAtNCxcclxuICAgICAgICAgICAgZXllQm90U2l6ZSAgIDogMSxcclxuICAgICAgICAgICAgZXllVG9wU2l6ZSAgIDogMSxcclxuICAgICAgICAgICAgbGlwQ3VybCAgICAgIDogLTYsXHJcbiAgICAgICAgfSxcclxuICAgIH0pLFxyXG5cclxuICAgIHNhZDogT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgTW9kczoge1xyXG4gICAgICAgICAgICBicm93VGlsdCAgOiAtNyxcclxuICAgICAgICAgICAgZXllQm90U2l6ZTogMixcclxuICAgICAgICAgICAgZXllVG9wU2l6ZTogLTEsXHJcbiAgICAgICAgICAgIGxpcEN1cmwgICA6IC01LFxyXG4gICAgICAgICAgICBleWVUaWx0ICAgOiAtMSxcclxuICAgICAgICB9LFxyXG4gICAgfSksXHJcblxyXG4gICAgc3VycHJpc2VkOiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBNb2RzOiB7XHJcbiAgICAgICAgICAgIGJyb3dUaWx0ICA6IC01LFxyXG4gICAgICAgICAgICBleWVCb3RTaXplOiAyLFxyXG4gICAgICAgICAgICBleWVUb3BTaXplOiAxLFxyXG4gICAgICAgICAgICBsaXBQYXJ0aW5nOiAxNSxcclxuICAgICAgICAgICAgYnJvd0hlaWdodDogNSxcclxuICAgICAgICB9LFxyXG4gICAgfSksXHJcblxyXG4gICAgbWlzY2hpZXZvdXM6IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIE1vZHM6IHtcclxuICAgICAgICAgICAgbGlwQ3VybCAgIDogMTAsXHJcbiAgICAgICAgICAgIGV5ZUJvdFNpemU6IC00LFxyXG4gICAgICAgICAgICBleWVUb3BTaXplOiAtMSxcclxuICAgICAgICB9LFxyXG4gICAgfSksXHJcblxyXG4gICAgaGFwcHk6IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIE1vZHM6IHtcclxuICAgICAgICAgICAgbGlwQ3VybCAgIDogMTIsXHJcbiAgICAgICAgICAgIGV5ZUJvdFNpemU6IC0yLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KSxcclxuXHJcbiAgICBzbGVlcHk6IE9iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIE1vZHM6IHtcclxuICAgICAgICAgICAgZXllVG9wU2l6ZSAgOiAtNCxcclxuICAgICAgICAgICAgZXllbGlkSGVpZ2h0OiAtMSxcclxuICAgICAgICB9LFxyXG4gICAgfSksXHJcblxyXG4gICAgYXJvdXNlZDogT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgTW9kczoge1xyXG4gICAgICAgICAgICBleWVsaWRIZWlnaHQ6IC0yLjUsXHJcbiAgICAgICAgICAgIGxpcFBhcnRpbmcgIDogMTMsXHJcbiAgICAgICAgfSxcclxuICAgIH0pLFxyXG5cclxuICAgIGJsaXNzOiBPYmplY3QuZnJlZXplKHtcclxuICAgICAgICBNb2RzOiB7XHJcbiAgICAgICAgICAgIGlyaXNIZWlnaHQgIDogMixcclxuICAgICAgICAgICAgbGlwUGFydGluZyAgOiAyMCxcclxuICAgICAgICAgICAgZXllbGlkSGVpZ2h0OiAtMixcclxuICAgICAgICB9LFxyXG4gICAgfSksXHJcbn07XHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge1NoYWRpbmdQYXJ0fSBmcm9tIFwiLi4vZHJhdy9zaGFkaW5nX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7c2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uL3V0aWwvZHJhd1wiO1xyXG5pbXBvcnQge1xyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIG5vbmUsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG4gICAgYWRqdXN0LFxyXG4gICAgY2xhbXAsXHJcbiAgICBjb250aW51ZUN1cnZlLFxyXG4gICAgaW50ZXJwb2xhdGVDdXJ2ZSxcclxuICAgIHRyYW5zZm9ybUN1cnZlLFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBKYWNrZXRCYXNlU2hhZGluZyBleHRlbmRzIFNoYWRpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK3RvcnNvXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBmb3JjZWRTaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsY0RyYXdQb2ludHMoZXgpIHtcclxuICAgICAgICBjb25zdCB7dG9wLCBtaWQsIGJvdH0gPSBjYWxjSmFja2V0LmNhbGwodGhpcywgZXgpO1xyXG4gICAgICAgIGNvbnN0IGNoZXN0RGlzcGxheSA9IDEgLSB0aGlzLmNoZXN0Q292ZXJhZ2U7XHJcbiAgICAgICAgbGV0IGluQm90ID0gZXh0cmFjdFBvaW50KG1pZCk7XHJcbiAgICAgICAgaW5Cb3QuY3AxID0gYm90LmNwMTtcclxuICAgICAgICBpbkJvdCA9IGFkanVzdChpbkJvdCwgLWNoZXN0RGlzcGxheSAqIDMsIGNoZXN0RGlzcGxheSAqIDMpO1xyXG5cclxuICAgICAgICB0b3AuY3AxID0gYWRqdXN0KG1pZC5jcDIsIC1jaGVzdERpc3BsYXkgKiAwLCAtY2hlc3REaXNwbGF5KTtcclxuICAgICAgICB0b3AuY3AyID0gYWRqdXN0KG1pZC5jcDEsIC1jaGVzdERpc3BsYXkgKiA2LCAtY2hlc3REaXNwbGF5ICogMik7XHJcbiAgICAgICAgcmV0dXJuIFt0b3AsIG1pZCwgYm90LCBpbkJvdCwgaW5Cb3QsIHRvcF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgSmFja2V0QmFzZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl0sXHJcbiAgICAgICAgICAgIGJlbG93UGFydHMgIDogW1wiaGVhZFwiXSxcclxuICAgICAgICAgICAgc2hhZGluZ1BhcnRzOiBbSmFja2V0QmFzZVNoYWRpbmddLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgY29uc3Qge2NvbGxhcmJvbmUsIHRvcCwgbWlkLCBib3QsIG91dEJvdCwgb3V0TWlkLCBicmVhc3RCb3QsIGJyZWFzdFRpcCwgb3V0VG9wfSA9IGNhbGNKYWNrZXQuY2FsbChcclxuICAgICAgICAgICAgdGhpcyxcclxuICAgICAgICAgICAgZXgpO1xyXG5cclxuXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBiYXNlXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBjb2xsYXJib25lLFxyXG4gICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgIG1pZCxcclxuICAgICAgICAgICAgYm90LFxyXG4gICAgICAgICAgICBvdXRCb3QsXHJcbiAgICAgICAgICAgIG91dE1pZCxcclxuICAgICAgICAgICAgYnJlYXN0Qm90LFxyXG4gICAgICAgICAgICBicmVhc3RUaXAsXHJcbiAgICAgICAgICAgIG91dFRvcFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG5cclxuICAgICAgICAvLyBsaW5pbmdcclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLmxpbmluZ1BhdHRlcm4sXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IG5vbmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmluZ1dpZHRoO1xyXG4gICAgICAgIGN0eC5jbGlwKCk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICB0b3AsIG1pZCwgYm90LCBvdXRCb3RcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgdGhlIGRyYXdwb2ludHMgZm9yIGEgamFja2V0XHJcbiAqIEB0aGlzIHtzdG9tYWNoQ292ZXJhZ2U6IE51bWJlciwgY2hlc3RDb3ZlcmFnZTogTnVtYmVyfVxyXG4gKiBAcGFyYW0gZXhcclxuICogQHJldHVybnMge3tjb2xsYXJib25lOiAoe3gsIHl9fCopLCB0b3AsIG1pZDogKiwgYm90OiB7eDogbnVtYmVyLCB5fSwgb3V0Qm90OiBPYmplY3QsIG91dE1pZDogKiwgYnJlYXN0Qm90OiAqLCBicmVhc3RUaXA6ICosIG91dFRvcDogKn19XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FsY0phY2tldChleCkge1xyXG4gICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjIsIGV4LnRyYXBleml1cywgZXguY29sbGFyYm9uZSk7XHJcbiAgICBjb25zdCB0b3AgPSBzcC5sZWZ0LnAyO1xyXG4gICAgY29uc3QgY29sbGFyYm9uZSA9IGV4dHJhY3RQb2ludChleC5jb2xsYXJib25lKTtcclxuICAgIGxldCBtaWQsIG91dE1pZDtcclxuXHJcbiAgICBjb25zdCBjaGVzdERpc3BsYXkgPSAxIC0gdGhpcy5jaGVzdENvdmVyYWdlO1xyXG5cclxuICAgIHNwID0gc3BsaXRDdXJ2ZSh0aGlzLnN0b21hY2hDb3ZlcmFnZSwgZXgud2Fpc3QsIGV4LmhpcCk7XHJcbiAgICBjb25zdCBib3QgPSB7XHJcbiAgICAgICAgeDogc3AubGVmdC5wMi54ICogKDAuMiArIGNsYW1wKGNoZXN0RGlzcGxheSwgMCwgMC44KSksXHJcbiAgICAgICAgeTogc3AubGVmdC5wMi55XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb3V0Qm90ID0gYWRqdXN0KHNwLmxlZnQucDIsIDEsIC0xKTtcclxuXHJcbiAgICAvLyBhY2NvbW1vZGF0ZSBicmVhc3RzXHJcbiAgICBsZXQgb3V0VG9wLCBicmVhc3RUaXAsIGJyZWFzdEJvdDtcclxuICAgIGNvbnN0IGJyZWFzdCA9IGV4LmJyZWFzdDtcclxuXHJcbiAgICBpZiAoYnJlYXN0KSB7XHJcbiAgICAgICAgbWlkID0ge1xyXG4gICAgICAgICAgICB4OiBleC53YWlzdC54ICogY2xhbXAoY2hlc3REaXNwbGF5ICogMC44LCAwLCAxKSxcclxuICAgICAgICAgICAgeTogYm90LnkgKiAwLjUgKyBicmVhc3QuYm90LnkgKiAwLjVcclxuICAgICAgICB9O1xyXG4gICAgICAgIG1pZC5jcDEgPSB7XHJcbiAgICAgICAgICAgIHg6IGJyZWFzdC5jZW50ZXIueCAqIGNsYW1wKDAuNiAtIHRoaXMuY2hlc3RDb3ZlcmFnZSAqIDAuNywgMCwgMSkgLVxyXG4gICAgICAgICAgICAgICBjaGVzdERpc3BsYXkgKiAyLFxyXG4gICAgICAgICAgICB5OiBicmVhc3QudG9wLnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIG1pZC5jcDIgPSB7XHJcbiAgICAgICAgICAgIHg6IGJyZWFzdC50aXAueCAqIGNsYW1wKDEuMiAtIHRoaXMuY2hlc3RDb3ZlcmFnZSAqIDAuODUsIDAsIDEpLFxyXG4gICAgICAgICAgICB5OiBicmVhc3QudGlwLnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGJvdC5jcDEgPSBjb250aW51ZUN1cnZlKHRvcCwgbWlkLCBjbGFtcCgwLjIgKyBjaGVzdERpc3BsYXkgKiAwLjUsIDAsIDEpKTtcclxuXHJcbiAgICAgICAgLy8gb3V0VG9wID0gYWRqdXN0KGV4dHJhY3RQb2ludChicmVhc3QudG9wKSwgMS41LCAyKTtcclxuICAgICAgICBvdXRUb3AgPSBleHRyYWN0UG9pbnQoYnJlYXN0LnRvcCk7XHJcblxyXG4gICAgICAgIGJyZWFzdFRpcCA9IGFkanVzdChleHRyYWN0UG9pbnQoYnJlYXN0LnRpcCksIDAuMywgMCk7XHJcbiAgICAgICAgY29uc3QgYnJlYXN0UHJvbWluYW5jZSA9IGJyZWFzdC50aXAueCAtIGV4LndhaXN0Lng7XHJcbiAgICAgICAgc3AgPSBzcGxpdEN1cnZlKGNsYW1wKGJyZWFzdFByb21pbmFuY2UgKiAwLjA2IC0gMC4yLCAwLCB0aGlzLnN0b21hY2hDb3ZlcmFnZSksXHJcbiAgICAgICAgICAgIGV4LndhaXN0LFxyXG4gICAgICAgICAgICBvdXRCb3RcclxuICAgICAgICApO1xyXG4gICAgICAgIG91dE1pZCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgLy8gd2hlcmUgb3V0TWlkIHdvdWxkIGJlIGlmIGNsaW5nID0gMVxyXG4gICAgICAgIGNvbnN0IG91dE1pZFRpZ2h0ID0gb3V0TWlkO1xyXG4gICAgICAgIG91dE1pZFRpZ2h0LnggKz0gMC4xO1xyXG4gICAgICAgIG91dE1pZC5jcDEgPSBzcC5yaWdodC5wMi5jcDI7XHJcbiAgICAgICAgb3V0TWlkLmNwMiA9IHNwLnJpZ2h0LnAyLmNwMTtcclxuICAgICAgICBvdXRNaWQgPSBhZGp1c3Qob3V0TWlkLCAxLCAwKTtcclxuICAgICAgICBpZiAoYnJlYXN0UHJvbWluYW5jZSA+IDIpIHtcclxuICAgICAgICAgICAgLy8gb3V0TWlkID0gbnVsbDtcclxuICAgICAgICAgICAgc3AgPSBzcGxpdEN1cnZlKGNsYW1wKGJyZWFzdFByb21pbmFuY2UgKiAwLjA2NSwgMCwgMSksXHJcbiAgICAgICAgICAgICAgICBicmVhc3QudGlwLFxyXG4gICAgICAgICAgICAgICAgYnJlYXN0LmJvdFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBicmVhc3RCb3QgPVxyXG4gICAgICAgICAgICAgICAgYWRqdXN0KHNwLmxlZnQucDIsXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYXN0UHJvbWluYW5jZSAqIDAuMDUsXHJcbiAgICAgICAgICAgICAgICAgICAgLWJyZWFzdFByb21pbmFuY2UgKiAwLjA1IC0gMSk7XHJcbiAgICAgICAgICAgIGJyZWFzdEJvdC5jcDEgPSBjb250aW51ZUN1cnZlKG91dEJvdCwgb3V0TWlkLCAxKTtcclxuICAgICAgICAgICAgYnJlYXN0VGlwLmNwMSA9IHNwLmxlZnQucDIuY3AyO1xyXG4gICAgICAgICAgICBicmVhc3RUaXAuY3AyID0gc3AubGVmdC5wMi5jcDE7XHJcbiAgICAgICAgICAgIGJyZWFzdFRpcC5jcDIueSAtPSBjbGFtcCgzIC0gYnJlYXN0UHJvbWluYW5jZSAqIDAuMiwgMCwgNSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnJlYXN0Qm90ID0gZXh0cmFjdFBvaW50KGJyZWFzdC5ib3QpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3V0VG9wLmNwMSA9IGJyZWFzdC50aXAuY3AyO1xyXG4gICAgICAgIG91dFRvcC5jcDIgPSBicmVhc3QudGlwLmNwMTtcclxuXHJcbiAgICAgICAgLy8gYWRqdXN0IGJhc2VkIG9uIGhvdyBtdWNoIHRoZSBjbG90aGVzIGNsaW5ncyB0byBib2R5XHJcbiAgICAgICAgLy8gY2xpbmcgPSAwIC0+IHNtb290aCBmbG93IG92ZXIgYnJlYXN0c1xyXG4gICAgICAgIC8vIGNsaW5nID0gMSAtPiB0aWdodCBhZ2FpbnN0IGJvZHlcclxuICAgICAgICBvdXRNaWQgPSBhZGp1c3Qob3V0TWlkLCAob3V0TWlkVGlnaHQueCAtIG91dE1pZC54KSAqIHRoaXMuY2xpbmcsIDApO1xyXG4gICAgICAgIGxldCBzdGFydFBvaW50LCBlbmRQb2ludDtcclxuICAgICAgICAvLyBkZXBlbmRpbmcgb24gaG93IGhpZ2ggd2UgYXJlLCB3ZSBtdXN0IHByb2plY3Qgb250byBkaWZmZXJlbnQgY3VydmVzXHJcbiAgICAgICAgaWYgKGJyZWFzdEJvdC55ID4gZXgud2Fpc3QueSkge1xyXG4gICAgICAgICAgICBzdGFydFBvaW50ID0gZXgubGF0O1xyXG4gICAgICAgICAgICBlbmRQb2ludCA9IGV4LndhaXN0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0UG9pbnQgPSBleC53YWlzdDtcclxuICAgICAgICAgICAgZW5kUG9pbnQgPSBleC5oaXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJyZWFzdEJvdFRpZ2h0ID0gaW50ZXJwb2xhdGVDdXJ2ZShzdGFydFBvaW50LFxyXG4gICAgICAgICAgICBlbmRQb2ludCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgeDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHk6IGJyZWFzdEJvdC55XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZShicmVhc3RCb3RUaWdodC50LCBzdGFydFBvaW50LCBlbmRQb2ludCk7XHJcbiAgICAgICAgLy8gcmV2ZXJzZSBkaXJlY3Rpb25cclxuICAgICAgICBicmVhc3RCb3RUaWdodC5jcDEgPSBzcC5yaWdodC5wMi5jcDI7XHJcbiAgICAgICAgYnJlYXN0Qm90VGlnaHQuY3AyID0gc3AucmlnaHQucDIuY3AxO1xyXG4gICAgICAgIGJyZWFzdEJvdCA9XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybUN1cnZlKG91dE1pZFRpZ2h0LCBicmVhc3RCb3QsIG91dE1pZFRpZ2h0LCBicmVhc3RCb3RUaWdodCwgdGhpcy5jbGluZyk7XHJcblxyXG4gICAgICAgIGlmIChicmVhc3RUaXAueSA+IGV4LndhaXN0LnkpIHtcclxuICAgICAgICAgICAgc3RhcnRQb2ludCA9IGV4LmxhdDtcclxuICAgICAgICAgICAgZW5kUG9pbnQgPSBleC53YWlzdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydFBvaW50ID0gZXgud2Fpc3Q7XHJcbiAgICAgICAgICAgIGVuZFBvaW50ID0gZXguaGlwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBicmVhc3RUaXBUaWdodCA9IGludGVycG9sYXRlQ3VydmUoc3RhcnRQb2ludCxcclxuICAgICAgICAgICAgZW5kUG9pbnQsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHg6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB5OiBicmVhc3RUaXAueVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgdGlwQWRqdXN0ID0gKGJyZWFzdFRpcFRpZ2h0LnggLSBicmVhc3RUaXAueCkgKiB0aGlzLmNsaW5nO1xyXG4gICAgICAgIGJyZWFzdFRpcCA9IGFkanVzdChicmVhc3RUaXAsIHRpcEFkanVzdCwgMCk7XHJcbiAgICAgICAgb3V0VG9wLmNwMSArPSB0aXBBZGp1c3Q7XHJcbiAgICAgICAgb3V0VG9wLmNwMiArPSB0aXBBZGp1c3Q7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG1pZCA9IHtcclxuICAgICAgICAgICAgeDogZXgud2Fpc3QueCAqIDAuNSxcclxuICAgICAgICAgICAgeTogZXgud2Fpc3QueVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbWlkLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyh0b3AsIG1pZCwgMC41LCAzKTtcclxuICAgICAgICBib3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKG1pZCwgYm90LCAwLjUsIC01KTtcclxuXHJcbiAgICAgICAgb3V0TWlkID0gZXh0cmFjdFBvaW50KGV4LndhaXN0KTtcclxuICAgICAgICBvdXRNaWQuY3AxID0gZXguaGlwLmNwMjtcclxuICAgICAgICBvdXRNaWQuY3AyID0gZXguaGlwLmNwMTtcclxuICAgICAgICBvdXRNaWQgPSBhZGp1c3Qob3V0TWlkLCBvdXRNaWQueCAqIDAuMDUsIDApO1xyXG5cclxuICAgICAgICBvdXRUb3AgPSBleHRyYWN0UG9pbnQoZXguYXJtcGl0KTtcclxuICAgIH1cclxuICAgIG91dEJvdC5jcDEgPSBudWxsO1xyXG4gICAgb3V0Qm90LmNwMiA9IG51bGw7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNvbGxhcmJvbmUsXHJcbiAgICAgICAgdG9wLFxyXG4gICAgICAgIG1pZCxcclxuICAgICAgICBib3QsXHJcbiAgICAgICAgb3V0Qm90LFxyXG4gICAgICAgIG91dE1pZCxcclxuICAgICAgICBicmVhc3RCb3QsXHJcbiAgICAgICAgYnJlYXN0VGlwLFxyXG4gICAgICAgIG91dFRvcFxyXG4gICAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIExvbmcgc2xlZXZlIG1lYW5zIGJldHdlZW4gZWxib3cgYW5kIHdyaXN0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVkaXVtTG9vc2VTbGVldmVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgY29sbGFyYm9uZSA9IGV4dHJhY3RQb2ludChleC5jb2xsYXJib25lKTtcclxuICAgICAgICBjb2xsYXJib25lLnggLT0gMC4zO1xyXG5cclxuICAgICAgICBsZXQgc2hvdWxkZXI7XHJcbiAgICAgICAgaWYgKGV4LmRlbHRvaWRzKSB7XHJcbiAgICAgICAgICAgIHNob3VsZGVyID0gYWRqdXN0KGV4LmRlbHRvaWRzLCAxLCAwKTtcclxuICAgICAgICAgICAgc2hvdWxkZXIueCArPSAyO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNob3VsZGVyID0gYWRqdXN0KGV4LnNob3VsZGVyLCAxLCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2hvdWxkZXIueCArPSAxO1xyXG5cclxuICAgICAgICBjb25zdCBib3QgPSB7XHJcbiAgICAgICAgICAgIHg6IGV4LmFybXBpdC54ICogMC41ICsgZXguZWxib3cuaW4ueCAqIDAuNSxcclxuICAgICAgICAgICAgeTogZXguZWxib3cuaW4ueVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgb3V0Qm90ID0ge1xyXG4gICAgICAgICAgICB4OiBleC5lbGJvdy5vdXQueCArIDQsXHJcbiAgICAgICAgICAgIHk6IGJvdC55ICsgMlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgYm90LmNwMSA9IHtcclxuICAgICAgICAgICAgeDogb3V0Qm90LnggKiAwLjcgKyBib3QueCAqIDAuMyxcclxuICAgICAgICAgICAgeTogb3V0Qm90LnlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGJvdC5jcDIgPSB7XHJcbiAgICAgICAgICAgIHg6IG91dEJvdC54ICogMC4zICsgYm90LnggKiAwLjcsXHJcbiAgICAgICAgICAgIHk6IGJvdC55IC0gMVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHtvdXRUb3B9ID0gY2FsY0phY2tldC5jYWxsKFxyXG4gICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICBleCk7XHJcbiAgICAgICAgb3V0VG9wLnggLT0gMC4zO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIHRvcCBzdHJhcFxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgY29sbGFyYm9uZSxcclxuICAgICAgICAgICAgc2hvdWxkZXIsXHJcbiAgICAgICAgICAgIG91dEJvdCxcclxuICAgICAgICAgICAgYm90LFxyXG4gICAgICAgICAgICBvdXRUb3BcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLmxpbmluZ1BhdHRlcm4sXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IG5vbmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmluZ1dpZHRoO1xyXG4gICAgICAgIGN0eC5jbGlwKCk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICBvdXRCb3QsXHJcbiAgICAgICAgICAgIGJvdFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBKYWNrZXQgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyICA6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSG93IG11Y2ggb2YgdGhlIHN0b21hY2ggc2hvdWxkIGJlIGNvdmVyZWQgKDEgbWVhbnMgZnVsbHkpXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBzdG9tYWNoQ292ZXJhZ2U6IDAuOCxcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEhvdyBtdWNoIG9mIHRoZSBjaGVzdCBzaG91bGQgYmUgY292ZXJlZCAoaG9yaXpvbnRhbGx5KVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgY2hlc3RDb3ZlcmFnZSAgOiAwLjUsXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBIb3cgZmFyIHRvIGV4dGVuZCB0aGUgc2xlZXZlIChiZXR3ZWVuIDAgYW5kIDEpXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBzbGVldmVMZW5ndGggICA6IDAuOCxcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEhvdyB3aWRlIHRoZSBwYXR0ZXJuZWQgbGluaW5nIGlzXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBsaW5pbmdXaWR0aCAgICA6IDEsXHJcbiAgICAgICAgICAgIGxpbmluZ1BhdHRlcm4gIDogXCIjMDAwXCIsXHJcbiAgICAgICAgICAgIHRoaWNrbmVzcyAgICAgIDogMC44LFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSG93IHRpZ2h0bHkgaXQgY2xpbmdzIHRvIHRoZSBib2R5XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBjbGluZyAgICAgICAgICA6IDAuNCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMb29zZUphY2tldCBleHRlbmRzIEphY2tldCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdG9tYWNoQ292ZXJhZ2U6IDAuNyxcclxuICAgICAgICAgICAgc2xlZXZlTGVuZ3RoICAgOiAxLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgwLDEwJSwyMCUpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBKYWNrZXRCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBNZWRpdW1Mb29zZVNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IE1lZGl1bUxvb3NlU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbi8vaW1wb3J0IHtjb25uZWN0RW5kUG9pbnRzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7Y292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG5cdGJyZWFrUG9pbnQsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcblx0ZHJhd1BvaW50cywgXHJcblx0c3BsaXRDdXJ2ZSxcclxuXHRzaW1wbGVRdWFkcmF0aWMsXHJcblx0Y2xvbmUsXHJcblx0YWRqdXN0LFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuXHJcbmltcG9ydCB7XHJcblx0Z2V0TGltYlBvaW50c0JlbGxvd1BvaW50LFxyXG5cdC8vZ2V0TGltYlBvaW50cyxcclxuXHQvL2ZpbmRCZXR3ZWVuLFxyXG5cdGdldExhY2luZ1BvaW50cyxcclxufSBmcm9tIFwiLi4vdXRpbC9hdXhpbGlhcnlcIjtcclxuXHJcbmltcG9ydCB7VG9wfSBmcm9tIFwiLi90b3BzXCI7XHJcbmltcG9ydCB7Y2FsY0JyYX0gZnJvbSBcIi4vdW5kZXJ3ZWFyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29yc2V0QnJlYXN0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcblx0Y29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0cmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRpZiAoY292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzKGV4LCBjdHgsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblx0XHRcclxuXHRcdGNvbnN0IGJyYSA9IGNhbGNCcmEoZXgpO1xyXG4gICAgICBcclxuXHRcdGJyYS5vdXQuY3AxID0gc2ltcGxlUXVhZHJhdGljKGJyYS50b3AsIGJyYS5vdXQsIDAuNCwgMSk7XHJcblx0XHRicmEudG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhleC5icmVhc3QuY2xlYXZhZ2UsIGJyYS50b3AsIDAuNiwgMik7XHJcblxyXG5cclxuLy9UT0RPIC0gRlJPTSBEUkVTU1xyXG4vL2JyYS50b3AgPSBhZGp1c3QoZXguYnJlYXN0LnRvcCwgMC41LCAwLjcpO1xyXG4vL2JyYS50aXAgPSBhZGp1c3QoZXguYnJlYXN0LnRpcCwgMC4xLCAwKTtcclxuYnJhLmJvdCA9IGFkanVzdChleC5icmVhc3QuYm90LCAwLCAtMC42KTtcclxuYnJhLmlubmVyID0gYWRqdXN0KGV4LmJyZWFzdC5pbiwgLTAuOSwgLTAuNSk7XHJcbmJyYS5jbGVhdmFnZSA9IGFkanVzdChleC5icmVhc3QuY2xlYXZhZ2UsIC0wLjYsIDApO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRicmEudG9wLFxyXG5cdFx0XHRicmEub3V0LFxyXG5cdFx0XHRicmEudGlwLFxyXG5cdFx0XHRicmEuYm90LC8vZXguYnJlYXN0LmJvdCxcclxuXHRcdFx0YnJhLmlubmVyLC8vZXguYnJlYXN0LmluLFxyXG5cdFx0XHRicmEuY2xlYXZhZ2UsLy9leC5icmVhc3QuY2xlYXZhZ2UsXHJcblx0XHRcdGJyYS50b3BcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0LypcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRleC5icmVhc3QuY2xlYXZhZ2UsXHJcblx0XHRcdGJyYS50b3AsXHJcblx0XHRcdGJyYS5vdXQsXHJcblx0XHRcdGJyYS50aXAsXHJcblx0XHRcdGV4LmJyZWFzdC5ib3RcclxuXHRcdCk7XHJcblx0XHQqL1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHJcblx0fVx0XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY0NvcnNldChleCl7XHJcblx0bGV0IHRvcEluO1xyXG5cdGxldCB0b3BPdXQ7XHJcblx0bGV0IG1pZDtcclxuXHRsZXQgYm90T3V0O1xyXG5cdGxldCBib3RJblxyXG5cdGxldCB3YWlzdCA9IGV4LndhaXN0O1xyXG5cdFxyXG5cdGlmKCFleC5icmVhc3Qpe1xyXG5cdFx0dG9wT3V0ID0gY2xvbmUoZXguYXJtcGl0KTtcclxuXHRcdHRvcEluID0ge1xyXG5cdFx0XHR4Oi0wLjIsXHJcblx0XHRcdHk6dG9wT3V0LnktNFxyXG5cdFx0fTtcclxuXHRcdHRvcE91dC5jcDEgPSB7XHJcblx0XHRcdHg6IHRvcE91dC54ICogMC41ICsgdG9wT3V0LnggKiAwLjUsXHJcblx0XHRcdHk6IHRvcEluLnlcclxuXHRcdH07XHJcblx0fWVsc2V7XHJcblx0XHRsZXQgdGVtcCA9IGdldExpbWJQb2ludHNCZWxsb3dQb2ludChleC5icmVhc3QuY2xlYXZhZ2UsZmFsc2UsZXguYXJtcGl0LGV4LndhaXN0KTtcclxuXHRcdHRvcE91dCA9IHRlbXBbMF07XHJcblx0XHR0b3BJbiA9IHtcclxuXHRcdFx0eDotMC4xLFxyXG5cdFx0XHR5OmV4LmJyZWFzdC5jbGVhdmFnZS55XHJcblx0XHR9O1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRpZih0aGlzLndhaXN0Q292ZXJhZ2UgPj0gMCl7XHJcblx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUoMSAtIHRoaXMud2Fpc3RDb3ZlcmFnZSwgZXgud2Fpc3QsIGV4LmhpcCk7XHJcblx0XHRib3RPdXQgPSB0ZW1wLmxlZnQucDI7XHJcblx0fWVsc2V7XHJcblx0XHRtaWQgPSBleC5oaXA7XHJcblx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUoIE1hdGguYWJzKHRoaXMud2Fpc3RDb3ZlcmFnZSksIGV4LmhpcCwgZXgudGhpZ2gub3V0KTtcclxuXHRcdGJvdE91dCA9IHRlbXAubGVmdC5wMjtcclxuXHR9O1xyXG5cdFxyXG5cdGJvdEluID0ge1xyXG5cdFx0eDotMC4yLFxyXG5cdFx0eTpib3RPdXQueS03XHJcblx0fTtcclxuXHRcdGJvdEluLmNwMiA9IHtcclxuXHRcdFx0eDogYm90SW4ueCAqIDAuNSArIGJvdE91dC54ICogMC41LFxyXG5cdFx0XHR5OiBib3RJbi55XHJcblx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdGJvdEluLmNwMSA9IHtcclxuXHRcdFx0eDogYm90SW4uY3AyLngrMTIsXHJcblx0XHRcdHk6IGJvdEluLmNwMi55KzksXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRcclxuXHRyZXR1cm57XHJcblx0XHR0b3BJbixcclxuXHRcdHRvcE91dCxcclxuXHRcdHdhaXN0LFxyXG5cdFx0bWlkLFxyXG5cdFx0Ym90T3V0LFxyXG5cdFx0Ym90SW5cclxuXHR9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29yc2V0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHNcdFx0XHQ6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLCBcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge3RvcEluLHRvcE91dCx3YWlzdCxtaWQsYm90T3V0LGJvdElufSA9IGNhbGNDb3JzZXQuY2FsbCh0aGlzLCBleCk7XHJcblxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHRcclxuXHRcdFx0dG9wSW4sXHJcblx0XHRcdHRvcE91dCxcclxuXHRcdFx0d2Fpc3QsXHJcblx0XHRcdG1pZCxcclxuXHRcdFx0Ym90T3V0LFxyXG5cdFx0XHQvL2V4dHJhY3RQb2ludChib3QpLFxyXG5cdFx0XHRib3RJbixcclxuXHRcdFx0Ly90b3BNaWRcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1x0XHJcblx0XHQvKlxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHR0b3BNaWQsXHJcblx0XHRcdHRvcCxcclxuXHRcdFx0ZXgud2Fpc3QsXHJcblx0XHRcdGJvdCxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KGJvdCksXHJcblx0XHRcdGJvdE1pZCBcclxuXHRcdCk7XHJcblx0XHQqL1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vTEFDSU5HXHJcblx0XHRpZih0aGlzLmxhY2luZyAmJiB0aGlzLmtub3RzID4gMCl7XHJcblx0XHRcdGxldCBpblRvcCA9IGFkanVzdCh0b3BJbiwtMywtMSk7XHJcblx0XHRcdGxldCBpbkJvdCA9IGFkanVzdChib3RJbiwtMywxKTtcclxuXHRcdFx0bGV0IG91dFRvcCA9IGFkanVzdCh0b3BJbiwzLC0xKTtcclxuXHRcdFx0bGV0IG91dEJvdCA9IGFkanVzdChib3RJbiwzLDEpO1xyXG5cdFx0XHRsZXQgbGFjaW5nID0gZ2V0TGFjaW5nUG9pbnRzKGluQm90LGluVG9wLG91dEJvdCxvdXRUb3AsdGhpcy5rbm90cyk7XHJcblxyXG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDsgXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIC4uLmxhY2luZy5pbm5lciwgYnJlYWtQb2ludCwuLi5sYWNpbmcub3V0ZXIpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHRcclxuXHRcdH1cclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSGFsZkNvcnNldFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzXHRcdFx0OiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJwYXJ0cyBsZWdcIl0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcclxuXHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSgxLXRoaXMudG9wQ292ZXJhZ2UsZXguYXJtcGl0LGV4LndhaXN0KTtcclxuXHRcdGxldCB0b3BPdXQgPSAgZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7IFxyXG5cdFx0XHQvL3RlbXAgPSBzcGxpdEN1cnZlKHRoaXMud2Fpc3RDb3ZlcmFnZSxleC53YWlzdCxleC5oaXApO1xyXG5cdFx0XHRcclxuXHRcdGxldCB3YWlzdCA9IHRlbXAucmlnaHQucDE7XHJcblx0XHRcclxuXHRcdGxldCBoaXAgPSB0aGlzLndhaXN0Q292ZXJhZ2UgPCAwID8gZXguaGlwIDogdm9pZCAwO1xyXG5cclxuXHJcblx0XHRcdHRlbXAgPSB0aGlzLndhaXN0Q292ZXJhZ2UgPCAwID8gc3BsaXRDdXJ2ZSggTWF0aC5hYnModGhpcy53YWlzdENvdmVyYWdlKSwgZXguaGlwLCBleC50aGlnaC5vdXQpIDogc3BsaXRDdXJ2ZSgxIC0gdGhpcy53YWlzdENvdmVyYWdlLCBleC53YWlzdCwgZXguaGlwKTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdGxldCBib3RPdXQgPSAgdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRcclxuXHRcdGxldCBib3RJbiA9IHtcclxuXHRcdFx0eDotMC4yLFxyXG5cdFx0XHR5OmJvdE91dC55LTdcclxuXHRcdH07XHJcblx0XHRcdGJvdEluLmNwMiA9IHtcclxuXHRcdFx0XHR4OiBib3RJbi54ICogMC41ICsgYm90T3V0LnggKiAwLjUsXHJcblx0XHRcdFx0eTogYm90SW4ueVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRib3RJbi5jcDEgPSB7XHJcblx0XHRcdFx0eDogYm90SW4uY3AyLngrMTIsXHJcblx0XHRcdFx0eTogYm90SW4uY3AyLnkrOSxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRsZXQgdG9wSW4gPSB7XHJcblx0XHRcdFx0eDotMC4yLFxyXG5cdFx0XHRcdHk6dG9wT3V0LnktNVxyXG5cdFx0XHR9O1xyXG5cdFx0XHR0b3BPdXQuY3AxID0ge1xyXG5cdFx0XHRcdHg6IHRvcE91dC54ICogMC41ICsgdG9wSW4ueCAqIDAuNSxcclxuXHRcdFx0XHR5OiB0b3BJbi55XHJcblx0XHRcdH07XHRcdFx0XHJcblx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCxcdFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0dG9wT3V0LFxyXG5cdFx0XHR3YWlzdCxcclxuXHRcdFx0aGlwLFxyXG5cdFx0XHRib3RPdXQsXHJcblx0XHRcdGJvdEluLCBcclxuXHRcdFx0Ly90b3BJblxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHRcclxuXHRcdC8qXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdGV4LndhaXN0LFxyXG5cdFx0XHRoaXAsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90SW4gXHJcblx0XHQpO1xyXG5cdFx0Ki9cclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Ly9sYWNpbmdcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5sYWNpbmcgJiYgdGhpcy5rbm90cyA+IDApe1xyXG5cdFx0XHRsZXQgaW5Ub3AgPSBhZGp1c3QodG9wSW4sLTMsLTEpO1xyXG5cdFx0XHRsZXQgaW5Cb3QgPSBhZGp1c3QoYm90SW4sLTMsMSk7XHJcblx0XHRcdGxldCBvdXRUb3AgPSBhZGp1c3QodG9wSW4sMywtMSk7XHJcblx0XHRcdGxldCBvdXRCb3QgPSBhZGp1c3QoYm90SW4sMywxKTtcclxuXHRcdFx0bGV0IGxhY2luZyA9IGdldExhY2luZ1BvaW50cyhpbkJvdCxpblRvcCxvdXRCb3Qsb3V0VG9wLHRoaXMua25vdHMpO1xyXG5cclxuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7IFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCAuLi5sYWNpbmcuaW5uZXIsIGJyZWFrUG9pbnQsIC4uLmxhY2luZy5vdXRlcik7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcdFxyXG5cdFx0fVxyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qICovXHJcblxyXG5leHBvcnQgY2xhc3MgQ29yc2V0IGV4dGVuZHMgVG9wIHsgLy9kcmVzcz9cclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNsb3RoaW5nTGF5ZXIgIDogQ2xvdGhlcy5MYXllci5PVVRFUiwgLy9hc2FwISFcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4xLFxyXG5cdFx0XHR0aGlja25lc3M6IDEsXHJcblx0XHRcdGxhY2luZzp0cnVlLFxyXG5cdFx0XHRrbm90czogNixcclxuXHRcdFx0aGlnaGxpZ2h0OiBcImhzbGEoMCwgMCUsIDUyJSwgMSlcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDAsMTAlLDIwJSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0eyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENvcnNldEJyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSx7IFxyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ29yc2V0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHRcclxuXHJcbmV4cG9ydCBjbGFzcyBIYWxmQ29yc2V0IGV4dGVuZHMgVG9wIHsgLy9kcmVzcz9cclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNsb3RoaW5nTGF5ZXIgIDogQ2xvdGhlcy5MYXllci5PVVRFUiwgLy9hc2FwISFcclxuXHRcdFx0dG9wQ292ZXJhZ2U6IDAuNixcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4xLFxyXG5cdFx0XHR0aGlja25lc3M6IDEsXHJcblx0XHRcdGtub3RzOiA2LFxyXG5cdFx0XHRsYWNpbmc6dHJ1ZSxcclxuXHRcdFx0aGlnaGxpZ2h0OiBcImhzbGEoMCwgMCUsIDUyJSwgMSlcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDAsMTAlLDIwJSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFt7IFxyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGFsZkNvcnNldFBhcnRcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgYWRqdXN0LFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG5cdHNwbGl0Q3VydmUsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5pbXBvcnQge0xvY2F0aW9uLCBzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRwZXJwZW5kaWN1bGFyUG9pbnQsXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRodW1iUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIitoYW5kXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFx0XHJcblx0XHRsZXQgdGlwID0gZXgudGh1bWIudGlwO1xyXG5cdFx0bGV0IG91dCA9IGV4LnRodW1iLm91dDtcclxuXHRcdGxldCB0ZW1wO1xyXG5cdFx0XHRcdFxyXG5cdFx0dGVtcCA9IGRhLnNwbGl0Q3VydmUoLTAuMDgsdGlwLG91dCk7XHJcblx0XHRsZXQgYm90dG9tID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdFx0XHRcclxuXHRcdHRlbXAgPSBkYS5zcGxpdEN1cnZlKDAuMTUsdGlwLG91dCk7XHJcblx0XHRsZXQgdG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdFx0XHJcblx0XHR0b3AueCArPSAwLjI7XHJcblx0XHRcdFx0XHJcblx0XHRib3R0b20uY3AxID0gcGVycGVuZGljdWxhclBvaW50KHRvcCxib3R0b20sMC43LDAuOCk7XHJcblx0XHR0b3AuY3AxID0gcGVycGVuZGljdWxhclBvaW50KHRvcCxib3R0b20sMC43LC0xLjApO1xyXG5cdFx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LHRvcCxib3R0b20sdG9wKTtcclxuXHRcdGN0eC5maWxsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRmluZ2VyUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIitoYW5kXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFx0XHJcblx0XHRsZXQgdGlwID0gZXguaGFuZC50aXA7XHJcblx0XHRsZXQgb3V0ID0gZXguaGFuZC5rbnVja2xlO1xyXG5cdFx0bGV0IHRlbXA7XHJcblx0XHRcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKC0wLjA4LHRpcCxvdXQpO1xyXG5cdFx0bGV0IGJvdHRvbSA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuMTUsdGlwLG91dCk7XHJcblx0XHRsZXQgdG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcclxuXHRcdHRvcC54IC09IDAuMjtcclxuXHRcdGJvdHRvbS54IC09IDAuNjtcclxuXHRcdFxyXG5cdFx0Ym90dG9tLmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludCh0b3AsYm90dG9tLDAuNywwLjgpO1xyXG5cdFx0dG9wLmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludCh0b3AsYm90dG9tLDAuNywtMS4wKTtcclxuXHRcdFxyXG5cclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LHRvcCxib3R0b20sdG9wKTtcclxuXHRcdGN0eC5maWxsKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQm9keU1ha2V1cCBleHRlbmRzIENsb3RoaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuQkFTRSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLCAwJSwgMjglLCAxKVwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTmFpbHMgZXh0ZW5kcyBCb2R5TWFrZXVwIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0Y2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5CQVNFLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcIiNiOTExMDBcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogRmluZ2VyUGFydCxcclxuXHRcdFx0fSx7XHJcblx0XHRcdFx0c2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogVGh1bWJQYXJ0LFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBGaW5nZXJQYXJ0LFxyXG5cdFx0XHR9LHtcclxuXHRcdFx0XHRzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogVGh1bWJQYXJ0LFxyXG4gICAgICAgICAgICB9IFx0XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBKb2huc29uIG9uIDIwMTctMDQtMDMuXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vQ29udGV4dDJEVHJhY2tlZCcpOyIsImltcG9ydCB7RGVjb3JhdGl2ZVBhcnR9IGZyb20gXCIuL2RlY29yYXRpdmVfcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtub25lLCBhZGp1c3RDb2xvcn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuY2xhc3MgRmFjaWFsSGFpciBleHRlbmRzIERlY29yYXRpdmVQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK2hlYWRcIixcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgaGVhZFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpcEZpbGwoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoaWdub3JlLCBleCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgICAgIHJldHVybiBhZGp1c3RDb2xvcihleC5oYWlyRmlsbCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbDogLTUsXHJcbiAgICAgICAgICAgICAgICBzOiAtNVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNdXN0YWNoZSBleHRlbmRzIEZhY2lhbEhhaXIge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwRmlsbCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbChpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmhhaXJGaWxsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtNSxcclxuICAgICAgICAgICAgICAgIHM6IC01XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7RGVjb3JhdGl2ZVBhcnR9IGZyb20gXCIuL2RlY29yYXRpdmVfcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtub25lLCBkcmF3Q3VybCwgYWRqdXN0fSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7TWF0ZXJpYWxzfSBmcm9tIFwiLi4vbWF0ZXJpYWxzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTGVnRnVyIGV4dGVuZHMgRGVjb3JhdGl2ZVBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKE1hdGVyaWFscy5icm93bkZ1ciwge1xyXG4gICAgICAgICAgICBmaWxsICAgICAgOiBub25lLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIitsZWdcIixcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXVxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGNEcmF3UG9pbnRzKGV4KSB7XHJcbiAgICAgICAgY29uc3QgcG9pbnRzID0gW107XHJcbiAgICAgICAgLy8gZnVyIG5lYXIgdGhlIFwiZmVldFwiXHJcbiAgICAgICAgcG9pbnRzLmV4dGVuZChkcmF3Q3VybChhZGp1c3QoZXguYW5rbGUuaW4sIC0xLjUsIDApLCA1LCAxMCwgMC4zLCAwLjcpKTtcclxuICAgICAgICBwb2ludHMuZXh0ZW5kKGRyYXdDdXJsKGFkanVzdChleC5hbmtsZS5pbmJvdCwgNCwgLTEpLCA2LCA4LCAwLjU1LCAwLCAwLjcpKTtcclxuICAgICAgICBwb2ludHMuZXh0ZW5kKGRyYXdDdXJsKGFkanVzdChleC5rbmVlLmluLCAtMS4zLCAxKSwgNCwgOSwgMC40LCAwLjYsIDAuNikpO1xyXG4gICAgICAgIHBvaW50cy5leHRlbmQoXHJcbiAgICAgICAgICAgIGRyYXdDdXJsKGFkanVzdChleC5jYWxmLm91dCwgMC43LCAtMSksIDUsIDEyLCAwLjcsIC0wLjUsIC0wLjM1KSk7XHJcbiAgICAgICAgcG9pbnRzLmV4dGVuZChcclxuICAgICAgICAgICAgZHJhd0N1cmwoYWRqdXN0KGV4LnRoaWdoLm91dCwgMC4yLCAtMyksIDYsIDEwLCAwLjcsIC0wLjUsIC0wLjM1KSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtEZWNvcmF0aXZlUGFydH0gZnJvbSBcIi4vZGVjb3JhdGl2ZV9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge25vbmUsIGRyYXdDaXJjbGUsIGJyZWFrUG9pbnQsIGV4dHJhY3RQb2ludH0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5pbXBvcnQge2FkanVzdENvbG9yfSBmcm9tIFwiLi4vdXRpbC91dGlsaXR5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmVhdXR5TWFyayBleHRlbmRzIERlY29yYXRpdmVQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIC8vIG9mZnNldCByZWxhdGl2ZSB0byBtb3V0aFxyXG4gICAgICAgICAgICBvZmZzZXRYICAgOiAtMTAsXHJcbiAgICAgICAgICAgIG9mZnNldFkgICA6IDEwLFxyXG4gICAgICAgICAgICByYWRpdXMgICAgOiAwLjMsXHJcbiAgICAgICAgICAgIC8vIGZvciBtdWx0aXBsZSBtb2xlcywgc2hvdWxkIHByZWZpeCB3aXRoIG51bWJlciBhcyBpbiBcIjEgaGVhZFwiXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiaGVhZFwiLFxyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBoZWFkXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwRmlsbCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZmlsbChpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmJhc2VTdHJva2UsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHM6IC0zMCxcclxuICAgICAgICAgICAgICAgIGw6IC0zMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxjRHJhd1BvaW50cyhleCwgaWdub3JlLCBjYWxjdWxhdGUsIHBhcnQpIHtcclxuICAgICAgICBjb25zdCBjZW50ZXIgPSBleHRyYWN0UG9pbnQoZXgubGlwcy5jZW50ZXIpO1xyXG4gICAgICAgIGNlbnRlci54ICs9IHBhcnQub2Zmc2V0WDtcclxuICAgICAgICBjZW50ZXIueSArPSBwYXJ0Lm9mZnNldFk7XHJcbiAgICAgICAgcmV0dXJuIFticmVha1BvaW50LCAuLi5kcmF3Q2lyY2xlKGNlbnRlciwgcGFydC5yYWRpdXMpXTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge0RlY29yYXRpdmVQYXJ0fSBmcm9tIFwiLi9kZWNvcmF0aXZlX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7XHJcblx0bm9uZSxcclxuXHRhZGp1c3QsXHJcblx0ZXh0cmFjdFBvaW50LFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5cclxuY2xhc3MgSG9ybnMgZXh0ZW5kcyBEZWNvcmF0aXZlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImhvcm5zXCIsXHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkVGRkVDVFMsXHJcblx0XHRcdHJlZmxlY3QgICAgOiB0cnVlLFxyXG5cdFx0Ly8gYWJvdmVQYXJ0czogW1wicGFydHMgaGVhZFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpcEZpbGwoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoaWdub3JlLCBleCkge1xyXG4gICAgICAgLy8gY29uc29sZS5sb2codGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmJhc2VGaWxsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtMzAsXHJcbiAgICAgICAgICAgICAgICBzOiAtMzBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbi8qXHRcclxuXHRmaWxsKCkge1xyXG5cdFx0cmV0dXJuIFwicmVkXCI7XHJcblx0fVxyXG4qL1x0XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3RyYWlnaHRIb3JucyBleHRlbmRzIEhvcm5zIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0Y2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmhvcm55bmVzcyA8IDAuMDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuLy9cdFx0aWYgKGNhbGN1bGF0ZSkgeyAgLy9ub3Qgc3VyZSB3aGF0IGNhbGN1bGF0ZSBtZWFucyBcclxuICAgICAgICAgICAgY29uc3QgaG9ybnMgPSBleC5ob3JucyA9IHt9O1xyXG4gICAgICAgICAgXHJcblx0XHRcdGNvbnN0IGNvbnRyb2wgPSB7IC8vdGhlIGNvbnRyb2wgcG9pbnRcclxuXHRcdFx0XHR4OiAoKChleC5za3VsbC5zaWRlLngtZXguc2t1bGwueCkvMikrZXguc2t1bGwueCkrMC40LFxyXG5cdFx0XHRcdHk6ICgoKGV4LnNrdWxsLnNpZGUueS1leC5za3VsbC55KS8yKStleC5za3VsbC55KSswLjRcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGhvcm5zLm91dCA9IHtcclxuXHRcdFx0XHR4OiBjb250cm9sLnggKyAoMi41KnRoaXMuaG9ybnluZXNzKjAuNCksXHJcblx0XHRcdFx0eTogY29udHJvbC55IC0gKDEuNSp0aGlzLmhvcm55bmVzcyowLjQpLFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0aG9ybnMuaW4gPSB7XHJcblx0XHRcdFx0eDogY29udHJvbC54IC0gKDIuNSp0aGlzLmhvcm55bmVzcyowLjQpLFxyXG5cdFx0XHRcdHk6IGNvbnRyb2wueSArICgyLjUqdGhpcy5ob3JueW5lc3MqMC40KSxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdC8qXHJcblx0XHRcdGhvcm5zLm91dCA9IHtcclxuXHRcdFx0XHR4OiBjb250cm9sLngrMSxcclxuXHRcdFx0XHR5OiBjb250cm9sLnktMC41XHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRob3Jucy5pbiA9IHtcclxuXHRcdFx0XHR4OiBjb250cm9sLngtMSxcclxuXHRcdFx0XHR5OiBjb250cm9sLnkrMVxyXG5cdFx0XHR9O1xyXG5cdFx0XHQqL1xyXG5cdFx0XHRcclxuLypcdFx0XHRcclxuXHRcdFx0Y29uc29sZS5sb2coXCJob3Juc1wiKTtcclxuXHRcdFx0Y29uc29sZS5sb2codGhpcy5ob3JueW5lc3MpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyh0aGlzLnVwcGVyTXVzY2xlKTtcclxuXHRcdFx0Y29uc29sZS5sb2codGhpcyk7XHJcbiovXHRcdFx0Ly92YXIgaG9ybnluZXNzPTE7XHJcblx0XHRcdGhvcm5zLnRvcCA9IHtcclxuXHRcdFx0XHR4OiBjb250cm9sLngrKDQuMip0aGlzLmhvcm55bmVzcyksXHJcblx0XHRcdFx0eTogY29udHJvbC55Kyg0LjIqdGhpcy5ob3JueW5lc3MqMilcclxuXHRcdFx0fTtcclxuLy8gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2V4Lmhvcm5zLmluLCBleC5ob3Jucy50b3AsIGV4Lmhvcm5zLm91dF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ3VydmVkSG9ybnMgZXh0ZW5kcyBIb3JucyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGNhbGNEcmF3UG9pbnRzKGV4LCBtb2RzLCBjYWxjdWxhdGUpIHtcclxuICAgICAgICBpZiAodGhpcy5ob3JueW5lc3MgPCAwLjAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbi8vXHRcdGlmIChjYWxjdWxhdGUpIHsgIC8vbm90IHN1cmUgd2hhdCBjYWxjdWxhdGUgbWVhbnMgXHJcbiAgICAgICAgICAgIGNvbnN0IGhvcm5zID0gZXguaG9ybnMgPSB7fTtcclxuICAgICAgICAgIFxyXG5cdFx0XHRjb25zdCBjb250cm9sID0geyAvL3RoZSBjb250cm9sIHBvaW50XHJcblx0XHRcdFx0eDogKCgoZXguc2t1bGwuc2lkZS54LWV4LnNrdWxsLngpLzIpK2V4LnNrdWxsLngpKzAuNCxcclxuXHRcdFx0XHR5OiAoKChleC5za3VsbC5zaWRlLnktZXguc2t1bGwueSkvMikrZXguc2t1bGwueSkrMC40XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRob3Jucy5vdXQgPSB7XHJcblx0XHRcdFx0eDogY29udHJvbC54KygyKnRoaXMuaG9ybnluZXNzKSwvLywxLFxyXG5cdFx0XHRcdHk6ICBjb250cm9sLnktKDEuNip0aGlzLmhvcm55bmVzcyksLy8xXHJcblx0XHRcdH07XHJcblx0XHRcdCBcclxuXHRcdFx0aG9ybnMuaW4gPSB7XHJcblx0XHRcdFx0eDogY29udHJvbC54LTEsXHJcblx0XHRcdFx0eTogY29udHJvbC55KzFcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGhvcm5zLnRvcCA9IHtcclxuXHRcdFx0XHR4OiAgY29udHJvbC54KzEwKnRoaXMuaG9ybnluZXNzLFxyXG5cdFx0XHRcdHk6IGNvbnRyb2wueSs5KnRoaXMuaG9ybnluZXNzLFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0aG9ybnMudG9wLmNwMSA9IHtcclxuXHRcdFx0XHR4OiAgY29udHJvbC54KzIqdGhpcy5ob3JueW5lc3MsXHJcblx0XHRcdFx0eTogY29udHJvbC55KzkqdGhpcy5ob3JueW5lc3NcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGhvcm5zLnRvcC5jcDIgPSB7XHJcblx0XHRcdFx0eDogIGNvbnRyb2wueCs4KnRoaXMuaG9ybnluZXNzLFxyXG5cdFx0XHRcdHk6IGNvbnRyb2wueSsyKnRoaXMuaG9ybnluZXNzXHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRob3Jucy5vdXQuY3AxID0ge1xyXG5cdFx0XHRcdHg6ICBjb250cm9sLngrMTEqdGhpcy5ob3JueW5lc3MsXHJcblx0XHRcdFx0eTogY29udHJvbC55KzAqdGhpcy5ob3JueW5lc3NcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGhvcm5zLm91dC5jcDIgPSB7XHJcblx0XHRcdFx0eDogY29udHJvbC54KygyKzIpKnRoaXMuaG9ybnluZXNzLFxyXG5cdFx0XHRcdHk6IGNvbnRyb2wueSsoOS0yKSp0aGlzLmhvcm55bmVzc1xyXG5cdFx0XHR9O1xyXG4vKlx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZyhcImhvcm5zXCIpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyh0aGlzLmhvcm55bmVzcyk7XHJcblx0XHRcdGNvbnNvbGUubG9nKHRoaXMudXBwZXJNdXNjbGUpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyh0aGlzKTtcclxuXHRcdFx0Ly92YXIgaG9ybnluZXNzPTE7XHJcblx0Ki9cdFx0XHJcbi8vICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtleC5ob3Jucy5pbiwgZXguaG9ybnMudG9wLCBleC5ob3Jucy5vdXQsIGV4Lmhvcm5zLmluXTtcclxuICAgIH1cclxuXHRcclxufVxyXG5cclxuLypcclxuZXhwb3J0IGNsYXNzIENhdEVhcnMgZXh0ZW5kcyBIb3JucyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoaWdub3JlLCBleCkge1xyXG4gICAgICAgIHJldHVybiBhZGp1c3RDb2xvcihleC5iYXNlTGlwQ29sb3IsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAvLyAgbDogLTMwLFxyXG4gICAgICAgICAgICAgICAvLyBzOiAtNTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblx0XHJcblx0XHJcblx0c3Ryb2tlKGlnbm9yZSwgZXgpIHtcclxuXHRcdHJldHVybiBhZGp1c3RDb2xvcihleC5oYWlyRmlsbCx7XHJcblx0XHRcdGw6IC0xMCxcclxuXHRcdFx0czogLTEwXHJcblx0XHR9KTtcclxuICAgIH1cclxuXHRcclxuXHRnZXRMaW5lV2lkdGgoYXZhdGFyKSB7XHJcbiAgICAgICAgcmV0dXJuIDIuNTtcclxuICAgIH1cclxuXHRcclxuXHRjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9ybnluZXNzIDwgMC4wMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4vL1x0XHRpZiAoY2FsY3VsYXRlKSB7ICAvL25vdCBzdXJlIHdoYXQgY2FsY3VsYXRlIG1lYW5zIFxyXG4gICAgICAgICAgICBjb25zdCBob3JucyA9IGV4Lmhvcm5zID0ge307XHJcbiAgICAgICAgICBcclxuXHRcdFx0Y29uc3QgY29udHJvbCA9IHsgLy90aGUgY29udHJvbCBwb2ludFxyXG5cdFx0XHRcdHg6ICgoKGV4LnNrdWxsLnNpZGUueC1leC5za3VsbC54KS8yKStleC5za3VsbC54KSswLjQsXHJcblx0XHRcdFx0eTogKCgoZXguc2t1bGwuc2lkZS55LWV4LnNrdWxsLnkpLzIpK2V4LnNrdWxsLnkpKzAuNFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0aG9ybnMuaW4gPSB7XHJcblx0XHRcdFx0eDogY29udHJvbC54LTIuNSxcclxuXHRcdFx0XHR5OiBjb250cm9sLnkrMlxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0aG9ybnMub3V0ID0ge1xyXG5cdFx0XHRcdHg6IGNvbnRyb2wueCsyLFxyXG5cdFx0XHRcdHk6IGNvbnRyb2wueS0xLjVcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGhvcm5zLmluID0gYWRqdXN0KGV4dHJhY3RQb2ludChleC5za3VsbCksMi41LC0yLjUpO1xyXG5cdFx0XHRob3Jucy5vdXQgPSBhZGp1c3QoZXh0cmFjdFBvaW50KGV4LnNrdWxsLnNpZGUpLC0xLDMpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uc29sZS5sb2coXCJjYXRcIilcclxuXHRcdFx0Y29uc29sZS5sb2coaG9ybnMuaW4pXHJcblx0XHRcdGNvbnNvbGUubG9nKGhvcm5zLm91dClcclxuXHRcdFx0XHJcblxyXG5cdFx0XHRob3Jucy50b3AgPSBhZGp1c3QoaG9ybnMub3V0LDIqdGhpcy5ob3JueW5lc3MsOCp0aGlzLmhvcm55bmVzcylcclxuLy8gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2V4Lmhvcm5zLmluLCBleC5ob3Jucy50b3AsIGV4Lmhvcm5zLm91dF07XHJcbiAgICB9XHJcbn1cclxuXHJcbiovIiwiaW1wb3J0IHtEZWNvcmF0aXZlUGFydH0gZnJvbSBcIi4vZGVjb3JhdGl2ZV9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge25vbmUsc3BsaXRDdXJ2ZSxhZGp1c3R9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG4vL2ltcG9ydCB7bm9uZSwgY2xhbXAsIHNpbXBsZVF1YWRyYXRpYywgYnJlYWtQb2ludCwgfSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdHBlcnBlbmRpY3VsYXJQb2ludFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuY2xhc3MgVGFpbCBleHRlbmRzIERlY29yYXRpdmVQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGxvYzogXHRcdFwidGFpbFwiLCAvLyt0b3JzbyAgVE9ETyAtIENIRUNLIElGIFdPUktTXHJcblx0XHRcdGxheWVyOlx0XHQgZGEuTGF5ZXIuQkFTRSxcclxuXHRcdFx0cmVmbGVjdDpcdGZhbHNlLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlwRmlsbCgpIHtcclxuXHJcbiAgICB9XHJcbi8qXHJcbiAgICBmaWxsKGlnbm9yZSwgZXgpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHQqL1xyXG5cdGZpbGwoKSB7XHJcbiAgICAgXHJcbiAgICB9XHJcblx0XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRGVtb25pY1RhaWwgZXh0ZW5kcyBUYWlse1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKGlnbm9yZSwgZXgpIHtcclxuICAgICAgICByZXR1cm4gYWRqdXN0Q29sb3IoZXguYmFzZUxpcENvbG9yLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtMTAsXHJcbiAgICAgICAgICAgICAgICBzOiAtMTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKGlnbm9yZSwgZXgpIHtcclxuICAgICAgICByZXR1cm4gYWRqdXN0Q29sb3IoZXguYmFzZUxpcENvbG9yLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtMTAsXHJcbiAgICAgICAgICAgICAgICBzOiAtMTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cdC8qXHJcblx0IGZpbGwoaWdub3JlLCBleCkge1xyXG4gICAgICAgIHJldHVybiBhZGp1c3RDb2xvcihleC5iYXNlRmlsbCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgczogLTIwLFxyXG4gICAgICAgICAgICAgICAgbDogLTEwXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZShpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmJhc2VGaWxsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzOiAtMjAsXHJcbiAgICAgICAgICAgICAgICBsOiAtMTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblx0Ki9cclxuXHQgY2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgXHJcblx0XHRpZiAodGhpcy50YWlsIDwgMC4wMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4vL1x0XHRpZiAoY2FsY3VsYXRlKSB7ICAvL25vdCBzdXJlIHdoYXQgY2FsY3VsYXRlIG1lYW5zIFxyXG4gICAgICAgICAgICBjb25zdCB0YWlsID0gZXgudGFpbCA9IHt9O1xyXG4gICAgICAgICAgXHR0YWlsLnRvcFJvb3QgPSBhZGp1c3QoZXgucGVsdmlzLDAsNSk7XHJcblx0XHRcdHRhaWwuYm90Um9vdCA9IGFkanVzdChleC5wZWx2aXMsMCwtMSk7XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zb2xlLmxvZyh0YWlsLnRvcFJvb3QpXHJcblx0XHRcdGNvbnNvbGUubG9nKHRhaWwuYm90Um9vdClcclxuXHRcdFx0XHJcblx0XHRcdGxldCBtYXhfdGlwID0ge3g6NjAseTp0YWlsLnRvcFJvb3QueSs0MH07XHJcblx0XHRcdFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDAuNSxtYXhfdGlwLHRhaWwudG9wUm9vdCk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2codGVtcClcclxuXHRcdFx0XHR0ZW1wID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHRlbXApXHJcblx0XHRcdFx0bWF4X3RpcC5jcDEgPSB7XHJcblx0XHRcdFx0XHR4OnRlbXAueCs0MCxcclxuXHRcdFx0XHRcdHk6dGVtcC55LTcwXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG1heF90aXAuY3AyID0ge1xyXG5cdFx0XHRcdFx0eDp0ZW1wLngtMTUsXHJcblx0XHRcdFx0XHR5OnRlbXAueSs0NVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zb2xlLmxvZyhtYXhfdGlwKVxyXG5cdFx0XHRcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLnRhaWwsdGFpbC50b3BSb290LG1heF90aXApO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2codGVtcClcclxuXHRcdFx0XHR0YWlsLnRpcCA9ICB0ZW1wLmxlZnQucDI7XHJcblx0XHRcdFxyXG5cdFx0XHRcdHRhaWwuYm90Um9vdC5jcDEgPSB7XHJcblx0XHRcdFx0XHR4OnRhaWwudGlwLmNwMi54KzEuOTksXHJcblx0XHRcdFx0XHR5OnRhaWwudGlwLmNwMi55LTEuOTlcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0dGFpbC5ib3RSb290LmNwMiA9IHtcclxuXHRcdFx0XHRcdHg6dGFpbC50aXAuY3AxLngrMi40LFxyXG5cdFx0XHRcdFx0eTp0YWlsLnRpcC5jcDEueS0yLjRcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Y29uc29sZS5sb2coZXgudGFpbC50aXApXHJcbi8vICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtleC50YWlsLnRvcFJvb3QsIGV4LnRhaWwudGlwLCBleC50YWlsLmJvdFJvb3RdO1xyXG4gICAgfVxyXG5cdFxyXG5cdFxyXG5cdFxyXG5cdFxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDYXRUYWlsIGV4dGVuZHMgVGFpbHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0c3Ryb2tlKGlnbm9yZSwgZXgpIHtcclxuXHRcdHJldHVybiBhZGp1c3RDb2xvcihleC5oYWlyRmlsbCx7XHJcblx0XHRcdGw6IC0xMCxcclxuXHRcdFx0czogLTEwXHJcblx0XHR9KTtcclxuICAgIH1cclxuXHJcblx0ZmlsbChpZ25vcmUsIGV4KSB7XHJcblx0XHRyZXR1cm4gbm9uZTtcclxuICAgIH1cclxuXHRcclxuXHRnZXRMaW5lV2lkdGgoYXZhdGFyKSB7XHJcbiAgICAgICAgcmV0dXJuIDY7XHJcbiAgICB9XHJcblx0XHJcblx0Y2FsY0RyYXdQb2ludHMoZXgsIG1vZHMsIGNhbGN1bGF0ZSkge1xyXG4gICAgICAgXHJcblx0XHRpZiAodGhpcy50YWlsIDwgMC4wMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cdFx0XHJcbi8vXHRcdGlmIChjYWxjdWxhdGUpIHsgIC8vbm90IHN1cmUgd2hhdCBjYWxjdWxhdGUgbWVhbnMgXHJcbiAgICAgICAgICAgIGNvbnN0IHRhaWwgPSBleC50YWlsID0ge307XHJcbiAgICAgICAgICBcdHRhaWwucm9vdCA9IGFkanVzdChleC5wZWx2aXMsMCwyKTtcclxuXHRcdC8vXHR0YWlsLmJvdFJvb3QgPSBhZGp1c3QoZXgucGVsdmlzLDAsLTEpO1xyXG5cdFx0XHQvKlxyXG5cdFx0XHRjb25zb2xlLmxvZyh0YWlsLnRvcFJvb3QpXHJcblx0XHRcdGNvbnNvbGUubG9nKHRhaWwuYm90Um9vdClcclxuXHRcdFx0XHJcblx0XHRcdGxldCBtYXhfbGVuZ3RoID0ge3g6LTM4LHk6dGFpbC5yb290LnktODB9O1xyXG5cdFx0XHQqL1xyXG4vKlx0XHRcdFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDAuNSxtYXhfdGlwLHRhaWwudG9wUm9vdCk7XHJcblx0XHRcdFx0Y29uc29sZS5sb2codGVtcClcclxuXHRcdFx0XHR0ZW1wID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKHRlbXApXHJcblx0XHRcdFx0bWF4X3RpcC5jcDEgPSB7XHJcblx0XHRcdFx0XHR4OnRlbXAueCs0MCxcclxuXHRcdFx0XHRcdHk6dGVtcC55LTcwXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG1heF90aXAuY3AyID0ge1xyXG5cdFx0XHRcdFx0eDp0ZW1wLngtMTUsXHJcblx0XHRcdFx0XHR5OnRlbXAueSs0NVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zb2xlLmxvZyhtYXhfdGlwKVxyXG5cdCovXHRcdFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0LypsZXQgdGVtcCA9IHNwbGl0Q3VydmUodGhpcy50YWlsLHRhaWwucm9vdCxtYXhfbGVuZ3RoKTtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHRlbXApXHJcblx0XHRcdFx0Ki9cdFx0XHRcclxuXHRcdFx0XHRsZXQgbWlkID0ge3g6LTM4LHk6dGFpbC5yb290LnktODB9OyAvL3RlbXAubGVmdC5wMjtcclxuXHRcdFx0XHRsZXQgdGlwID0gcGVycGVuZGljdWxhclBvaW50KHRhaWwucm9vdCxtaWQsMSwtMjApO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHRpcC5jcDEgPSBtaWQ7ICBcclxuXHRcdFx0XHR0aXAuY3AyID0gcGVycGVuZGljdWxhclBvaW50KHRpcCxtaWQsMC41LC0yMCk7ICBcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUodGhpcy50YWlsLHRhaWwucm9vdCx0aXApO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHRhaWwudGlwID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8qXHJcblx0XHRcdFx0dGFpbC50aXAgPSBwZXJwZW5kaWN1bGFyUG9pbnQodGFpbC5yb290LHRhaWwubWlkLDEsLTIyKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHR0YWlsLnRpcC5jcDEgPSB0YWlsLm1pZDsgIFxyXG5cdFx0XHRcdHRhaWwudGlwLmNwMiA9IHBlcnBlbmRpY3VsYXJQb2ludCh0YWlsLnRpcCx0YWlsLm1pZCwwLjUsLTE0KTsgIFxyXG5cdFx0XHRcdCovXHJcblx0XHRcdFx0XHJcblx0XHRcdC8qXHJcblx0XHRcdFx0dGFpbC5ib3RSb290LmNwMSA9IHtcclxuXHRcdFx0XHRcdHg6dGFpbC50aXAuY3AyLngrMS45OSxcclxuXHRcdFx0XHRcdHk6dGFpbC50aXAuY3AyLnktMS45OVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHR0YWlsLmJvdFJvb3QuY3AyID0ge1xyXG5cdFx0XHRcdFx0eDp0YWlsLnRpcC5jcDEueCsyLjQsXHJcblx0XHRcdFx0XHR5OnRhaWwudGlwLmNwMS55LTIuNFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQqL1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnNvbGUubG9nKGV4LnRhaWwudGlwKVxyXG5cdFx0XHRcclxuXHRcdFx0XHJcbi8vICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtleC50YWlsLnJvb3QsIC8qZXgudGFpbC5taWQsICovIGV4LnRhaWwudGlwLCAvKmV4LnRhaWwuYm90Um9vdCovXTtcclxuICAgIH1cclxuXHRcclxuXHRcclxuXHRcclxuXHRcclxufVxyXG4iLCJpbXBvcnQge0RlY29yYXRpdmVQYXJ0fSBmcm9tIFwiLi9kZWNvcmF0aXZlX3BhcnRcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7XHJcblx0YnJlYWtQb2ludCxcclxuXHRub25lLFxyXG5cdHNwbGl0Q3VydmUsXHJcblx0YWRqdXN0LFxyXG5cdGV4dHJhY3RQb2ludCxcclxuXHR9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG4vL2ltcG9ydCB7bm9uZSwgY2xhbXAsIHNpbXBsZVF1YWRyYXRpYywgYnJlYWtQb2ludCwgfSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5jbGFzcyBXaW5ncyBleHRlbmRzIERlY29yYXRpdmVQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGxvYzogXHRcdFwiK3RvcnNvXCIsXHJcblx0XHRcdGxheWVyOlx0XHQgZGEuTGF5ZXIuQkFTRSxcclxuXHRcdFx0cmVmbGVjdDpcdGZhbHNlLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZShpZ25vcmUsIGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIGFkanVzdENvbG9yKGV4LmhhaXJGaWxsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtMjUsXHJcbiAgICAgICAgICAgICAgICBzOiAtMjVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblx0XHJcblx0Y2xpcEZpbGwoKSB7XHJcblxyXG4gICAgfVxyXG5cdFxyXG5cdGZpbGwoaWdub3JlLCBleCkge1xyXG5cdFx0cmV0dXJuIGFkanVzdENvbG9yKGV4LmhhaXJGaWxsLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsOiAtMTAsXHJcbiAgICAgICAgICAgICAgICBzOiAtMTBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblx0XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRGVtb25pY1dpbmdzIGV4dGVuZHMgV2luZ3N7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdCBjYWxjRHJhd1BvaW50cyhleCwgbW9kcywgY2FsY3VsYXRlKSB7XHJcblx0ICAgaWYgKHRoaXMud2luZ3MgPCAwLjAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbi8vXHRcdGlmIChjYWxjdWxhdGUpIHsgIC8vbm90IHN1cmUgd2hhdCBjYWxjdWxhdGUgbWVhbnMgXHJcblx0XHRcdHZhciBpblRvcCA9IHtcclxuXHRcdFx0XHR4OiAwLFxyXG5cdFx0XHRcdHk6IGV4LmNvbGxhcmJvbmUueSxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdHZhciBvdXRUb3AgPSB7XHJcblx0XHRcdFx0eDogaW5Ub3AueCArIDUwKnRoaXMud2luZ3MsXHJcblx0XHRcdFx0eTogaW5Ub3AueSArIDYwKnRoaXMud2luZ3MsXHJcblx0XHRcdH07XHJcblx0XHJcblx0XHRcdG91dFRvcC5jcDEgPSB7XHJcblx0XHRcdFx0eDogaW5Ub3AueCArIDQwKnRoaXMud2luZ3MsXHJcblx0XHRcdFx0eTogaW5Ub3AueSArIDUqdGhpcy53aW5ncyxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdG91dFRvcC5jcDIgPSB7XHJcblx0XHRcdFx0eDogb3V0VG9wLnggLSAwKnRoaXMud2luZ3MsXHJcblx0XHRcdFx0eTogb3V0VG9wLnkgLSAzMCp0aGlzLndpbmdzLFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIGluQm90ID0ge1xyXG5cdFx0XHRcdHg6IDAsXHJcblx0XHRcdFx0eTogZXgucGVsdmlzLnkgKyAyMCp0aGlzLndpbmdzLFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIG91dEJvdCA9IHtcclxuXHRcdFx0XHR4OiBpbkJvdC54ICsgNjAqdGhpcy53aW5ncyxcclxuXHRcdFx0XHR5OiBpbkJvdC55IC0gODAqdGhpcy53aW5ncyxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdG91dEJvdC5jcDEgPSB7XHJcblx0XHRcdFx0eDogb3V0VG9wLnggKyAzMCp0aGlzLndpbmdzLFxyXG5cdFx0XHRcdHk6IG91dFRvcC55IC0gNDAqdGhpcy53aW5ncyxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdG91dEJvdC5jcDIgPSB7XHJcblx0XHRcdFx0eDogb3V0Qm90LnggKyAyNSp0aGlzLndpbmdzLFxyXG5cdFx0XHRcdHk6IG91dEJvdC55ICsgNDQqdGhpcy53aW5ncyxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGluQm90LmNwMSA9IHtcclxuXHRcdFx0XHR4OiBvdXRCb3QueCArIDAqdGhpcy53aW5ncyxcclxuXHRcdFx0XHR5OiBvdXRCb3QueSArIDQ1KnRoaXMud2luZ3MsXHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRpbkJvdC5jcDIgPSB7XHJcblx0XHRcdFx0eDogaW5Cb3QueCArIDQwKnRoaXMud2luZ3MsXHJcblx0XHRcdFx0eTogaW5Cb3QueSArIDIwKnRoaXMud2luZ3MsXHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG4gLy8gICAgICAgfVxyXG5cdFx0cmV0dXJuIFtpblRvcCxvdXRUb3Asb3V0Qm90LGluQm90XTtcclxuICAgIH1cclxuXHRcclxuXHRcclxuXHRcclxuXHRcclxufVxyXG4iLCJpbXBvcnQge2dldERlZmF1bHQsIGFwcGx5TW9kcywgcmVtb3ZlTW9kc30gZnJvbSBcIi4uL3V0aWwvcGxheWVyXCI7XHJcbmltcG9ydCB7YmFzZURpbURlc2MsIGJhc2VkaW1EaXNjcmV0ZVBvb2x9IGZyb20gXCIuL2RpbWVuc2lvbnNcIjtcclxuaW1wb3J0IHtTa2VsZXRvbn0gZnJvbSBcIi4uL3NrZWxldG9ucy9za2VsZXRvblwiO1xyXG5pbXBvcnQge1BhcnQsIGdldEF0dGFjaGVkTG9jYXRpb24sIHBhcnRDb25mbGljdCwgZ2V0Q2hpbGRMb2NhdGlvbn0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtzdGF0TGltaXRzLCBzdGF0RGlzY3JldGVQb29sfSBmcm9tIFwiLi9zdGF0c1wiO1xyXG5pbXBvcnQge21vZExpbWl0cywgbW9kRGlzY3JldGVQb29sfSBmcm9tIFwiLi9tb2RzXCI7XHJcbmltcG9ydCB7bG9hZGVkfSBmcm9tIFwiLi4vbG9hZC9sb2FkXCI7XHJcbmltcG9ydCB7SGFpcn0gZnJvbSBcIi4uL2hhaXJfcGFydHMvaGFpcl9wYXJ0XCI7XHJcbmltcG9ydCB7U2hhZGluZ1BhcnR9IGZyb20gXCIuLi9kcmF3L3NoYWRpbmdfcGFydFwiO1xyXG5pbXBvcnQge2NsYW1wLCBleHRyYWN0UG9pbnR9IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtleHRyYWN0VW5tb2RpZmllZExvY2F0aW9uLCBleHRyYWN0TG9jYXRpb25Nb2RpZmllcn0gZnJvbSBcIi4uL3V0aWwvcGFydFwiO1xyXG5pbXBvcnQge0l0ZW1zfSBmcm9tIFwiLi4vaXRlbXMvaXRlbVwiO1xyXG5pbXBvcnQge0V4cHJlc3Npb259IGZyb20gXCIuL2V4cHJlc3Npb25cIjtcclxuaW1wb3J0IHtDbG90aGVzfSBmcm9tIFwiLi4vY2xvdGhlcy9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0JyYSwgUGFudGllc30gZnJvbSBcIi4uL2Nsb3RoZXMvdW5kZXJ3ZWFyXCI7XHJcbmltcG9ydCB7c3R5bGVzfSBmcm9tIFwiLi4vaGFpcl9wYXJ0cy9zdHlsZXNcIjtcclxuaW1wb3J0IHtUYXR0b29zfSBmcm9tIFwiLi4vZGVjb3JhdGl2ZV9wYXJ0cy90YXR0b29cIjtcclxuaW1wb3J0IHtpc1BhdHRlcm59IGZyb20gXCIuLlwiO1xyXG5cclxuLy8gdXNlZCB0byBnZW5lcmF0ZSBkZWZhdWx0IHZhbHVlc1xyXG5cclxuZnVuY3Rpb24gZGVmYXVsdEJhc2VEaW1lbnNpb25zKHNrZWxldG9uKSB7XHJcbiAgICByZXR1cm4gZ2V0RGVmYXVsdChiYXNlRGltRGVzY1tza2VsZXRvbl0sIGJhc2VkaW1EaXNjcmV0ZVBvb2xbc2tlbGV0b25dKSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWZhdWx0UGFydHMocGFydHNOYW1lLCBza2VsZXRvbikge1xyXG4gICAgbGV0IHBhcnRzID0gW107XHJcbiAgICBjb25zdCBkZWZQYXJ0cyA9IFNrZWxldG9uW3NrZWxldG9uXVtwYXJ0c05hbWVdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWZQYXJ0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHtzaWRlLCBwYXJ0fSA9IGRlZlBhcnRzW2ldO1xyXG4gICAgICAgIHBhcnRzLnB1c2goUGFydC5jcmVhdGUocGFydCwge3NpZGV9KSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFydHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFNleFBhcnRzKGF2YXRhcikge1xyXG4gICAgY29uc3Qgc2tlbGV0b24gPSBTa2VsZXRvblthdmF0YXIuc2tlbGV0b25dO1xyXG4gICAgbGV0IHNleFBhcnRzO1xyXG4gICAgaWYgKGF2YXRhci5pc0ZlbWFsZSgpKSB7XHJcbiAgICAgICAgc2V4UGFydHMgPSBza2VsZXRvbi5mZW1hbGVQYXJ0cztcclxuICAgIH1cclxuICAgIGlmIChhdmF0YXIuaXNNYWxlKCkpIHtcclxuICAgICAgICBzZXhQYXJ0cyA9IHNrZWxldG9uLm1hbGVQYXJ0cztcclxuICAgIH1cclxuICAgIHNleFBhcnRzLmZvckVhY2goKHtwYXJ0R3JvdXAsIHNpZGUsIHBhcnR9KSA9PiB7XHJcbiAgICAgICAgYXZhdGFyLmF0dGFjaFBhcnQoUGFydC5jcmVhdGUocGFydCwge3NpZGV9KSwgYXZhdGFyW3BhcnRHcm91cF0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQbGF5ZXIgaG9sZHMgYWxsIGRhdGEgbmVjZXNzYXJ5IGZvciBkcmF3IHRvIHJlbmRlciBpdC5cclxuICogSXQgaXMgYWxzbyBtZWFudCB0byBiZSBleHRlbmRlZCBieSB0aGUgdXNlciBvZiB0aGUgbGlicmFyeSB0byBpbmNsdWRlIGdhbWVwbGF5IHN0YXRpc3RpY3MuXHJcbiAqIFRoZSBnYW1lcGxheSBzdGF0aXN0aWNzIGNhbiB0aGVuIGJlIGxpbmtlZCB0byB0aGUgY2FsY3VsYXRpb24gb2YgZHJhd2luZyBkaW1lbnNpb25zLlxyXG4gKiBAbWVtYmVyb2YgbW9kdWxlOmRhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGxheWVyIHtcclxuICAgIHN0YXRpYyBkZWZhdWx0U3RhdHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldERlZmF1bHQoc3RhdExpbWl0cywgc3RhdERpc2NyZXRlUG9vbCkoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZGVmYXVsdE1vZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGdldERlZmF1bHQobW9kTGltaXRzLCBtb2REaXNjcmV0ZVBvb2wpKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRlZmF1bHRWaXRhbHMoKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGdldERlZmF1bHQodml0YWxMaW1pdHMpKCk7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBkZWZhdWx0Q2xvdGhlcygpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBkZWZhdWx0IENsb3RoaW5nIGZvciBhIFBsYXllciB0byB3ZWFyXHJcbiAgICAgICAgICogQHR5cGUge0Nsb3RoaW5nW119XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIFtDbG90aGVzLmNyZWF0ZShCcmEpLCBDbG90aGVzLmNyZWF0ZShQYW50aWVzKV07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSBQcm9wZXJ0aWVzIG9mIHRoZSBQbGF5ZXIgb2JqZWN0IChvdmVycmlkZSB0aGUgZGVmYXVsdCB2YWx1ZXMpXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBpZiAoIWxvYWRlZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICBcInRyeWluZyB0byBjcmVhdGUgUGxheWVyIHdpdGhvdXQgaGF2aW5nIGxvYWRlZCBmaXJzdCEgKGNhbGwgbG9hZCgpIGJlZm9yZSlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcyxcclxuICAgICAgICAgICAgUGxheWVyLmRlZmF1bHRTdGF0cygpLCB7XHJcbiAgICAgICAgICAgICAgICBza2VsZXRvbiAgICAgICA6IFwiaHVtYW5cIixcclxuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdmFsdWUgY29uc3RydWN0aW9uOyBvdmVycmlkZW4gYnkgcHJvcGVydGllcyBvZiBkYXRhIHBhc3NlZCBpblxyXG4gICAgICAgICAgICAgICAgLy8gbW9kcywgcGh5c2lxdWUsIHdvcm4gcmVxdWlyZSBkeW5hbWljIGRlZmF1bHQgdmFsdWUgY29uc3RydWN0aW9uLCBzbyBhcmVcclxuICAgICAgICAgICAgICAgIC8vIGFzc2lnbmVkIHNlcGFyYXRlbHlcclxuICAgICAgICAgICAgICAgIC8vIG9yZGVyZWQgbGlzdCBvZiBib2R5IHBhcnRzIChwYXJ0cyBkZXBlbmRpbmcgb24gb3RoZXJzIHNob3VsZCBiZSBhZnRlcilcclxuICAgICAgICAgICAgICAgIHBhcnRzICAgICAgICAgIDogW10sXHJcbiAgICAgICAgICAgICAgICAvLyBwYXJ0cyB0aGF0IGFyZSBvZiB0aGUgZmFjZVxyXG4gICAgICAgICAgICAgICAgZmFjZVBhcnRzICAgICAgOiBbXSxcclxuICAgICAgICAgICAgICAgIC8vIHBhcnRzIHRoYXQgYXJlIGZvciBkZWNvcmF0aXZlL2ZsYXZvdXIgb25seVxyXG4gICAgICAgICAgICAgICAgZGVjb3JhdGl2ZVBhcnRzOiBbXSxcclxuICAgICAgICAgICAgICAgIGhhaXJQYXJ0cyAgICAgIDogW10sXHJcbiAgICAgICAgICAgICAgICBjbG90aGluZ1BhcnRzICA6IFtdLFxyXG4gICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlZCBmcm9tIHN0YXRzLCBiYXNlIGRpbWVuc2lvbnMgKDEtdG8tMSksIGFuZCBtb2RzXHJcbiAgICAgICAgICAgICAgICBpbnYgICAgICAgICAgICA6IFtdLFxyXG4gICAgICAgICAgICAgICAgTW9kcyAgICAgICAgICAgOiB7fSxcclxuICAgICAgICAgICAgICAgIHZpdGFscyAgICAgICAgIDoge30sICAvLyB3aGVyZSB5b3Ugd291bGQgc3RvcmUgbWF4X2hwLCBjdXJfaHAsIGV0Yy4uLlxyXG4gICAgICAgICAgICAgICAgdHJhaXRzICAgICAgICAgOiBbXSxcclxuICAgICAgICAgICAgICAgIF9leHByZXNzaW9uICAgIDogRXhwcmVzc2lvbi5uZXV0cmFsLFxyXG4gICAgICAgICAgICAgICAgLy8gaGFpciBjb2xvdXIgb3ZlcnJpZGVzIChvdmVycmlkZXMgdGhvc2UgaW4gZGltKVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlc2UgYWxsb3cgbW9yZSBjb21wbGV4IGNvbG91cnMgc3VjaCBhcyBwYXR0ZXJucyBhbmQgZ3JhZGllbnRzXHJcbiAgICAgICAgICAgICAgICBoYWlyRmlsbCAgICAgICA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBoYWlyU3Ryb2tlICAgICA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBicm93RmlsbCAgICAgICA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBsYXNoRmlsbCAgICAgICA6IG51bGwsXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBhbGxvd2VkVHlwZXMgPSBbXCJudW1iZXJcIiwgXCJzdHJpbmdcIiwgXCJmdW5jdGlvblwiXTtcclxuICAgICAgICAvLyBoYW5kbGUgb2JqZWN0cyBzZXBhcmF0ZWx5XHJcbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHkgaW4gZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wVHlwZSA9IHR5cGVvZiBkYXRhW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmXHJcbiAgICAgICAgICAgICAgICAoYWxsb3dlZFR5cGVzLmluY2x1ZGVzKHByb3BUeXBlKSB8fCBpc1BhdHRlcm4oZGF0YVtwcm9wZXJ0eV0pKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBkYXRhW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wYXJ0cyA9IGRlZmF1bHRQYXJ0cyhcImRlZmF1bHRQYXJ0c1wiLCB0aGlzLnNrZWxldG9uKTtcclxuICAgICAgICBhZGRTZXhQYXJ0cyh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5kZWNvcmF0aXZlUGFydHMgPSBkZWZhdWx0UGFydHMoXCJkZWZhdWx0RGVjb3JhdGl2ZVBhcnRzXCIsIHRoaXMuc2tlbGV0b24pO1xyXG4gICAgICAgIHRoaXMuZmFjZVBhcnRzID0gZGVmYXVsdFBhcnRzKFwiZGVmYXVsdEZhY2VQYXJ0c1wiLCB0aGlzLnNrZWxldG9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5zaGFkaW5nUGFydHMgPSBbXTtcclxuICAgICAgICB0aGlzLnBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBhcnQuc2hhZGluZ1BhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0LnNoYWRpbmdQYXJ0cy5mb3JFYWNoKChzaGFkaW5nUGFydFByb3RvdHlwZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRhY2hlZExvY2F0aW9uID0gZ2V0QXR0YWNoZWRMb2NhdGlvbihzaGFkaW5nUGFydFByb3RvdHlwZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFBhcnRJbkxvY2F0aW9uKGF0dGFjaGVkTG9jYXRpb24pKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaFBhcnQoUGFydC5jcmVhdGUoc2hhZGluZ1BhcnRQcm90b3R5cGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkaW5nUGFydHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5mYWNlUGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGFydC5zaGFkaW5nUGFydHMpIHtcclxuICAgICAgICAgICAgICAgIHBhcnQuc2hhZGluZ1BhcnRzLmZvckVhY2goKHNoYWRpbmdQYXJ0UHJvdG90eXBlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dGFjaGVkTG9jYXRpb24gPSBnZXRBdHRhY2hlZExvY2F0aW9uKHNoYWRpbmdQYXJ0UHJvdG90eXBlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0UGFydEluTG9jYXRpb24oYXR0YWNoZWRMb2NhdGlvbiwgdGhpcy5mYWNlUGFydHMpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaFBhcnQoUGFydC5jcmVhdGUoc2hhZGluZ1BhcnRQcm90b3R5cGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaGFkaW5nUGFydHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2xvdGhpbmdQYXJ0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2xvdGhlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgICAgICB0aGlzLnRhdHRvb3MgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gY2xvdGhpbmcgYm9vayBrZWVwaW5nXHJcbiAgICAgICAgLy8gbGlzdCBvZiBDbG90aGVzLCBub3QgdG8gYmUgZGlyZWN0bHkgYWNjZXNzZWRcclxuICAgICAgICBQbGF5ZXIuZGVmYXVsdENsb3RoZXMoKS5mb3JFYWNoKChjbG90aGluZykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLndlYXJDbG90aGluZyhjbG90aGluZyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHVwZ3JhZGUgd2l0aCBuZXdlciBkZWZhdWx0IHZhbHVlcyBpZiBuZWNlc3Nhcnkgc28gc2F2ZXMgYXJlIGNvbXBhdGlibGUgKG5ldyBzdGF0IHdvdWxkbid0XHJcbiAgICAgICAgLy8gYmUgbWlzc2luZylcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VkaW0gPVxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdEJhc2VEaW1lbnNpb25zKHRoaXMuc2tlbGV0b24pLCBkYXRhLmJhc2VkaW0pO1xyXG4gICAgICAgICAgICB0aGlzLk1vZHMgPSBPYmplY3QuYXNzaWduKHt9LCBQbGF5ZXIuZGVmYXVsdE1vZHMoKSwgZGF0YS5Nb2RzKTtcclxuICAgICAgICAgICAgdGhpcy52aXRhbHMgPSBPYmplY3QuYXNzaWduKHt9LCBQbGF5ZXIuZGVmYXVsdFZpdGFscygpLCBkYXRhLnZpdGFscyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS5wYXJ0cykge1xyXG4gICAgICAgICAgICAgICAgLy8gb3ZlcnJpZGUgYm9keSBwYXJ0c1xyXG4gICAgICAgICAgICAgICAgZGF0YS5wYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hQYXJ0KHBhcnQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGEuZGVjb3JhdGl2ZVBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvdmVycmlkZSBkZWNvcmF0aXZlIHBhcnRzXHJcbiAgICAgICAgICAgICAgICBkYXRhLmRlY29yYXRpdmVQYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hQYXJ0KHBhcnQsIHRoaXMuZGVjb3JhdGl2ZVBhcnRzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmZhY2VQYXJ0cykge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5mYWNlUGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoUGFydChwYXJ0LCB0aGlzLmZhY2VQYXJ0cyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEuY2xvdGhlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBbGxDbG90aGluZygpO1xyXG4gICAgICAgICAgICAgICAgZGF0YS5jbG90aGVzLmZvckVhY2goKGNsb3RoaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWFyQ2xvdGhpbmcoY2xvdGhpbmcpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZWxkSXRlbShpdGVtKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS50YXR0b29zKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnRhdHRvb3MuZm9yRWFjaCgodGF0dG9vKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUYXR0b28odGF0dG9vKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBkaXN0IHNwZWNpZmljYXRpb25cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VkaW0gPSBkZWZhdWx0QmFzZURpbWVuc2lvbnModGhpcy5za2VsZXRvbik7XHJcbiAgICAgICAgICAgIHRoaXMuTW9kcyA9IFBsYXllci5kZWZhdWx0TW9kcygpO1xyXG4gICAgICAgICAgICB0aGlzLnZpdGFscyA9IFBsYXllci5kZWZhdWx0Vml0YWxzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBkaW1lbnNpb25zXHJcbiAgICAgICAgdGhpcy5jYWxjRGltZW5zaW9ucygpO1xyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEtlZXAgc3RhdHMgd2l0aGluIGJvdW5kYXJpZXNcclxuICAgICAqL1xyXG4gICAgY2xhbXBTdGF0cygpIHtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHN0YXRMaW1pdHMpIHtcclxuICAgICAgICAgICAgaWYgKHN0YXRMaW1pdHMuaGFzT3duUHJvcGVydHkocCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzW3BdID0gY2xhbXAodGhpc1twXSwgc3RhdExpbWl0c1twXS5sb3csIHN0YXRMaW1pdHNbcF0uaGlnaCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHByb3BlcnR5IGdldHRlcnNcclxuICAgIC8qKlxyXG4gICAgICogR2V0IG1vZGlmaWVkIHN0YXRpc3RpY1xyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtIE5hbWUgb2Ygc3RhdGlzdGljXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBNb2RpZmllZCBzdGF0aXN0aWMgdmFsdWVcclxuICAgICAqL1xyXG4gICAgZ2V0KHBhcmFtKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXNbcGFyYW1dICsgdGhpcy5fY2xhbXBlZE1vZHNbcGFyYW1dO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IG1vZGlmaWVkIGRpbWVuc2lvbnNcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbSBOYW1lIG9mIGRpbWVuc2lvblxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gTW9kaWZpZWQgZGltZW5zaW9uIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGdldERpbShwYXJhbSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VkaW1bcGFyYW1dICsgdGhpcy5fY2xhbXBlZE1vZHNbcGFyYW1dO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IG1vZGlmaWVyXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0gTmFtZSBvZiBtb2RpZmllclxyXG4gICAgICogQHJldHVybnMge251bWJlcn0gTW9kaWZpZXIgdmFsdWVcclxuICAgICAqL1xyXG4gICAgZ2V0TW9kKHBhcmFtKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsYW1wZWRNb2RzW3BhcmFtXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBzdGF0aXN0aWNhbCBkZXNjcmlwdGlvbiBvZiBhIGRpbWVuc2lvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtIE5hbWUgb2YgZGltZW5zaW9uXHJcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBTdGF0aXN0aWNhbCBkaW1lbnNpb24gZGVzY3JpcHRpb24gd2l0aCBsb3csIGhpZ2gsIHN0ZGV2LCBhdmdcclxuICAgICAqL1xyXG4gICAgZ2V0RGltRGVzYyhwYXJhbSkge1xyXG4gICAgICAgIHJldHVybiBiYXNlRGltRGVzY1t0aGlzLnNrZWxldG9uXVtwYXJhbV07XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlIGVhY2ggZGltZW5zaW9uIHdpdGggJ3RoaXMnIHNldCBhcyB0aGUgcGxheWVyIGluc2lkZSB0aGUgZnVuY3Rpb25cclxuICAgICAqIFRoaXMgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgd2hlbiBkcmF3aW5nLCBzbyBpdCdzIHJhcmVseSBjYWxsZWQgbWFudWFsbHkuXHJcbiAgICAgKi9cclxuICAgIGNhbGNEaW1lbnNpb25zKCkge1xyXG4gICAgICAgIC8vIGNsYW1wIG1vZHMgZm9yIHVzZSBpbiBkcmF3aW5nIChjYW4ndCBjbGFtcCBvcmlnaW5hbCBzaW5jZSBkb2luZyBzbyB3b3VsZCByZW1vdmVcclxuICAgICAgICAvLyBpbmZvcm1hdGlvbiBhYm91dCB0ZW1wb3JhcnkgbW9kc1xyXG4gICAgICAgIHRoaXMuX2NsYW1wZWRNb2RzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgbW9kIGluIHRoaXMuTW9kcykge1xyXG4gICAgICAgICAgICBpZiAobW9kTGltaXRzLmhhc093blByb3BlcnR5KG1vZCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsYW1wZWRNb2RzW21vZF0gPVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYW1wKHRoaXMuTW9kc1ttb2RdLCBtb2RMaW1pdHNbbW9kXS5sb3csIG1vZExpbWl0c1ttb2RdLmhpZ2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZXNldCBkaW1lbnNpb25zXHJcbiAgICAgICAgdGhpcy5kaW0gPSB7fTtcclxuICAgICAgICBjb25zdCBkaW1EZXNjID0gYmFzZURpbURlc2NbdGhpcy5za2VsZXRvbl07XHJcbiAgICAgICAgZm9yIChsZXQgZGltZW5zaW9uIGluIGRpbURlc2MpIHtcclxuICAgICAgICAgICAgaWYgKGRpbURlc2MuaGFzT3duUHJvcGVydHkoZGltZW5zaW9uKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaW1EZXNjW2RpbWVuc2lvbl0uaGFzT3duUHJvcGVydHkoXCJjYWxjXCIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpbVtkaW1lbnNpb25dID0gZGltRGVzY1tkaW1lbnNpb25dLmNhbGMuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGltW2RpbWVuc2lvbl0gPSB0aGlzLmdldERpbShkaW1lbnNpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGltW2RpbWVuc2lvbl0gPVxyXG4gICAgICAgICAgICAgICAgY2xhbXAodGhpcy5kaW1bZGltZW5zaW9uXSwgZGltRGVzY1tkaW1lbnNpb25dLmxvdywgZGltRGVzY1tkaW1lbnNpb25dLmhpZ2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRpbS50b3Jzb0xlbmd0aCA9IHRoaXMuZGltLmhlaWdodCAqIDAuODUgLSB0aGlzLmRpbS5sZWdMZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIGRlZmluZSBoYWlyXHJcbiAgICAgICAgdGhpcy5yZXBsYWNlSGFpcihzdHlsZXNbTWF0aC5yb3VuZCh0aGlzLmRpbS5oYWlyU3R5bGUpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gYm9keSBwYXJ0IGludGVyYWN0aW9uXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2ggYSBuZXcgYm9keSBwYXJ0LCByZXBsYWNpbmcgYW55IGNvbmZsaWN0aW5nIHBhcnRzIGlmIG5lY2Vzc2FyeVxyXG4gICAgICogQHBhcmFtIHtQYXJ0fSBuZXdQYXJ0IE5ldyBib2R5IHBhcnQgdG8gYmUgYWRkZWRcclxuICAgICAqIEBwYXJhbSB7UGFydFtdfSBwYXJ0cyBQYXJ0IGdyb3VwIG9mIHRoZSBQbGF5ZXIgdG8gYXR0YWNoIHRvXHJcbiAgICAgKiBAcmV0dXJucyB7KFBhcnR8bnVsbCl9IEVpdGhlciB0aGUgcGFydCB0aGF0IHdhcyByZW1vdmVkLCBvciBudWxsIGlmIG5vdGhpbmcgd2FzIHJlbW92ZWRcclxuICAgICAqL1xyXG4gICAgYXR0YWNoUGFydChuZXdQYXJ0LCBwYXJ0cyA9IHRoaXMucGFydHMpIHtcclxuICAgICAgICBpZiAobmV3UGFydCBpbnN0YW5jZW9mIFNoYWRpbmdQYXJ0KSB7XHJcbiAgICAgICAgICAgIHBhcnRzID0gdGhpcy5zaGFkaW5nUGFydHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcmVwbGFjZWRQYXJ0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IHBhcnRzLmxlbmd0aDsgKytwKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0Q29uZmxpY3QobmV3UGFydCwgcGFydHNbcF0pKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb2xkUGFydCA9IHBhcnRzW3BdO1xyXG4gICAgICAgICAgICAgICAgcGFydHNbcF0gPSBuZXdQYXJ0O1xyXG4gICAgICAgICAgICAgICAgcmVwbGFjZWRQYXJ0ID0gb2xkUGFydDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmVwbGFjZWRQYXJ0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGV4aXN0aW5nIHBhcnQgd2l0aCB0aGlzIHNwZWNpZmljIGxvY2F0aW9uXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2gobmV3UGFydCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhZGRpbmcgYXNzb2NpYXRlZCBzaGFkaW5nIHdpdGggdGhpcyBwYXJ0IGlmIG5lY2Vzc2FyeVxyXG4gICAgICAgIGlmIChuZXdQYXJ0LnNoYWRpbmdQYXJ0cykge1xyXG4gICAgICAgICAgICBuZXdQYXJ0LnNoYWRpbmdQYXJ0cy5mb3JFYWNoKChzaGFkaW5nUGFydFByb3RvdHlwZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0YWNoZWRMb2NhdGlvbiA9IGdldEF0dGFjaGVkTG9jYXRpb24oc2hhZGluZ1BhcnRQcm90b3R5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFBhcnRJbkxvY2F0aW9uKGF0dGFjaGVkTG9jYXRpb24pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRQYXJ0SW5Mb2NhdGlvbihhdHRhY2hlZExvY2F0aW9uLCB0aGlzLmZhY2VQYXJ0cykgfHxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFBhcnRJbkxvY2F0aW9uKGF0dGFjaGVkTG9jYXRpb24sIHRoaXMuaGFpclBhcnRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoUGFydChQYXJ0LmNyZWF0ZShzaGFkaW5nUGFydFByb3RvdHlwZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhZGluZ1BhcnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVwbGFjZWRQYXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRWl0aGVyIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIHBhcnQgaW4gYSBzcGVjaWZpYyBsb2NhdGlvbiBvciBudWxsIGlmIHRoZSBwYXJ0IGRvZXNuJ3RcclxuICAgICAqIGV4aXN0XHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gV2hlcmUgdGhlIHBhcnQgaXMgbG9jYXRlZFxyXG4gICAgICogQHBhcmFtIHtQYXJ0W119IHBhcnRzIFBhcnQgZ3JvdXAgdG8gc2VhcmNoIGluXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpYmxpbmdJbmRleD0wXSBJbmRleCByZWxhdGl2ZSB0byBvdGhlciBwYXJ0cyBpbiBzYW1lIGxvY2F0aW9uIGluIHNhbWUgZ3JvdXBcclxuICAgICAqIEByZXR1cm5zIHsoUGFydHxudWxsKX0gUGFydCBpbiB0aGlzIGxvY2F0aW9uIG9yIG51bGxcclxuICAgICAqL1xyXG4gICAgZ2V0UGFydEluTG9jYXRpb24obG9jYXRpb24sIHBhcnRzID0gdGhpcy5wYXJ0cywgc2libGluZ0luZGV4ID0gMCkge1xyXG4gICAgICAgIGNvbnN0IHRlc3RMb2NhdGlvbiA9IGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24obG9jYXRpb24pO1xyXG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGFydHMubGVuZ3RoOyArK3ApIHtcclxuICAgICAgICAgICAgaWYgKGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24ocGFydHNbcF0ubG9jKSA9PT0gdGVzdExvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2libGluZ0luZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC0tc2libGluZ0luZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnRzW3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVNwZWNpZmljUGFydChwYXJ0UHJvdG90eXBlLCBwYXJ0cyA9IHRoaXMucGFydHMsIHNpYmxpbmdJbmRleCA9IDApIHtcclxuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IHBhcnRzLmxlbmd0aDsgKytwKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0c1twXSBpbnN0YW5jZW9mIHBhcnRQcm90b3R5cGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nSW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1zaWJsaW5nSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkUGFydCA9IHBhcnRzW3BdO1xyXG4gICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKHAsIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb1JlbW92ZVBhcnQob2xkUGFydCwgcGFydHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRQYXJ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHdoZXRoZXIgYSBwYXJ0IGlzIGNvdmVyZWQgYnkgY2xvdGhpbmdcclxuICAgICAqIERlcGVuZHMgb24gdGhlIHBhcnQgdG8gc3BlY2lmeSB3aGF0IGxvY2F0aW9ucyBhcmUgY29uc2lkZXJlZCBjb3ZlcmFibGVcclxuICAgICAqIHdpdGggcGFydC5jb3ZlckNvbmNlYWxcclxuICAgICAqIEBwYXJhbSBwYXJ0XHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgY2hlY2tQYXJ0Q292ZXJlZEJ5Q2xvdGhpbmcocGFydCkge1xyXG4gICAgICAgIGxldCBwYXJ0Q292ZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgIHBhcnQuY292ZXJDb25jZWFsLmZvckVhY2goKGNvdmVyaW5nTG9jYXRpb24pID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvdmVyaW5nTG9jYXRpb24gPT09IFwidGhpc1wiKSB7XHJcbiAgICAgICAgICAgICAgICBjb3ZlcmluZ0xvY2F0aW9uID0gcGFydC5sb2M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY292ZXJpbmdDbG90aGluZyA9IHRoaXMuZ2V0Q2xvdGhpbmdJbkxvY2F0aW9uKGNvdmVyaW5nTG9jYXRpb24pO1xyXG4gICAgICAgICAgICAvLyBhbGxvdyBjbG90aGluZyBpbiBwYXJ0cyB0byBleHBsaWNpdGx5IG5vdCBjb3ZlciAoaWUuIGhhaXJjbGlwKVxyXG4gICAgICAgICAgICBjb3ZlcmluZ0Nsb3RoaW5nLmZvckVhY2goKGNsb3RoaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNsb3RoaW5nLm5vQ292ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0Q292ZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwYXJ0Q292ZXJlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhIHBhcnQgYXQgYSBzcGVjaWZpYyBsb2NhdGlvblxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxvYyBXaGVyZSB0aGUgcGFydCBpcyBsb2NhdGVkXHJcbiAgICAgKiBAcGFyYW0ge1BhcnRbXX0gcGFydHMgUGFydCBncm91cCBvZiB0aGUgUGxheWVyIHRvIHJlbW92ZSBmcm9tXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpYmxpbmdJbmRleD0wXSBJbmRleCByZWxhdGl2ZSB0byBvdGhlciBwYXJ0cyBpbiBzYW1lIGxvY2F0aW9uIGluIHNhbWUgZ3JvdXBcclxuICAgICAqIEByZXR1cm5zIHsoUGFydHxudWxsKX0gUGFydCByZW1vdmVkIG9yIG51bGwgaWYgbm90aGluZyB3YXMgcmVtb3ZlZFxyXG4gICAgICovXHJcbiAgICByZW1vdmVQYXJ0KGxvYywgcGFydHMgPSB0aGlzLnBhcnRzLCBzaWJsaW5nSW5kZXggPSAwKSB7XHJcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBwYXJ0cy5sZW5ndGg7ICsrcCkge1xyXG4gICAgICAgICAgICBpZiAoZXh0cmFjdFVubW9kaWZpZWRMb2NhdGlvbihwYXJ0c1twXS5sb2MpID09PSBsb2MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nSW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1zaWJsaW5nSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkUGFydCA9IHBhcnRzW3BdO1xyXG4gICAgICAgICAgICAgICAgcGFydHMuc3BsaWNlKHAsIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb1JlbW92ZVBhcnQob2xkUGFydCwgcGFydHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBvbGRQYXJ0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGRvUmVtb3ZlUGFydChvbGRQYXJ0LCBwYXJ0cykge1xyXG4gICAgICAgIC8vIGVuc3VyZSBhY2NvbXBhbnlpbmcgc2hhZG93cyBhcmUgYWxzbyByZW1vdmVkXHJcbiAgICAgICAgaWYgKG9sZFBhcnQuc2hhZGluZ1BhcnRzKSB7XHJcbiAgICAgICAgICAgIG9sZFBhcnQuc2hhZGluZ1BhcnRzLmZvckVhY2goKHNoYWRpbmdQYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNwZWNpZmljUGFydChzaGFkaW5nUGFydCwgdGhpcy5zaGFkaW5nUGFydHMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlY3Vyc2l2ZWx5IHJlbW92ZSBhbnkgY2hpbGQgcGFydHNcclxuICAgICAgICBpZiAob2xkUGFydC5oYXNPd25Qcm9wZXJ0eShcImNoaWxkUGFydHNcIikpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRQYXJ0cyA9IG9sZFBhcnQuY2hpbGRQYXJ0cztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZFBhcnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7Y2hpbGRMb2N9ID0gZ2V0Q2hpbGRMb2NhdGlvbihvbGRQYXJ0LmxvYywgY2hpbGRQYXJ0c1tpXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVBhcnQoY2hpbGRMb2MsIHBhcnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlSGFpcihuZXdIYWlyKSB7XHJcbiAgICAgICAgLy8gY2xlYXIgaGFpciBwYXJ0c1xyXG4gICAgICAgIC8vIHJlbW92ZSBhbnkgc2hhZG93cyBtYW51YWxseVxyXG4gICAgICAgIHRoaXMuaGFpclBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBhcnQuc2hhZGluZ1BhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0LnNoYWRpbmdQYXJ0cy5mb3JFYWNoKChzaGFkaW5nUGFydFByb3RvdHlwZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU3BlY2lmaWNQYXJ0KHNoYWRpbmdQYXJ0UHJvdG90eXBlLCB0aGlzLnNoYWRpbmdQYXJ0cyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaGFpclBhcnRzID0gW107XHJcblxyXG4gICAgICAgIG5ld0hhaXIuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmF0dGFjaFBhcnQoSGFpci5jcmVhdGUocGFydCksIHRoaXMuaGFpclBhcnRzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleHByZXNzaW9uIG1hbmlwdWxhdGlvblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBseSBhbiBleHByZXNzaW9uLCByZXBsYWNpbmcgdGhlIGN1cnJlbnQgZXhwcmVzc2lvblxyXG4gICAgICogQHBhcmFtIHtFeHByZXNzaW9ufSBleHByZXNzaW9uIEFsbCBleHByZXNzaW9uIGFyZSBrZXB0IGluIEV4cHJlc3Npb25cclxuICAgICAqL1xyXG4gICAgYXBwbHlFeHByZXNzaW9uKGV4cHJlc3Npb24pIHtcclxuICAgICAgICBpZiAoZXhwcmVzc2lvbi5oYXNPd25Qcm9wZXJ0eShcIk1vZHNcIikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZXhwcmVzc2lvbiBvYmplY3Qgc2luY2UgaXQgaGFzIG5vIE1vZHNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVtb3ZlRXhwcmVzc2lvbigpO1xyXG5cclxuICAgICAgICAvLyBhcHBseSBtb2RpZmllcnNcclxuICAgICAgICBmb3IgKGxldCBtb2QgaW4gZXhwcmVzc2lvbi5Nb2RzKSB7XHJcbiAgICAgICAgICAgIGlmIChleHByZXNzaW9uLk1vZHMuaGFzT3duUHJvcGVydHkobW9kKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Nb2RzW21vZF0gKz0gZXhwcmVzc2lvbi5Nb2RzW21vZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFueSBzcGVjaWFsIG1vZGlmaWNhdGlvbnNcclxuICAgICAgICBpZiAoZXhwcmVzc2lvbi5oYXNPd25Qcm9wZXJ0eShcInNwZWNpZmljTW9kaWZpY2F0aW9uXCIpKSB7XHJcbiAgICAgICAgICAgIGlmIChleHByZXNzaW9uLmhhc093blByb3BlcnR5KFwicmVtb3ZlU3BlY2lmaWNNb2RpZmljYXRpb25cIikpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cHJlc3Npb24gaGFzIHNwZWNpZmljIG1vZGlmaWNhdGlvbnMgYnV0IG5vIHdheSBvZiByZW1vdmluZyB0aGVtXCIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhcHBseSBzcGVjaWZpYyBvcGVyYXRpb25zIG9uIHRoZSBQbGF5ZXIgb2JqZWN0XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb24uc3BlY2lmaWNNb2RpZmljYXRpb24odGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb24gPSBleHByZXNzaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUV4cHJlc3Npb24oKSB7XHJcbiAgICAgICAgLy8gcmVtb3ZlIG1vZGlmaWVyc1xyXG4gICAgICAgIGZvciAobGV0IG1vZCBpbiB0aGlzLl9leHByZXNzaW9uLk1vZHMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb24uTW9kcy5oYXNPd25Qcm9wZXJ0eShtb2QpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLk1vZHNbbW9kXSAtPSB0aGlzLl9leHByZXNzaW9uLk1vZHNbbW9kXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2V4cHJlc3Npb24uaGFzT3duUHJvcGVydHkoXCJyZW1vdmVTcGVjaWZpY01vZGlmaWNhdGlvblwiKSkge1xyXG4gICAgICAgICAgICAvLyBhcHBseSBzcGVjaWZpYyBvcGVyYXRpb25zIG9uIHRoZSBQbGF5ZXIgb2JqZWN0XHJcbiAgICAgICAgICAgIHRoaXMuX2V4cHJlc3Npb24ucmVtb3ZlU3BlY2lmaWNNb2RpZmljYXRpb24odGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNsb3RoaW5nIG1hbmlwdWxhdGlvblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaW5kIHRoZSBjbG90aGVzIHRoYXQgb2NjdXBpZXMgYSBjZXJ0YWluIGJvZHkgbG9jYXRpb25cclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBVbm1vZGlmaWVkIGJvZHkgbG9jYXRpb25cclxuICAgICAqIEByZXR1cm5zIHtDbG90aGluZ1tdfSBsaXN0IG9mIENsb3RoZXMgb2JqZWN0cyB0aGF0IGNvdmVyIHRoYXQgYm9keSBsb2NhdGlvblxyXG4gICAgICovXHJcbiAgICBnZXRDbG90aGluZ0luTG9jYXRpb24obG9jYXRpb24pIHtcclxuICAgICAgICBjb25zdCBjbG90aGVzID0gW107XHJcbiAgICAgICAgdGhpcy5jbG90aGluZ1BhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24ocGFydC5sb2MpID09PSBsb2NhdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgY2xvdGhlcy5pbmRleE9mKHBhcnQuX293bmVyKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGNsb3RoZXMucHVzaChwYXJ0Ll9vd25lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2xvdGhlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmQgY3VycmVudGx5IHdvcm4gY2xvdGhpbmcgdGhhdCBjb25mbGljdHMgd2l0aCBnaXZlbiBjbG90aGluZ1xyXG4gICAgICogQHBhcmFtIGNsb3RoaW5nIFRoZVxyXG4gICAgICogQHBhcmFtIGxvY2F0aW9uIE1vZGlmaWVkIGJvZHkgbG9jYXRpb25cclxuICAgICAqIEByZXR1cm5zIHtDbG90aGluZ1tdfSBsaXN0IG9mIENsb3RoZXMgb2JqZWN0cyB0aGF0IGNvbmZsaWN0IHdpdGggdGhpcyBjbG90aGluZ1xyXG4gICAgICovXHJcbiAgICBnZXRDb25mbGljdGluZ0Nsb3RoaW5nKGNsb3RoaW5nKSB7XHJcbiAgICAgICAgY29uc3QgY2xvdGhlcyA9IFtdO1xyXG4gICAgICAgIGNsb3RoaW5nLnBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYmFzZUxvYyA9IGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24ocGFydC5sb2MpO1xyXG4gICAgICAgICAgICBjb25zdCBtb2RpZmllciA9IGV4dHJhY3RMb2NhdGlvbk1vZGlmaWVyKHBhcnQubG9jKTtcclxuICAgICAgICAgICAgdGhpcy5jbG90aGluZ1BhcnRzLmZvckVhY2goKHdvcm5QYXJ0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBleGlzdCBpbiB0aGUgc2FtZSBsb2NhdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24od29yblBhcnQubG9jKSA9PT0gYmFzZUxvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZW1vdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgaWYgdGhleSBkb24ndCBvY2N1cHkgdGhlIHNhbWUgY2xvdGhpbmcgbGF5ZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAod29yblBhcnQuX293bmVyLmNsb3RoaW5nTGF5ZXIgIT09IGNsb3RoaW5nLmNsb3RoaW5nTGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBhbHdheXMgcmVtb3ZlIGlmIGluY29taW5nIGNsb3RoaW5nIGlzIHRoZSBzYW1lIHR5cGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHdvcm5QYXJ0Ll9vd25lcikgPT09XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihjbG90aGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHNlZSBpZiBtb2RpZmllcnMgY29uZmxpY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29ybk1vZGlmaWVyID0gZXh0cmFjdExvY2F0aW9uTW9kaWZpZXIod29yblBhcnQubG9jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FuJ3QgY29leGlzdCBkdWUgdG8gbW9kaWZpZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RpZmllciA9PT0gXCItXCIgfHwgd29ybk1vZGlmaWVyID09PSBcIi1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3QgYWxsb3dlZCBieSB0b2xlcmFudCBtb2RpZmllcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobW9kaWZpZXIgIT09IFwiK1wiICYmIHdvcm5Nb2RpZmllciAhPT0gXCIrXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBhbHJlYWR5IHJlbW92aW5nIHRoaXMgY2xvdGhpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlICYmIGNsb3RoZXMuaW5kZXhPZih3b3JuUGFydC5fb3duZXIpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG90aGVzLnB1c2god29yblBhcnQuX293bmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjbG90aGVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2VhciBhIENsb3RoaW5nIGl0ZW1cclxuICAgICAqIEBwYXJhbSB7Q2xvdGhpbmd9IGNsb3RoaW5nIENsb3RoaW5nIHRvIGJlIHdvcm5cclxuICAgICAqIEByZXR1cm5zIHsoQ2xvdGhpbmdbXXxudWxsKX0gbnVsbCBpZiBmYWlsZWQgdG8gd2VhciBjbG90aGluZywgb3IgdGhlIGxpc3Qgb2YgcmVtb3ZlZFxyXG4gICAgICogY29uZmxpY3RpbmcgY2xvdGhlc1xyXG4gICAgICovXHJcbiAgICB3ZWFyQ2xvdGhpbmcoY2xvdGhpbmcpIHtcclxuICAgICAgICAvLyByZW1vdmUgY2xvdGhpbmcgaW4gc2FtZSBsb2NhdGlvblxyXG4gICAgICAgIGNvbnN0IHJlbW92ZWRDbG90aGluZyA9IHRoaXMuZ2V0Q29uZmxpY3RpbmdDbG90aGluZyhjbG90aGluZyk7XHJcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCByZW1vdmVkQ2xvdGhpbmcubGVuZ3RoOyArK2MpIHtcclxuICAgICAgICAgICAgLy8gZmFpbCB0byByZW1vdmU7IGRvbid0IGF1dG9tYXRpY2FsbHkgcmVjb3ZlciBwYXJ0aWFsbHkgcmVtb3ZlZFxyXG4gICAgICAgICAgICBpZiAodGhpcy5yZW1vdmVDbG90aGluZyhyZW1vdmVkQ2xvdGhpbmdbY10pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRoZSB0eXBlIG9mIHBhcnRzIHRoYXQgdGhpcyBjbG90aGluZyByZXF1aXJlcyB0byBleGlzdFxyXG4gICAgICAgIC8vIGVnLiBwYXJ0cywgZmFjZVBhcnRzLCBkZWNvcmF0aXZlUGFydHNcclxuICAgICAgICBjb25zdCByZXF1aXJlZFBhcnRzID0gdGhpc1tjbG90aGluZy5yZXF1aXJlZFBhcnRzXSB8fCB0aGlzLnBhcnRzO1xyXG5cclxuICAgICAgICBsZXQgc29tZVBhcnRXYXNBdHRhY2hlZCA9IGZhbHNlO1xyXG4gICAgICAgIC8vIHN1Y2Nlc3NmdWxseSByZW1vdmVkIGNsb3RoaW5nXHJcbiAgICAgICAgY2xvdGhpbmcucGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIGJhc2UgcGFydCB0byBhdHRhY2ggdGhpcyBjbG90aGluZyBwYXJ0IHRvXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdldFBhcnRJbkxvY2F0aW9uKGV4dHJhY3RVbm1vZGlmaWVkTG9jYXRpb24ocGFydC5sb2MpLCByZXF1aXJlZFBhcnRzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG90aGluZ1BhcnRzLnB1c2gocGFydCk7XHJcbiAgICAgICAgICAgICAgICBzb21lUGFydFdhc0F0dGFjaGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJ0LnNoYWRpbmdQYXJ0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnQuc2hhZGluZ1BhcnRzLmZvckVhY2goKHNoYWRpbmdQYXJ0UHJvdG90eXBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNoUGFydChQYXJ0LmNyZWF0ZShzaGFkaW5nUGFydFByb3RvdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtfb3duZXI6IGNsb3RoaW5nfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYWRpbmdQYXJ0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gaWYgbm8gcGFydCBjYW4gYmUgYXR0YWNoZWQgdGhlbiB0aGUgY2xvdGhpbmcgY2Fubm90IGJlIGFkZGVkXHJcbiAgICAgICAgaWYgKHNvbWVQYXJ0V2FzQXR0YWNoZWQpIHtcclxuICAgICAgICAgICAgYXBwbHlNb2RzKHRoaXMuTW9kcywgY2xvdGhpbmcuTW9kcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvdGhlcy5wdXNoKGNsb3RoaW5nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByZXdlYXIgd2hhdGV2ZXIncyByZW1vdmVkXHJcbiAgICAgICAgICAgIHJlbW92ZWRDbG90aGluZy5mb3JFYWNoKChyZW1vdmVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndlYXJDbG90aGluZyhyZW1vdmVkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZWRDbG90aGluZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBhbiBhcnRpY2xlIG9mIGNsb3RoaW5nXHJcbiAgICAgKiBAcGFyYW0ge0Nsb3RoaW5nfSBjbG90aGluZ1xyXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgY2xvdGhpbmcgd2FzIHN1Y2Nlc3NmdWxseSByZW1vdmVkXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUNsb3RoaW5nKGNsb3RoaW5nKSB7XHJcbiAgICAgICAgLy8gZmlyc3QgY2hlY2sgdG8gc2VlIGlmIHdlIGFjdHVhbGx5IGhhdmUgdGhpcyBwaWVjZSBvZiBjbG90aGluZ1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZWRDbG90aGluZ0luZGV4ID0gdGhpcy5jbG90aGVzLmluZGV4T2YoY2xvdGhpbmcpO1xyXG4gICAgICAgIGlmIChyZW1vdmVkQ2xvdGhpbmdJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb3B5IG92ZXIgbm9uLXJlbW92ZWQgcGFydHMgdG8gbmV3IGxpc3RcclxuICAgICAgICBpZiAoY2xvdGhpbmcuY3Vyc2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV3UGFydHMgPSBbXTtcclxuICAgICAgICB0aGlzLmNsb3RoaW5nUGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGFydC5fb3duZXIgIT09IGNsb3RoaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdQYXJ0cy5wdXNoKHBhcnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcnQuc2hhZGluZ1BhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydC5zaGFkaW5nUGFydHMuZm9yRWFjaCgoc2hhZGluZ1BhcnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTcGVjaWZpY1BhcnQoc2hhZGluZ1BhcnQsIHRoaXMuc2hhZGluZ1BhcnRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3RoaW5nUGFydHMgPSBuZXdQYXJ0cztcclxuICAgICAgICByZW1vdmVNb2RzKHRoaXMuTW9kcywgY2xvdGhpbmcuTW9kcyk7XHJcbiAgICAgICAgaWYgKHJlbW92ZWRDbG90aGluZ0luZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3RoZXMuc3BsaWNlKHJlbW92ZWRDbG90aGluZ0luZGV4LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGFueSBjbG90aGluZyBvZiBhcnRpY2xlIHRoYXQgY2FuIGJlIHJlbW92ZWRcclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgb2YgY2xvdGhpbmcgdGhhdCB3YXMgcmVtb3ZlZFxyXG4gICAgICovXHJcbiAgICByZW1vdmVBbGxDbG90aGluZygpIHtcclxuICAgICAgICBjb25zdCByZW1vdmVkQ2xvdGhpbmcgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBjbG90aGluZ0luZGV4ID0gdGhpcy5jbG90aGVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICBjbG90aGluZ0luZGV4ID49IDA7XHJcbiAgICAgICAgICAgICAtLWNsb3RoaW5nSW5kZXgpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xvdGhpbmcgPSB0aGlzLmNsb3RoZXNbY2xvdGhpbmdJbmRleF07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbW92ZUNsb3RoaW5nKGNsb3RoaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENsb3RoaW5nLnB1c2goY2xvdGhpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZW1vdmVkQ2xvdGhpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gaXRlbSBtYW5pcHVsYXRpb25cclxuICAgIHdpZWxkSXRlbShpdGVtKSB7XHJcbiAgICAgICAgSXRlbXMubG9hZEl0ZW0oaXRlbSk7XHJcbiAgICAgICAgaXRlbS5tb2RpZnlQb3NlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUl0ZW0oaXRlbSkge1xyXG4gICAgICAgIGl0ZW0ucmVzdG9yZVBvc2UuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLml0ZW1zLnNwbGljZSh0aGlzLml0ZW1zLmluZGV4T2YoaXRlbSksIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFRhdHRvbyh0YXR0b28pIHtcclxuICAgICAgICBUYXR0b29zLmxvYWRUYXR0b28odGF0dG9vKTtcclxuICAgICAgICB0aGlzLnRhdHRvb3MucHVzaCh0YXR0b28pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVRhdHRvbyh0YXR0b28pIHtcclxuICAgICAgICB0aGlzLnRhdHRvb3Muc3BsaWNlKHRoaXMudGF0dG9vcy5pbmRleE9mKHRhdHRvbyksIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGhlaWdodEFkanVzdCgpIHtcclxuICAgICAgICBsZXQgZXh0cmFIZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICAvLyB0YWtlIHRoZSBtYXggaGVpZ2h0IG9mIHdoYXQncyBiZWluZyB3b3JuIGluIHNob2VzIGxvY2F0aW9uXHJcbiAgICAgICAgdGhpcy5nZXRDbG90aGluZ0luTG9jYXRpb24oXCJsZWZ0IGZlZXRcIikuZm9yRWFjaChnZXRNYXhIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xvdGhpbmdJbkxvY2F0aW9uKFwicmlnaHQgZmVldFwiKS5mb3JFYWNoKGdldE1heEhlaWdodCk7XHJcblxyXG4gICAgICAgIHJldHVybiBleHRyYUhlaWdodDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWF4SGVpZ2h0KGNsb3RoaW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChjbG90aGluZy5zaG9lSGVpZ2h0ICYmIGNsb3RoaW5nLnNob2VIZWlnaHQgPiBleHRyYUhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgZXh0cmFIZWlnaHQgPSBjbG90aGluZy5zaG9lSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsb3RoaW5nLmhhc093blByb3BlcnR5KFwicGxhdGZvcm1IZWlnaHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRyYUhlaWdodCArPSBjbG90aGluZy5wbGF0Zm9ybUhlaWdodCAqIDAuMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpc0ZlbWFsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZW0gPiA1O1xyXG4gICAgfVxyXG5cclxuICAgIGlzTWFsZSgpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuaXNGZW1hbGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3ZpZGUgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIG1pc3NpbmcgZHJhd3BvaW50c1xyXG4gICAgICogQHBhcmFtIGV4XHJcbiAgICAgKi9cclxuICAgIGZpbGxNaXNzaW5nRHJhd3BvaW50cyhleCkge1xyXG4gICAgICAgIC8vIFRPRE8gbWFrZSB0aGlzIHNrZWxldG9uLXNwZWNpZmljIHNpbmNlIHRoZSBleHBlY3RlZCBwYXJ0cyBtYXkgYmUgZGlmZmVyZW50XHJcbiAgICAgICAgZXguZGVsdG9pZHMgPSBleC5kZWx0b2lkcyB8fCBleHRyYWN0UG9pbnQoZXguY29sbGFyYm9uZSk7XHJcbiAgICAgICAgZXguc2hvdWxkZXIgPSBleC5zaG91bGRlciB8fCBleHRyYWN0UG9pbnQoZXguY29sbGFyYm9uZSk7XHJcbiAgICAgICAgZXguZWxib3cgPSBleC5lbGJvdyB8fCB7XHJcbiAgICAgICAgICAgIG91dDogZXh0cmFjdFBvaW50KGV4LnNob3VsZGVyKSxcclxuICAgICAgICAgICAgaW4gOiBleHRyYWN0UG9pbnQoZXguYXJtcGl0KVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZXgud3Jpc3QgPSBleC53cmlzdCB8fCB7XHJcbiAgICAgICAgICAgIG91dDogZXh0cmFjdFBvaW50KGV4LmVsYm93Lm91dCksXHJcbiAgICAgICAgICAgIGluIDogZXh0cmFjdFBvaW50KGV4LmVsYm93LmluKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtjb25uZWN0RW5kUG9pbnRzLCBjb3Zlck5pcHBsZXNJZkhhdmVOb0JyZWFzdHN9IGZyb20gXCIuLi9kcmF3L2RyYXdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7c2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uL3V0aWwvZHJhd1wiO1xyXG5pbXBvcnQge0xvbmdTbGVldmVQYXJ0LCBjYWxjU3dlYXRlckJhc2UsIGNhbGNMb25nU2xlZXZlfSBmcm9tIFwiLi9zd2VhdGVyXCI7XHJcbmltcG9ydCB7Y2FsY0phY2tldH0gZnJvbSBcIi4vamFja2V0XCI7XHJcbmltcG9ydCB7XHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICByZXZlcnNlRHJhd1BvaW50LFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIG5vbmUsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG4gICAgYWRqdXN0LFxyXG4gICAgY2xhbXAsXHJcbiAgICBkcmF3Q2lyY2xlLFxyXG4gICAgYnJlYWtQb2ludCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsY0RyZXNzU2hpcnQoZXgpIHtcclxuICAgIGNvbnN0IHtvdXRCb3QsIG91dE1pZCwgYnJlYXN0Qm90LCBicmVhc3RUaXAsIG91dFRvcH0gPSBjYWxjSmFja2V0LmNhbGwoXHJcbiAgICAgICAgdGhpcyxcclxuICAgICAgICBleCk7XHJcbiAgICBsZXQge3RvcCwgY3VzcCwgY29sbGFyYm9uZSwgYm90fSA9IGNhbGNTd2VhdGVyQmFzZS5jYWxsKHRoaXMsIGV4KTtcclxuXHJcbiAgICB0b3AueCArPSB0aGlzLnRvcFBhcnRlZDtcclxuICAgIHRvcC55IC09IHRoaXMudG9wUGFydGVkICogMC40O1xyXG4gICAgYm90LmJvdC54ICs9IHRoaXMuYm90UGFydGVkO1xyXG4gICAgYm90LmJvdCA9IGNvbm5lY3RFbmRQb2ludHModG9wLCBib3QuYm90LCAodGhpcy50b3BQYXJ0ZWQgKyB0aGlzLmJvdFBhcnRlZCkgKiAtMC4wMSk7XHJcbiAgICBvdXRCb3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKGJvdC5ib3QsIG91dEJvdCwgMC41LCAtMSk7XHJcblxyXG4gICAgY3VzcCA9IHJldmVyc2VEcmF3UG9pbnQoY3VzcCwgY29sbGFyYm9uZSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjb2xsYXJib25lLFxyXG4gICAgICAgIGN1c3AsXHJcbiAgICAgICAgdG9wLFxyXG4gICAgICAgIGJvdCxcclxuICAgICAgICBvdXRCb3QsXHJcbiAgICAgICAgb3V0TWlkLFxyXG4gICAgICAgIGJyZWFzdEJvdCxcclxuICAgICAgICBicmVhc3RUaXAsXHJcbiAgICAgICAgb3V0VG9wXHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogQ2xvdGhpbmdQYXJ0IGRyYXduIGNsYXNzZXMvY29tcG9uZW50c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERyZXNzU2hpcnRCYXNlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiXVxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICBjb2xsYXJib25lLFxyXG4gICAgICAgICAgICBjdXNwLFxyXG4gICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgb3V0Qm90LFxyXG4gICAgICAgICAgICBvdXRNaWQsXHJcbiAgICAgICAgICAgIGJyZWFzdEJvdCxcclxuICAgICAgICAgICAgYnJlYXN0VGlwLFxyXG4gICAgICAgIH0gPSBjYWxjRHJlc3NTaGlydC5jYWxsKHRoaXMsIGV4KTtcclxuXHJcbiAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIGNvbGxhcmJvbmUsXHJcbiAgICAgICAgICAgIGN1c3AsXHJcbiAgICAgICAgICAgIHRvcCxcclxuICAgICAgICAgICAgYm90LmJvdCxcclxuICAgICAgICAgICAgb3V0Qm90LFxyXG4gICAgICAgICAgICBvdXRNaWQsXHJcbiAgICAgICAgICAgIGJyZWFzdEJvdCxcclxuICAgICAgICAgICAgYnJlYXN0VGlwLFxyXG4gICAgICAgICAgICBleHRyYWN0UG9pbnQoZXguYXJtcGl0KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguY2xpcCgpO1xyXG5cclxuICAgICAgICAvLyBsaW5pbmdcclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLmxpbmluZ1BhdHRlcm4sXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IG5vbmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmluZ1dpZHRoO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgdG9wLCBib3QuYm90KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRHJlc3NTaGlydENvbGxhclBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK25lY2tcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgY29uc3Qge2NvbGxhcmJvbmUsIGN1c3AsIHRvcCx9ID0gY2FsY0RyZXNzU2hpcnQuY2FsbCh0aGlzLCBleCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNwID0gc3BsaXRDdXJ2ZSgxIC0gdGhpcy5jb2xsYXJDb3ZlcmFnZSwgY29sbGFyYm9uZSwgY3VzcCk7XHJcbiAgICAgICAgY29uc3Qgb3V0ID0gc3AubGVmdC5wMjtcclxuXHJcbiAgICAgICAgY29uc3QgYm90ID0gYWRqdXN0KGV4dHJhY3RQb2ludCh0b3ApLFxyXG4gICAgICAgICAgICB0aGlzLmNvbGxhcldpZHRoICsgdGhpcy50b3BQYXJ0ZWQgKiAwLjI1LFxyXG4gICAgICAgICAgICAtdGhpcy5jb2xsYXJIZWlnaHQgKyB0aGlzLnRvcFBhcnRlZCAqIDAuMyk7XHJcblxyXG4gICAgICAgIC8vIHNjYWxlIHRvIHNpbXVsYXRlIGNsb3RoaW5nIHRoaWNrbmVzc1xyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IG5vbmUsXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuY29sbGFyUGF0dGVyblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleCk7XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgb3V0LFxyXG4gICAgICAgICAgICBjdXNwLFxyXG4gICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgb3V0XHJcbiAgICAgICAgKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERyZXNzU2hpcnRCdXR0b25QYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcIit0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgZm9yY2VkTm9TaWRlU3RyaW5nIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGFib3ZlU2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYnV0dG9uU3Ryb2tlICAgOiBcIiNmZmZcIixcclxuICAgICAgICAgICAgYnV0dG9uRmlsbCAgICAgOiBcIiNjY2NcIixcclxuICAgICAgICAgICAgYnV0dG9uUmFkaXVzICAgOiAxLFxyXG4gICAgICAgICAgICBidXR0b25UaGlja25lc3M6IDEsXHJcbiAgICAgICAgICAgIGJ1dHRvbkNvdmVyYWdlIDogMC43N1xyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgY29uc3Qge3RvcCwgYm90fSA9IGNhbGNEcmVzc1NoaXJ0LmNhbGwodGhpcywgZXgpO1xyXG5cclxuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCB0ID0gMC4xOyB0IDwgMTsgdCArPSAoMS4wMDEgLSB0aGlzLmJ1dHRvbkNvdmVyYWdlKSkge1xyXG4gICAgICAgICAgICBjb25zdCBzcCA9IHNwbGl0Q3VydmUodCwgdG9wLCBib3QuYm90KTtcclxuICAgICAgICAgICAgbGV0IHNoaWZ0ZWRYID0gMDtcclxuICAgICAgICAgICAgLy8gd2hlbiB0aGUgYnV0dG9uIGlzIHVuZG9uZVxyXG4gICAgICAgICAgICBpZiAoc3AubGVmdC5wMi54ID4gMC4yIHx8IHNwLmxlZnQucDIueCA8IC0wLjIpIHtcclxuICAgICAgICAgICAgICAgIHNoaWZ0ZWRYID0gY2xhbXAoTWF0aC5hYnMoc3AubGVmdC5wMi54KSwgMCwgdGhpcy5idXR0b25SYWRpdXMgKiAxLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IGFkanVzdChzcC5sZWZ0LnAyLCBzaGlmdGVkWCwgMCk7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKC4uLmRyYXdDaXJjbGUoY2VudGVyLCB0aGlzLmJ1dHRvblJhZGl1cyksIGJyZWFrUG9pbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgc2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5idXR0b25TdHJva2UsXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuYnV0dG9uRmlsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmJ1dHRvblRoaWNrbmVzcztcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG4gICAgICAgICAgICAuLi5wb2ludHNcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERyZXNzU2hpcnRCcmVhc3RQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIitjaGVzdFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG4gICAgICAgIGlmIChjb3Zlck5pcHBsZXNJZkhhdmVOb0JyZWFzdHMoZXgsIGN0eCwgdGhpcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2xpcCB0byBiYXNlXHJcbiAgICAgICAgbGV0IHRvcFRvcDtcclxuICAgICAgICBsZXQgYm90Qm90O1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgY29sbGFyYm9uZSxcclxuICAgICAgICAgICAgICAgIGN1c3AsXHJcbiAgICAgICAgICAgICAgICB0b3AsXHJcbiAgICAgICAgICAgICAgICBib3QsXHJcbiAgICAgICAgICAgICAgICBvdXRCb3QsXHJcbiAgICAgICAgICAgIH0gPSBjYWxjRHJlc3NTaGlydC5jYWxsKHRoaXMsIGV4KTtcclxuICAgICAgICAgICAgYm90Qm90ID0gYm90LmJvdDtcclxuICAgICAgICAgICAgdG9wVG9wID0gdG9wO1xyXG5cclxuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgICAgIGNvbGxhcmJvbmUsXHJcbiAgICAgICAgICAgICAgICBjdXNwLFxyXG4gICAgICAgICAgICAgICAgdG9wLFxyXG4gICAgICAgICAgICAgICAgYm90LmJvdCxcclxuICAgICAgICAgICAgICAgIG91dEJvdCxcclxuICAgICAgICAgICAgICAgIC8vIGRvbid0IGNsaXAgb3V0ZXIgc2lkZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IG91dEJvdC54ICsgNTAsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogb3V0Qm90LnlcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogY29sbGFyYm9uZS54ICsgNTAsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogY29sbGFyYm9uZS55XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0b3AgPSBhZGp1c3QoZXguYnJlYXN0LnRvcCwgMCwgMCk7XHJcbiAgICAgICAgY29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcbiAgICAgICAgY29uc3QgYm90ID0gYWRqdXN0KGV4LmJyZWFzdC5ib3QsIDAsIC0wLjEpO1xyXG4gICAgICAgIGNvbnN0IGNsZWF2YWdlID0gYWRqdXN0KGV4LmJyZWFzdC5jbGVhdmFnZSwgMCwgLTAuMSk7XHJcbiAgICAgICAgY29uc3QgaW5uZXIgPSBhZGp1c3QoZXguYnJlYXN0LmluLCAwLCAtMC4xKTtcclxuXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIHRvcCxcclxuICAgICAgICAgICAgdGlwLFxyXG4gICAgICAgICAgICBib3QsXHJcbiAgICAgICAgICAgIGlubmVyLFxyXG4gICAgICAgICAgICBjbGVhdmFnZSxcclxuICAgICAgICAgICAgY29ubmVjdEVuZFBvaW50cyhjbGVhdmFnZSwgdG9wKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguY2xpcCgpO1xyXG5cclxuICAgICAgICAvLyBsaW5pbmdcclxuICAgICAgICBzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLmxpbmluZ1BhdHRlcm4sXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IG5vbmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmluZ1dpZHRoO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgdG9wVG9wLCBib3RCb3QpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMb25nU2xlZXZlQ3VmZlBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuQVJNUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrYXJtXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCJdLFxyXG4gICAgICAgICAgICBhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJhcm1cIl0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBjdWZmUGF0dGVybjogXCIjYTRjM2NhXCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIGVsYm93T3V0LFxyXG4gICAgICAgICAgICBvdXQsXHJcbiAgICAgICAgICAgIGJvdCxcclxuICAgICAgICAgICAgZWxib3csXHJcbiAgICAgICAgfSA9IGNhbGNMb25nU2xlZXZlLmNhbGwodGhpcywgZXgpO1xyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC43LCBlbGJvd091dCwgb3V0KTtcclxuICAgICAgICBjb25zdCBvdXRUb3AgPSBhZGp1c3Qoc3AucmlnaHQucDEsIDEuNSwgMCk7XHJcbiAgICAgICAgb3V0LmNwMSA9IHNwLnJpZ2h0LnAyLmNwMTtcclxuICAgICAgICBvdXQuY3AyID0gc3AucmlnaHQucDIuY3AyO1xyXG5cclxuICAgICAgICBzcCA9IHNwbGl0Q3VydmUoMC4zLCBib3QsIGVsYm93KTtcclxuICAgICAgICBjb25zdCBpblRvcCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgIC8vIHNjYWxlIHRvIHNpbXVsYXRlIGNsb3RoaW5nIHRoaWNrbmVzc1xyXG4gICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IG5vbmUsXHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuY3VmZlBhdHRlcm5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgIG91dFRvcCxcclxuICAgICAgICAgICAgb3V0LFxyXG4gICAgICAgICAgICBib3QsXHJcbiAgICAgICAgICAgIGluVG9wLFxyXG4gICAgICAgICAgICBvdXRUb3BcclxuICAgICAgICApO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblxyXG4gICAgICAgIC8vIGN1ZmYgYnV0dG9uc1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uU2NhbGUgPSAwLjU7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IGRyYXdDaXJjbGUoYWRqdXN0KG91dFRvcCwgLTIsIC0yKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uUmFkaXVzICogYnV0dG9uU2NhbGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2NhbGUgdG8gc2ltdWxhdGUgY2xvdGhpbmcgdGhpY2tuZXNzXHJcbiAgICAgICAgICAgIHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5idXR0b25TdHJva2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmJ1dHRvbkZpbGwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXgpO1xyXG4gICAgICAgICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5idXR0b25UaGlja25lc3MgKiBidXR0b25TY2FsZTtcclxuXHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcbiAgICAgICAgICAgICAgICAuLi5wb2ludHNcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBCYXNlIENsb3RoaW5nIGNsYXNzZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEcmVzc1NoaXJ0IGV4dGVuZHMgQ2xvdGhpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5NSUQsXHJcblxyXG4gICAgICAgICAgICBzdG9tYWNoQ292ZXJhZ2U6IDAuOSxcclxuICAgICAgICAgICAgbmVja0NvdmVyYWdlICAgOiAwLFxyXG5cclxuICAgICAgICAgICAgbGluaW5nV2lkdGggIDogMy41LFxyXG4gICAgICAgICAgICBsaW5pbmdQYXR0ZXJuOiBcIiM5OGFhYWZcIixcclxuXHJcbiAgICAgICAgICAgIGNvbGxhckNvdmVyYWdlOiAwLjI1LFxyXG4gICAgICAgICAgICBjb2xsYXJIZWlnaHQgIDogNyxcclxuICAgICAgICAgICAgY29sbGFyV2lkdGggICA6IDMsXHJcbiAgICAgICAgICAgIGNvbGxhclBhdHRlcm4gOiBcIiNhNGMzY2FcIixcclxuXHJcbiAgICAgICAgICAgIC8vIHBhcnRpbmcgb2YgdGhlIHRvcCBhbmQgYm90dG9tIGluIHNoaXJ0IGluIGNtXHJcbiAgICAgICAgICAgIHRvcFBhcnRlZDogNCxcclxuICAgICAgICAgICAgYm90UGFydGVkOiAwLFxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEhvdyB0aWdodGx5IGl0IGNsaW5ncyB0byB0aGUgYm9keVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgY2xpbmc6IDAuNixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb25jcmV0ZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV29tZW5EcmVzc1NoaXJ0IGV4dGVuZHMgRHJlc3NTaGlydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBub25lO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDE5OC45LDQyLjIlLDgyLjQlKVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogRHJlc3NTaGlydEJhc2VQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBEcmVzc1NoaXJ0Q29sbGFyUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogRHJlc3NTaGlydEJyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTG9uZ1NsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvbmdTbGVldmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMb25nU2xlZXZlQ3VmZlBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTG9uZ1NsZWV2ZUN1ZmZQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBEcmVzc1NoaXJ0QnV0dG9uUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTWVuRHJlc3NTaGlydCBleHRlbmRzIERyZXNzU2hpcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgxOTguOSw0Mi4yJSw4Mi40JSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IERyZXNzU2hpcnRCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogRHJlc3NTaGlydENvbGxhclBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IERyZXNzU2hpcnRCcmVhc3RQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvbmdTbGVldmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMb25nU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogTG9uZ1NsZWV2ZUN1ZmZQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvbmdTbGVldmVDdWZmUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBEcmVzc1NoaXJ0QnV0dG9uUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZywgcHJvY2Vzc0Nsb3RoaW5nUGFydExvY2F0aW9ufSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtsb2NhdGVSZWxhdGl2ZVRvRHJhd3BvaW50LCBMb2NhdGlvbn0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7XHJcbiAgICBkcmF3UG9pbnRzLFxyXG5cdGRyYXdDaXJjbGUsXHJcblx0YWRqdXN0LFxyXG5cdGV4dHJhY3RQb2ludCxcclxuXHRicmVha1BvaW50LFxyXG5cdHJlZmxlY3QsXHJcblx0c3BsaXRDdXJ2ZSxcclxuXHRyYWRcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge1BpZXJjaW5nLEpld2Vscnl9IGZyb20gXCIuL2pld2VscnlcIjtcclxuXHJcbmltcG9ydCB7XHJcblx0cG9sYXIyY2FydGVzaWFuXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcbiBcclxuIFxyXG4gXHJcbmV4cG9ydCBjbGFzcyBCZWxseVBpZXJjaW5nU2ltcGxlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcblx0XHRcdGFib3ZlUGFydHM6IFtcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICByYWRpdXM6IDEuMyxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0Y29uc3QgY2VudGVyID0gZXguYmVsbHlidXR0b24uYm90O1xyXG5cdFx0Y29uc3Qgb3JpZ2luYWxGaWxsID0gdGhpcy5maWxsO1xyXG5cdFx0XHJcblx0XHRmdW5jdGlvbiBjaXJjbGUoY2VudGVyLHJhZGl1cyl7XHJcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBvcmlnaW5hbEZpbGw7XHJcblx0XHRcdGxldCBwb2ludHMgPSBkcmF3Q2lyY2xlKGNlbnRlciwgcmFkaXVzKTsgXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0Li4ucG9pbnRzXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHRcclxuXHRcdFx0XHJcblx0XHRcdHBvaW50cyA9IGRyYXdDaXJjbGUoIGFkanVzdChjZW50ZXIsMC4zKnJhZGl1cywwLjMqcmFkaXVzKSwgcmFkaXVzKjAuMyk7IFxyXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdC4uLnBvaW50c1xyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1x0XHJcblx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdGNpcmNsZShjZW50ZXIsIHRoaXMucmFkaXVzKTsgXHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQmVsbHlQaWVyY2luZ0FkdmFuY2VkUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcblx0XHRcdGFib3ZlUGFydHM6IFtcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICB0aGlja25lc3M6IDAuNSxcclxuXHRcdFx0cmFkaXVzOiAxLjMsXHJcblx0XHRcdHNlY29uZGFyeVJhZGl1czogMSxcclxuXHRcdFx0ZGlzdGFuY2U6IDEsXHJcblx0XHRcdGFib3ZlOiB0cnVlLFxyXG5cdFx0XHRhYm92ZTI6IHRydWUsXHJcblx0XHRcdGJlbGxvdzogZmFsc2UsXHJcblx0XHRcdGJlbGxvdzI6IGZhbHNlLFxyXG5cdFx0XHRjaGFpbjogdHJ1ZSxcclxuXHRcdFx0YmVsdDogZmFsc2UsXHJcblx0XHRcdGxpbms6IGZhbHNlLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRjb25zdCBjZW50ZXIgPSBleC5iZWxseWJ1dHRvbi5ib3Q7XHJcblx0XHRjb25zdCBvcmlnaW5hbEZpbGwgPSB0aGlzLmZpbGw7XHJcblx0XHRcclxuXHRcdGZ1bmN0aW9uIGNpcmNsZShjZW50ZXIscmFkaXVzKXtcclxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IG9yaWdpbmFsRmlsbDtcclxuXHRcdFx0bGV0IHBvaW50cyA9IGRyYXdDaXJjbGUoY2VudGVyLCByYWRpdXMpOyBcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0XHQuLi5wb2ludHNcclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcdFxyXG5cdFx0XHRcclxuXHRcdFx0cG9pbnRzID0gZHJhd0NpcmNsZSggYWRqdXN0KGNlbnRlciwwLjMqcmFkaXVzLDAuMypyYWRpdXMpLCByYWRpdXMqMC4zKTsgXHJcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0Li4ucG9pbnRzXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHRcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGZ1bmN0aW9uIGNoYWluKGNlbnRlcix4LHksdGhpY2tuZXNzKXtcclxuXHRcdFx0Y2VudGVyID0gZXh0cmFjdFBvaW50KGNlbnRlcik7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguc2V0TGluZURhc2goWzIsMl0pO1xyXG5cdFx0XHRjdHgubGluZVdpZHRoID0gdGhpY2tuZXNzO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IHRvcCA9IGFkanVzdChjZW50ZXIseCwwKTtcclxuXHRcdFx0bGV0IGJvdCA9IGFkanVzdChjZW50ZXIseCx5KTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsdG9wLGJvdCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0aWYodGhpcy5iZWx0KXtcclxuXHRcdFx0bGV0IG1pZCA9IHt4OmV4LmJlbGx5YnV0dG9uLmJvdC54LHk6ZXguYmVsbHlidXR0b24uYm90Lnl9O1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDAuNyxleC53YWlzdCxleC5oaXApO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IGxlZnQgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdFx0bGVmdC5jcDEgPSB7eDooKGxlZnQueCttaWQueCkqMC40KSx5OmV4LmhpcC55fTtcclxuXHRcdFx0XHRcclxuXHRcdFx0bGV0IHJpZ2h0ID0gcmVmbGVjdChsZWZ0KTtcclxuXHRcdFx0cmlnaHQuY3AxID0gcmVmbGVjdChsZWZ0LmNwMSk7XHJcblx0XHRcclxuXHRcdFx0Y3R4LnNldExpbmVEYXNoKFsyLCAyXSlcclxuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDAuNjtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxtaWQsbGVmdCxicmVha1BvaW50LG1pZCxyaWdodCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cdFxyXG5cdFx0XHJcblx0XHRpZih0aGlzLmNoYWluKXtcclxuXHRcdFx0Y2hhaW4oY2VudGVyLDAuNiwtNyx0aGlzLnRoaWNrbmVzcylcclxuXHRcdFx0Y2hhaW4oY2VudGVyLC0wLjYsLTksdGhpcy50aGlja25lc3MpXHJcblx0XHRcdFx0IFxyXG5cdFx0fTtcclxuXHRcdFx0XHJcblx0XHRpZih0aGlzLmxpbmspe1xyXG5cdFx0XHRsZXQgYm90ID0gZXh0cmFjdFBvaW50KGFkanVzdChjZW50ZXIsMCwtNiAqIHRoaXMuZGlzdGFuY2UpKTtcclxuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDAuNjtcclxuXHRcdFx0Y3R4LnNldExpbmVEYXNoKFsyLCAyXSk7XHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsY2VudGVyLGJvdCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHQgXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLmFib3ZlKXtcclxuXHRcdFx0Y2lyY2xlKCBcclxuXHRcdFx0XHRhZGp1c3QoY2VudGVyLDAsMy41ICogdGhpcy5kaXN0YW5jZSksICBcclxuXHRcdFx0XHQwLjcgKiB0aGlzLnNlY29uZGFyeVJhZGl1c1xyXG5cdFx0XHQpOyBcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYodGhpcy5hYm92ZTIpe1xyXG5cdFx0XHRjaXJjbGUoIFxyXG5cdFx0XHRcdGFkanVzdChjZW50ZXIsMCw2ICogdGhpcy5kaXN0YW5jZSksICBcclxuXHRcdFx0XHQwLjUgKiB0aGlzLnNlY29uZGFyeVJhZGl1c1xyXG5cdFx0XHQpOyBcclxuXHRcdH07XHJcblx0XHRcdFxyXG5cdFx0aWYodGhpcy5iZWxsb3cpe1xyXG5cdFx0XHRjaXJjbGUoIFxyXG5cdFx0XHRcdGFkanVzdChjZW50ZXIsMCwtMy41ICogdGhpcy5kaXN0YW5jZSksICBcclxuXHRcdFx0XHQwLjcgKiB0aGlzLnNlY29uZGFyeVJhZGl1c1xyXG5cdFx0XHQpOyBcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0aWYodGhpcy5iZWxsb3cyKXtcclxuXHRcdFx0Y2lyY2xlKCBcclxuXHRcdFx0XHRhZGp1c3QoY2VudGVyLDAsLTYgKiB0aGlzLmRpc3RhbmNlKSwgIFxyXG5cdFx0XHRcdDAuNSAqIHRoaXMuc2Vjb25kYXJ5UmFkaXVzXHJcblx0XHRcdCk7IFxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0Y2lyY2xlKGNlbnRlciwgdGhpcy5yYWRpdXMpOyBcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTmlwcGxlUGllcmNpbmdQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIC8qXHJcblx0XHRcdGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIitjaGVzdFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlLFxyXG5cdFx0XHRhYm92ZVBhcnRzOiBbXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXVxyXG5cdFx0XHQqL1xyXG5cdFx0XHRsYXllciAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuXHRcdFx0YWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIl0sXHJcblx0Ly9cdFx0YmVsb3dQYXJ0czogW1wiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCIsXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl1cclxuXHRcdFx0Ly9hYm92ZVBhcnRzOiBbXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYmFyOiB0cnVlLFxyXG5cdFx0XHRyaW5nOiB0cnVlLFxyXG5cdFx0XHRyYWRpdXM6IDAuNixcclxuXHRcdFx0cmluZ1JhZGl1czogMS40LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuMyxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHQvKmN0eC5zdHJva2VTdHlsZSA9IFwibmF2eVwiXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgZXguY2hlc3QubmlwcGxlcywgZXguY29sbGFyYm9uZSwgZXguaGlwKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcdFxyXG5cdFx0Ki9cclxuXHRcdFxyXG5cdFx0Y29uc3QgY2VudGVyID0gZXh0cmFjdFBvaW50KGV4LmNoZXN0Lm5pcHBsZXMpO1xyXG5cdFx0aWYodGhpcy5iYXIpe1xyXG5cdFx0XHRjaXJjbGUoY3R4LCBhZGp1c3QoY2VudGVyLDIsMCksIHRoaXMucmFkaXVzLCB0aGlzLmZpbGwpO1x0XHJcblx0XHRcdGNpcmNsZShjdHgsIGFkanVzdChjZW50ZXIsLTIsMCksIHRoaXMucmFkaXVzLCB0aGlzLmZpbGwpO1x0XHJcblx0XHR9O1xyXG5cdFx0aWYodGhpcy5yaW5nKXtcclxuXHRcdFx0bGV0IHBvaW50cyA9IGRyYXdDaXJjbGUoYWRqdXN0KGNlbnRlciwwLC10aGlzLnJpbmdSYWRpdXMpLCB0aGlzLnJpbmdSYWRpdXMsKTsgXHJcblx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnRoaWNrbmVzcztcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0XHQuLi5wb2ludHNcclxuXHRcdFx0KTtcclxuXHRcdFx0Ly9jdHguYXJjKGNlbnRlci54LCBjZW50ZXIueSwgdGhpcy5yYWRpdXMsIHJhZCgwKSwgcmFkKDkwKSk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcdFxyXG5cdFx0fTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFN0dWRQYXJ0MiBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBgJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbYGZhY2VQYXJ0cyAke0xvY2F0aW9uLk5PU0V9YF0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICByYWRpdXM6IDAuNTEsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHQgXHJcblx0XHRjb25zdCBjZW50ZXIgPSBsb2NhdGVSZWxhdGl2ZVRvRHJhd3BvaW50KGV4LCB0aGlzLnJlbGF0aXZlTG9jYXRpb24pO1xyXG4gICAgICAgIGNpcmNsZShjdHgsIGNlbnRlciwgdGhpcy5yYWRpdXMsIHRoaXMuZmlsbCk7XHJcblx0ICAgLypcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgbGV0IHBvaW50cyA9IGRyYXdDaXJjbGUoY2VudGVyLCB0aGlzLnJhZGl1cyk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIC4uLnBvaW50cyk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcblx0XHRwb2ludHMgPSBkcmF3Q2lyY2xlKCBhZGp1c3QoY2VudGVyLDAuMyp0aGlzLnJhZGl1cywwLjMqdGhpcy5yYWRpdXMpLCB0aGlzLnJhZGl1cyowLjMpOyBcclxuXHRcdGN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgLi4ucG9pbnRzKTtcclxuXHRcdGN0eC5maWxsKCk7XHRcclxuXHRcdCovXHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuLy9UT0RPXHJcbmV4cG9ydCBjbGFzcyBUb25ndWVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkJBQ0ssIC8vVEhJUyEhIVxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBgJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbYGZhY2VQYXJ0cyAke0xvY2F0aW9uLk5PU0V9YF0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICByYWRpdXM6IDAuNTEsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHQgXHJcblx0XHRjb25zdCBjZW50ZXIgPSBsb2NhdGVSZWxhdGl2ZVRvRHJhd3BvaW50KGV4LCB0aGlzLnJlbGF0aXZlTG9jYXRpb24pO1xyXG4gICAgICAgIGNpcmNsZShjdHgsIGNlbnRlciwgdGhpcy5yYWRpdXMsIHRoaXMuZmlsbCk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuLy9UT0RPXHJcbmV4cG9ydCBjbGFzcyBTdHVkUGFydDMgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsIC8vVEhJUyEhIVxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBgJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbYGZhY2VQYXJ0cyAke0xvY2F0aW9uLk5PU0V9YF0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICByYWRpdXM6IDAuNTEsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHQgXHJcblx0XHRjb25zdCBjZW50ZXIgPSBsb2NhdGVSZWxhdGl2ZVRvRHJhd3BvaW50KGV4LCB0aGlzLnJlbGF0aXZlTG9jYXRpb24pO1xyXG4gICAgICAgIGNpcmNsZShjdHgsIGNlbnRlciwgdGhpcy5yYWRpdXMsIHRoaXMuZmlsbCk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCcmlkZ2VQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkJFTE9XX0hBSVIsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IGAke0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtgZmFjZVBhcnRzICR7TG9jYXRpb24uTk9TRX1gXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIHJhZGl1czogMC40LFxyXG5cdFx0XHRkaXN0YW5jZTogMC45LFxyXG5cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdCBcclxuXHRcdGNvbnN0IGNlbnRlciA9IGxvY2F0ZVJlbGF0aXZlVG9EcmF3cG9pbnQoZXgsIHRoaXMucmVsYXRpdmVMb2NhdGlvbik7XHJcblx0XHRjb25zdCBvcmlnaW5hbEZpbGwgPSB0aGlzLmZpbGw7XHJcblx0XHRcdFxyXG5cdFx0Y2lyY2xlKGN0eCwgcG9sYXIyY2FydGVzaWFuKHRoaXMuZGlzdGFuY2UsIHJhZCh0aGlzLnJvdGF0aW9uKSwgY2VudGVyKSwgdGhpcy5yYWRpdXMsIHRoaXMuZmlsbCApXHJcblx0XHRjaXJjbGUoY3R4LCBwb2xhcjJjYXJ0ZXNpYW4odGhpcy5kaXN0YW5jZSwgcmFkKHRoaXMucm90YXRpb24rMTgwKSwgY2VudGVyKSwgdGhpcy5yYWRpdXMsIHRoaXMuZmlsbCApXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNpcmNsZShjdHgsIGNlbnRlcixyYWRpdXMsb3JpZ2luYWxGaWxsKXtcclxuXHRpZihvcmlnaW5hbEZpbGwpe1xyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IG9yaWdpbmFsRmlsbDtcclxuXHR9XHJcblx0bGV0IHBvaW50cyA9IGRyYXdDaXJjbGUoY2VudGVyLCByYWRpdXMpOyBcclxuXHRjdHguYmVnaW5QYXRoKCk7XHJcblx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHQuLi5wb2ludHNcclxuXHQpO1xyXG5cdGN0eC5maWxsKCk7XHRcclxuXHRcclxuXHRwb2ludHMgPSBkcmF3Q2lyY2xlKCBhZGp1c3QoY2VudGVyLDAuMypyYWRpdXMsMC4zKnJhZGl1cyksIHJhZGl1cyowLjMpOyBcclxuXHRjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG5cdGN0eC5iZWdpblBhdGgoKTtcclxuXHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdC4uLnBvaW50c1xyXG5cdCk7XHJcblx0Y3R4LmZpbGwoKTtcdFxyXG59O1xyXG5cdFx0XHJcblx0XHRcclxuLypcclxuXHJcblxyXG5cclxuKi9cdFx0XHJcblxyXG5cclxuXHRcclxuXHJcblx0XHJcbmV4cG9ydCBjbGFzcyBOaXBwbGVQaWVyY2luZ3MgZXh0ZW5kcyBKZXdlbHJ5IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuQkFTRSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcImJsdWVcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwicmVkXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBOaXBwbGVQaWVyY2luZ1BhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cdFxyXG5leHBvcnQgY2xhc3MgQmVsbHlQaWVyY2luZ1NpbXBsZSBleHRlbmRzIEpld2Vscnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcImxpbWVcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwicmVkXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCZWxseVBpZXJjaW5nU2ltcGxlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmVsbHlQaWVyY2luZ0FkdmFuY2VkIGV4dGVuZHMgSmV3ZWxyeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwibGltZVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJyZWRcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJlbGx5UGllcmNpbmdBZHZhbmNlZFBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN0dWRQaWVyY2luZzIgZXh0ZW5kcyBQaWVyY2luZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICByZWxhdGl2ZUxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBkcmF3cG9pbnQ6IFwibm9zZS5vdXRcIixcclxuICAgICAgICAgICAgICAgIGR4ICAgICAgIDogLTMsXHJcbiAgICAgICAgICAgICAgICBkeSAgICAgICA6IDEuMTVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgIDogYCske0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVxdWlyZWRQYXJ0cyAgIDogXCJmYWNlUGFydHNcIixcclxuXHRcdFx0IFxyXG4gICAgICAgIH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdHVkUGFydDIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHVkUGllcmNpbmczIGV4dGVuZHMgUGllcmNpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgcmVsYXRpdmVMb2NhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgZHJhd3BvaW50OiBcIm5vc2Uub3V0XCIsXHJcbiAgICAgICAgICAgICAgICBkeCAgICAgICA6IC0zLFxyXG4gICAgICAgICAgICAgICAgZHkgICAgICAgOiAxLjE1XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICA6IGArJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkUGFydHMgICA6IFwiZmFjZVBhcnRzXCIsXHJcblx0XHRcdCBcclxuICAgICAgICB9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3R1ZFBhcnQzLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHVkUGllcmNpbmc0IGV4dGVuZHMgUGllcmNpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgcmVsYXRpdmVMb2NhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgZHJhd3BvaW50OiBcIm5vc2Uub3V0XCIsXHJcbiAgICAgICAgICAgICAgICBkeCAgICAgICA6ICszLFxyXG4gICAgICAgICAgICAgICAgZHkgICAgICAgOiAtMS4xNVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgOiBgKyR7TG9jYXRpb24uTk9TRX1gLFxyXG4gICAgICAgICAgICByZXF1aXJlZFBhcnRzICAgOiBcImZhY2VQYXJ0c1wiLFxyXG5cdFx0XHQgXHJcbiAgICAgICAgfSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN0dWRQYXJ0MixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3R1ZFBpZXJjaW5nNiBleHRlbmRzIFBpZXJjaW5nIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHJlbGF0aXZlTG9jYXRpb246IHtcclxuICAgICAgICAgICAgICAgIGRyYXdwb2ludDogXCJub3NlLm91dFwiLFxyXG4gICAgICAgICAgICAgICAgZHggICAgICAgOiAwLFxyXG4gICAgICAgICAgICAgICAgZHkgICAgICAgOiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICA6IGArJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkUGFydHMgICA6IFwiZmFjZVBhcnRzXCIsXHJcblx0XHRcdCBcclxuICAgICAgICB9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3R1ZFBhcnQyLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdHVkUGllcmNpbmc1IGV4dGVuZHMgUGllcmNpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgcmVsYXRpdmVMb2NhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgZHJhd3BvaW50OiBcIm5vc2Uub3V0XCIsXHJcbiAgICAgICAgICAgICAgICBkeCAgICAgICA6IDAsXHJcbiAgICAgICAgICAgICAgICBkeSAgICAgICA6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgIDogYCske0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVxdWlyZWRQYXJ0cyAgIDogXCJmYWNlUGFydHNcIixcclxuXHRcdFx0IFxyXG4gICAgICAgIH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdHVkUGFydDIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN0dWRQaWVyY2luZzcgZXh0ZW5kcyBQaWVyY2luZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICByZWxhdGl2ZUxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBkcmF3cG9pbnQ6IFwibm9zZS5vdXRcIixcclxuICAgICAgICAgICAgICAgIGR4ICAgICAgIDogMCxcclxuICAgICAgICAgICAgICAgIGR5ICAgICAgIDogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgOiBgKyR7TG9jYXRpb24uTk9TRX1gLFxyXG4gICAgICAgICAgICByZXF1aXJlZFBhcnRzICAgOiBcImZhY2VQYXJ0c1wiLFxyXG5cdFx0XHQgXHJcbiAgICAgICAgfSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN0dWRQYXJ0MixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRvbmd1ZVBpZXJjaW5nIGV4dGVuZHMgUGllcmNpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgcmVsYXRpdmVMb2NhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgZHJhd3BvaW50OiBcIm5vc2Uub3V0XCIsXHJcbiAgICAgICAgICAgICAgICBkeCAgICAgICA6IDAsXHJcbiAgICAgICAgICAgICAgICBkeSAgICAgICA6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgIDogYCske0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVxdWlyZWRQYXJ0cyAgIDogXCJmYWNlUGFydHNcIixcclxuXHRcdFx0IFxyXG4gICAgICAgIH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBUb25ndWVQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCcmlkZ2UgZXh0ZW5kcyBQaWVyY2luZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICByZWxhdGl2ZUxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBkcmF3cG9pbnQ6IFwibm9zZS50b3BcIixcclxuICAgICAgICAgICAgICAgIGR4ICAgICAgIDogLTAuMyxcclxuICAgICAgICAgICAgICAgIGR5ICAgICAgIDogLTEuNjZcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgIDogYCske0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVxdWlyZWRQYXJ0cyAgIDogXCJmYWNlUGFydHNcIixcclxuXHRcdFx0IFxyXG4gICAgICAgIH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCcmlkZ2VQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCcmlkZ2UyIGV4dGVuZHMgUGllcmNpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgcmVsYXRpdmVMb2NhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgZHJhd3BvaW50OiBcIm5vc2UudG9wXCIsXHJcbiAgICAgICAgICAgICAgICBkeCAgICAgICA6IC0wLjMsXHJcbiAgICAgICAgICAgICAgICBkeSAgICAgICA6IC0xLjY2XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICA6IGArJHtMb2NhdGlvbi5OT1NFfWAsXHJcbiAgICAgICAgICAgIHJlcXVpcmVkUGFydHMgICA6IFwiZmFjZVBhcnRzXCIsXHJcblx0XHRcdCBcclxuICAgICAgICB9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQnJpZGdlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKlx0dmVyc2lvbiBmb3IgZXllYnJvdzpcclxuXHJcbmV4cG9ydCBjbGFzcyBCcmlkZ2UgZXh0ZW5kcyBQaWVyY2luZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICByZWxhdGl2ZUxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBkcmF3cG9pbnQ6IFwiYnJvdy5vdXRib3RcIixcclxuICAgICAgICAgICAgICAgIGR4ICAgICAgIDogLTEuNSxcclxuICAgICAgICAgICAgICAgIGR5ICAgICAgIDogMC40XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICA6IGAke0xvY2F0aW9uLk5PU0V9YCxcclxuICAgICAgICAgICAgcmVxdWlyZWRQYXJ0cyAgIDogXCJmYWNlUGFydHNcIixcclxuXHRcdFx0IFxyXG4gICAgICAgIH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCcmlkZ2VQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuKi8iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge3NldFN0cm9rZUFuZEZpbGx9IGZyb20gXCIuLi91dGlsL2RyYXdcIjtcclxuaW1wb3J0IHtcclxuICAgIHNpbXBsZVF1YWRyYXRpYyxcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBnZXRQb2ludE9uQ3VydmUsXHJcbiAgICBhZGp1c3QsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICB0cmFjZVBvaW50LFxyXG5cdGludGVycG9sYXRlQ3VydmUsXHJcblx0c3BsaXRDdXJ2ZSxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbmltcG9ydCB7YXZlcmFnZVBvaW50fSBmcm9tIFwiLi5cIjtcclxuXHJcbmltcG9ydCB7SGF0fSBmcm9tIFwiLi9oYXRzXCI7XHJcblxyXG4vL1RPRE8gLSBzaGFkaW5nXHJcbmV4cG9ydCBjbGFzcyBNYWdpY0hhdEZyb250UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXI6IExheWVyLkFCT1ZFX0hBSVIsXHJcbiAgICAgICAgICAgICAgICBsb2MgIDogXCIraGVhZFwiLFxyXG5cdFx0XHRcdHJlZmxlY3Q6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHtjZW50ZXIsaW5Cb3Qsb3V0LGluVG9wLGNvbmVCYXNlLGNvbmVUb3AsZm9yaGVhZH0gPSBjYWxjTWFnaWNIYXQuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHQvL0NvbmVcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0Y29uZUJhc2UsXHJcblx0XHRcdGNvbmVUb3AsXHJcblx0XHRcdCBleHRyYWN0UG9pbnQoaW5Ub3ApXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblx0XHRcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdGNvbmVCYXNlLFxyXG5cdFx0XHRjb25lVG9wLFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHRcdC8vQnJpbVxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRvdXQsXHJcblx0XHRcdGluVG9wLFxyXG5cdFx0XHRmb3JoZWFkLFxyXG5cdFx0XHRjb25lQmFzZSxcdFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHJcblx0Ly90aGUgYm90dG9tIGN1cnZlIG9mIHRoZSBjb25lXHJcblx0aWYoaW5Cb3QueT5pblRvcC55KXtcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRmb3JoZWFkLFxyXG5cdFx0XHRjb25lQmFzZSxcclxuXHRcdFx0XHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHR9O1xyXG5cdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRvdXQsXHJcblx0XHRcdGluVG9wLFxyXG5cdFx0KTtcclxuXHRcdC8vY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWFnaWNIYXRCYWNrUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXI6IExheWVyLkJBQ0ssXHJcbiAgICAgICAgICAgICAgICBsb2MgIDogXCIraGVhZFwiLFxyXG5cdFx0XHRcdHJlZmxlY3Q6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHtjZW50ZXIsaW5Cb3Qsb3V0LGluVG9wLGNvbmVCYXNlLGNvbmVUb3AsZm9yaGVhZH0gPSBjYWxjTWFnaWNIYXQuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdCBcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuICAgICAgICAgICAgaW5Cb3QsXHJcblx0XHRcdG91dCxcclxuXHRcdFx0aW5Ub3BcclxuXHRcdFx0XHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjTWFnaWNIYXQoZXgpIHtcclxuICAgIGNvbnN0IGNlbnRlciA9IHt4Oi0wLjIsIHk6ZXguc2t1bGwuc2lkZS55KzMrdGhpcy5jZW50ZXJPZmZzZXR9XHJcblx0bGV0IGluVG9wID0gYWRqdXN0KGNlbnRlciwgMCwgNit0aGlzLmJyaW1BbmdsZSk7XHJcblx0bGV0IGluQm90ID0gYWRqdXN0KGNlbnRlciwgMCwgLTYtdGhpcy5icmltQW5nbGUpO1xyXG5cdGxldCBvdXQgPSBhZGp1c3QoY2VudGVyLCAzNit0aGlzLmJyaW1XaWR0aCwgMCk7XHRcdFxyXG5cdFxyXG5cdGxldCBmb3JoZWFkID0gYWRqdXN0KGNlbnRlciwgMCwgKDYrdGhpcy5icmltQW5nbGUpIC8gMiApO1xyXG5cdFxyXG5cdG91dC5jcDEgPSB7XHJcblx0XHR4OiAob3V0LnggKyBpbkJvdC54KSAqIDAuNSxcclxuXHRcdHk6IGluQm90LnkgXHJcblx0fTtcclxuXHRcdFxyXG5cdGluVG9wLmNwMSA9IHtcclxuXHRcdHg6IChpblRvcC54ICsgb3V0LngpICogMC41LFxyXG5cdFx0eTogaW5Ub3AueSBcclxuXHR9O1xyXG5cdFxyXG5cdGxldCByaW0gPSBpbnRlcnBvbGF0ZUN1cnZlKGV4LnNrdWxsLGV4LnNrdWxsLnNpZGUse3g6bnVsbCwgeTpjZW50ZXIueX0pIFxyXG5cdCBcclxuXHQvL2xldCB0ZW1wID0gc3BsaXRDdXJ2ZSgwLjUrdGhpcy5jb25lV2lkdGgvMTAsb3V0LGluVG9wKSBcclxuXHRsZXQgY29uZUJhc2UgPSByaW1bMF0vL3RlbXAubGVmdC5wMjtcclxuXHRcclxuXHRjb25lQmFzZSA9IGFkanVzdChjb25lQmFzZSx0aGlzLmNvbmVXaWR0aCsyLDApXHJcblx0XHJcblx0Y29uZUJhc2UuY3AxID0ge1xyXG5cdFx0eDogKGNvbmVCYXNlLnggKyBmb3JoZWFkLngpICogMC41LFxyXG5cdFx0eTogZm9yaGVhZC55IFxyXG5cdH07XHJcblx0XHJcblx0bGV0IGNvbmVUb3AgPSBhZGp1c3QoY2VudGVyLCAwLCA0NSt0aGlzLmNvbmVIZWlnaHQpXHJcbiAgICByZXR1cm4ge1xyXG5cdFx0Y2VudGVyLFxyXG4gICAgICAgIGluQm90LFxyXG5cdFx0b3V0LFxyXG5cdFx0aW5Ub3AsXHJcblx0XHRjb25lQmFzZSxcclxuXHRcdGNvbmVUb3AsXHJcblx0XHRmb3JoZWFkXHJcbiAgICB9O1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIE1haWRIZWFkcGllY2VQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgICAgICBsYXllcjogTGF5ZXIuQUJPVkVfSEFJUixcclxuICAgICAgICAgICAgICAgIGxvYyAgOiBcImhlYWRcIixcclxuXHRcdFx0XHRyZWZsZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0bGV0IGluQm90ID0ge1xyXG5cdFx0XHR4OiAtMC4yLFxyXG5cdFx0XHR5OiBleC5za3VsbC55IC0gNSArIHRoaXMuY2VudGVyT2Zmc2V0XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGxldCBpblRvcCA9IHtcclxuXHRcdFx0eDogLTAuMixcclxuXHRcdFx0eTogaW5Cb3QueSArIHRoaXMuaGVpZ2h0XHJcblx0XHR9XHJcblx0XHQgXHJcblx0XHRsZXQgb3V0VG9wID0ge1xyXG5cdFx0XHR4OiBpblRvcC54ICsgdGhpcy53aWR0aCxcclxuXHRcdFx0eTogaW5Ub3AueSAtIHRoaXMuZHJvcFxyXG5cdFx0fS8vYWRqdXN0KGV4LnNrdWxsLnNpZGUsMTAsMCk7XHJcblx0XHRcclxuXHRcdG91dFRvcC5jcDEgPSB7XHJcblx0XHRcdHg6IDAuNSAqIChpblRvcC54ICsgb3V0VG9wLngpLFxyXG5cdFx0XHR5OiBpblRvcC55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRsZXQgYSA9IE1hdGguc3FydCggTWF0aC5wb3codGhpcy5oZWlnaHQsMikvMiApOyAvL3B5dGhhZ29yYXNcclxuXHRcdGxldCBvdXRCb3QgPSB7XHJcblx0XHRcdHg6IG91dFRvcC54IC0gYSxcclxuXHRcdFx0eTogb3V0VG9wLnkgLSBhXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRpbkJvdC5jcDEgPSB7XHJcblx0XHRcdHg6IDAuNSAqIChpbkJvdC54ICsgb3V0Qm90LngpLFxyXG5cdFx0XHR5OiBpbkJvdC55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdGluVG9wLFxyXG5cdFx0XHRvdXRUb3AsXHJcblx0XHRcdG91dEJvdCxcclxuXHRcdFx0aW5Cb3RcclxuXHRcdFx0XHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKlxyXG5cclxuKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBNYWdpY0hhdCBleHRlbmRzIEhhdCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjZW50ZXJPZmZzZXQ6IDAsXHRcdFx0XHJcblx0XHRcdGJyaW1XaWR0aDogMCxcclxuXHRcdFx0YnJpbUFuZ2xlOiAwLFxyXG5cdFx0XHRjb25lSGVpZ2h0OiAwLFxyXG5cdFx0XHRjb25lV2lkdGg6IDAsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMzNDMyMzJcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCIjMjAxYjFiXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IE1hZ2ljSGF0RnJvbnRQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IE1hZ2ljSGF0QmFja1BhcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNYWlkSGVhZHBpZWNlIGV4dGVuZHMgSGF0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNlbnRlck9mZnNldDogMixcclxuXHRcdFx0aGVpZ2h0OiA5LFxyXG5cdFx0XHR3aWR0aDogMTIsXHJcblx0XHRcdGRyb3A6IDQsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIndoaXRlXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgcmV0dXJuIFwiYmxhY2tcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogIE1haWRIZWFkcGllY2VQYXJ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBleHRyYWN0UG9pbnQsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG4gICAgYWRqdXN0LFxyXG4gICAgcmVmbGVjdCxcclxuXHRkcmF3Q2lyY2xlLFxyXG5cdGJyZWFrUG9pbnQsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuaW1wb3J0IHtOZWNrQWNjZXNzb3J5fSBmcm9tIFwiLi9uZWNrX2FjY2Vzc29yeVwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRnZXRMYWNpbmdQb2ludHMsXHJcblx0ZmluZEJldHdlZW4sXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENob2tlclBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK25lY2tcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCB7ICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFx0XHJcbiBcdFxyXG5cdFx0bGV0IHt0b3BPdXQsYm90T3V0LHRvcEluLGJvdElufSA9IGNhbGNDb2xsYXIuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuY2VudGVyKXtcclxuXHRcdFx0dG9wSW4uY3AxID0ge1xyXG5cdFx0XHRcdHk6ICgodG9wSW4ueSAtIGJvdEluLnkpIC8yKStib3RJbi55LFxyXG5cdFx0XHRcdHg6NFxyXG5cdFx0XHR9O1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdC8vY3R4LmxpbmVXaWR0aCA9IDAuOTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0dG9wSW4sXHJcblx0XHRcdFx0dG9wT3V0LFxyXG5cdFx0XHRcdGJvdE91dCxcclxuXHRcdFx0XHRib3RJbixcclxuXHRcdFx0XHR0b3BJblxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Ly9jdHgubGluZVdpZHRoID0gMC45O1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90SW5cclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTmVja0NvcnNldFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK25lY2tcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLFxyXG4gICAgICAgICAgICBiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcdFxyXG5cdFx0XHJcblx0XHRsZXQge3RvcE91dCxib3RPdXQsdG9wSW4sYm90SW59ID0gY2FsY0NvbGxhci5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Ly9vcGVuIHNwYWNlXHJcblx0XHRjb25zdCBvcGVuU3BhY2U9MztcclxuXHRcdHRvcEluID0ge3g6b3BlblNwYWNlLHk6dG9wT3V0Lnl9O1xyXG5cdFx0Ym90SW4gPSB7eDpvcGVuU3BhY2UseTpib3RPdXQueX07XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdC8vY3R4LmxpbmVXaWR0aCA9IDAuOTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0dG9wT3V0LFxyXG5cdFx0XHRib3RPdXQsXHJcblx0XHRcdGJvdEluXHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgbGFjaW5nID0gZ2V0TGFjaW5nUG9pbnRzKGJvdEluLHRvcEluLHJlZmxlY3QoYm90SW4pLHJlZmxlY3QodG9wSW4pLHRoaXMuY3Jvc3NpbmdzKTtcclxuXHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRjdHgubGluZVdpZHRoID0gMC40O1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsLi4ubGFjaW5nLm91dGVyKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcdFx0XHJcblx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ29sbGFyUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFx0XHJcbiBcdFxyXG5cdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMubmVja0NvdmVyYWdlLGV4Lm5lY2suY3VzcCxleC5uZWNrLnRvcCk7XHJcblx0XHRjb25zdCBjZW50ZXIgPSB7eDowLHk6ZmluZEJldHdlZW4odGVtcC5sZWZ0LnAyLnksZXgubmVjay5jdXNwLnksMC41KS0yfTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgcmFkaXVzID0gNDtcclxuXHRcdGNvbnN0IHBvaW50cyA9IGRyYXdDaXJjbGUoe3g6MCx5OmNlbnRlci55LXJhZGl1c30sIHJhZGl1cyk7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRjdHgubGluZVdpZHRoID0gMC45O1xyXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gIHRoaXMucmluZztcclxuXHRcdGRyYXdQb2ludHMoY3R4LC4uLnBvaW50cyk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHNpemU9MjtcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSAwLjU7XHJcblx0XHRjdHguZmlsbFN0eWxlID0gIHRoaXMuaGlnaGxpZ2h0O1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdHt4OmNlbnRlci54K3NpemUseTpjZW50ZXIueStzaXplfSxcclxuXHRcdFx0e3g6Y2VudGVyLngrc2l6ZSx5OmNlbnRlci55LXNpemV9LFxyXG5cdFx0XHR7eDpjZW50ZXIueC1zaXplLHk6Y2VudGVyLnktc2l6ZX0sXHJcblx0XHRcdHt4OmNlbnRlci54LXNpemUseTpjZW50ZXIueStzaXplfVxyXG5cdFx0KTtcclxuXHRcdC8vY3R4LnN0cm9rZSgpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcdFx0XHJcblx0XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUYWdQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcIituZWNrXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHtcclxuXHRcdFx0dGV4dDogXCJTTFVUXCIsXHJcblx0XHRcdGZvbnRIZWlnaHQ6IDgsXHJcblx0XHRcdGR4OiAwLFxyXG5cdFx0XHRkeTogMCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcdFx0XHRcclxuIFx0XHJcblx0XHRsZXQge3RvcE91dCxib3RPdXQsdG9wSW4sYm90SW59ID0gY2FsY0NvbGxhci5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0Ly9yYXRoZXIgaGFja3lcclxuXHRcdC8vdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgc2ltcGxlIHdheSB0byBjdXJ2ZSB0aGUgdGV4dCBhbmQgdGhlIGhhcmQgd2F5IGRvZXNuJ3Qgc2VlbSB0byBiZSBjb3N0LWVmZmVjdGl2ZVxyXG5cdFx0Y29uc3QgYW5jaG9yID0gcmVmbGVjdChib3RJbik7XHJcblx0XHRhbmNob3IueCAtPSAzLjUgKyB0aGlzLmR4LzEwO1xyXG5cdFx0YW5jaG9yLnkgKz0gMS4yICsgdGhpcy5keS8xMDtcclxuXHRcdGN0eC5mb250ID0gdGhpcy5mb250SGVpZ2h0K1wicHggQ29taWMgU2FucyBNU1wiO1xyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0O1xyXG5cdFx0Y3R4LmZpbGxUZXh0KHRoaXMudGV4dCwgYW5jaG9yLngsIGFuY2hvci55KTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIENob2tlckNyb3NzUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5HRU5JVEFMUyxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzICAgICAgICAgOiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIl0sXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCJdLFxyXG4gICAgICAgIH0sIHsgIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcdFx0XHRcclxuIFx0XHJcblx0XHRsZXQge3RvcE91dCxib3RPdXQsdG9wSW4sYm90SW59ID0gY2FsY0NvbGxhci5jYWxsKHRoaXMsIGV4KTtcclxuXHRcclxuXHRcdGJvdE91dC5jcDEgPSBib3RJbi5jcDE7XHJcblx0XHRib3RPdXQuY3AyID0gYm90SW4uY3AyO1xyXG5cdFx0XHJcblx0XHRjb25zdCBsYWNpbmcgPSBnZXRMYWNpbmdQb2ludHModG9wSW4sdG9wT3V0LGJvdEluLGJvdE91dCx0aGlzLmNyb3NzaW5ncyk7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnRoaWNrbmVzcztcclxuXHRcdGRyYXdQb2ludHMoY3R4LC4uLmxhY2luZy5vdXRlciwgYnJlYWtQb2ludCwgLi4ubGFjaW5nLmlubmVyKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcdFx0XHRcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY0NvbGxhcihleCl7XHJcblx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMubmVja0NvdmVyYWdlLGV4Lm5lY2suY3VzcCxleC5uZWNrLnRvcCk7XHJcblx0bGV0IHRvcE91dCA9IGFkanVzdCh0ZW1wLmxlZnQucDIsLXRoaXMudGhpY2tuZXNzKjAuNSwwKTtcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMubmVja0JvdENvdmVyYWdlLGV4Lm5lY2suY3VzcCxleC5uZWNrLnRvcCk7XHJcblx0bGV0IGJvdE91dCA9IGFkanVzdCh0ZW1wLmxlZnQucDIsLXRoaXMudGhpY2tuZXNzKjAuNSwwKTtcclxuXHRib3RPdXQgPSBleHRyYWN0UG9pbnQoYm90T3V0KTtcclxuXHRsZXQgdG9wSW4gPSB7eDotMC4xLHk6dG9wT3V0Lnl9O1xyXG5cdGxldCBib3RJbiA9IHt4Oi0wLjEseTpib3RPdXQueX07XHJcblx0XHJcblx0Ly9jdXJ2ZXM6XHJcblx0Ym90SW4ueS09Mi4yO1xyXG5cdGJvdEluLmNwMSA9IHtcclxuXHRcdHg6IDAuNSAqIChib3RJbi54ICsgYm90T3V0LngpLFxyXG5cdFx0eTogYm90SW4ueSBcclxuXHR9O1xyXG5cdHRvcEluLnktPTIuMjtcclxuXHR0b3BPdXQuY3AxID0ge1xyXG5cdFx0eDogMC41ICogKHRvcE91dC54ICsgdG9wSW4ueCksXHJcblx0XHR5OiB0b3BJbi55IFxyXG5cdH07XHJcblx0XHRcclxuXHRyZXR1cm4ge1xyXG5cdFx0dG9wT3V0LFxyXG5cdFx0Ym90T3V0LFxyXG5cdFx0dG9wSW4sXHJcblx0XHRib3RJblxyXG5cdH07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQ29uY3JldGUgQ2xvdGhpbmcgY2xhc3Nlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIENob2tlciBleHRlbmRzIE5lY2tBY2Nlc3Nvcnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbmVja0NvdmVyYWdlOjAuMixcclxuXHRcdFx0bmVja0JvdENvdmVyYWdlOjAsXHJcblx0XHRcdGNlbnRlcjpmYWxzZSxcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCIjNWM1YzVjXCI7XHJcbiAgICB9XHJcblx0XHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjNWM1YzVjXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDaG9rZXJQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5lY2tDb3JzZXQgZXh0ZW5kcyBOZWNrQWNjZXNzb3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdG5lY2tDb3ZlcmFnZTowLjYsXHJcblx0XHRcdG5lY2tCb3RDb3ZlcmFnZTowLFxyXG5cdFx0XHRjcm9zc2luZ3M6MyxcclxuXHRcdFx0aGlnaGxpZ2h0OlwiYmxhY2tcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzVjNWM1Y1wiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjNWM1YzVjXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBOZWNrQ29yc2V0UGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsYXIgZXh0ZW5kcyBOZWNrQWNjZXNzb3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdG5lY2tDb3ZlcmFnZTowLjMsXHJcblx0XHRcdG5lY2tCb3RDb3ZlcmFnZTowLFxyXG4gICAgICAgICAgICByaW5nOlwiaHNsYSgyMDksIDMzJSwgNzAlLCAxKVwiLCBcclxuXHRcdFx0aGlnaGxpZ2h0OlwiaHNsYSgyMDksIDglLCAxNiUsIDEpXCIsXHJcblx0XHRcdHRoaWNrbmVzczogMC41LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzVjNWM1Y1wiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCIjNWM1YzVjXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDb2xsYXJQYXJ0LFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDaG9rZXJQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRhZ2dlZENvbGxhciBleHRlbmRzIE5lY2tBY2Nlc3Nvcnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0bmVja0NvdmVyYWdlOjAuMjcsXHJcblx0XHRcdG5lY2tCb3RDb3ZlcmFnZTowLFxyXG4gICAgICAgICAgXHJcblx0XHRcdGhpZ2hsaWdodDpcIndoaXRlXCIsXHJcblx0XHRcdHRoaWNrbmVzczogMC41LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgzMjEuMyw4MC4yJSw1MC40JSwxLjAwKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMyMS4zLDgwLjIlLDUwLjQlLDEuMDApXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogVGFnUGFydCxcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ2hva2VyUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDcm9zc2VkQ2hva2VyIGV4dGVuZHMgTmVja0FjY2Vzc29yeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRuZWNrQ292ZXJhZ2U6MC4yMSxcclxuXHRcdFx0bmVja0JvdENvdmVyYWdlOjAuMDUsXHJcblx0XHRcdGNyb3NzaW5nczoyLFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNVxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCIjNWM1YzVjXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiM1YzVjNWNcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENob2tlckNyb3NzUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmcsIHByb2Nlc3NDbG90aGluZ1BhcnRMb2NhdGlvbn0gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7bG9jYXRlUmVsYXRpdmVUb0RyYXdwb2ludCwgTG9jYXRpb259IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQge1xyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIHJhZCxcclxuICAgIHBvaW50LFxyXG4gICAvL25vcm0sXHJcbiAgIC8vZGlmZixcclxuXHRhZGp1c3QsXHJcblx0ZHJhd0NpcmNsZSxcclxuXHQvL2V4dHJhY3RQb2ludCxcclxuICAgIC8vc3BsaXRDdXJ2ZSxcclxuICAgIC8vcmVmbGVjdCxcclxuXHRcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge0pld2Vscnl9IGZyb20gXCIuL2pld2VscnlcIjtcclxuXHJcbmltcG9ydCB7XHJcblx0ZmluZEJldHdlZW4sXHJcblx0ZHJhd1N0YXIsXHJcblx0cGVycGVuZGljdWxhclBvaW50LFxyXG5cdHBvbGFyMmNhcnRlc2lhbixcclxuXHRjYXJ0ZXNpYW4ycG9sYXIsXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5cclxuY2xhc3MgVHJpYW5nbGVFYXJyaW5nc1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIraGVhZFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgIH0sIHtcdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zdCBjZW50ZXIgPSBhZGp1c3QoZXguc2t1bGwuYm90LDEuMiwyLjIpO1xyXG5cdFx0XHRjb25zdCB0b3AgPSBhZGp1c3QoY2VudGVyLDAsLXRoaXMuaGFuZ2VyKTtcclxuXHRcdFx0Y29uc3QgYm90SW4gPSBhZGp1c3QodG9wLHRoaXMud2lkdGgsLXRoaXMubGVuZ3RoKTtcclxuXHRcdFx0Y29uc3QgYm90T3V0ID0gYWRqdXN0KHRvcCwtdGhpcy53aWR0aCwtdGhpcy5sZW5ndGgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9jb25uZWN0aW5nIGxpbmVcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRjdHgubGluZVdpZHRoID0gMC41O1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxjZW50ZXIse3g6dG9wLngsIHk6dG9wLnktMn0pO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFxyXG5cdFx0XHQvL2NpcmNsZSBhdHRhY2hlZCB0byB0aGUgZWFyXHJcblx0XHRcdGxldCBwb2ludHMgPSBkcmF3Q2lyY2xlKGNlbnRlciwwLjMpO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LC4uLnBvaW50cyk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vdGhlIHRyaWFuZ2xlIHBhcnRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCx0b3AsYm90SW4sYm90T3V0KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIENyeXN0YWxFYXJyaW5nc1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIraGVhZFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgIH0sIHtcdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRjb25zdCBjZW50ZXIgPSBhZGp1c3QoZXguc2t1bGwuYm90LDEuMiwyLjIpO1xyXG5cdFx0XHR2YXIgdG9wQ2VudGVyID0gYWRqdXN0KGNlbnRlciwwLC10aGlzLmhhbmdlcik7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgdG9wT3V0ID0gYWRqdXN0KHRvcENlbnRlciwtdGhpcy53aWR0aC8yKzAuMywwKTtcclxuXHRcdFx0dmFyIHRvcEluID0gYWRqdXN0KHRvcENlbnRlcix0aGlzLndpZHRoLzIsMCk7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgYm90T3V0ID0gYWRqdXN0KHRvcENlbnRlciwtdGhpcy53aWR0aC8yKzAuMywtdGhpcy5sZW5ndGgtdGhpcy5hbHQpO1xyXG5cdFx0XHR2YXIgYm90SW4gPSBhZGp1c3QodG9wQ2VudGVyLHRoaXMud2lkdGgvMiwtdGhpcy5sZW5ndGgrdGhpcy5hbHQpO1xyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdC8vY29ubmVjdGluZyBsaW5lXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDAuNTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsY2VudGVyLHRvcENlbnRlcik7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vY2lyY2xlIGF0dGFjaGVkIHRvIHRoZSBlYXJcclxuXHRcdFx0bGV0IHBvaW50cyA9IGRyYXdDaXJjbGUoY2VudGVyLDAuMyk7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsLi4ucG9pbnRzKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly90aGUgY3J5c3RhbCBwYXJ0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsdG9wT3V0LHRvcEluLGJvdEluLGJvdE91dCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblx0XHRcdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBMb29wRWFycmluZ3NGcm9udFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK2hlYWRcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICB9LCB7XHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFxyXG5cdFx0XHRjb25zdCB7YSxifSA9IGNhbGNMb29wLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxiLGEpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBMb29wRWFycmluZ3NCYWNrUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcIitoZWFkXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgfSwge1x0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcclxuXHRcdFx0Y29uc3Qge2EsYn0gPSBjYWxjTG9vcC5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsYSxiKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1x0XHRcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY0xvb3AoZXgpe1xyXG5cdGNvbnN0IGNlbnRlciA9IGFkanVzdChleC5za3VsbC5ib3QsMS4yLDMpO1xyXG5cdGxldCBhID0ge3g6Y2VudGVyLngseTpjZW50ZXIueX07XHJcblx0bGV0IGIgPSB7eDpjZW50ZXIueCx5OmNlbnRlci55LXRoaXMubGVuZ3RofTtcclxuXHRhLmNwMSA9IHt4OmNlbnRlci54LXRoaXMud2lkdGgseTpjZW50ZXIueS0odGhpcy5sZW5ndGgvMil9O1xyXG5cdGIuY3AxID0ge3g6Y2VudGVyLngrdGhpcy53aWR0aCx5OmNlbnRlci55LSh0aGlzLmxlbmd0aC8yKX07XHJcblx0XHJcblx0cmV0dXJue1xyXG5cdFx0YSxiXHJcblx0fTtcclxufVxyXG5cclxuXHJcbmNsYXNzIENoYWluRWFycmluZ3NQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkJFTE9XX0hBSVIsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK2hlYWRcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICB9LCB7XHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0Y29uc3QgY2VudGVyID0gYWRqdXN0KGV4LnNrdWxsLmJvdCwxLjIsMi4yKTtcclxuXHRcdFx0XHJcblx0XHRcdGZ1bmN0aW9uIGNoYWluKHgseSxsZW5ndGgpe1xyXG5cdFx0XHRcdHZhciB0b3AgPSBhZGp1c3QoY2VudGVyLHgseSlcclxuXHRcdFx0XHR2YXIgYm90ID0gYWRqdXN0KGNlbnRlcix4LC1sZW5ndGgpXHJcblx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKFsyLCAyXSlcclxuXHRcdFx0XHRjdHgubGluZVdpZHRoID0gMC40O1xyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRkcmF3UG9pbnRzKGN0eCx0b3AsYm90KTtcclxuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRjaGFpbigwLDAsdGhpcy5sZW5ndGgpO1xyXG5cdFx0XHRjaGFpbigwLjgsMCx0aGlzLmxlbmd0aCk7XHJcblx0XHRcdGNoYWluKC0wLjgsMCx0aGlzLmxlbmd0aCk7XHJcblx0XHRcdFxyXG5cdFx0XHRsZXQgcG9pbnRzID0gW107XHJcblx0XHRcdHBvaW50cyA9IGRyYXdDaXJjbGUoY2VudGVyLDEuMik7IFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LC4uLnBvaW50cyk7XHJcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBjdHguc3Ryb2tlU3R5bGU7XHJcblx0XHRcdGN0eC5maWxsKCk7XHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgQmFsbEVhcnJpbmdzUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcIitoZWFkXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgfSwge1x0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IGNlbnRlciA9IGFkanVzdChleC5za3VsbC5ib3QsMS4yLDIuMik7XHJcblx0XHRcdGNvbnN0IG1pZCA9IGFkanVzdChjZW50ZXIsMCwtdGhpcy5sZW5ndGgvMik7XHJcblx0XHRcdGNvbnN0IGJvdHRvbSA9IGFkanVzdChjZW50ZXIsMCwtdGhpcy5sZW5ndGgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0Ly9jb25uZWN0aW5nIGxpbmVcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LGNlbnRlcixib3R0b20pO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHQvL2JhbGxzXHJcblx0XHRcdGJhbGwoY2VudGVyLHRoaXMuc2l6ZSxjdHguZmlsbFN0eWxlKVxyXG5cdFx0XHRiYWxsKG1pZCx0aGlzLnNpemUtdGhpcy5hbHQsY3R4LmZpbGxTdHlsZSlcclxuXHRcdFx0YmFsbChib3R0b20sdGhpcy5zaXplK3RoaXMuYWx0LGN0eC5maWxsU3R5bGUpXHJcblx0XHRcdFxyXG5cdFx0XHRmdW5jdGlvbiBiYWxsKGNlbnRlcixyYWRpdXMsZmlsbCl7XHJcblx0XHRcdFx0bGV0IHBvaW50cyA9IFtdO1xyXG5cdFx0XHRcdHBvaW50cyA9IGRyYXdDaXJjbGUoY2VudGVyLHJhZGl1cyk7IFxyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRkcmF3UG9pbnRzKGN0eCwuLi5wb2ludHMpO1xyXG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBmaWxsO1xyXG5cdFx0XHRcdGN0eC5maWxsKCk7XHRcdFxyXG5cdFx0XHR9IFx0XHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBSaG9tYkVhcnJpbmdzRnJvbnRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkJFTE9XX0hBSVIsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK2hlYWRcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICB9LCB7XHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFxyXG5cdFx0XHRjb25zdCB7Y2VudGVyLGlubmVyLGJvdHRvbSxvdXRlcn0gPSBjYWxjUmhvbWIuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGN0eC5saW5lV2lkdGggPSB0aGlzLnRoaWNrbmVzcztcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsY2VudGVyLG91dGVyLGJvdHRvbSk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgUmhvbWJFYXJyaW5nc0JhY2tQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcIitoZWFkXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgfSwge1x0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcclxuXHRcdFx0Y29uc3Qge2NlbnRlcixpbm5lcixib3R0b20sb3V0ZXJ9ID0gY2FsY1Job21iLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LGNlbnRlcixpbm5lcixib3R0b20pO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNSaG9tYihleCl7XHJcblx0Y29uc3QgY2VudGVyID0gYWRqdXN0KGV4LnNrdWxsLmJvdCwxLjIsMi4yKTtcclxuXHRjb25zdCBib3R0b20gPSBhZGp1c3QoY2VudGVyLDAsLXRoaXMubGVuZ3RoKTtcclxuXHRcclxuXHRsZXQgYWN0dWFsTGVuZ3RoID0gLXRoaXMubGVuZ3RoLzIgLSB0aGlzLmxlbmd0aC8yKnRoaXMuYWx0O1xyXG5cdGNvbnN0IGlubmVyID0gYWRqdXN0KGNlbnRlciwgLSh0aGlzLndpZHRoLzIpLCBhY3R1YWxMZW5ndGgpO1xyXG5cdGNvbnN0IG91dGVyID0gYWRqdXN0KGNlbnRlciwgdGhpcy53aWR0aC8yLCBhY3R1YWxMZW5ndGgpO1xyXG5cclxuXHRyZXR1cm57XHJcblx0XHRjZW50ZXIsXHJcblx0XHRpbm5lcixcclxuXHRcdGJvdHRvbSxcclxuXHRcdG91dGVyXHJcblx0fTtcclxufVxyXG5cclxuY2xhc3MgRWFyUGllcmNpbmdGcm9udFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK2hlYWRcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgfSwge1x0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcclxuXHRcdFx0Y29uc3Qge2EsYn0gPSBjYWxjRWFyUGllcmNpbmcuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LGIsYSk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEVhclBpZXJjaW5nQmFja1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuQkVMT1dfSEFJUixcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIraGVhZFwiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICB9LCB7XHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFxyXG5cdFx0XHRjb25zdCB7YSxifSA9IGNhbGNFYXJQaWVyY2luZy5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsYSxiKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1x0XHRcclxuXHRcdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGNFYXJQaWVyY2luZyhleCl7XHJcblx0Y29uc3QgY2VudGVyID0gYWRqdXN0KGV4LmVhci5taWQsLTAuNSt0aGlzLmR4LDMuNSt0aGlzLmR5KVxyXG5cdFxyXG5cdGxldCBhID0ge3g6Y2VudGVyLngseTpjZW50ZXIueX07XHJcblx0bGV0IGIgPSAgcG9sYXIyY2FydGVzaWFuKHRoaXMubGVuZ3RoLHJhZCh0aGlzLnJvdGF0aW9uKSxhKTtcclxuXHJcblx0YS5jcDEgPSBwZXJwZW5kaWN1bGFyUG9pbnQoYSxiLDAuNSx0aGlzLndpZHRoKTtcclxuXHRiLmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludChhLGIsMC41LC10aGlzLndpZHRoKTtcclxuXHJcblx0cmV0dXJue1xyXG5cdFx0YSxiXHJcblx0fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEJhc2UgQ2xvdGhpbmcgY2xhc3Nlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVhcnJpbmdzIGV4dGVuZHMgSmV3ZWxyeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLklOTkVSLFxyXG4gICAgICAgICAgICBzdHJva2UgICAgICAgOiBcIiNlYmJjMTFcIixcclxuICAgICAgICAgICAgZmlsbCAgICAgICAgIDogXCJyZWRcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcbi8qKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBUcmlhbmdsZUVhcnJpbmdzIGV4dGVuZHMgRWFycmluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0bGVuZ3RoOiA3LFxyXG5cdFx0XHR3aWR0aDogMixcclxuXHRcdFx0aGFuZ2VyOiAyXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBUcmlhbmdsZUVhcnJpbmdzUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDcnlzdGFsRWFycmluZ3MgZXh0ZW5kcyBFYXJyaW5ncyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZW5ndGg6IDksXHJcblx0XHRcdHdpZHRoOiAyLjYsXHJcblx0XHRcdGhhbmdlcjogMyxcclxuXHRcdFx0YWx0OiAyLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ3J5c3RhbEVhcnJpbmdzUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMb29wRWFycmluZ3MgZXh0ZW5kcyBFYXJyaW5ncyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZW5ndGg6IDksXHJcblx0XHRcdHdpZHRoOiAzLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMb29wRWFycmluZ3NGcm9udFBhcnQsXHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExvb3BFYXJyaW5nc0JhY2tQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENoYWluRWFycmluZ3MgZXh0ZW5kcyBFYXJyaW5ncyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZW5ndGg6IDksXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDaGFpbkVhcnJpbmdzUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBCYWxsRWFycmluZ3MgZXh0ZW5kcyBFYXJyaW5ncyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZW5ndGg6IDEwLFxyXG5cdFx0XHRzaXplOiAxLFxyXG5cdFx0XHRhbHQ6IC0wLjIsXHJcblx0XHRcdHRoaWNrbmVzczogMC41XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCYWxsRWFycmluZ3NQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJob21iRWFycmluZ3MgZXh0ZW5kcyBFYXJyaW5ncyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZW5ndGg6IDksXHJcblx0XHRcdHdpZHRoOiAyLjYsXHJcblx0XHRcdGFsdDogMC44LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuOCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMxM2E3MDBcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogUmhvbWJFYXJyaW5nc0Zyb250UGFydCxcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogUmhvbWJFYXJyaW5nc0JhY2tQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVhclBpZXJjaW5nIGV4dGVuZHMgRWFycmluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0bGVuZ3RoOiAyLjgsXHJcblx0XHRcdHdpZHRoOiAyLjIsXHJcblx0XHRcdHRoaWNrbmVzczogMC42LFxyXG5cdFx0XHRyb3RhdGlvbjogNDYsXHJcblx0XHRcdGR4OiAwLFxyXG5cdFx0XHRkeTogMCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0Z2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEVhclBpZXJjaW5nRnJvbnRQYXJ0LFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBFYXJQaWVyY2luZ0JhY2tQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZywgcHJvY2Vzc0Nsb3RoaW5nUGFydExvY2F0aW9ufSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtsb2NhdGVSZWxhdGl2ZVRvRHJhd3BvaW50LCBMb2NhdGlvbn0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7XHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuXHRyYWQsXHJcblx0ZHJhd0NpcmNsZSxcclxuXHRicmVha1BvaW50LFxyXG5cdGV4dHJhY3RQb2ludCxcclxuXHRhZGp1c3QsXHJcblx0cmVmbGVjdCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge0pld2Vscnl9IGZyb20gXCIuL2pld2VscnlcIjtcclxuXHJcbmltcG9ydCB7XHJcblx0ZmluZEJldHdlZW4sXHJcblx0cG9sYXIyY2FydGVzaWFuLFxyXG5cdC8vY2FydGVzaWFuMnBvbGFyLFxyXG5cdGNvcHlDdXJ2ZSxcclxufSBmcm9tIFwiLi4vdXRpbC9hdXhpbGlhcnlcIjtcclxuXHJcblxyXG5jbGFzcyBCb2R5Y2hhaW4xUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCIrdG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICB9LCB7XHRcdFx0XHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMixcclxuXHRcdFx0Y2xlYXZhZ2VDb3ZlcmFnZUJvdDogMC42LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcclxuXHRcdCBcclxuXHRcdFx0Ly9uZWNrXHJcblx0XHRcdGxldCBwb2ludHM7XHJcblx0XHRcdGxldCB0ZW1wO1xyXG5cdFx0XHQvL2N0eC5saW5lV2lkdGggPSAwLjc7XHJcblx0XHRcdGNvbnN0IHJpbmdSYWRpdXMgPSAzO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly90b3AgcmluZyBcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUodGhpcy5jbGVhdmFnZUNvdmVyYWdlLCBleC5uZWNrLmN1c3AsIGV4Lmdyb2luKTtcclxuXHRcdFx0Y29uc3QgcGVjdG9yYWwgPSB7eDowLHk6dGVtcC5sZWZ0LnAyLnl9O1xyXG5cdFx0XHRwb2ludHMgPSBkcmF3Q2lyY2xlKHBlY3RvcmFsLCByaW5nUmFkaXVzKTtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwuLi5wb2ludHMpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFxyXG5cdFx0XHQvL2JvdCByaW5nIFxyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmNsZWF2YWdlQ292ZXJhZ2VCb3QsIGV4Lm5lY2suY3VzcCwgZXguZ3JvaW4pO1xyXG5cdFx0XHRjb25zdCB1bmRlciA9IHt4OjAseTp0ZW1wLmxlZnQucDIueX07XHJcblx0XHRcdHBvaW50cyA9IGRyYXdDaXJjbGUodW5kZXIsIHJpbmdSYWRpdXMpO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LC4uLnBvaW50cyk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5zZXRMaW5lRGFzaChbMywgM10pXHJcblx0XHRcdFxyXG5cdFx0XHQvL25lY2sgcGFydFx0XHRcdFxyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgwLjEsZXgubmVjay5jdXNwLGV4LmNvbGxhcmJvbmUpO1xyXG5cdFx0XHRjb25zdCBuZWNrID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRjb25zdCByaW5nVG9wID0gcG9sYXIyY2FydGVzaWFuKHJpbmdSYWRpdXMsIHJhZCg1MCksIHBlY3RvcmFsKTtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxuZWNrLHJpbmdUb3ApO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHRcclxuXHRcdFx0XHJcblx0XHRcdC8vcmluZyBjb25uZWN0aW9uXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0e3g6MCx5OnBlY3RvcmFsLnktcmluZ1JhZGl1c30sXHJcblx0XHRcdFx0e3g6MCx5OnVuZGVyLnkrcmluZ1JhZGl1c31cclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9ib3R0b21cclxuXHRcdFx0Y29uc3QgdXBSaW5nQm90ID0gcG9sYXIyY2FydGVzaWFuKHJpbmdSYWRpdXMsIHJhZCgwKSwgdW5kZXIpO1xyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgwLjIsZXgud2Fpc3QsZXguaGlwKTtcclxuXHRcdFx0bGV0IHVwV2Fpc3QgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdFx0dXBXYWlzdC5jcDEgPSB7XHJcblx0XHRcdFx0eDpleC5jaGVzdC5uaXBwbGVzLngsXHJcblx0XHRcdFx0eTp1cFdhaXN0LnlcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IGxvd1JpbmdCb3QgPSBwb2xhcjJjYXJ0ZXNpYW4ocmluZ1JhZGl1cywgcmFkKC00NSksIHVuZGVyKTtcclxuXHRcdFx0dGVtcCA9IHNwbGl0Q3VydmUoMC44LGV4LndhaXN0LGV4LmhpcCk7XHJcblx0XHRcdGxldCBsb3dXYWlzdCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0XHRsb3dXYWlzdC5jcDEgPSB7XHJcblx0XHRcdFx0eDpleC5jaGVzdC5uaXBwbGVzLngsXHJcblx0XHRcdFx0eTpsb3dXYWlzdC55XHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LHVwUmluZ0JvdCx1cFdhaXN0LGJyZWFrUG9pbnQsbG93UmluZ0JvdCxsb3dXYWlzdCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcbiBcclxuY2xhc3MgQm9keWNoYWluMlBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK3RvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgfSwge1x0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcclxuXHRcdFx0bGV0IHBvaW50cztcclxuXHRcdFx0bGV0IHRlbXA7XHJcblx0XHRcdFxyXG5cdFx0XHQvL2N0eC5saW5lV2lkdGggPSAwLjc7XHJcblx0XHRcdGNvbnN0IHJpbmdSYWRpdXMgPSAzO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0Ly90b3AgcmluZyBcclxuXHRcdFx0Y29uc3QgcGVjdG9yYWwgPSB7eDowLHk6ZXguYXJtcGl0LnkrOX07XHJcblx0XHRcdHBvaW50cyA9IGRyYXdDaXJjbGUocGVjdG9yYWwsIHJpbmdSYWRpdXMpO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LC4uLnBvaW50cyk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHJcblx0XHRcdC8vYm90IHJpbmcgXHJcblx0XHRcdGNvbnN0IHVuZGVyID0ge3g6MCx5OmV4LndhaXN0LnkrMTJ9O1xyXG5cclxuXHRcdFx0Y3R4LnNldExpbmVEYXNoKFszLCAzXSlcclxuXHRcdFx0XHJcblx0XHRcdC8vbmVjayBwYXJ0XHRcdFx0XHJcblx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuMSxleC5uZWNrLmN1c3AsZXguY29sbGFyYm9uZSk7XHJcblx0XHRcdGNvbnN0IG5lY2sgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRcdGNvbnN0IHJpbmdUb3AgPSBwb2xhcjJjYXJ0ZXNpYW4ocmluZ1JhZGl1cywgcmFkKDUwKSwgcGVjdG9yYWwpO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LG5lY2sscmluZ1RvcCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcdFxyXG5cdFx0XHRcclxuXHRcdFx0Ly9ib3R0b21cclxuXHRcdFx0bGV0IHdhaXN0ID0gZXh0cmFjdFBvaW50KGV4LmhpcCk7XHRcclxuXHRcdFx0d2Fpc3QuY3AxID0ge1xyXG5cdFx0XHRcdHg6ZXguYXJtcGl0LngtNCxcclxuXHRcdFx0XHR5OndhaXN0LnlcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0e3g6MCx5OnBlY3RvcmFsLnktcmluZ1JhZGl1c30sXHJcblx0XHRcdFx0dW5kZXIsXHJcblx0XHRcdFx0d2Fpc3RcclxuXHRcdFx0KTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly9jb25uZWN0aW9uIHRvcFxyXG5cdFx0XHR0ZW1wID0gZGEuc3BsaXRDdXJ2ZSgwLjEsdW5kZXIsd2Fpc3QpO1xyXG5cdFx0XHRsZXQgdXBNaWQgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRcdGxldCB1cEJvdCA9IHt4OjAseTp1cE1pZC55LTR9XHJcblx0XHRcdHVwQm90LmNwMSA9IHtcclxuXHRcdFx0XHR4OiB1cEJvdC54ICogMC41ICsgdXBNaWQueCAqIDAuNSxcclxuXHRcdFx0XHR5OiB1cEJvdC55XHJcblx0XHRcdH07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkYS5kcmF3UG9pbnRzKGN0eCx1cE1pZCx1cEJvdCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0Ly9jb25uZWN0aW9uIGJvdFxyXG5cdFx0XHR0ZW1wID0gZGEuc3BsaXRDdXJ2ZSgwLjIsdW5kZXIsd2Fpc3QpO1xyXG5cdFx0XHRsZXQgbG93TWlkID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRsZXQgbG93Qm90ID0ge3g6MCx5Omxvd01pZC55LTR9O1xyXG5cdFx0XHRjb3B5Q3VydmUodXBNaWQsdXBCb3QsbG93TWlkLGxvd0JvdClcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRhLmRyYXdQb2ludHMoY3R4LGxvd01pZCxsb3dCb3QpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHRcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgQm9keWNoYWluM1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiK3RvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgfSwge1x0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1x0XHRcclxuXHRcdCBcclxuXHRcdFx0bGV0IHRlbXA7XHJcblx0XHRcdC8vY3R4LmxpbmVXaWR0aCA9IDAuNztcclxuXHRcdFx0XHJcblx0XHRcdGNvbnN0IHBlY3RvcmFsID0ge3g6MCx5OmV4LmFybXBpdC55KzEwfTtcclxuXHRcdFx0Y29uc3QgdW5kZXIgPSB7eDowLHk6ZXgud2Fpc3QueSs4fTtcclxuXHRcdFx0XHJcblx0XHRcdC8vbmVjayBwYXJ0XHRcdFx0XHJcblx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuMyxleC5uZWNrLmN1c3AsZXguY29sbGFyYm9uZSk7XHJcblx0XHRcdGNvbnN0IG5lY2sgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHQvL2JvdHRvbVxyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSgwLjIsZXgud2Fpc3QsZXguaGlwKTtcclxuXHRcdFx0bGV0IHdhaXN0ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdHdhaXN0LmNwMSA9IHtcclxuXHRcdFx0XHR4OmV4LmNoZXN0Lm5pcHBsZXMueCxcclxuXHRcdFx0XHR5OndhaXN0LnlcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGxldCBib3R0b20gPSBhZGp1c3QodW5kZXIsMCwtNik7XHJcblx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuNCxleC53YWlzdCxleC5oaXApO1xyXG5cdFx0XHRsZXQgd2Fpc3QyID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdGNvcHlDdXJ2ZSh1bmRlcix3YWlzdCxib3R0b20sd2Fpc3QyKTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5zZXRMaW5lRGFzaChbMywgM10pXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsbmVjayxwZWN0b3JhbCx1bmRlcix3YWlzdCxicmVha1BvaW50LHVuZGVyLGJvdHRvbSx3YWlzdDIpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEJhc2UgQ2xvdGhpbmcgY2xhc3Nlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJvZHljaGFpbiBleHRlbmRzIEpld2Vscnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuQkFTRSxcclxuICAgICAgICAgICAgc3Ryb2tlICAgICAgIDogXCIjOWM4NTMwXCIsXHJcbiAgICAgICAgICAgIGZpbGwgICAgICAgICA6IFwicmVkXCIsXHJcblx0XHRcdHRoaWNrbmVzc1x0IDogMC43LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG5cclxuICAgIH1cclxufVxyXG4vKiovXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBCb2R5Y2hhaW4xIGV4dGVuZHMgQm9keWNoYWluIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdCBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQm9keWNoYWluMVBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQm9keWNoYWluMiBleHRlbmRzIEJvZHljaGFpbiB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHQgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJvZHljaGFpbjJQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJvZHljaGFpbjMgZXh0ZW5kcyBCb2R5Y2hhaW4ge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0IFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCb2R5Y2hhaW4zUGFydCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qXHJcbmV4cG9ydCBjbGFzcyBCb2R5Y2hhaW40IGV4dGVuZHMgQm9keWNoYWluIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdCBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQm9keWNoYWluMVBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcbiovIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nLCBwcm9jZXNzQ2xvdGhpbmdQYXJ0TG9jYXRpb259IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge2xvY2F0ZVJlbGF0aXZlVG9EcmF3cG9pbnQsIExvY2F0aW9ufSBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IHtcclxuICAgIGRyYXdQb2ludHMsXHJcbiAgICBzcGxpdEN1cnZlLFxyXG5cdHJhZCxcclxuXHRkcmF3Q2lyY2xlLFxyXG5cdGJyZWFrUG9pbnQsXHJcblx0ZXh0cmFjdFBvaW50LFxyXG5cdGFkanVzdCxcclxuXHRyZWZsZWN0LFxyXG5cdC8qXHJcbiAgICBwb2ludCxcclxuICAgIG5vcm0sXHJcbiAgICBkaWZmLFxyXG5cdCovXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuaW1wb3J0IHtKZXdlbHJ5fSBmcm9tIFwiLi9qZXdlbHJ5XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdGZpbmRCZXR3ZWVuLFxyXG5cdGdldExpbWJQb2ludHNCZWxsb3dQb2ludCxcclxuXHRnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCxcclxuXHRnZXRMYWNpbmdQb2ludHNcclxufSBmcm9tIFwiLi4vdXRpbC9hdXhpbGlhcnlcIjtcclxuXHJcbmZ1bmN0aW9uIGNhbGNBcm0oZXgsIGNvbnRyb2xQb2ludCkge1xyXG5cdGlmICh0eXBlb2YgY29udHJvbFBvaW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBjb250cm9sUG9pbnQgIT09IFwib2JqZWN0XCIpIHtcclxuXHRcdGNvbnRyb2xQb2ludCA9IHt4OjAseTpjb250cm9sUG9pbnR9O1xyXG5cdH1cclxuXHRcclxuXHRsZXQgdGVtcCA9IGdldExpbWJQb2ludHNCZWxsb3dQb2ludChjb250cm9sUG9pbnQsdHJ1ZSxleC5hcm1waXQsZXguZWxib3cuaW4sZXgud3Jpc3QuaW4sZXgudGh1bWIub3V0LGV4LnRodW1iLnRpcCk7XHJcblx0Y29uc3QgaW5uZXIgPSBleHRyYWN0UG9pbnQodGVtcFt0ZW1wLmxlbmd0aC0xXSk7XHJcblxyXG5cdFx0dGVtcCA9IGdldExpbWJQb2ludHNCZWxsb3dQb2ludChhZGp1c3QoaW5uZXIsMCwyKSxmYWxzZSxleC5jb2xsYXJib25lLGV4LmRlbHRvaWRzLGV4LnNob3VsZGVyLGV4LmVsYm93Lm91dCxleC53cmlzdC5vdXQsZXguaGFuZC5rbnVja2xlKTtcclxuXHRjb25zdCBvdXRlciA9IGV4dHJhY3RQb2ludCh0ZW1wWzBdKTtcclxuXHRcdFxyXG5cdG91dGVyLmNwMSA9IHtcclxuXHRcdHg6IG91dGVyLnggKiAwLjUgKyBpbm5lci54ICogMC41LFxyXG5cdFx0eTogb3V0ZXIueSAtM1xyXG5cdH07XHJcblx0XHJcblx0cmV0dXJuIHtcclxuXHRcdGlubmVyLFxyXG5cdFx0b3V0ZXJcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gY2FsY0FybVNxdWFyZShleCkge1xyXG5cclxuXHRpZiAoICh0aGlzLmFybUNvdmVyYWdlLXRoaXMuYXJtQ292ZXJhZ2VUb3ApPDAuMDMgKSB7XHJcblx0XHR0aGlzLmFybUNvdmVyYWdlVG9wID0gdGhpcy5hcm1Db3ZlcmFnZS0wLjAzO1xyXG5cdH1cclxuXHJcblx0XHJcblx0Ly9iYXNpY2FsbHkgY3V0cyB0aGUgcG9pbnRzIGFib3ZlIHRoZSBicmFjZWxldDpcclxuXHRsZXQgY29udHJvbFBvaW50ID0ge1xyXG5cdFx0eTogZmluZEJldHdlZW4oZXguY29sbGFyYm9uZS55LGV4LmhhbmQucGFsbS55LHRoaXMuYXJtQ292ZXJhZ2VUb3ApXHJcblx0fTtcclxuXHJcblx0bGV0IGlubmVyID0gZ2V0TGltYlBvaW50c0JlbGxvd1BvaW50KGNvbnRyb2xQb2ludCx0cnVlLGV4LmFybXBpdCxleC5lbGJvdy5pbixleC53cmlzdC5pbixleC50aHVtYi5vdXQsZXgudGh1bWIudGlwKTtcclxuXHRsZXQgb3V0ZXIgPSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQoYWRqdXN0KGlubmVyW2lubmVyLmxlbmd0aC0xXSwwLDIpLGZhbHNlLGV4LmNvbGxhcmJvbmUsZXguZGVsdG9pZHMsZXguc2hvdWxkZXIsZXguZWxib3cub3V0LGV4LndyaXN0Lm91dCxleC5oYW5kLmtudWNrbGUpO1xyXG5cdFxyXG5cdC8vYmFzaWNhbGx5IGN1dHMgdGhlIHBvaW50cyBiZWxsb3cgdGhlIGJyYWNlbGV0OlxyXG5cdGNvbnRyb2xQb2ludCA9IHtcclxuXHRcdHk6IGZpbmRCZXR3ZWVuKGV4LmNvbGxhcmJvbmUueSxleC5oYW5kLnBhbG0ueSx0aGlzLmFybUNvdmVyYWdlKVxyXG5cdH07XHJcblxyXG5cdGlubmVyLnJldmVyc2UoKTsgLy90byBnZXRMaW1wUG9pbnRzIGZ1bmN0aW9ucyB0aGV5IGhhdmUgdG8gYmUgaW5wdXRlZCBzb3J0ZWQgZnJvbSB0b3AgdG8gYm90dG9tICh0byBrZWVwIHRoZSBzYW1lIHN0eWxlIGFzIG91dGVyIHBvaW50cyksIGJ1dCB0aGV5IGFyZSBvdXRwdXR0ZWQgZnJvbSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQgc29ydGVkIGJvdHRvbSB0byB0b3AgKGFzIHRoZXkgYXJlIGFjdHVhbGx5IGRyYXduKVxyXG5cdGlubmVyID0gZ2V0TGltYlBvaW50c0Fib3ZlUG9pbnQoIGNvbnRyb2xQb2ludCwgdHJ1ZSwuLi5pbm5lcik7XHJcblxyXG5cdG91dGVyID0gZ2V0TGltYlBvaW50c0Fib3ZlUG9pbnQoIHt5OmNvbnRyb2xQb2ludC55KzJ9LCBmYWxzZSwuLi5vdXRlcik7XHJcblxyXG5cdG91dGVyWzBdID0gZXh0cmFjdFBvaW50KCBvdXRlclswXSApO1xyXG5cdFxyXG5cdG91dGVyWzBdLmNwMSA9IHtcclxuXHRcdHg6ICggb3V0ZXJbMF0ueCArIGlubmVyW2lubmVyLmxlbmd0aC0xXS54ICkqIDAuNSxcclxuXHRcdHk6IG91dGVyWzBdLnkgLSA0ICsgKDggKiB0aGlzLmFybUNvdmVyYWdlVG9wKVxyXG5cdH07XHJcblx0XHJcbi8vXHRvdXRlcltvdXRlci5sZW5ndGgtMV0gPSBleHRyYWN0UG9pbnQoIG91dGVyW291dGVyLmxlbmd0aC0xXSApOyBcclxuXHRcclxuXHRpbm5lclswXSA9IGV4dHJhY3RQb2ludCggaW5uZXJbMF0gKTtcclxuXHRpbm5lclswXS5jcDEgPSB7XHJcblx0XHR4OiAoIG91dGVyW291dGVyLmxlbmd0aC0xXS54ICsgaW5uZXJbMF0ueCApICogMC41LFxyXG5cdFx0eTogaW5uZXJbMF0ueSAtIDQgKyAoOCAqIHRoaXMuYXJtQ292ZXJhZ2UpXHJcblx0fTtcclxuXHRcclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5uZXIsXHJcblx0XHRvdXRlclxyXG5cdH1cclxufVxyXG5cclxuXHJcblxyXG5cdFxyXG5jbGFzcyBTaW1wbGVBcm1sZXRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdFx0bGF5ZXIgICAgIDogTGF5ZXIuQVJNUyxcclxuXHRcdFx0XHRsb2MgICAgICAgOiBcIithcm1cIixcclxuXHRcdFx0XHRhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcblx0XHRcdGFybUNvdmVyYWdlVG9wOiAwLjgsXHJcblx0XHRcdGFybUNvdmVyYWdlOiAwLjksXHJcblx0XHRcdHRoaWNrbmVzczogMSxcclxuXHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFxyXG5cdFx0IFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMudGhpY2tuZXNzO1xyXG5cdFx0XHRjb25zdCB7aW5uZXIsb3V0ZXJ9ID0gY2FsY0FybVNxdWFyZS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsICAuLi5vdXRlciwgLi4uaW5uZXIsIG91dGVyWzBdKTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1x0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jbGFzcyBDcm9zc2VkQXJtbGV0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRcdGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcblx0XHRcdFx0bG9jICAgICAgIDogXCIrYXJtXCIsXHJcblx0XHRcdFx0YWJvdmVQYXJ0czogW1wicGFydHMgYXJtXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGFybVwiLCBcInBhcnRzIGhhbmRcIl0sXHJcbiAgICAgICAgfSwge1xyXG5cdFx0XHRhcm1Db3ZlcmFnZVRvcDogMC4zLFxyXG5cdFx0XHRhcm1Db3ZlcmFnZTogMC4zLFxyXG5cdFx0XHRjcm9zc2luZ3M6IDMsXHJcblx0XHRcdHRoaWNrbmVzczogMC44LFxyXG5cdFx0XHRkb3VibGVkOiB0cnVlLFxyXG5cdFx0XHRmdWxsQXJtbGV0OiBmYWxzZSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcdFx0XHJcblx0XHQgXHRjdHgubGluZVdpZHRoID0gdGhpcy50aGlja25lc3M7XHJcblx0XHRcdGNvbnN0IHtpbm5lcixvdXRlcn0gPSBjYWxjQXJtU3F1YXJlLmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYodGhpcy5mdWxsQXJtbGV0KXtcclxuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0ZHJhd1BvaW50cyhjdHgsICAuLi5vdXRlciwgLi4uaW5uZXIsIG91dGVyWzBdKTtcclxuXHRcdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdG91dGVyW291dGVyLmxlbmd0aC0xXS5jcDEgPSBpbm5lclswXS5jcDE7XHJcblx0XHRcdC8vY29uc3QgbGFjaW5nID0gZ2V0TGFjaW5nUG9pbnRzKHRvcEluLHRvcE91dCxib3RJbixib3RPdXQsdGhpcy5jcm9zc2luZ3MpO1xyXG5cdFx0XHRjb25zdCBsYWNpbmcgPSBnZXRMYWNpbmdQb2ludHMoaW5uZXJbaW5uZXIubGVuZ3RoLTFdLG91dGVyWzBdLGlubmVyWzBdLG91dGVyW291dGVyLmxlbmd0aC0xXSx0aGlzLmNyb3NzaW5ncyk7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGlmKHRoaXMuZG91YmxlZCl7XHJcblx0XHRcdFx0ZHJhd1BvaW50cyhjdHgsLi4ubGFjaW5nLm91dGVyLCBicmVha1BvaW50LCAuLi5sYWNpbmcuaW5uZXIpO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRkcmF3UG9pbnRzKGN0eCwuLi5sYWNpbmcub3V0ZXIpO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFNwaXJhbEFybWxldFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHRsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG5cdFx0XHRcdGxvYyAgICAgICA6IFwiK2FybVwiLFxyXG5cdFx0XHRcdGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0Y29pbHM6IDMsXHJcblx0XHRcdGRpc3RhbmNlOiA1XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHRcdFxyXG5cdFx0IFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMudGhpY2tuZXNzO1xyXG5cdFx0XHRcclxuXHRcdFx0bGV0IGFkanVzdFkgPSAwO1xyXG5cdFx0XHRjb25zdCBjb250cm9sID0ge1xyXG5cdFx0XHRcdHg6MCxcclxuXHRcdFx0XHR5OiBmaW5kQmV0d2VlbihleC5jb2xsYXJib25lLnksZXguaGFuZC5wYWxtLnksdGhpcy5hcm1Db3ZlcmFnZSlcclxuXHRcdFx0fTtcclxuXHRcdFxyXG5cdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8PSB0aGlzLmNvaWxzOyBpKyspIHtcclxuXHRcdFx0XHRjb2lsKGFkanVzdChjb250cm9sLDAsYWRqdXN0WSksY3R4KTtcclxuXHRcdFx0XHRhZGp1c3RZIC09IHRoaXMuZGlzdGFuY2U7IFxyXG5cdFx0XHR9O1xyXG5cdFx0XHQgXHJcblx0XHRcdGZ1bmN0aW9uIGNvaWwoY29udHJvbCxjdHgpe1xyXG5cdFx0XHRcdGNvbnN0IHtpbm5lcixvdXRlcn0gPSBjYWxjQXJtLmNhbGwodGhpcywgZXgsIGNvbnRyb2wpO1xyXG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRkcmF3UG9pbnRzKGN0eCxpbm5lcixvdXRlcik7XHJcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHR9O1x0XHJcblx0XHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEJhc2UgQ2xvdGhpbmcgY2xhc3Nlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFybWxldCBleHRlbmRzIEpld2Vscnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuQkFTRSxcclxuICAgICAgICAgICAgc3Ryb2tlICAgICAgIDogXCIjOWM4NTMwXCIsXHJcbiAgICAgICAgICAgIGZpbGwgICAgICAgICA6IFwicmVkXCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcblxyXG4gICAgfVxyXG59XHJcbi8qKi9cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNwaXJhbEFybWxldCBleHRlbmRzIEFybWxldCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHQgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFNwaXJhbEFybWxldFBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFNpbXBsZUFybWxldCBleHRlbmRzIEFybWxldCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHQgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFNpbXBsZUFybWxldFBhcnQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ3Jvc3NlZEFybWxldCBleHRlbmRzIEFybWxldCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHQgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENyb3NzZWRBcm1sZXRQYXJ0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSwgc2ltcGxlUXVhZHJhdGljLCBhZGp1c3QsIGludGVycG9sYXRlQ3VydmUsIGJyZWFrUG9pbnRcclxufSBmcm9tIFwiZHJhd3BvaW50L3NyY1wiO1xyXG5pbXBvcnQge0JyYWNlbGV0UGFydH0gZnJvbSBcIi4vZ2xvdmVzXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtCYW5kZWRBbmtsZXRQYXJ0LCBjb25uZWN0RW5kUG9pbnRzLCBkaXN0fSBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzdHJhaW50Q2hhaW5QYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgICAgICBjaGFpbldpZHRoIDogMixcclxuICAgICAgICAgICAgICAgIGNoYWluU3Ryb2tlOiBcIiM2ZDZkNmRcIixcclxuICAgICAgICAgICAgICAgIGNoYWluRGFzaCAgOiBbMywgN10sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQm9uZGFnZVJvcGVQYXJ0IGV4dGVuZHMgUmVzdHJhaW50Q2hhaW5QYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgICAgICBjaGFpbldpZHRoIDogMi41LFxyXG4gICAgICAgICAgICAgICAgY2hhaW5TdHJva2U6IFwiI2Q5MmY0M1wiLFxyXG4gICAgICAgICAgICAgICAgY2hhaW5EYXNoICA6IFsxLCA2XSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGVzdEJvbmRhZ2VQYXJ0IGV4dGVuZHMgQm9uZGFnZVJvcGVQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBgKyR7TG9jYXRpb24uQ0hFU1R9YCxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW2BwYXJ0cyAke0xvY2F0aW9uLkNIRVNUfWAsIGBkZWNvcmF0aXZlUGFydHMgJHtMb2NhdGlvbi5DSEVTVH1gXSxcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIGNlbnRlciwgYm90LCBzaWRlVG9wLCBzaWRlQm90fSA9IGNhbGNUb3BCb25kYWdlLmNhbGwodGhpcywgZXgpO1xyXG5cclxuICAgICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5jaGFpbldpZHRoO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY2hhaW5TdHJva2U7XHJcblxyXG4gICAgICAgIGN0eC5zZXRMaW5lRGFzaCh0aGlzLmNoYWluRGFzaCk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCB0b3AsIGNlbnRlciwgYm90LCBicmVha1BvaW50LCBjZW50ZXIsIHNpZGVUb3AsIGJyZWFrUG9pbnQsIGJvdCwgc2lkZUJvdCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV2Fpc3RCb25kYWdlUGFydCBleHRlbmRzIEJvbmRhZ2VSb3BlUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogYCske0xvY2F0aW9uLlRPUlNPfWAsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHMgICAgICAgICA6IFtgcGFydHMgJHtMb2NhdGlvbi5UT1JTT31gLCBgZGVjb3JhdGl2ZVBhcnRzICR7TG9jYXRpb24uVE9SU099YF0sXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGJlbG93U2FtZUxheWVyUGFydHM6IFtcInRvcnNvXCIsIFwiZ3JvaW5cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHtib3Q6IHRvcH0gPSBjYWxjVG9wQm9uZGFnZS5jYWxsKHRoaXMsIGV4KTtcclxuXHJcbiAgICAgICAgY29uc3QgbWlkID0ge3g6IDQsIHk6IGV4LndhaXN0LnkgLSAyfTtcclxuICAgICAgICBtaWQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHRvcCwgbWlkLCAwLjUsIC1kaXN0KHRvcCwgbWlkKSAqIDAuMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNpZGUgPSBleHRyYWN0UG9pbnQoZXgud2Fpc3QpO1xyXG4gICAgICAgIHNpZGUuY3AxID0gc2ltcGxlUXVhZHJhdGljKG1pZCwgc2lkZSwgMC41LCAtMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1pZEJvdCA9IHt4OiAwLCB5OiBleC5wZWx2aXMueSArIDEwfTtcclxuICAgICAgICBtaWRCb3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKG1pZCwgbWlkQm90LCAwLjUsIC1kaXN0KG1pZCwgbWlkQm90KSAqIDAuMSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvdCA9IGFkanVzdChleHRyYWN0UG9pbnQoZXguZ3JvaW4pLCAwLCAyKTtcclxuXHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMuY2hhaW5XaWR0aDtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNoYWluU3Ryb2tlO1xyXG5cclxuICAgICAgICBjdHguc2V0TGluZURhc2godGhpcy5jaGFpbkRhc2gpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgdG9wLCBtaWQsIG1pZEJvdCwgYnJlYWtQb2ludCwgbWlkLCBzaWRlLCBicmVha1BvaW50LCBtaWRCb3QsIGJvdCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGVzdFBlbnRhZ3JhbUJvbmRhZ2VQYXJ0IGV4dGVuZHMgQm9uZGFnZVJvcGVQYXJ0IHsgLy9UT0RPIC0gZG9lc24ndCBsb29rIGFzIGdvb2QgYXMgaW50ZW5kZWRcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBgKyR7TG9jYXRpb24uQ0hFU1R9YCxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0cyAgICAgICAgIDogW2BwYXJ0cyAke0xvY2F0aW9uLkNIRVNUfWAsIGBkZWNvcmF0aXZlUGFydHMgJHtMb2NhdGlvbi5DSEVTVH1gXSxcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIGNlbnRlciwgYm90LCBzaWRlVG9wLCBzaWRlQm90LCB1cHBlckNlbnRlciwgdXBwZXJCb3R9ID0gY2FsY1RvcFBlbnRhZ3JhbUJvbmRhZ2UuY2FsbCh0aGlzLCBleCk7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMuY2hhaW5XaWR0aDtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNoYWluU3Ryb2tlO1xyXG5cdFx0Y3R4LnNldExpbmVEYXNoKHRoaXMuY2hhaW5EYXNoKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIHRvcCwgIHVwcGVyQm90LCBib3QsIGJyZWFrUG9pbnQsIGNlbnRlciwgc2lkZVRvcCwgYnJlYWtQb2ludCwgYm90LCBzaWRlQm90LCBicmVha1BvaW50LCBzaWRlVG9wLCB1cHBlckNlbnRlciwgYnJlYWtQb2ludCwgdG9wLCB1cHBlckNlbnRlciwgKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjVG9wUGVudGFncmFtQm9uZGFnZShleCkge1xyXG4gICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjMsIGV4Lm5lY2suY3VzcCwgZXguY29sbGFyYm9uZSk7XHJcblxyXG4gICAgY29uc3QgdG9wID0gYWRqdXN0KHNwLnJpZ2h0LnAxLCAwLCAtMS41KTtcclxuICAgIGNvbnN0IGNlbnRlciA9IHt4OiAwLCB5OiBleC5hcm1waXQueSAqIDAuNyArIGV4Lm5lY2suY3VzcC55ICogMC4zfTtcclxuICAgIGNlbnRlci5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9wLCBjZW50ZXIsIDAuNSwgZGlzdCh0b3AsIGNlbnRlcikgKiAwLjE1KTtcclxuXHJcbiAgICBjb25zdCBib3QgPSB7eDogMCwgeTogZXguYXJtcGl0LnkgLSAxMX07XHJcblxyXG4gICAgbGV0IHNpZGVUb3AgPSBleHRyYWN0UG9pbnQoZXguYXJtcGl0KTtcclxuICAgIGlmIChleC5icmVhc3QpIHtcclxuICAgICAgICBzaWRlVG9wID0gYWRqdXN0KGV4dHJhY3RQb2ludChleC5icmVhc3QudG9wKSwgMS41LCAwLjUpO1xyXG4gICAgfVxyXG4gICAgc2lkZVRvcC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoY2VudGVyLCBzaWRlVG9wLCAwLjUsIDAuMyk7XHJcblxyXG4gICAgbGV0IHEgPSB7eDogbnVsbCwgeTogYm90LnkgKyAxfTtcclxuICAgIGNvbnN0IFtzaWRlQm90XSA9IGludGVycG9sYXRlQ3VydmUoZXguYXJtcGl0LCBleC53YWlzdCwgcSk7XHJcbiAgICBzaWRlQm90LnggLT0gMC41O1xyXG4gICAgc2lkZUJvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYm90LCBzaWRlQm90LCAwLjUsIC0xKTtcclxuXHJcblx0Y29uc3QgdXBwZXJCb3QgPSBhZGp1c3QoYm90LDAsNi42Nik7XHJcblx0Y29uc3QgdXBwZXJDZW50ZXIgPSBhZGp1c3QoZXh0cmFjdFBvaW50KGNlbnRlciksMCw4KTtcclxuXHRcdFxyXG4gICAgcmV0dXJuIHt0b3AsIGNlbnRlciwgYm90LCBzaWRlVG9wLCBzaWRlQm90LCB1cHBlckNlbnRlciwgdXBwZXJCb3R9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxjVG9wQm9uZGFnZShleCkge1xyXG4gICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjQsIGV4Lm5lY2suY3VzcCwgZXguY29sbGFyYm9uZSk7XHJcblxyXG4gICAgY29uc3QgdG9wID0gYWRqdXN0KHNwLnJpZ2h0LnAxLCAwLCAtMS41KTtcclxuICAgIGNvbnN0IGNlbnRlciA9IHt4OiAwLCB5OiBleC5hcm1waXQueSAqIDAuNyArIGV4Lm5lY2suY3VzcC55ICogMC4zfTtcclxuICAgIGNlbnRlci5jcDEgPSBzaW1wbGVRdWFkcmF0aWModG9wLCBjZW50ZXIsIDAuNSwgZGlzdCh0b3AsIGNlbnRlcikgKiAwLjE1KTtcclxuXHJcbiAgICBjb25zdCBib3QgPSB7eDogMCwgeTogZXguYXJtcGl0LnkgLSAxMH07XHJcblxyXG4gICAgbGV0IHNpZGVUb3AgPSBleHRyYWN0UG9pbnQoZXguYXJtcGl0KTtcclxuICAgIGlmIChleC5icmVhc3QpIHtcclxuICAgICAgICBzaWRlVG9wID0gYWRqdXN0KGV4dHJhY3RQb2ludChleC5icmVhc3QudG9wKSwgMS41LCAwLjUpO1xyXG4gICAgfVxyXG4gICAgc2lkZVRvcC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoY2VudGVyLCBzaWRlVG9wLCAwLjUsIDIpO1xyXG5cclxuICAgIGxldCBxID0ge3g6IG51bGwsIHk6IGJvdC55ICsgMX07XHJcbiAgICBjb25zdCBbc2lkZUJvdF0gPSBpbnRlcnBvbGF0ZUN1cnZlKGV4LmFybXBpdCwgZXgud2Fpc3QsIHEpO1xyXG4gICAgc2lkZUJvdC54IC09IDAuNTtcclxuICAgIHNpZGVCb3QuY3AxID0gc2ltcGxlUXVhZHJhdGljKGJvdCwgc2lkZUJvdCwgMC41LCAtMSk7XHJcblxyXG4gICAgcmV0dXJuIHt0b3AsIGNlbnRlciwgYm90LCBzaWRlVG9wLCBzaWRlQm90fTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBXcmlzdFJlc3RyYWludENoYWluUGFydCBleHRlbmRzIFJlc3RyYWludENoYWluUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBgKyR7TG9jYXRpb24uQVJNfWAsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtgcGFydHMgJHtMb2NhdGlvbi5BUk19YCwgYGRlY29yYXRpdmVQYXJ0cyAke0xvY2F0aW9uLkFSTX1gLCBgcGFydHMgJHtMb2NhdGlvbi5IQU5EfWBdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuMTUsIGV4LndyaXN0LmluLCBleC5lbGJvdy5pbik7XHJcbiAgICAgICAgY29uc3QgcmlnaHQgPSBhZGp1c3QoZXh0cmFjdFBvaW50KHNwLnJpZ2h0LnAxKSwgMSwgMCk7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IHt4OiAtcmlnaHQueCwgeTogcmlnaHQueX07XHJcblxyXG4gICAgICAgIGxlZnQuY3AxID0gc2ltcGxlUXVhZHJhdGljKHJpZ2h0LCBsZWZ0LCAwLjUsIDUpO1xyXG5cclxuICAgICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5jaGFpbldpZHRoO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY2hhaW5TdHJva2U7XHJcblxyXG4gICAgICAgIGN0eC5zZXRMaW5lRGFzaCh0aGlzLmNoYWluRGFzaCk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCByaWdodCwgbGVmdCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQW5rbGVSZXN0cmFpbnRDaGFpblBhcnQgZXh0ZW5kcyBSZXN0cmFpbnRDaGFpblBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IGArJHtMb2NhdGlvbi5MRUd9YCxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW2BwYXJ0cyAke0xvY2F0aW9uLkxFR31gLCBgZGVjb3JhdGl2ZVBhcnRzICR7TG9jYXRpb24uTEVHfWBdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKHRoaXMuc3RhcnRBbG9uZ0xlZyArIHRoaXMubGVnQ292ZXJhZ2UgKiAwLjUsIGV4LmFua2xlLmluLCBleC5jYWxmLmluKTtcclxuICAgICAgICBjb25zdCByaWdodCA9IGFkanVzdChleHRyYWN0UG9pbnQoc3AucmlnaHQucDEpLCAxLCAwKTtcclxuICAgICAgICBjb25zdCBsZWZ0ID0ge3g6IC1yaWdodC54LCB5OiByaWdodC55fTtcclxuXHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMuY2hhaW5XaWR0aDtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNoYWluU3Ryb2tlO1xyXG5cclxuICAgICAgICBjdHguc2V0TGluZURhc2godGhpcy5jaGFpbkRhc2gpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgcmlnaHQsIGNvbm5lY3RFbmRQb2ludHMocmlnaHQsIGxlZnQpKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCYXNlIENsb3RoaW5nIGNsYXNzZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZXN0cmFpbnRzIGV4dGVuZHMgQ2xvdGhpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5PVVRFUixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJvbmRhZ2UgZXh0ZW5kcyBDbG90aGluZyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLkJBU0UsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb25jcmV0ZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV3Jpc3RSZXN0cmFpbnRzIGV4dGVuZHMgUmVzdHJhaW50cyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe2FybUNvdmVyYWdlOiAwLjc1fSwgLi4uZGF0YSk7XHJcbiAgICAgICAgdGhpcy5Nb2RzID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIGFybVJvdGF0aW9uIDogLTM1LFxyXG4gICAgICAgICAgICBoYW5kUm90YXRpb246IDEyXHJcbiAgICAgICAgfSwgdGhpcy5Nb2RzKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMxZTFlMWVcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogQnJhY2VsZXRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogQnJhY2VsZXRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogV3Jpc3RSZXN0cmFpbnRDaGFpblBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFua2xlUmVzdHJhaW50cyBleHRlbmRzIFJlc3RyYWludHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RhcnRBbG9uZ0xlZzogMC4yNSxcclxuICAgICAgICAgICAgbGVnQ292ZXJhZ2UgIDogMC40LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzFlMWUxZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBCYW5kZWRBbmtsZXRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogQmFuZGVkQW5rbGV0UGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEFua2xlUmVzdHJhaW50Q2hhaW5QYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGVzdEJvbmRhZ2UgZXh0ZW5kcyBCb25kYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDaGVzdEJvbmRhZ2VQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGVzdFBlbnRhZ3JhbUJvbmRhZ2UgZXh0ZW5kcyBCb25kYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBDaGVzdFBlbnRhZ3JhbUJvbmRhZ2VQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXYWlzdEJvbmRhZ2UgZXh0ZW5kcyBCb25kYWdlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBXYWlzdEJvbmRhZ2VQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIC8vc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHJlZmxlY3QsXHJcbiAgICBicmVha1BvaW50LCBzcGxpdEN1cnZlLCBzaW1wbGVRdWFkcmF0aWMsIGFkanVzdCwgZHJhd0NpcmNsZSwgaW50ZXJwb2xhdGVDdXJ2ZVxyXG59IGZyb20gXCJkcmF3cG9pbnQvc3JjXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuaW1wb3J0IHtjb25uZWN0RW5kUG9pbnRzLCBkaXN0LCBMb2NhdGlvbn0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQW5rbGV0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIgICAgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgICAgICBsb2MgICAgICAgICAgOiBgKyR7TG9jYXRpb24uTEVHfWAsXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFdoZXJlIGFsb25nIHRoZSBsZWcgKDAgaXMgYW5rbGUsIDEgaXMga25lZSkgdG8gc3RhcnQgdGhlIGJvdHRvbVxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBzdGFydEFsb25nTGVnOiAwLFxyXG4gICAgICAgICAgICAgICAgYWJvdmVQYXJ0cyAgIDogW2BwYXJ0cyAke0xvY2F0aW9uLkxFR31gXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLi4uZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGFpbkFua2xldFBhcnQgZXh0ZW5kcyBBbmtsZXRQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0YXJ0QWxvbmdMZWc6IDAuMjgsXHJcbiAgICAgICAgICAgIGNoYWluV2lkdGggICA6IDIsXHJcbiAgICAgICAgICAgIGNoYWluRGFzaCAgICA6IFszLCA3XSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSh0aGlzLnN0YXJ0QWxvbmdMZWcsIGV4LmFua2xlLmluLCBleC5jYWxmLmluKTtcclxuICAgICAgICBjb25zdCBsZWZ0ID0gc3AucmlnaHQucDE7XHJcbiAgICAgICAgY29uc3QgcXVlcnkgPSB7eDogbnVsbCwgeTogbGVmdC55fTtcclxuICAgICAgICBjb25zdCBbcmlnaHRdID0gaW50ZXJwb2xhdGVDdXJ2ZShleC5jYWxmLm91dCwgZXguYW5rbGUub3V0LCBxdWVyeSk7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuICAgICAgICAvLyBjdHgubGluZVdpZHRoID0gdGhpcy5jaGFpbldpZHRoO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY2hhaW5TdHJva2U7XHJcbiAgICAgICAgY3R4LnNldExpbmVEYXNoKHRoaXMuY2hhaW5EYXNoKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIGxlZnQsIGNvbm5lY3RFbmRQb2ludHMobGVmdCwgcmlnaHQsIC0wLjI1KSk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmFuZGVkQW5rbGV0UGFydCBleHRlbmRzIEFua2xldFBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGVnQ292ZXJhZ2U6IDAuNixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgbGV0IHNwID0gc3BsaXRDdXJ2ZSgwLjA1ICsgdGhpcy5zdGFydEFsb25nTGVnLCBleC5hbmtsZS5pbiwgZXguY2FsZi5pbik7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IHNwLnJpZ2h0LnAxO1xyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZSh0aGlzLmxlZ0NvdmVyYWdlLCBsZWZ0LCBzcC5yaWdodC5wMik7XHJcbiAgICAgICAgY29uc3QgdG9wTGVmdCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZSgxIC0gdGhpcy5zdGFydEFsb25nTGVnICogMC45LCBleC5jYWxmLm91dCwgZXguYW5rbGUub3V0KTtcclxuICAgICAgICBjb25zdCByaWdodCA9IHNwLmxlZnQucDI7XHJcblxyXG4gICAgICAgIHNwID0gc3BsaXRDdXJ2ZSgxIC0gdGhpcy5sZWdDb3ZlcmFnZSAqIDAuOSwgZXguY2FsZi5vdXQsIHJpZ2h0KTtcclxuICAgICAgICBjb25zdCB0b3BSaWdodCA9IHNwLnJpZ2h0LnAxO1xyXG4gICAgICAgIHJpZ2h0LmNwMSA9IHNwLnJpZ2h0LnAyLmNwMTtcclxuICAgICAgICByaWdodC5jcDIgPSBzcC5yaWdodC5wMi5jcDI7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIGxlZnQsIHRvcExlZnQsIGNvbm5lY3RFbmRQb2ludHModG9wTGVmdCwgdG9wUmlnaHQsIC0wLjI1KSwgcmlnaHQsIGNvbm5lY3RFbmRQb2ludHMocmlnaHQsIGxlZnQpKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQmFzZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQW5rbGV0IGV4dGVuZHMgQ2xvdGhpbmcge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xvdGhpbmdMYXllcjogQ2xvdGhlcy5MYXllci5JTk5FUixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb25jcmV0ZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2hhaW5BbmtsZXQgZXh0ZW5kcyBBbmtsZXQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0cm9rZSgpIHtcclxuICAgICAgICByZXR1cm4gXCJnb2xkXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJnb2xkXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IHRoaXMuc2lkZSxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IENoYWluQW5rbGV0UGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmFuZGVkQW5rbGV0IGV4dGVuZHMgQW5rbGV0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImdvbGRcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogdGhpcy5zaWRlLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQmFuZGVkQW5rbGV0UGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIGRyYXdQb2ludHMsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5pbXBvcnQge0xvY2F0aW9uLCBzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi5cIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge01ha2V1cH0gZnJvbSBcIi4vbWFrZXVwXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlwc3RpY2tQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICAgICAgbG9jICAgICAgIDogYCR7TG9jYXRpb24uTElQU31gLFxyXG4gICAgICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJmYWNlUGFydHMgbGlwc1wiXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgIGZpbGw6IFwiI2I5MTEwMFwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0ZXgubGlwcy50b3AsXHJcbiAgICAgICAgICAgIGV4LmxpcHMudGlwLFxyXG4gICAgICAgICAgICBleC5saXBzLm91dCxcclxuICAgICAgICAgICAgZXgubGlwcy5ib3QsXHJcbiAgICAgICAgICAgIGV4LmxpcHMuYm90LnRvcCxcclxuICAgICAgICAgICAgZXgubGlwcy5vdXQuaW4sXHJcbiAgICAgICAgICAgIGV4LmxpcHMudG9wLmJvdCxcclxuICAgICAgICAgICAgZXgubGlwcy50b3AsXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcblxyXG5cclxuICAgIH1cclxufVxyXG5cclxuIFxyXG5leHBvcnQgY2xhc3MgTGlwc3RpY2sgZXh0ZW5kcyBNYWtldXAge1xyXG4gICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBMaXBzdGlja1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExpcHN0aWNrUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge2NvdmVyTmlwcGxlc0lmSGF2ZU5vQnJlYXN0c30gZnJvbSBcIi4uL2RyYXcvZHJhd1wiO1xyXG5pbXBvcnQge1xyXG4gICAgLy9zaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGFkanVzdCxcclxuXHRicmVha1BvaW50LFxyXG5cdGdldFBvaW50T25DdXJ2ZSxcclxuLypcdHJlZmxlY3QsXHJcblx0aW50ZXJwb2xhdGVDdXJ2ZSxcclxuICAgICAgYnJlYWtQb2ludFxyXG5cdCAgKi9cclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbi8vaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5cclxuaW1wb3J0IHt3RHJlc3NCcmVhc3RQYXJ0fSBmcm9tIFwiLi93RHJlc3NcIjtcclxuaW1wb3J0IHtUb3B9IGZyb20gXCIuL3RvcHNcIjtcclxuXHJcbmltcG9ydCB7UGFudHN9IGZyb20gXCIuL3BhbnRzXCI7XHJcbmltcG9ydCB7Y2FsY0JlbHQsQWNjZXNzb3J5fSBmcm9tIFwiLi9hY2Nlc3NvcnlcIjtcclxuXHJcbmltcG9ydCB7VW5kZXJ3ZWFyfSBmcm9tIFwiLi91bmRlcndlYXJcIjtcclxuaW1wb3J0IHtjYWxjU3VwZXJCcmEsY2FsY1N1cGVyQnJhU3RyYXB9IGZyb20gXCIuL3N1cGVyX3VuZGVyd2VhclwiO1xyXG5pbXBvcnQge3dTdXBlckJyYUNoZXN0UGFydCx3U3VwZXJCcmFHZW5pdGFsUGFydH0gZnJvbSBcIi4vd1N1cGVyX3VuZGVyd2VhclwiO1xyXG5cclxuaW1wb3J0IHtjYWxjTmVja30gZnJvbSBcIi4vbmVja2xhY2VzXCI7XHJcblxyXG5pbXBvcnQge2NhbGNHbG92ZX0gZnJvbSBcIi4vZ2xvdmVzXCI7XHJcblxyXG5pbXBvcnQge2NhbGNHb3JnZXQsY2FsY0ZhbGxlblRvcCxCcmFGdXJPdXRsaW5lfSBmcm9tIFwiLi9GQUlcIjtcclxuaW1wb3J0IHtBcm1vcn0gZnJvbSBcIi4vYXJtb3JcIjtcclxuXHJcbmltcG9ydCB7d3diYl9mdHd9IGZyb20gXCIuL3d3YmJcIjtcclxuXHJcbmltcG9ydCB7XHJcblx0Z2V0TGltYlBvaW50c05lZ2F0aXZlLFxyXG5cdGdldExpbWJQb2ludHNCZWxsb3dQb2ludCxcclxuXHRmaW5kQmV0d2VlbixcclxufSBmcm9tIFwiLi4vdXRpbC9hdXhpbGlhcnlcIjtcclxuXHJcbmltcG9ydCB7RHJlc3NCcmVhc3RQYXJ0fSBmcm9tIFwiLi93RHJlc3NcIjtcclxuaW1wb3J0IHtjYWxjVGVlfSBmcm9tIFwiLi90b3BzXCI7XHJcblxyXG5cclxuXHRcdCAgICAgIFxyXG5leHBvcnQgY2xhc3Mgd1ZhbWJyYWNlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImFybVwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICAvL30sIHtcclxuICAgICAgICAgICAgYXJtQ292ZXJhZ2U6IDAuNSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHtvdXRlckFybVBvaW50cyxpbm5lckFybVBvaW50c30gPSBjYWxjR2xvdmUuY2FsbCh0aGlzLGV4KTtcclxuXHRcdFx0XHRcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHQuLi5vdXRlckFybVBvaW50cyxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KGV4LndyaXN0Lm91dCksXHJcblx0XHRcdGV4LndyaXN0LmluLFxyXG5cdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KG91dGVyQXJtUG9pbnRzWzBdKVxyXG5cdFx0XSk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuIFxyXG5leHBvcnQgY2xhc3Mgd0dyZWF2ZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXI6XHRcdExheWVyLkZST05ULFxyXG4gICAgICAgICAgICBsb2M6XHRcdFwiZmVldFwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBmZWV0XCIsIFwicGFydHMgbGVnXCJdLCAvLz8/IGNvcHkgb2Ygc29ja3NcclxuXHRcdFx0cmVmbGVjdDpcdGZhbHNlXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0dmFyIGFkZFBvaW50c01pZD1bXTtcclxuXHRcdGlmKHR5cGVvZiBleC5xdWFkcyAhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdGFkZFBvaW50c01pZFswXSA9ICBkYS5jbG9uZShleC5xdWFkcy50b3ApO1xyXG5cdFx0XHRhZGRQb2ludHNNaWRbMF0ueCA9ICBleC50aGlnaC5vdXQueDtcclxuXHRcdFx0YWRkUG9pbnRzTWlkWzFdID0gZGEuY2xvbmUoZXgucXVhZHMub3V0KTtcclxuXHRcdH07XHJcblx0XHR2YXIgb3V0ZXJQb2ludHMgPSAgZ2V0TGltYlBvaW50c05lZ2F0aXZlKGV4LmhpcCxleC5hbmtsZS5vdXQsdGhpcy5sZWdDb3ZlcmFnZSxleC5oaXAsZXgudGhpZ2gub3V0LCAuLi5hZGRQb2ludHNNaWQsIGV4LmtuZWUub3V0LGV4LmNhbGYub3V0LGV4LmFua2xlLm91dCk7XHJcblx0XHR2YXIgaW5uZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQob3V0ZXJQb2ludHNbMF0sdHJ1ZSxleC5ncm9pbixleC50aGlnaC5pbixleC5rbmVlLmludG9wLGV4LmtuZWUuaW4sZXguY2FsZi5pbixleC5hbmtsZS5pbik7XHJcblx0XHJcblx0XHRpZihvdXRlclBvaW50c1sxXSkgb3V0ZXJQb2ludHNbMV09IGV4dHJhY3RQb2ludCggb3V0ZXJQb2ludHNbMV0pO1xyXG5cdFx0XHJcblx0XHQvL3RvcCBjdXJ2ZVxyXG5cdFx0b3V0ZXJQb2ludHNbMF0gPSBleHRyYWN0UG9pbnQoIG91dGVyUG9pbnRzWzBdKTtcclxuXHRcdG91dGVyUG9pbnRzWzBdLmNwMSA9IHtcclxuXHRcdFx0eDpmaW5kQmV0d2Vlbihpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGgtMV0ueCxvdXRlclBvaW50c1swXS54LDAuNSksXHJcblx0XHRcdHk6b3V0ZXJQb2ludHNbMF0ueSsxNlxyXG5cdFx0fTtcclxuXHQgXHJcblx0XHRcclxuXHRcdC8vYm90IGN1cnZlXHJcblx0XHRpbm5lclBvaW50c1swXSA9IGRhLmV4dHJhY3RQb2ludCggaW5uZXJQb2ludHNbMF0pO1xyXG5cdFx0aW5uZXJQb2ludHNbMF0uY3AxID0ge1xyXG5cdFx0XHR4OmZpbmRCZXR3ZWVuKG91dGVyUG9pbnRzW291dGVyUG9pbnRzLmxlbmd0aC0xXS54LGlubmVyUG9pbnRzWzBdLngsMC41KSxcclxuXHRcdFx0eTppbm5lclBvaW50c1swXS55KzZcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0Li4ub3V0ZXJQb2ludHMsIC4uLmlubmVyUG9pbnRzLCBvdXRlclBvaW50c1swXVxyXG5cdFx0XSk7XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0xvaW5jbG90aFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuTUlEUklGVCwgLy9MYXllci5GUk9OVCwgLy8/PyBhc2FwXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRsZXQgdGVtcDtcclxuXHRcdFxyXG5cdFx0Ly9CRUxUXHJcblx0XHRjb25zdCBiZWx0ID0gY2FsY0JlbHQuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdC8vQ0xPVEhcclxuXHRcdGNvbnN0IGNsb3RoID0ge307XHJcblx0XHRcclxuXHRcdC8vdG9wIC0gY29weSBvZiBib3R0b20gYmVsdFxyXG5cdFx0Y2xvdGguaW5Ub3AgPSBleHRyYWN0UG9pbnQoYmVsdC5pbkJvdCk7XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLnRvcENvdmVyYWdlLGJlbHQuaW5Cb3QsYmVsdC5vdXRCb3QpO1xyXG5cdFx0Y2xvdGgub3V0VG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRjbG90aC5vdXRUb3AuY3AxID0gYmVsdC5pbkJvdC5jcDE7XHJcblx0XHRcdFxyXG5cdFx0Ly9sZWcgY292ZXJhZ2UgXHJcblx0XHRjb25zdCBsb3dlc3RZID0gZmluZEJldHdlZW4oZXguYW5rbGUub3V0LnksZXguaGlwLnksMS10aGlzLmxlZ0NvdmVyYWdlKVxyXG5cdFx0XHJcblx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmJvdHRvbUNvdmVyYWdlLGJlbHQuaW5Cb3QsYmVsdC5vdXRCb3QpO1xyXG5cdFx0Y2xvdGgub3V0Qm90ID0ge1xyXG5cdFx0XHR4OiB0ZW1wLmxlZnQucDIueCxcclxuXHRcdFx0eTogbG93ZXN0WVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUoMC4zLGNsb3RoLm91dFRvcCxjbG90aC5vdXRCb3QpO1xyXG5cdFx0Y2xvdGgub3V0Qm90LmNwMT10ZW1wLmxlZnQucDI7XHJcblxyXG5cdFx0Y2xvdGgub3V0Qm90LmNwMS54ICs9IHRoaXMuY3VydmVYO1xyXG5cdFx0Y2xvdGgub3V0Qm90LmNwMS55ICs9IHRoaXMuY3VydmVZO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdC8vYm90dG9tICYgYm90dG9tIGN1cnZlXHJcblx0XHRjbG90aC5pbkJvdCA9IHtcclxuXHRcdFx0eDogLTAuMSxcclxuXHRcdFx0eTogbG93ZXN0WSAtICg0KnRoaXMuYm90dG9tQ292ZXJhZ2UpXHJcblx0XHR9O1xyXG5cdFx0Y2xvdGguaW5Cb3QuY3AxID0ge1xyXG5cdFx0XHR4OiBmaW5kQmV0d2VlbihjbG90aC5vdXRCb3QueCxjbG90aC5pbkJvdC54KSxcclxuXHRcdFx0eTogY2xvdGguaW5Cb3QueVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRjbG90aC5pblRvcCxcclxuXHRcdFx0Y2xvdGgub3V0VG9wLFxyXG5cdFx0XHRjbG90aC5vdXRCb3QsXHJcblx0XHRcdGNsb3RoLmluQm90LFxyXG5cdFx0XSk7XHJcblx0XHRcclxuXHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDtcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0YmVsdC5pblRvcCxcclxuXHRcdFx0YmVsdC5vdXRUb3AsXHJcblx0XHRcdGJlbHQub3V0TWlkLFxyXG5cdFx0XHRiZWx0Lm91dEJvdCxcclxuXHRcdFx0YmVsdC5pbkJvdCxcclxuXHRcdCk7XHJcblx0XHQgXHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHJcblx0fVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzICB3RmFsbGVuVG9wIGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICA6IHRydWUsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFx0XHJcblx0XHRjb25zdCB7YmVsdCx0b3BJbix0b3BOZWNrLHRvcE91dCxib3RPdXQsYm90SW59ID0gY2FsY0ZhbGxlblRvcC5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFx0XHRcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHR0b3BJbixcclxuXHRcdFx0dG9wTmVjayxcclxuXHRcdFx0dG9wT3V0LFxyXG5cdFx0XHRib3RPdXQsXHJcblx0XHRcdGJvdEluLFxyXG5cdFx0XHR0b3BJbixcclxuXHRcdF0pO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFxyXG5cdFx0XHJcblx0XHQvL0JFTFQgQUdBSU5cclxuXHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLnN0cm9rZVN0eWxlO1xyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRiZWx0LmluVG9wLFxyXG5cdFx0XHRiZWx0Lm91dFRvcCxcclxuXHRcdFx0YmVsdC5vdXRNaWQsXHJcblx0XHRcdGJlbHQub3V0Qm90LFxyXG5cdFx0XHRiZWx0LmluQm90LFxyXG5cdFx0XHRcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHRcclxuXHRcdFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3R29yZ2V0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5HRU5JVEFMUywgLy9iZWNhdXNlIGZ1bmNraW5nIGZhbGxlbiB0b3BcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIrbmVja1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRjb25zdCBuZWNrID0gY2FsY0dvcmdldC5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdG5lY2suaW5Ub3AsXHJcblx0XHRcdG5lY2sub3V0VG9wLFxyXG5cdFx0XHRuZWNrLm1pZCxcclxuXHRcdFx0bmVjay5vdXRCb3QsXHJcblx0XHRcdG5lY2sub3V0Qm90LFxyXG5cdFx0XHRuZWNrLmluQm90LFxyXG5cdFx0XSk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuZ3Jvb3ZlKXtcclxuXHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDAuNCwgIG5lY2sub3V0Qm90LCBuZWNrLmluQm90KTtcclxuXHRcdFx0Y29uc3QgZ3Jvb3ZlQm90ID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuNSwgIG5lY2suaW5Ub3AsIG5lY2sub3V0VG9wKTtcclxuXHRcdFx0Y29uc3QgZ3Jvb3ZlVG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcdFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdGdyb292ZUJvdCxcclxuXHRcdFx0XHRncm9vdmVUb3AsXHJcblx0XHRcdFx0YnJlYWtQb2ludCxcclxuXHRcdFx0XHRuZWNrLmluQm90LFxyXG5cdFx0XHRcdG5lY2suaW5Ub3AsXHJcblx0XHRcdCk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3TG9pbmNsb3RoIGV4dGVuZHMgUGFudHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgd2Fpc3RDb3ZlcmFnZTogMC40MixcclxuXHRcdFx0YmVsdFdpZHRoOiA3LFxyXG5cdFx0XHRiZWx0Q3VydmU6IC03LFxyXG5cdFx0XHRcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRcclxuXHRcdFx0dG9wQ292ZXJhZ2U6IDAuOCxcclxuXHRcdFx0bGVnQ292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0Ym90dG9tQ292ZXJhZ2U6IDAuMTQsXHJcblx0XHRcdFxyXG5cdFx0XHRjdXJ2ZVg6IC0xNixcclxuXHRcdFx0Y3VydmVZOiAxNCxcclxuXHRcdFxyXG5cdFx0XHRoaWdobGlnaHQ6XCJoc2xhKDMzLCA4MCUsIDEwJSwgMSlcIixcclxuXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDM1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDI1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHQgXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0xvaW5jbG90aFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdMb2luY2xvdGhQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdCYXJiYXJpY0JyYSBleHRlbmRzIFVuZGVyd2VhciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRmdXJXaWR0aDogNCxcclxuXHRcdFx0aGlnaGxpZ2h0OlwiaHNsYSgzMywgODAlLCAxMCUsIDEpXCIsXHJcblx0XHRcdFxyXG5cdFx0XHRzaG93U3RyYXA6ZmFsc2UsXHJcblx0XHRcdHN0cmFwV2lkdGg6IDIsXHJcblx0XHRcdG5lY2tDb3ZlcmFnZTogMC43LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDM1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDI1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEJyYUZ1ck91dGxpbmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlckJyYUNoZXN0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyQnJhR2VuaXRhbFBhcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0dvcmdldCBleHRlbmRzIEFjY2Vzc29yeSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk9VVEVSX0ZBUixcclxuXHRcdFx0XHJcblx0XHRcdGN1cnZlWDogMCxcclxuXHRcdFx0Y3VydmVZOiAwLFxyXG5cdFx0XHRncm9vdmU6IGZhbHNlLFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjE2LFxyXG5cdFx0XHRuZWNrVG9wQ292ZXJhZ2U6IC0wLjEsXHJcblx0XHRcdG5lY2tCb3RDb3ZlcmFnZTogMC44MSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDM1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDI1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdHb3JnZXRQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgXHJcblx0XHQgICBcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdGYWxsZW4gZXh0ZW5kcyBUb3Age1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHJcblx0XHRcdHRvcEluQ292ZXJhZ2U6IDAsIFxyXG5cdFx0XHR0b3BPdXRDb3ZlcmFnZTogMC4yMixcclxuXHRcdFx0XHJcblx0XHRcdGJvdEluQ292ZXJhZ2U6IDAuMDIsIFxyXG5cdFx0XHRib3RPdXRDb3ZlcmFnZTogMC42OSxcclxuXHRcdFx0XHJcblx0XHRcdG1pZGRsZTogMyxcclxuXHRcdFx0XHJcblx0XHRcdGJlbGx5WDogLTE1LFxyXG5cdFx0XHRiZWxseVk6IC04LFxyXG5cdFx0XHRcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4zLFxyXG5cdFx0XHRiZWx0V2lkdGg6IDIsXHJcblx0XHRcdGJlbHRDdXJ2ZTogLTcsXHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDM1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2xhKDMzLCA0NSUsIDI1JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdGYWxsZW5Ub3BcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICBcclxuXHRcdCAgIFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdCaWtpbmlUb3BCcmVhc3RQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl1cclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHJcblx0XHRjb25zdCByYWRpdXMgPSAzLjY7XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRpZih0aGlzLm91dGVyTmVja0NvdmVyYWdlPHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2UpdGhpcy5vdXRlck5lY2tDb3ZlcmFnZT10aGlzLmlubmVyTmVja0NvdmVyYWdlO1xyXG5cdFx0aWYodGhpcy5pbm5lck5lY2tDb3ZlcmFnZT50aGlzLm91dGVyTmVja0NvdmVyYWdlKXRoaXMuaW5uZXJOZWNrQ292ZXJhZ2U9dGhpcy5vdXRlck5lY2tDb3ZlcmFnZTtcclxuXHRcdFxyXG5cdFx0bGV0IGN1c3AgPSBleC5uZWNrLmN1c3A7XHJcblx0XHRpZihleC50cmFwZXppdXMpY3VzcD1leC50cmFwZXppdXM7XHJcblx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKHRoaXMub3V0ZXJOZWNrQ292ZXJhZ2UsY3VzcCwgZXguY29sbGFyYm9uZSk7XHJcblx0XHRsZXQgdG9wT3V0ID0gc3AubGVmdC5wMjtcclxuXHRcdFx0XHRcclxuXHRcdGlmKHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2U8MCl7XHJcblx0XHRcdHNwID0gc3BsaXRDdXJ2ZSgxK3RoaXMuaW5uZXJOZWNrQ292ZXJhZ2UsIGV4Lm5lY2sudG9wLCBjdXNwKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRzcCA9IHNwbGl0Q3VydmUodGhpcy5pbm5lck5lY2tDb3ZlcmFnZSwgY3VzcCwgZXguY29sbGFyYm9uZSk7XHJcblx0XHR9XHJcblx0XHRsZXQgdG9wSW4gPSBleHRyYWN0UG9pbnQoc3AubGVmdC5wMik7XHJcblx0XHRcdFx0XHJcblx0XHRcclxuXHRcdC8vTk8gQlJFQVNUU1xyXG5cdFx0aWYgKGV4Lmhhc093blByb3BlcnR5KFwiYnJlYXN0XCIpID09PSBmYWxzZSkge1xyXG5cdFx0XHRsZXQgYXJtcGl0ID0gYWRqdXN0KGV4LmFybXBpdCwwLDApO1xyXG5cdFx0XHRsZXQgYm90dG9tID0ge1xyXG5cdFx0XHRcdHg6IC0wLjEsXHJcblx0XHRcdFx0eTogYXJtcGl0LnktMVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0bGV0IGNsZWF2YWdlID0ge1xyXG5cdFx0XHRcdHggOiAtMC4xLFxyXG5cdFx0XHRcdHkgOiBib3R0b20ueSArIChyYWRpdXMqMilcclxuXHRcdFx0fTtcclxuXHRcdFx0Y2xlYXZhZ2UuY3AxID0ge1xyXG5cdFx0XHRcdHg6IGJvdHRvbS54ICsgKHJhZGl1cyoyKSxcclxuXHRcdFx0XHR5OiBib3R0b20ueSArIHJhZGl1c1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0c3AgPSBzcGxpdEN1cnZlKDAuNSxjbGVhdmFnZSx0b3BJbik7XHJcblx0XHRcdHRvcEluLmNwMSA9IHtcclxuXHRcdFx0XHR4OiBzcC5sZWZ0LnAyLngrdGhpcy5jdXJ2ZUNsZWF2YWdlWCxcclxuXHRcdFx0XHR5OiBzcC5sZWZ0LnAyLnkrdGhpcy5jdXJ2ZUNsZWF2YWdlWSxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0Y2xlYXZhZ2UsXHJcblx0XHRcdFx0dG9wSW4sXHJcblx0XHRcdFx0dG9wT3V0LFxyXG5cdFx0XHRcdGV4dHJhY3RQb2ludChhcm1waXQpLFxyXG5cdFx0XHRcdGJvdHRvbVxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0XHR0b3BJbixcclxuXHRcdFx0XHR0b3BPdXQsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KGFybXBpdClcclxuXHRcdFx0KTtcdFxyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcdFxyXG5cdFx0XHRjb3Zlck5pcHBsZXNJZkhhdmVOb0JyZWFzdHMoZXgsIGN0eCwgdGhpcylcclxuXHRcdFx0XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly9CUkVBU1RcdFx0XHJcblx0XHQvL2NhbGN1bGF0ZSBwb2ludHMgLSBJIHJlYWxseSBkdW5ubyBob3csIGJ1dCBpdCBkbyBcclxuXHRcdGNvbnN0IHRpcCA9IGFkanVzdChleC5icmVhc3QudGlwLCAwLjEsIDApO1xyXG5cdFx0Y29uc3QgYm90ID0gYWRqdXN0KGV4LmJyZWFzdC5ib3QsIDAsIC0wLjEpO1xyXG5cdFx0XHJcblx0XHRsZXQgYm90dG9tID0ge1xyXG5cdFx0XHR4OiAtMC4xLFxyXG5cdFx0XHR5OiBib3QueVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0bGV0IGNsZWF2YWdlID0ge1xyXG5cdFx0XHR4IDogLTAuMSxcclxuXHRcdFx0eSA6IGJvdHRvbS55ICsgKHJhZGl1cyoyKVxyXG5cdFx0fTtcclxuXHRcdGNsZWF2YWdlLmNwMSA9IHtcclxuXHRcdFx0eDogYm90dG9tLnggKyAocmFkaXVzKjIpLFxyXG5cdFx0XHR5OiBib3R0b20ueSArIHJhZGl1c1xyXG5cdFx0fVxyXG5cdFx0XHRcclxuXHRcdHNwID0gc3BsaXRDdXJ2ZSgwLjUsY2xlYXZhZ2UsdG9wSW4pO1xyXG5cdFx0dG9wSW4uY3AxID0ge1xyXG5cdFx0XHRcdHg6IHNwLmxlZnQucDIueCt0aGlzLmN1cnZlQ2xlYXZhZ2VYLFxyXG5cdFx0XHRcdHk6IHNwLmxlZnQucDIueSt0aGlzLmN1cnZlQ2xlYXZhZ2VZLFxyXG5cdFx0fTtcclxuXHRcdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0XHR0b3BJbixcclxuXHRcdFx0XHR0b3BPdXQsXHJcblx0XHRcdFx0Ly90b3AsXHJcblx0XHRcdFx0dGlwLFxyXG5cdFx0XHRcdGJvdCxcclxuXHRcdFx0XHRib3R0b20sXHJcblx0XHRcdFx0Y2xlYXZhZ2UsXHJcblx0XHRcdF0sW1xyXG5cdFx0XHRcdGNsZWF2YWdlLFxyXG5cdFx0XHRcdHRvcEluLFxyXG5cdFx0XHRcdHRvcE91dCxcclxuXHRcdFx0XHQvL3RvcCxcclxuXHRcdFx0XHR0aXAsXHJcblx0XHRcdFx0Ym90LFxyXG5cdFx0XHRcdGJvdHRvbSxcclxuXHRcdFx0XHRjbGVhdmFnZSxcclxuXHRcdF0pO1xyXG5cdFx0XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cdFx0XHQgXHJcbmV4cG9ydCBjbGFzcyB3Q3VpcmFzc1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgIC8qIGFib3ZlUGFydHMgICAgICAgICA6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXSwqL1xyXG4gIC8vICAgICAgYWJvdmVQYXJ0c1x0XHRcdDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCIsIFwicGFydHMgbGVnXCJdLFxyXG5cdFx0XHQvKmFib3ZlU2FtZUxheWVyUGFydHM6IFtcImdyb2luXCIsIFwicGFydHMgbGVnXCJdLCovXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIHtcclxuXHJcblx0XHR9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG5cdFx0bGV0IHtcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsY2xlYXZhZ2VUb3AsbmVjayxzaG91bGRlcixhcm1waXQsd2Fpc3QsaGlwLG91dCxib3R0b20sXHJcblx0XHR9ID0gY2FsY1RlZS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0IENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRzaG91bGRlciA9IGFkanVzdChzaG91bGRlciwtMSwwLjUpO1xyXG5cdFx0Ly9hcm1waXQgPSBhZGp1c3QoYXJtcGl0LC0xLDApO1xyXG5cdFx0YXJtcGl0LmNwMSA9IHtcclxuXHRcdFx0eDogKHNob3VsZGVyLngtNSksXHJcblx0XHRcdHk6ICgwLjUqKHNob3VsZGVyLnktYXJtcGl0LnkpKSthcm1waXQueSxcclxuXHRcdH1cclxuXHRcdC8vYXJtcGl0LmNwMSA9IGFkanVzdChhcm1waXQuY3AxLC01LDApO1xyXG5cdFx0YXJtcGl0LmNwMiA9IHZvaWQgMDtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRib3R0b20gPSB7XHJcblx0XHRcdHk6b3V0LnktNixcclxuXHRcdFx0eDotMC4xLFxyXG5cdFx0fTtcclxuXHRcdGJvdHRvbS5jcDEgPSB7XHJcblx0XHRcdHg6IGJvdHRvbS54ICogMC41ICsgb3V0LnggKiAwLjUsXHJcblx0XHRcdHk6IGJvdHRvbS55XHJcblx0XHR9O1xyXG5cdFxyXG5cdFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdFx0Y2xlYXZhZ2VCb3QsICBcclxuXHRcdFx0Y2xlYXZhZ2VUb3AsICBcclxuXHRcdFx0bmVjaywgXHJcblx0XHRcdHNob3VsZGVyLCBcclxuXHRcdFx0Ly9leC5jaGVzdC5uaXBwbGVzLFxyXG5cdFx0XHRhcm1waXQsICBcclxuXHRcdFx0d2Fpc3QsXHJcblx0XHRcdGhpcCxcclxuXHRcdFx0b3V0LFxyXG5cdFx0XHRib3R0b21cclxuXHRcdF0pO1xyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0N1aXJhc3NCcmVhc3RQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLkdFTklUQUxTLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcImNoZXN0XCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXSxcclxuXHRcdFx0IC8qIGFib3ZlUGFydHMgICAgICAgICA6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiXSwqL1xyXG5cdC8vXHRhYm92ZVBhcnRzXHRcdFx0OiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJwYXJ0cyBsZWdcIl0sXHJcblx0XHRcdC8qYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiZ3JvaW5cIiwgXCJwYXJ0cyBsZWdcIl0sKi9cclxuXHRcdFx0XHJcbiAgICAgICAgfSwge1xyXG5cclxuXHRcdH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdCBpZiAoY292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzKGV4LCBjdHgsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblx0XHRcclxuXHRcdGNvbnN0IGJyZWFzdCA9IGV4LmJyZWFzdDtcclxuXHRcdC8vbmlwcGxlcyB3aXRoIG5vIGJyZWFzdHNcclxuICAgICAgIFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdGJyZWFzdC50b3AsYnJlYXN0LnRpcCxicmVhc3QuYm90LGFkanVzdChicmVhc3QuaW4sMCwtMSksYWRqdXN0KGJyZWFzdC5jbGVhdmFnZSwwLC0yKSxhZGp1c3QoYnJlYXN0LmNsZWF2YWdlLC0wLjQsMSksYWRqdXN0KGJyZWFzdC50b3AsMCwxKVxyXG5cdFx0XSxbXHJcblx0XHRcdGJyZWFzdC50b3AsYnJlYXN0LnRpcCxicmVhc3QuYm90LFxyXG5cdFx0XSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3Mgd0Npbmd1bHVtUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIit0b3Jzb1wiLFxyXG5cdFx0XHRyZWZsZWN0XHRcdDp0cnVlLCBcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogWyBcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiLCBcInBhcnRzIGNoZXN0XCIsIFwiY2xvdGhpbmdQYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiICAvKlwiY2xvdGhpbmdQYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiovXSxcclxuXHRcdFx0YWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiY2xvdGhpbmdQYXJ0cyB0b3Jzb1wiXSxcclxuLy9cdFx0XHQgYWJvdmVQYXJ0czogWyBcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCIgLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLFwicGFydHMgY2hlc3RcIiwgXCJjbG90aGluZ1BhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCIgIC8qXCJjbG90aGluZ1BhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiKi9dLFxyXG5cdFx0fSxcclxuXHRcdHtcdFxyXG5cdFx0XHRcclxuICAgICAgICB9LFxyXG5cdFx0Li4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRjb25zdCB7aW5Ub3Asb3V0VG9wLG91dE1pZCxvdXRCb3QsaW5Cb3R9ID0gY2FsY0JlbHQuY2FsbCh0aGlzLCBleCk7XHJcblx0XHRcclxuXHRcdFxyXG5cdC8vXHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aDtcclxuXHQvL1x0Y29uc3QgcG9pbnR5ID0gNTtcclxuXHRcdC8qXHJcblx0XHRsZXQgYSA9IGdldFBvaW50T25DdXJ2ZSgxLjMsb3V0Qm90LGluQm90KVxyXG5cdFx0bGV0IGIgPSBnZXRQb2ludE9uQ3VydmUoMC43LG91dEJvdCxpbkJvdClcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdGNvbnN0IGxlbmd0aCA9IDIwO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdGRyYXdGaXJzdFBsYXRlKGEsYik7XHJcblx0XHQqL1xyXG5cdFx0Y29uc3QgcG9pbnR5ID0gdGhpcy5wb2ludHk7XHJcblx0XHRjb25zdCBob3dNYW55ID0gTWF0aC5mbG9vcih0aGlzLm51bWJlci8yKTtcclxuXHRcdGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gMSAtICgodGhpcy5tYXJnaW4vMTApICsgKCh0aGlzLnNwYWNlLzEwKSAqIGhvd01hbnkpICk7IFxyXG5cdFx0Y29uc3Qgd2lkdGggPSBhdmFpbGFibGVXaWR0aC8oaG93TWFueSswLjUpO1xyXG5cdFx0XHJcbi8vY29uc29sZS5sb2codGhpcyk7XHJcblx0XHJcblx0XHRcdFxyXG5cdFxyXG5cdFx0XHJcblx0Ly9cdGZvcihsZXQgaSA9IGhvd01hbnktMTsgaSA+IDA7IGktLSl7XHJcblx0Zm9yKGxldCBpID0gMDsgaSA8IGhvd01hbnk7IGkrKyl7XHRcdFxyXG5cdFx0XHQvL2NvbnN0IGFQb3NpdGlvbiA9IDEgLSAoICAoaSp3aWR0aCkgKyAoMC41KndpZHRoKSArICgoMStpKSoodGhpcy5zcGFjZS8xMCkpICApO1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uc3QgYlBvc2l0aW9uID0gMCArICh0aGlzLm1hcmdpbi8xMCkgKyAoaSp3aWR0aCkgKyAoaSoodGhpcy5zcGFjZS8xMCkpO1xyXG5cdFx0XHRcclxuXHRcdC8vXHQoICAoaSp3aWR0aCkgKyAoMC41KndpZHRoKSArICgoMStpKSoodGhpcy5zcGFjZS8xMCkpICApO1xyXG5cdFx0XHRcclxuXHQvL1x0XHRjb25zb2xlLmxvZyhiUG9zaXRpb24pXHJcblx0XHRcdGNvbnN0IGEgPSBnZXRQb2ludE9uQ3VydmUoYlBvc2l0aW9uK3dpZHRoLG91dEJvdCxpbkJvdCk7XHJcblx0XHRcdGNvbnN0IGIgPSBnZXRQb2ludE9uQ3VydmUoYlBvc2l0aW9uLG91dEJvdCxpbkJvdCk7XHJcblx0LypcdFx0XHJcblx0XHRcdGNvbnNvbGUubG9nKGEpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhiKTtcclxuXHRcdFx0Y29uc29sZS5sb2codGhpcy5tYXJnaW4pO1xyXG5cdFx0XHRjb25zb2xlLmxvZyh3aWR0aCk7XHJcblx0Ki9cclxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGggKiAoICAxIC0gKCAodGhpcy5jcmVzdC8xMCkqKCgxK2hvd01hbnktaSkvMTApICkgIClcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRkcmF3UGxhdGUodGhpcyxhLGIsbGVuZ3RoKTtcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGNvbnN0IGEgPSBnZXRQb2ludE9uQ3VydmUoMSsod2lkdGgvMiksb3V0Qm90LGluQm90KVxyXG5cdFx0Y29uc3QgYiA9IGdldFBvaW50T25DdXJ2ZSgxLSh3aWR0aC8yKSxvdXRCb3QsaW5Cb3QpXHJcblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCAqICgxKVxyXG5cdFx0ZHJhd0ZpcnN0UGxhdGUodGhpcyxhLGIsbGVuZ3RoKTtcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRmdW5jdGlvbiBkcmF3Rmlyc3RQbGF0ZSh3aGF0LGEsYixsZW5ndGgpe1xyXG5cdC8vXHRcdGNvbnNvbGUubG9nKFwiRFJBVyBQTEFURVwiKTtcclxuIFx0XHRcdFxyXG5cdFx0XHRjb25zdCBjID0gYWRqdXN0KGIsMCwtbGVuZ3RoKTtcclxuXHRcdFx0Y29uc3QgZCA9IGFkanVzdChmaW5kQmV0d2VlbihhLGIpLDAsLShsZW5ndGgrcG9pbnR5KSk7XHJcblx0XHRcdGNvbnN0IGUgPSBhZGp1c3QoYSwwLC1sZW5ndGgpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uc3QgZiA9IGFkanVzdChmaW5kQmV0d2VlbihhLGIpLDAsMCk7XHJcblx0XHRcdFxyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHdoYXQsZXgsY3R4LFtiLGMsZCxmXSxbYixjLGRdKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0ZnVuY3Rpb24gZHJhd1BsYXRlKHdoYXQsYSxiLGxlbmd0aCl7XHJcblx0Ly9jb25zb2xlLmxvZyhcIkRSQVcgUExBVEVcIik7XHJcbiBcdFxyXG5cdFx0XHRjb25zdCBjID0gYWRqdXN0KGIsMCwtbGVuZ3RoKTtcclxuXHRcdFx0LypcclxuY29uc29sZS5sb2coXCJmYlwiKVx0XHRcclxuY29uc29sZS5sb2coYSlcclxuY29uc29sZS5sb2coYilcclxuKi9cclxuXHRcdFx0Y29uc3QgZCA9IGFkanVzdChmaW5kQmV0d2VlbihhLGIpLDAsLShsZW5ndGgrcG9pbnR5KSk7XHJcblx0XHRcdGNvbnN0IGUgPSBhZGp1c3QoYSwwLC1sZW5ndGgpO1xyXG5cdFx0XHRcclxuXHRcdFx0d3diYl9mdHcuY2FsbCh3aGF0LGV4LGN0eCxbYixjLGQsZSxhXSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly9CRUxUXHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0aW5Ub3AsXHJcblx0XHRcdG91dFRvcCxcclxuXHRcdFx0b3V0TWlkLFxyXG5cdFx0XHRvdXRCb3QsXHJcblx0XHRcdGluQm90LFxyXG5cdFx0XSk7XHJcblx0XHRcclxuXHRcdCBcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogQmFzZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0dyZWF2ZUxlZnQgZXh0ZW5kcyBBcm1vciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC41NCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3R3JlYXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyB3R3JlYXZlUmlnaHQgZXh0ZW5kcyBBcm1vciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC41NCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdHcmVhdmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdHcmVhdmVzIGV4dGVuZHMgQXJtb3Ige1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0bGVnQ292ZXJhZ2U6IDAuNTQsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3R3JlYXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0dyZWF2ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG4gXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0Jpa2luaVRvcCBleHRlbmRzIFRvcCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHQvL2NsZWF2YWdlQ292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0b3V0ZXJOZWNrQ292ZXJhZ2U6IDAuMzUsXHJcblx0XHRcdGlubmVyTmVja0NvdmVyYWdlOiAwLjAzLFxyXG5cdFx0XHRjdXJ2ZUNsZWF2YWdlWDogMTQsXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VZOiAtMTQsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNjYsXHJcblx0XHRcdHNpZGVMb29zZTogMCxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3QmlraW5pVG9wQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0N1aXJhc3MgZXh0ZW5kcyBBcm1vciB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk9VVEVSX0ZBUixcclxuXHRcdFx0XHJcblx0XHRcdGNsZWF2YWdlT3BlbmVzczogMC4wNTUsXHJcblx0XHRcdGNsZWF2YWdlQ292ZXJhZ2U6IDAuMSxcclxuXHRcdFx0c2lkZUxvb3NlOiAwLjMsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVg6MSxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVk6LTQsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAxLCAvL3VzZWQgb25seSBieSBEcmVzc0JyZWFzdFBhcnQgYnV0IGltcG9ydGFudFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0N1aXJhc3NCcmVhc3RQYXJ0XHJcbiAgICAgICAgICAgIH0seyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdDdWlyYXNzUGFydFxyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdDaW5ndWx1bSBleHRlbmRzIEFybW9yIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuT1VURVJfRkFSLFxyXG5cdFx0XHRcclxuXHRcdFx0bnVtYmVyOiA1LFxyXG5cdFx0XHRzcGFjZTogMCxcclxuXHRcdFx0bWFyZ2luOiAwLFxyXG5cdFx0XHRsZW5ndGg6IDMwLFxyXG5cdFx0XHRwb2ludHk6IDUsXHJcblx0XHRcdGNyZXN0OiAxLFxyXG5cdFx0XHRcclxuXHRcdFx0aHVlOiAwLFxyXG5cdFx0XHRzYXR1cjogNTAsXHJcblx0XHRcdGxpZ2h0OjUwLFxyXG5cdFx0XHRcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4yLFxyXG5cdFx0XHRiZWx0V2lkdGg6IDcsXHJcblx0XHRcdGJlbHRDdXJ2ZTotNixcclxuXHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3Q2luZ3VsdW1QYXJ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1ZhbWJyYWNlcyBleHRlbmRzIEFybW9yIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6MC43NSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKXtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsIDAlLCAyOCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKXtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgIFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1ZhbWJyYWNlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdWYW1icmFjZVBhcnQsXHJcbiAgICAgICAgICAgIH0sXHRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3Mgd1ZhbWJyYWNlTGVmdCBleHRlbmRzIEFybW9yIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6MC43NSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKXtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsIDAlLCAyOCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKXtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1ZhbWJyYWNlUGFydCxcclxuICAgICAgICAgICAgfVx0XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdWYW1icmFjZVJpZ2h0IGV4dGVuZHMgQXJtb3Ige1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSl7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRhcm1Db3ZlcmFnZTowLjc1LFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMCwgMCUsIDI4JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgXHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3VmFtYnJhY2VQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG5cdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7Y29ubmVjdEVuZFBvaW50c30gZnJvbSBcIi4uL2RyYXcvZHJhd1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxuXHRkcmF3UG9pbnRzLCBcclxuXHRzcGxpdEN1cnZlLFxyXG5cdC8vY2xvbmUsXHJcblx0Ly9hZGp1c3QsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuIFxyXG5pbXBvcnQge1xyXG5cdHBlcnBlbmRpY3VsYXJQb2ludFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuaW1wb3J0IHtCb2R5TWFrZXVwfSBmcm9tIFwiLi9uYWlsc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIHdUaHVtYlBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQVJNUyxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCIraGFuZFwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBhcm1cIiwgXCJkZWNvcmF0aXZlUGFydHMgYXJtXCIsIFwicGFydHMgaGFuZFwiXSxcclxuICAgICAgICB9LCB7XHJcbiBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcdFxyXG5cdFx0bGV0IHRpcCA9IGV4LnRodW1iLnRpcDtcclxuXHRcdGxldCBvdXQgPSBleC50aHVtYi5vdXQ7XHJcblx0XHRsZXQgdGVtcDtcclxuXHRcdFx0XHRcclxuXHRcdHRlbXAgPSBkYS5zcGxpdEN1cnZlKC0wLjA4LHRpcCxvdXQpO1xyXG5cdFx0bGV0IGJvdHRvbSA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHR0ZW1wID0gZGEuc3BsaXRDdXJ2ZSgwLjE1LHRpcCxvdXQpO1xyXG5cdFx0bGV0IHRvcCA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0XHRcdFxyXG5cdFx0dG9wLnggKz0gMC4yO1xyXG5cdFx0XHRcdFxyXG5cdFx0Ym90dG9tLmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludCh0b3AsYm90dG9tLDAuNywwLjgpO1xyXG5cdFx0dG9wLmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludCh0b3AsYm90dG9tLDAuNywtMS4wKTtcclxuXHRcdFx0XHJcblx0XHQvL2NvbnNvbGUubG9nKHRvcCk7XHRcclxuXHRcdC8vY29uc29sZS5sb2coYm90dG9tKTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5pbnZpc2libGU8MSl7XHJcblx0XHRcdGN0eC5nbG9iYWxBbHBoYSA9IDEgLSB0aGlzLmludmlzaWJsZTtcclxuXHRcdFx0aWYoY3R4Lmdsb2JhbEFscGhhPDApY3R4Lmdsb2JhbEFscGhhPTA7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsdG9wLGJvdHRvbSx0b3ApO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0fTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3RmluZ2VyUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5BUk1TLFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIitoYW5kXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuIFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFx0XHJcblx0XHRsZXQgdGlwID0gZXguaGFuZC50aXA7XHJcblx0XHRsZXQgb3V0ID0gZXguaGFuZC5rbnVja2xlO1xyXG5cdFx0bGV0IHRlbXA7XHJcblx0XHRcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKC0wLjA4LHRpcCxvdXQpO1xyXG5cdFx0bGV0IGJvdHRvbSA9IGV4dHJhY3RQb2ludCh0ZW1wLmxlZnQucDIpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuMTUsdGlwLG91dCk7XHJcblx0XHRsZXQgdG9wID0gZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7XHJcblx0XHRcclxuXHRcdHRvcC54IC09IDAuMjtcclxuXHRcdGJvdHRvbS54IC09IDAuNjtcclxuXHRcdFxyXG5cdFx0Ym90dG9tLmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludCh0b3AsYm90dG9tLDAuNywwLjgpO1xyXG5cdFx0dG9wLmNwMSA9IHBlcnBlbmRpY3VsYXJQb2ludCh0b3AsYm90dG9tLDAuNywtMS4wKTtcclxuXHRcdFxyXG5cdFx0Ly9jb25zb2xlLmxvZyh0b3ApO1xyXG5cdFx0XHJcblx0XHQvL2NvbnNvbGUubG9nKGJvdHRvbSk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuaW52aXNpYmxlPDEpe1xyXG5cdFx0XHRjdHguZ2xvYmFsQWxwaGEgPSAxIC0gdGhpcy5pbnZpc2libGU7XHJcblx0XHRcdGlmKGN0eC5nbG9iYWxBbHBoYTwwKWN0eC5nbG9iYWxBbHBoYT0wO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LHRvcCxib3R0b20sdG9wKTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3TmFpbHMgZXh0ZW5kcyBCb2R5TWFrZXVwIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0aW52aXNpYmxlOiAwLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMCwgMCUsIDI4JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0ZpbmdlclBhcnQsXHJcblx0XHRcdH0se1xyXG5cdFx0XHRcdHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdUaHVtYlBhcnQsXHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdGaW5nZXJQYXJ0LFxyXG5cdFx0XHR9LHtcclxuXHRcdFx0XHRzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1RodW1iUGFydCxcclxuICAgICAgICAgICAgfSBcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7Y29ubmVjdEVuZFBvaW50c30gZnJvbSBcIi4uL2RyYXcvZHJhd1wiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuICAgIGV4dHJhY3RQb2ludCxcclxuXHRkcmF3UG9pbnRzLCBcclxuXHRzcGxpdEN1cnZlLFxyXG5cdC8vY2xvbmUsXHJcblx0Ly9hZGp1c3QsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRnZXRMaW1iUG9pbnRzTmVnYXRpdmUsXHJcblx0Z2V0TGltYlBvaW50c0JlbGxvd1BvaW50LFxyXG5cdC8vZ2V0TGFjaW5nUG9pbnRzLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuXHJcbmltcG9ydCB7R2xvdmUsY2FsY0dsb3ZlfSBmcm9tIFwiLi9nbG92ZXNcIjtcclxuXHJcbmltcG9ydCB7d3diYl9mdHd9IGZyb20gXCIuL3d3YmJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyB3R2xvdmVTbGVldmVQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYXJtQ292ZXJhZ2U6IDAuNSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRjb25zdCB7XHJcbiAgICAgICAgICAgb3V0ZXJBcm1Qb2ludHMsXHJcblx0XHQgICBpbm5lckFybVBvaW50c1xyXG4gICAgICAgIH0gPSBjYWxjR2xvdmUuY2FsbCh0aGlzLCBleCk7XHJcbiBcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsIFxyXG5cdFx0XHRleHRyYWN0UG9pbnQoZXguaGFuZC5wYWxtKSxcclxuXHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdGV4dHJhY3RQb2ludChvdXRlckFybVBvaW50c1swXSlcclxuXHRcdF0pO1xyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdHbG92ZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuQVJNUyxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJhcm1cIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgYXJtXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGFybVwiLCBcInBhcnRzIGhhbmRcIl0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBhcm1Db3ZlcmFnZTogMC41LFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge291dGVyQXJtUG9pbnRzLGlubmVyQXJtUG9pbnRzfSA9IGNhbGNHbG92ZS5jYWxsKHRoaXMsZXgpO1xyXG5cdFx0Y29uc3QgbWlkQXJtUG9pbnRzID0gW2V4LmhhbmQua251Y2tsZSxleC5oYW5kLnRpcCxleC5oYW5kLnBhbG0sZXgudGh1bWIudGlwLGV4LnRodW1iLm91dF07XHJcblx0XHRcclxuXHRcdGlmKHRoaXMuYXJtQ292ZXJhZ2U+MCl7XHJcblx0XHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRcdC4uLm91dGVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdC4uLm1pZEFybVBvaW50cyxcclxuXHRcdFx0XHQuLi5pbm5lckFybVBvaW50cyxcclxuXHRcdFx0XHRleHRyYWN0UG9pbnQob3V0ZXJBcm1Qb2ludHNbMF0pXHJcblx0XHRcdF0pO1xyXG5cdFx0fWVsc2V7IC8vZm9yIHRyYW5zZm9ybWF0aW9ucywgZm9yIGdsb3ZlIHRvIGZpbGwgdGhlIHdob2xlIGFybSBzcGFjZSBsaWtlIGEgc2xlZXZlIFxyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHQuLi5vdXRlckFybVBvaW50cyxcclxuXHRcdFx0XHQuLi5taWRBcm1Qb2ludHMsXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0Y29ubmVjdEVuZFBvaW50cyhpbm5lckFybVBvaW50c1tpbm5lckFybVBvaW50cy5sZW5ndGgtMV0sb3V0ZXJBcm1Qb2ludHNbMF0pXHJcblx0XHRcdF0pO1xyXG5cdFx0fVxyXG4gICAgfVxyXG59XHJcblxyXG4gXHJcbmV4cG9ydCBjbGFzcyB3QnJhY2VsZXRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkFSTVMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiYXJtXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGFybVwiLCBcImRlY29yYXRpdmVQYXJ0cyBhcm1cIiwgXCJwYXJ0cyBoYW5kXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgYXJtQ292ZXJhZ2U6IDAuNSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHtvdXRlckFybVBvaW50cyxpbm5lckFybVBvaW50c30gPSBjYWxjR2xvdmUuY2FsbCh0aGlzLGV4KTtcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5hcm1Db3ZlcmFnZT4wKXtcclxuXHRcdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KGV4LndyaXN0Lm91dCksXHJcblx0XHRcdFx0ZXgud3Jpc3QuaW4sXHJcblx0XHRcdFx0Li4uaW5uZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KG91dGVyQXJtUG9pbnRzWzBdKVxyXG5cdFx0XHRdKTtcclxuXHRcdH1lbHNleyAvL2ZvciB0cmFuc2Zvcm1hdGlvbnNcclxuXHRcdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdFx0Li4ub3V0ZXJBcm1Qb2ludHMsXHJcblx0XHRcdFx0ZXgud3Jpc3Qub3V0LFxyXG5cdFx0XHRcdGV4LndyaXN0LmluLFxyXG5cdFx0XHRcdC4uLmlubmVyQXJtUG9pbnRzLFxyXG5cdFx0XHRcdGNvbm5lY3RFbmRQb2ludHMoaW5uZXJBcm1Qb2ludHNbaW5uZXJBcm1Qb2ludHMubGVuZ3RoLTFdLG91dGVyQXJtUG9pbnRzWzBdKVxyXG5cdFx0XHRdKTtcclxuXHJcblx0XHR9XHJcblx0XHRcclxuICAgIH1cclxufVxyXG5cclxuIC8qXHJcbiBcclxuIFxyXG4gXHJcbiAqL1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0dsb3ZlU2xlZXZlIGV4dGVuZHMgR2xvdmUge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0dGhpY2tuZXNzOiAwLjYsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3R2xvdmVTbGVldmVQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0dsb3ZlU2xlZXZlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3Mgd0xvbmdHbG92ZXMgZXh0ZW5kcyBHbG92ZSB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGFybUNvdmVyYWdlOjAuNSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKXtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsIDAlLCAyOCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKXtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgIFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0dsb3ZlUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdHbG92ZVBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG4gXHJcblxyXG5leHBvcnQgY2xhc3Mgd0JyYWNlbGV0IGV4dGVuZHMgR2xvdmUge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSl7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRhcm1Db3ZlcmFnZTowLjc1LFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMCwgMCUsIDI4JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgXHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3QnJhY2VsZXRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0JyYWNlbGV0UGFydCxcclxuICAgICAgICAgICAgfSxcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0JyYWNlbGV0TGVmdCBleHRlbmRzIEdsb3ZlIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpe1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0YXJtQ292ZXJhZ2U6MC43NSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKXtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsIDAlLCAyOCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKXtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0JyYWNlbGV0UGFydCxcclxuICAgICAgICAgICAgfVx0XHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdCcmFjZWxldFJpZ2h0IGV4dGVuZHMgR2xvdmUge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSl7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRhcm1Db3ZlcmFnZTowLjc1LFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMCwgMCUsIDI4JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgXHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3QnJhY2VsZXRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG5cdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge0Nsb3RoZXMsIENsb3RoaW5nUGFydCwgQ2xvdGhpbmd9IGZyb20gXCIuL2Nsb3RoaW5nXCI7XHJcbmltcG9ydCB7UGFydH0gZnJvbSBcIi4uL3BhcnRzL3BhcnRcIjtcclxuLy9pbXBvcnQge2Nvbm5lY3RFbmRQb2ludHN9IGZyb20gXCIuLi9kcmF3L2RyYXdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7XHJcblx0YnJlYWtQb2ludCxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuXHRkcmF3UG9pbnRzLCBcclxuXHRzcGxpdEN1cnZlLFxyXG5cdHNpbXBsZVF1YWRyYXRpYyxcclxuXHRjbG9uZSxcclxuXHRhZGp1c3QsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQsXHJcblx0Ly9nZXRMaW1iUG9pbnRzLFxyXG5cdC8vZmluZEJldHdlZW4sXHJcblx0Z2V0TGFjaW5nUG9pbnRzLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuaW1wb3J0IHtUb3B9IGZyb20gXCIuL3RvcHNcIjtcclxuaW1wb3J0IHtjYWxjQnJhfSBmcm9tIFwiLi91bmRlcndlYXJcIjtcclxuXHJcblxyXG5pbXBvcnQge2NhbGNDb3JzZXR9IGZyb20gXCIuL2NvcnNldFwiO1xyXG5pbXBvcnQge3d3YmJfZnR3LHdDb3Zlck5pcHBsZXN9IGZyb20gXCIuL3d3YmJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyB3Q29yc2V0QnJlYXN0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcblx0Y29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgY2hlc3RcIiwgXCJkZWNvcmF0aXZlUGFydHMgY2hlc3RcIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblx0XHJcblx0cmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8qXHJcblx0XHRpZiAoZXguaGFzT3duUHJvcGVydHkoXCJicmVhc3RcIikgPT09IGZhbHNlKSB7XHJcblx0XHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRcdGJyZWFrUG9pbnQsIFxyXG5cdFx0XHRcdGV4LmNoZXN0Lm5pcHBsZXNcclxuXHRcdFx0XSxbXSx7bGluZVdpZHRoOjQsIGZpbGxXaXRoU3Ryb2tlOnRydWV9KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0Ki9cclxuXHRcdC8vbmlwcGxlcyB3aXRoIG5vIGJyZWFzdHNcclxuXHRcdGlmICh3Q292ZXJOaXBwbGVzKGV4LCBjdHgsIHRoaXMpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Y29uc3QgYnJhID0gY2FsY0JyYShleCk7XHJcbiAgICAgIFxyXG5cdFx0YnJhLm91dC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYnJhLnRvcCwgYnJhLm91dCwgMC40LCAxKTtcclxuXHRcdGJyYS50b3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGV4LmJyZWFzdC5jbGVhdmFnZSwgYnJhLnRvcCwgMC42LCAyKTtcclxuLypcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRicmEudG9wLFxyXG5cdFx0XHRicmEub3V0LFxyXG5cdFx0XHRicmEudGlwLFxyXG5cdFx0XHRleC5icmVhc3QuYm90LFxyXG5cdFx0XHRleC5icmVhc3QuaW4sXHJcblx0XHRcdGV4LmJyZWFzdC5jbGVhdmFnZSxcclxuXHRcdFx0YnJhLnRvcFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0Ki9cdFxyXG5cdFx0LypkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0ZXguYnJlYXN0LmNsZWF2YWdlLFxyXG5cdFx0XHRicmEudG9wLFxyXG5cdFx0XHRicmEub3V0LFxyXG5cdFx0XHRicmEudGlwLFxyXG5cdFx0XHRleC5icmVhc3QuYm90LFxyXG5cdFx0XHRleC5icmVhc3QuaW4sXHJcblx0XHRcdGV4LmJyZWFzdC5jbGVhdmFnZSxcclxuXHRcdFx0YnJhLnRvcFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Ki9cclxuXHRcdFxyXG4vL0ZST00gRFJFU1MgVE8gQ09WRVIgRFJFU1NcclxuYnJhLmJvdCA9IGFkanVzdChleC5icmVhc3QuYm90LCAwLCAtMC42KTtcclxuYnJhLmlubmVyID0gYWRqdXN0KGV4LmJyZWFzdC5pbiwgLTAuOSwgLTAuNSk7XHJcbmJyYS5jbGVhdmFnZSA9IGFkanVzdChleC5icmVhc3QuY2xlYXZhZ2UsIC0wLjYsIDApO1xyXG5cclxuXHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0YnJhLnRvcCxcclxuXHRcdFx0YnJhLm91dCxcclxuXHRcdFx0YnJhLnRpcCxcclxuXHRcdFx0YnJhLmJvdCxcclxuXHRcdFx0YnJhLmlubmVyLFxyXG5cdFx0XHRicmEuY2xlYXZhZ2UsXHJcblx0XHRcdGJyYS50b3BcclxuXHRcdF0sW1xyXG5cdFx0XHRleC5icmVhc3QuY2xlYXZhZ2UsXHJcblx0XHRcdGJyYS50b3AsXHJcblx0XHRcdGJyYS5vdXQsXHJcblx0XHRcdGJyYS50aXAsXHJcblx0XHRcdGJyYS5ib3QsXHJcblx0XHRcdGJyYS5pbm5lcixcclxuXHRcdFx0YnJhLmNsZWF2YWdlLFxyXG5cdFx0XHQvKlxyXG5cdFx0XHRleC5icmVhc3QuYm90LFxyXG5cdFx0XHRleC5icmVhc3QuaW4sXHJcblx0XHRcdGV4LmJyZWFzdC5jbGVhdmFnZSxcclxuXHRcdFx0Ki9cclxuXHRcdFx0YnJhLnRvcFxyXG5cdFx0XSk7XHJcblxyXG5cdFxyXG5cdH1cdFxyXG59XHJcblxyXG4gXHJcblxyXG5leHBvcnQgY2xhc3Mgd0NvcnNldFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgICAgICAgICAgIDogXCJ0b3Jzb1wiLFxyXG4gICAgICAgICAgICByZWZsZWN0ICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzXHRcdFx0OiBbXCJwYXJ0cyBuZWNrXCIsIFwicGFydHMgdG9yc29cIiwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIiwgXCJwYXJ0cyBsZWdcIl0sXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcclxuXHRcdGNvbnN0IHt0b3BJbix0b3BPdXQsd2Fpc3QsbWlkLGJvdE91dCxib3RJbn0gPSBjYWxjQ29yc2V0LmNhbGwodGhpcywgZXgpO1xyXG5cclxuXHRcdFxyXG5cdC8vXHRjb25zdCB7dG9wTWlkLHRvcCxib3QsYm90TWlkfSA9IGNhbGNDb3JzZXQuY2FsbCh0aGlzLCBleCk7XHJcblxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdHdhaXN0LFxyXG5cdFx0XHRtaWQsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90SW4sXHJcblx0XHRdKTtcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdC8qXHRcdFxyXG5cdGxldCBpblRvcCA9IGFkanVzdCh0b3BNaWQsLTMsLTEpO1xyXG5cdFx0XHRsZXQgaW5Cb3QgPSBhZGp1c3QoYm90TWlkLC0zLDEpO1xyXG5cdFx0XHRsZXQgb3V0VG9wID0gYWRqdXN0KHRvcE1pZCwzLC0xKTtcclxuXHRcdFx0bGV0IG91dEJvdCA9IGFkanVzdChib3RNaWQsMywxKTtcclxuXHRcdFx0bGV0IGxhY2luZyA9IGdldExhY2luZ1BvaW50cyhpbkJvdCxpblRvcCxvdXRCb3Qsb3V0VG9wLHRoaXMua25vdHMpO1xyXG5cclxuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7IFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCAuLi5sYWNpbmcuaW5uZXIsIGJyZWFrUG9pbnQsLi4ubGFjaW5nLm91dGVyKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1x0XHRcclxuXHRcdFxyXG5cdCovXHRcclxuXHRcdC8vTEFDSU5HXHJcblx0XHRpZih0aGlzLmxhY2luZyAmJiB0aGlzLmtub3RzID4gMCAmJiB0aGlzLmludmlzaWJsZSA8IDEpe1xyXG5cdFx0XHRsZXQgaW5Ub3AgPSBhZGp1c3QodG9wSW4sLTMsLTEpO1xyXG5cdFx0XHRsZXQgaW5Cb3QgPSBhZGp1c3QoYm90SW4sLTMsMSk7XHJcblx0XHRcdGxldCBvdXRUb3AgPSBhZGp1c3QodG9wSW4sMywtMSk7XHJcblx0XHRcdGxldCBvdXRCb3QgPSBhZGp1c3QoYm90SW4sMywxKTtcclxuXHRcdFx0bGV0IGxhY2luZyA9IGdldExhY2luZ1BvaW50cyhpbkJvdCxpblRvcCxvdXRCb3Qsb3V0VG9wLHRoaXMua25vdHMpO1xyXG5cclxuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5oaWdobGlnaHQ7IFxyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LCAuLi5sYWNpbmcuaW5uZXIsIGJyZWFrUG9pbnQsLi4ubGFjaW5nLm91dGVyKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1x0XHJcblx0XHR9XHJcblx0XHJcbiAgICB9XHJcbn1cclxuIFxyXG4gXHJcbiBcclxuIFxyXG5leHBvcnQgY2xhc3Mgd0hhbGZDb3JzZXRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICAgICAgICAgICA6IExheWVyLk1JRFJJRlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwidG9yc29cIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICAgYWJvdmVQYXJ0c1x0XHRcdDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCIsIFwicGFydHMgbGVnXCJdLFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDEtdGhpcy50b3BDb3ZlcmFnZSxleC5hcm1waXQsZXgud2Fpc3QpO1xyXG5cdFx0bGV0IHRvcE91dCA9ICBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTsgXHJcblx0XHRcdC8vdGVtcCA9IHNwbGl0Q3VydmUodGhpcy53YWlzdENvdmVyYWdlLGV4LndhaXN0LGV4LmhpcCk7XHJcblx0XHRcdFxyXG5cdFx0bGV0IHdhaXN0ID0gdGVtcC5yaWdodC5wMTtcclxuXHRcdFxyXG5cdFx0bGV0IGhpcCA9IHRoaXMud2Fpc3RDb3ZlcmFnZSA8IDAgPyBleC5oaXAgOiB2b2lkIDA7XHJcblxyXG5cclxuXHRcdFx0dGVtcCA9IHRoaXMud2Fpc3RDb3ZlcmFnZSA8IDAgPyBzcGxpdEN1cnZlKCBNYXRoLmFicyh0aGlzLndhaXN0Q292ZXJhZ2UpLCBleC5oaXAsIGV4LnRoaWdoLm91dCkgOiBzcGxpdEN1cnZlKDEgLSB0aGlzLndhaXN0Q292ZXJhZ2UsIGV4LndhaXN0LCBleC5oaXApO1xyXG5cdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdGxldCBib3RPdXQgPSAgdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRcclxuXHRcdGxldCBib3RJbiA9IHtcclxuXHRcdFx0eDotMC4yLFxyXG5cdFx0XHR5OmJvdE91dC55LTdcclxuXHRcdH07XHJcblx0XHRcdGJvdEluLmNwMiA9IHtcclxuXHRcdFx0XHR4OiBib3RJbi54ICogMC41ICsgYm90T3V0LnggKiAwLjUsXHJcblx0XHRcdFx0eTogYm90SW4ueVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRib3RJbi5jcDEgPSB7XHJcblx0XHRcdFx0eDogYm90SW4uY3AyLngrMTIsXHJcblx0XHRcdFx0eTogYm90SW4uY3AyLnkrOSxcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRsZXQgdG9wSW4gPSB7XHJcblx0XHRcdFx0eDotMC4yLFxyXG5cdFx0XHRcdHk6dG9wT3V0LnktNVxyXG5cdFx0XHR9O1xyXG5cdFx0XHR0b3BPdXQuY3AxID0ge1xyXG5cdFx0XHRcdHg6IHRvcE91dC54ICogMC41ICsgdG9wSW4ueCAqIDAuNSxcclxuXHRcdFx0XHR5OiB0b3BJbi55XHJcblx0XHRcdH07XHRcdFx0XHJcblx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHR0b3BPdXQsXHJcblx0XHRcdHdhaXN0LFxyXG5cdFx0XHRoaXAsXHJcblx0XHRcdGJvdE91dCxcclxuXHRcdFx0Ym90SW4sXHJcblx0XHRdKTtcclxuXHRcdFxyXG5cdFx0XHJcbiA7XHJcblx0XHRcclxuXHRcdC8vbGFjaW5nXHJcblx0XHRcclxuXHRcdGlmKHRoaXMubGFjaW5nICYmIHRoaXMua25vdHMgPiAwKXtcclxuXHRcdFx0bGV0IGluVG9wID0gYWRqdXN0KHRvcEluLC0zLC0xKTtcclxuXHRcdFx0bGV0IGluQm90ID0gYWRqdXN0KGJvdEluLC0zLDEpO1xyXG5cdFx0XHRsZXQgb3V0VG9wID0gYWRqdXN0KHRvcEluLDMsLTEpO1xyXG5cdFx0XHRsZXQgb3V0Qm90ID0gYWRqdXN0KGJvdEluLDMsMSk7XHJcblx0XHRcdGxldCBsYWNpbmcgPSBnZXRMYWNpbmdQb2ludHMoaW5Cb3QsaW5Ub3Asb3V0Qm90LG91dFRvcCx0aGlzLmtub3RzKTtcclxuXHJcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0OyBcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgLi4ubGFjaW5nLmlubmVyLCBicmVha1BvaW50LCAuLi5sYWNpbmcub3V0ZXIpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHRcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0XHJcbi8qXHRcclxuXHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSgxLXRoaXMudG9wQ292ZXJhZ2UsZXguYXJtcGl0LGV4LndhaXN0KTtcclxuXHRcdGxldCB0b3AgPSAgZXh0cmFjdFBvaW50KHRlbXAubGVmdC5wMik7IFxyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLndhaXN0Q292ZXJhZ2UsZXgud2Fpc3QsZXguaGlwKTtcclxuXHRcdGxldCBib3QgPSAgdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHRcclxuXHRcdGxldCBib3RNaWQgPSB7XHJcblx0XHRcdHg6LTAuMixcclxuXHRcdFx0eTpib3QueS03XHJcblx0XHR9O1xyXG5cdFx0XHRib3RNaWQuY3AyID0ge1xyXG5cdFx0XHRcdHg6IGJvdE1pZC54ICogMC41ICsgYm90LnggKiAwLjUsXHJcblx0XHRcdFx0eTogYm90TWlkLnlcclxuXHRcdFx0fTtcclxuXHRcdFx0XHRcclxuXHRcdFx0Ym90TWlkLmNwMSA9IHtcclxuXHRcdFx0XHR4OiBib3RNaWQuY3AyLngrMTIsXHJcblx0XHRcdFx0eTogYm90TWlkLmNwMi55KzksXHJcblx0XHRcdH07XHJcblx0XHRcdFxyXG5cdFx0bGV0IHRvcE1pZCA9IHtcclxuXHRcdFx0XHR4Oi0wLjIsXHJcblx0XHRcdFx0eTp0b3AueS01XHJcblx0XHRcdH07XHJcblx0XHRcdHRvcC5jcDEgPSB7XHJcblx0XHRcdFx0eDogdG9wLnggKiAwLjUgKyB0b3BNaWQueCAqIDAuNSxcclxuXHRcdFx0XHR5OiB0b3BNaWQueVxyXG5cdFx0XHR9O1x0XHRcdFxyXG5cdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsXHRcclxuXHRcdFx0dG9wTWlkLFxyXG5cdFx0XHR0b3AsXHJcblx0XHRcdGV4LndhaXN0LFxyXG5cdFx0XHRib3QsXHJcblx0XHRcdGJvdE1pZCwgXHJcblx0XHRcdHRvcE1pZFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHRcclxuXHRcdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHR0b3BNaWQsXHJcblx0XHRcdHRvcCxcclxuXHRcdFx0ZXgud2Fpc3QsXHJcblx0XHRcdGJvdCxcclxuXHRcdFx0Ym90TWlkIFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0Ly9sYWNpbmdcclxuXHRcdGlmKHRoaXMubGFjaW5nICYmIHRoaXMua25vdHMgPiAwKXtcclxuXHRcdFx0bGV0IGluVG9wID0gYWRqdXN0KHRvcE1pZCwtMywtMSk7XHJcblx0XHRcdGxldCBpbkJvdCA9IGFkanVzdChib3RNaWQsLTMsMSk7XHJcblx0XHRcdGxldCBvdXRUb3AgPSBhZGp1c3QodG9wTWlkLDMsLTEpO1xyXG5cdFx0XHRsZXQgb3V0Qm90ID0gYWRqdXN0KGJvdE1pZCwzLDEpO1xyXG5cdFx0XHRsZXQgbGFjaW5nID0gZ2V0TGFjaW5nUG9pbnRzKGluQm90LGluVG9wLG91dEJvdCxvdXRUb3AsdGhpcy5rbm90cyk7XHJcblxyXG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmhpZ2hsaWdodDsgXHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsIC4uLmxhY2luZy5pbm5lciwgYnJlYWtQb2ludCwgLi4ubGFjaW5nLm91dGVyKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1x0XHJcblx0XHR9XHJcbiovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbi8qICovXHJcblxyXG5leHBvcnQgY2xhc3Mgd0NvcnNldCBleHRlbmRzIFRvcCB7IC8vZHJlc3M/XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbG90aGluZ0xheWVyICA6IENsb3RoZXMuTGF5ZXIuT1VURVIsIC8vYXNhcCEhXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRsYWNpbmc6dHJ1ZSxcclxuXHRcdFx0a25vdHM6IDYsXHJcblx0XHRcdGludmlzaWJsZTogMCxcclxuXHRcdFx0aGlnaGxpZ2h0OiBcImhzbGEoMCwgMCUsIDUyJSwgMSlcIixcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiIzAwMFwiO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDAsMTAlLDIwJSlcIjtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0eyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdDb3JzZXRCcmVhc3RQYXJ0XHJcbiAgICAgICAgICAgIH0seyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdDb3JzZXRQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cdFxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3SGFsZkNvcnNldCBleHRlbmRzIFRvcCB7IC8vZHJlc3M/XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbG90aGluZ0xheWVyICA6IENsb3RoZXMuTGF5ZXIuT1VURVIsIC8vYXNhcCEhXHJcblx0XHRcdHRvcENvdmVyYWdlOiAwLjYsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRrbm90czogNixcclxuXHRcdFx0bGFjaW5nOnRydWUsXHJcblx0XHRcdGhpZ2hsaWdodDogXCJoc2xhKDAsIDAlLCA1MiUsIDEpXCIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIHJldHVybiBcIiMwMDBcIjtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgwLDEwJSwyMCUpXCI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbeyBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdIYWxmQ29yc2V0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge3NoaW5lfSBmcm9tIFwiLi4vZHJhdy9zaGFkaW5nX3BhcnRcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtzZXRTdHJva2VBbmRGaWxsfSBmcm9tIFwiLi4vdXRpbC9kcmF3XCI7XHJcbmltcG9ydCB7U2hvZVNpZGVQYXJ0fSBmcm9tIFwiLi9zaG9lc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgcmV2ZXJzZURyYXdQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcbiAgICBzaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgYWRqdXN0LFxyXG4gICAgY29udGludWVDdXJ2ZSxcclxuICAgIHNjYWxlLCBzY2FsZVBvaW50cywgcm90YXRlUG9pbnRzLCBicmVha1BvaW50XHJcbn0gZnJvbSBcImRyYXdwb2ludC9zcmNcIjtcclxuXHJcblxyXG5cclxuaW1wb3J0IHtIZWVscyxIZWVsQmFzZVNoaW5lLEhlZWxQYXJ0LGNhbGNIZWVsc30gZnJvbSBcIi4vaGVlbHNcIjtcclxuIFxyXG5pbXBvcnQge1xyXG5cdGdldExpbWJQb2ludHNCZWxsb3dQb2ludCxcclxuXHRnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCxcclxuXHRmaW5kQmV0d2VlbixcclxuXHRnZXRMYWNpbmdQb2ludHMsXHJcblx0cGVycGVuZGljdWxhclBvaW50XHJcblx0LypcclxuXHRcclxuXHRcclxuXHRnZXRMYWNpbmdQb2ludHNcclxuXHQqL1xyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuXHJcbmltcG9ydCB7d3diYl9mdHcsd3diYl9mdHdfZH0gZnJvbSBcIi4vd3diYlwiO1xyXG5cclxuaW1wb3J0IHtjYWxjU3VwZXJTb2Nrc30gZnJvbSBcIi4vc3VwZXJfc29ja3NcIjtcclxuXHJcblxyXG5cclxuLypcclxuXHJcbmV4cG9ydCBjbGFzcyB3SGVlbHMgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiZmVldFwiLFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBmZWV0XCIsIFwicGFydHMgbGVnXCJdLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG59XHJcbiovXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0hpZ2hTbmVha2Vyc1BhcnQgZXh0ZW5kcyBIZWVsUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe30se1xyXG5cdFx0XHQvL2xlZ0NvdmVyYWdlOiAwLjUsXHJcblx0XHRcdHRpcDogMCxcclxuXHRcdFx0bGFjZVRoaWNrbmVzczogMC44LFxyXG5cdFx0XHR0b25ndWU6IDYuNixcclxuXHRcdFx0aGlnaGxpZ2h0OiBcIndoaXRlXCIsXHJcblx0XHRcdGNyb3NzZXM6IDAsXHJcblx0XHRcdGh1ZTogMTAsXHJcblx0XHRcdHNhdHVyOiA4MCxcclxuXHRcdFx0bGlnaHQ6IDUwLFxyXG5cdFx0XHRhbHBoYTogMSxcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRjb25zdCBjcm9zc2VzID0gdGhpcy5jcm9zc2VzID8gdGhpcy5jcm9zc2VzIDogKDEtdGhpcy5sZWdDb3ZlcmFnZSkgKiAzMDtcclxuXHRcclxuXHQvL0JBU0VcclxuXHRcdC8vY29uc3Qge291dGVyLGlubmVyfSA9IGNhbGNMZWdQb2ludHMoZXgsdG9wLGJvdHRvbSlcclxuXHRcdGNvbnN0IHtvdXRlclBvaW50cywgaW5uZXJQb2ludHN9ID0gY2FsY1N1cGVyU29ja3MuY2FsbCh0aGlzLGV4KTtcclxuXHRcdFxyXG5cdFx0Y29uc3QgYW5rbGVPdXQgPSBhZGp1c3QoZXguYW5rbGUub3V0Ym90LHRoaXMudGlnaHQsMClcclxuXHRcdGNvbnN0IGFua2xlSW4gPSBhZGp1c3QoZXguYW5rbGUuaW5ib3QsLXRoaXMudGlnaHQsMCk7XHJcblx0XHRhbmtsZUluLmNwMi54IC09IDErdGhpcy50aWdodDtcclxuXHRcdGNvbnN0IHRvZU91dCA9IGFkanVzdChleC50b2Uub3V0LHRoaXMudGlnaHQrMSwwKVxyXG5cdFx0Y29uc3QgdG9lSW4gPSBhZGp1c3QoZXgudG9lLmluLC10aGlzLnRpZ2h0LC10aGlzLnRpZ2h0KVxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdC4uLm91dGVyUG9pbnRzLFxyXG5cdFx0XHQvL2V4LmFua2xlLm91dCxcclxuXHRcdFx0YW5rbGVPdXQsIFxyXG5cdFx0XHR0b2VPdXQsIFxyXG5cdFx0XHR0b2VJbiwgXHJcblx0XHRcdGFua2xlSW4sIFxyXG5cdFx0XHQvL2V4LmFua2xlLmluLFxyXG5cdFx0XHQuLi5pbm5lclBvaW50cyxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KG91dGVyUG9pbnRzWzBdKVxyXG5cdFx0XSk7XHJcblx0XHQvKlxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRleC5hbmtsZS5vdXQsXHJcblx0XHRcdGFua2xlT3V0LCBcclxuXHRcdFx0dG9lT3V0LCBcclxuXHRcdFx0dG9lSW4sIFxyXG5cdFx0XHRhbmtsZUluLCBcclxuXHRcdFx0ZXguYW5rbGUuaW4sXHJcblx0XHRcdFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cdFx0XHJcblx0XHRcclxuXHQvL1RJUFx0XHJcblx0aWYodGhpcy50aXA+LTgpe1xyXG5cdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDAuNCx0b2VJbixhbmtsZUluKTtcclxuXHRcdHRlbXAgPSB0ZW1wLmxlZnQucDI7XHJcblx0XHRcclxuXHRcdGxldCB0b2UgPSBleHRyYWN0UG9pbnQodG9lT3V0KTtcclxuXHRcdHRvZS5jcDEgPSB7XHJcblx0XHRcdHg6IGZpbmRCZXR3ZWVuKHRvZS54LHRlbXAueCksXHJcblx0XHRcdHk6IHRvZS55LSgyK3RoaXMuc2hvZUhlaWdodCkrdGhpcy50aXAsXHJcblx0XHR9O1xyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdHRvZSwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0dGVtcCxcclxuXHRcdFx0dG9lLFxyXG5cdFx0XSxbXSx7ZmlsbFdpdGhIaWdobGlnaHQ6IHRydWV9KTtcclxuXHRcdC8qXHJcblx0XHQvL1RPRE8gLSBmaWxsIHdpdGggaGlnaGxpZ2h0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdHRvZSwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0dGVtcCxcclxuXHRcdFx0dG9lLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cdH07XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0Ly9MQUNJTkdcdFxyXG5cdFx0Y29uc3Qgb3V0TWlkID0gZXh0cmFjdFBvaW50KGFkanVzdChleC5hbmtsZS5vdXQsLTIsMCkpO1xyXG5cdFx0Y29uc3Qgb3V0Qm90ID0gYWRqdXN0KG91dE1pZCwtMiwtOSk7XHJcblx0XHRjb25zdCBpbk1pZCA9IGV4dHJhY3RQb2ludChhZGp1c3QoZXguYW5rbGUuaW4sMiwwKSk7XHJcblx0XHRjb25zdCBpbkJvdCA9IGFkanVzdChpbk1pZCwtMC41LC05KVxyXG5cdFx0XHJcblx0XHRjb25zdCB3aWR0aCA9IChvdXRCb3QueCAtIGluQm90LngpO1xyXG5cdFx0Y29uc3QgY2VudGVyID0gZmluZEJldHdlZW4ob3V0ZXJQb2ludHNbMF0saW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoLTFdKSBcclxuXHJcblx0XHRjb25zdCBvdXRUb3AgPSAgIGFkanVzdChjZW50ZXIsd2lkdGgsMCkgO1xyXG5cdFx0Y29uc3QgaW5Ub3AgPSAgYWRqdXN0KGNlbnRlciwtd2lkdGgsMCkgO1xyXG5cclxuXHRcdGNvbnN0IHBvaW50cyA9IGdldExhY2luZ1BvaW50cyhvdXRCb3Qsb3V0TWlkLGluQm90LGluTWlkLDIvKnRoaXMuY3Jvc3NlcyovLDApO1xyXG5cdFx0Y29uc3QgcG9pbnRzXzIgPSBnZXRMYWNpbmdQb2ludHMob3V0TWlkLG91dFRvcCxpbk1pZCxpblRvcCxjcm9zc2VzLDApO1xyXG5cdFx0XHJcblx0Ly9UT05HVUVcclxuXHRcdGNvbnN0IHRvbmd1ZU91dCA9IGFkanVzdChvdXRUb3AsLTEsMCk7XHJcblx0XHRjb25zdCB0b25ndWVJbiA9IGFkanVzdChpblRvcCwxLDApXHJcblx0XHR0b25ndWVPdXQuY3AxID0gcGVycGVuZGljdWxhclBvaW50KG91dFRvcCx0b25ndWVJbiwwLjUsLXRoaXMudG9uZ3VlKTtcclxuXHRcdFxyXG5cdC8vVE9OR1VFIDIgXHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0dG9uZ3VlT3V0LFxyXG5cdFx0XHRcclxuXHRcdFx0b3V0VG9wLFxyXG5cdFx0XHRvdXRNaWQsXHJcblx0XHRcdG91dEJvdCxcclxuXHRcdFx0XHJcblx0XHRcdGluQm90LFxyXG5cdFx0XHRpbk1pZCxcclxuXHRcdFx0aW5Ub3AsXHJcblx0XHRcdFxyXG5cdFx0XHR0b25ndWVJbixcclxuXHRcdFx0dG9uZ3VlT3V0LFxyXG5cdFx0XHRcclxuXHRcdF0sW10se2ZpbGxXaXRoU3Ryb2tlOiB0cnVlfSk7XHJcblxyXG5cdFx0XHJcblx0Ly9MQUNJTkcgMiBcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW10sW1xyXG5cdFx0XHQuLi5wb2ludHMuaW5uZXIsXHJcblx0XHRcdGJyZWFrUG9pbnQsXHJcblx0XHRcdC4uLnBvaW50cy5vdXRlcixcclxuXHRcdFx0YnJlYWtQb2ludCxcclxuXHRcdFx0Li4ucG9pbnRzXzIuaW5uZXIsXHJcblx0XHRcdGJyZWFrUG9pbnQsXHJcblx0XHRcdC4uLnBvaW50c18yLm91dGVyLFxyXG5cdFx0XSx7c3Ryb2tlV2l0aEhpZ2hsaWdodDogdHJ1ZSwgbGluZVdpZHRoOnRoaXMubGFjZVRoaWNrbmVzc30pO1xyXG5cclxuXHRcdC8qXHJcblx0XHQvL1RPRE8gLSBzdHJva2UgaGlnaGxpZ2h0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdC8vb3V0Qm90LFxyXG5cdFx0XHQvL2V4dHJhY3RQb2ludChvdXRJbikvL1xyXG5cdFx0XHQuLi5wb2ludHMuaW5uZXIsXHJcblx0XHRcdGJyZWFrUG9pbnQsXHJcblx0XHRcdC4uLnBvaW50cy5vdXRlcixcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cclxuXHJcbi8qXHJcbm91dFRvcCA9IGV4dHJhY3RQb2ludChvdXRlclBvaW50c1swXSk7XHJcbmluVG9wID0gZXh0cmFjdFBvaW50KGlubmVyUG9pbnRzW2lubmVyUG9pbnRzLmxlbmd0aC0xXSk7XHRcclxuKi9cclxuXHRcdFxyXG5cdFxyXG5cdFx0LypcclxuXHRcdC8vVE9ETyAtIHN0cm9rZSBoaWdobGlnaHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0Ly9vdXRCb3QsXHJcblx0XHRcdC8vZXh0cmFjdFBvaW50KG91dEluKS8vXHJcblx0XHRcdC4uLnBvaW50cy5pbm5lcixcclxuXHRcdFx0YnJlYWtQb2ludCxcclxuXHRcdFx0Li4ucG9pbnRzLm91dGVyLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcblx0XHRcclxuXHRcdFxyXG5cdC8vVE9OR1VFXHRcclxuIFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vVE9ETyAtIGZpbGwgd2l0aCBzdHJva2VcclxuXHRcdC8vY3R4LnN0cm9rZVN0eWxlID0gXCJyZWRcIjtcclxuXHRcdC8qXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdHRvbmd1ZUluLFxyXG5cdFx0XHR0b25ndWVPdXQsXHJcblx0XHRcdHRvbmd1ZUluXHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcblx0XHRcclxuXHRcdFxyXG5cclxuIFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBTbmVha2Vyc1BhcnQgZXh0ZW5kcyBIZWVsUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe30se1xyXG5cdFx0XHR0b25ndWU6IDgsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuIFxyXG5cdFx0XHJcblx0XHRzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmZpbGwsXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuZmlsbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleCk7XHJcbiBcclxuXHRcclxuXHQvL0JBU0VcclxuXHRcdGNvbnN0IGFua2xlT3V0ID0gYWRqdXN0KGV4LmFua2xlLm91dGJvdCx0aGlzLnRpZ2h0LDApXHJcblx0XHRjb25zdCBhbmtsZUluID0gYWRqdXN0KGV4LmFua2xlLmluYm90LC10aGlzLnRpZ2h0LDApO1xyXG5cdFx0YW5rbGVJbi5jcDIueCAtPSAxK3RoaXMudGlnaHQ7XHJcblx0XHRjb25zdCB0b2VPdXQgPSBhZGp1c3QoZXgudG9lLm91dCx0aGlzLnRpZ2h0KzEsMClcclxuXHRcdGNvbnN0IHRvZUluID0gYWRqdXN0KGV4LnRvZS5pbiwtdGhpcy50aWdodCwtdGhpcy50aWdodClcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRleC5hbmtsZS5vdXQsXHJcblx0XHRcdGFua2xlT3V0LCBcclxuXHRcdFx0dG9lT3V0LCBcclxuXHRcdFx0dG9lSW4sIFxyXG5cdFx0XHRhbmtsZUluLCBcclxuXHRcdFx0ZXguYW5rbGUuaW4sXHJcblx0XHRdKTtcclxuXHRcdC8qXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGV4LmFua2xlLm91dCxcclxuXHRcdFx0YW5rbGVPdXQsIFxyXG5cdFx0XHR0b2VPdXQsIFxyXG5cdFx0XHR0b2VJbiwgXHJcblx0XHRcdGFua2xlSW4sIFxyXG5cdFx0XHRleC5hbmtsZS5pbixcclxuXHRcdFx0XHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUoMC40LHRvZUluLGFua2xlSW4pO1xyXG5cdFx0dGVtcCA9IHRlbXAubGVmdC5wMjtcclxuXHRcdFxyXG5cdFx0bGV0IHRvZSA9IGV4dHJhY3RQb2ludCh0b2VPdXQpO1xyXG5cdFx0dG9lLmNwMSA9IHtcclxuXHRcdFx0eDogZmluZEJldHdlZW4odG9lLngsdGVtcC54KSxcclxuXHRcdFx0eTogdG9lLnktKDIrdGhpcy5zaG9lSGVpZ2h0KSxcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGN0eC5zdHJva2VTdHlsZSA9IFwibGltZVwiO1xyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0XHJcblx0XHRcdHRvZSwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0dGVtcCxcclxuXHRcdFx0dG9lLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRsZXQgb3V0VG9wID0gZXh0cmFjdFBvaW50KGV4LmFua2xlLm91dCk7XHJcblx0XHRsZXQgb3V0Qm90ID0gYWRqdXN0KG91dFRvcCwtMiwtOSk7XHJcblx0XHRsZXQgaW5Ub3AgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUuaW4pO1xyXG5cdFx0bGV0IGluQm90ID0gYWRqdXN0KGluVG9wLC0wLjUsLTkpXHJcblx0XHRsZXQgcG9pbnRzID0gZ2V0TGFjaW5nUG9pbnRzKG91dEJvdCxvdXRUb3AsaW5Cb3QsaW5Ub3AsMiwtMSk7XHJcblxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHQvL291dEJvdCxcclxuXHRcdFx0Ly9leHRyYWN0UG9pbnQob3V0SW4pLy9cclxuXHRcdFx0Li4ucG9pbnRzLmlubmVyLFxyXG5cdFx0XHRicmVha1BvaW50LFxyXG5cdFx0XHQuLi5wb2ludHMub3V0ZXIsXHJcblx0XHQpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdC8vVE9OR1VFXHRcclxuXHRcdGNvbnN0IHRvbmd1ZU91dCA9IGFkanVzdChvdXRUb3AsLTEsMCk7XHJcblx0XHRjb25zdCB0b25ndWVJbiA9IGFkanVzdChpblRvcCwxLDApXHJcblx0XHR0b25ndWVPdXQuY3AxID0gcGVycGVuZGljdWxhclBvaW50KG91dFRvcCx0b25ndWVJbiwwLjUsLXRoaXMudG9uZ3VlKTtcclxuXHRcdC8qXHJcblx0XHQvL1RPRE8gLSBmaWxsIHdpdGggc3Ryb2tlXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdHRvbmd1ZUluLFxyXG5cdFx0XHR0b25ndWVPdXQsXHJcblx0XHRcdHRvbmd1ZUluXHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcblx0XHRcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHR0b25ndWVJbixcclxuXHRcdFx0dG9uZ3VlT3V0LFxyXG5cdFx0XHR0b25ndWVJblxyXG5cdFx0XSxbXSx7ZmlsbFdpdGhTdHJva2U6IHRydWV9KTtcclxuXHJcbiBcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3U2ltcGxlU25lYWtlcnNQYXJ0IGV4dGVuZHMgSGVlbFBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHt9LHtcclxuXHRcdFx0dGlwOiAwLFxyXG5cdFx0XHRsYWNlVGhpY2tuZXNzOiAwLjgsXHJcblx0XHRcdHRvbmd1ZTogNi42LFxyXG5cdFx0XHRoaWdobGlnaHQ6IFwid2hpdGVcIixcclxuXHRcdFx0Y3Jvc3NlczogMixcclxuXHRcdFx0aHVlOiAxMCxcclxuXHRcdFx0c2F0dXI6IDgwLFxyXG5cdFx0XHRsaWdodDogNTAsXHJcblx0XHRcdGFscGhhOiAxLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcbiBcclxuXHRcclxuXHQvL0JBU0VcclxuXHRcdGNvbnN0IGFua2xlT3V0ID0gYWRqdXN0KGV4LmFua2xlLm91dGJvdCx0aGlzLnRpZ2h0LDApXHJcblx0XHRjb25zdCBhbmtsZUluID0gYWRqdXN0KGV4LmFua2xlLmluYm90LC10aGlzLnRpZ2h0LDApO1xyXG5cdFx0YW5rbGVJbi5jcDIueCAtPSAxK3RoaXMudGlnaHQ7XHJcblx0XHRjb25zdCB0b2VPdXQgPSBhZGp1c3QoZXgudG9lLm91dCx0aGlzLnRpZ2h0KzEsMClcclxuXHRcdGNvbnN0IHRvZUluID0gYWRqdXN0KGV4LnRvZS5pbiwtdGhpcy50aWdodCwtdGhpcy50aWdodClcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRleC5hbmtsZS5vdXQsXHJcblx0XHRcdGFua2xlT3V0LCBcclxuXHRcdFx0dG9lT3V0LCBcclxuXHRcdFx0dG9lSW4sIFxyXG5cdFx0XHRhbmtsZUluLCBcclxuXHRcdFx0ZXguYW5rbGUuaW4sXHJcblx0XHRdKTtcclxuXHRcdC8qXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGV4LmFua2xlLm91dCxcclxuXHRcdFx0YW5rbGVPdXQsIFxyXG5cdFx0XHR0b2VPdXQsIFxyXG5cdFx0XHR0b2VJbiwgXHJcblx0XHRcdGFua2xlSW4sIFxyXG5cdFx0XHRleC5hbmtsZS5pbixcclxuXHRcdFx0XHJcblx0XHQpO1xyXG5cdFx0Y3R4LmZpbGwoKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcblx0XHRcclxuXHRcdFxyXG5cdC8vVElQXHRcclxuXHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSgwLjQsdG9lSW4sYW5rbGVJbik7XHJcblx0XHR0ZW1wID0gdGVtcC5sZWZ0LnAyO1xyXG5cdFx0XHJcblx0XHRsZXQgdG9lID0gZXh0cmFjdFBvaW50KHRvZU91dCk7XHJcblx0XHR0b2UuY3AxID0ge1xyXG5cdFx0XHR4OiBmaW5kQmV0d2Vlbih0b2UueCx0ZW1wLngpLFxyXG5cdFx0XHR5OiB0b2UueS0oMit0aGlzLnNob2VIZWlnaHQpK3RoaXMudGlwLFxyXG5cdFx0fTtcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHR0b2UsIFxyXG5cdFx0XHR0b2VJbiwgXHJcblx0XHRcdHRlbXAsXHJcblx0XHRcdHRvZSxcclxuXHRcdF0sW10se2ZpbGxXaXRoSGlnaGxpZ2h0OiB0cnVlfSk7XHJcblx0XHQvKlxyXG5cdFx0Ly9UT0RPIC0gZmlsbCB3aXRoIGhpZ2hsaWdodFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHR0b2UsIFxyXG5cdFx0XHR0b2VJbiwgXHJcblx0XHRcdHRlbXAsXHJcblx0XHRcdHRvZSxcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Ki9cclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdC8vTEFDSU5HXHRcclxuXHRcdGxldCBvdXRUb3AgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUub3V0KTtcclxuXHRcdGxldCBvdXRCb3QgPSBhZGp1c3Qob3V0VG9wLC0yLC05KTtcclxuXHRcdGxldCBpblRvcCA9IGV4dHJhY3RQb2ludChleC5hbmtsZS5pbik7XHJcblx0XHRsZXQgaW5Cb3QgPSBhZGp1c3QoaW5Ub3AsLTAuNSwtOSlcclxuXHRcdGxldCBwb2ludHMgPSBnZXRMYWNpbmdQb2ludHMob3V0Qm90LG91dFRvcCxpbkJvdCxpblRvcCx0aGlzLmNyb3NzZXMsLTEpO1xyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXSxbXHJcblx0XHRcdC4uLnBvaW50cy5pbm5lcixcclxuXHRcdFx0YnJlYWtQb2ludCxcclxuXHRcdFx0Li4ucG9pbnRzLm91dGVyLFxyXG5cdFx0XSx7c3Ryb2tlV2l0aEhpZ2hsaWdodDogdHJ1ZSwgbGluZVdpZHRoOnRoaXMubGFjZVRoaWNrbmVzc30pO1xyXG5cdFx0XHJcblx0XHQvKlxyXG5cdFx0Ly9UT0RPIC0gc3Ryb2tlIGhpZ2hsaWdodFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHQvL291dEJvdCxcclxuXHRcdFx0Ly9leHRyYWN0UG9pbnQob3V0SW4pLy9cclxuXHRcdFx0Li4ucG9pbnRzLmlubmVyLFxyXG5cdFx0XHRicmVha1BvaW50LFxyXG5cdFx0XHQuLi5wb2ludHMub3V0ZXIsXHJcblx0XHQpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0Ki9cclxuXHRcdFxyXG5cdFx0XHJcblx0Ly9UT05HVUVcdFxyXG5cdFx0Y29uc3QgdG9uZ3VlT3V0ID0gYWRqdXN0KG91dFRvcCwtMSwwKTtcclxuXHRcdGNvbnN0IHRvbmd1ZUluID0gYWRqdXN0KGluVG9wLDEsMClcclxuXHRcdHRvbmd1ZU91dC5jcDEgPSBwZXJwZW5kaWN1bGFyUG9pbnQob3V0VG9wLHRvbmd1ZUluLDAuNSwtdGhpcy50b25ndWUpO1xyXG5cdFx0XHJcblx0XHQvL1RPRE8gLSBmaWxsIHdpdGggc3Ryb2tlXHJcblx0XHQvL2N0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XHJcblx0XHQvKlxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHR0b25ndWVJbixcclxuXHRcdFx0dG9uZ3VlT3V0LFxyXG5cdFx0XHR0b25ndWVJblxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0dG9uZ3VlSW4sXHJcblx0XHRcdHRvbmd1ZU91dCxcclxuXHRcdFx0dG9uZ3VlSW5cclxuXHRcdF0sW10se2ZpbGxXaXRoU3Ryb2tlOiB0cnVlfSk7XHJcblxyXG4gXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1NpbXBsZVNob2VzUGFydCBleHRlbmRzIEhlZWxQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG4gICBcdFxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5maWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuXHRcclxuXHRcclxuXHQgXHJcblx0XHRjb25zdCBhbmtsZU91dCA9IGFkanVzdChleC5hbmtsZS5vdXRib3QsdGhpcy50aWdodCwwKVxyXG5cdFx0Y29uc3QgYW5rbGVJbiA9IGFkanVzdChleC5hbmtsZS5pbmJvdCwtdGhpcy50aWdodCwwKTtcclxuXHRcdGFua2xlSW4uY3AyLnggLT0gMSt0aGlzLnRpZ2h0O1xyXG5cdFx0Y29uc3QgdG9lT3V0ID0gYWRqdXN0KGV4LnRvZS5vdXQsdGhpcy50aWdodCsxLDApXHJcblx0XHRjb25zdCB0b2VJbiA9IGFkanVzdChleC50b2UuaW4sLXRoaXMudGlnaHQsLXRoaXMudGlnaHQpO1xyXG5cdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0ZXguYW5rbGUub3V0LFxyXG5cdFx0XHRhbmtsZU91dCwgXHJcblx0XHRcdHRvZU91dCwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0YW5rbGVJbiwgXHJcblx0XHRcdGV4LmFua2xlLmluLFxyXG5cdFx0XSk7XHJcblx0LypcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0ZXguYW5rbGUub3V0LFxyXG5cdFx0XHRhbmtsZU91dCwgXHJcblx0XHRcdHRvZU91dCwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0YW5rbGVJbiwgXHJcblx0XHRcdGV4LmFua2xlLmluLFxyXG5cdFx0XHRcclxuXHRcdCk7XHJcblx0XHRjdHguZmlsbCgpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdCovXHJcbiBcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3SGlnaFNuZWFrZXJzIGV4dGVuZHMgSGVlbHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0dGlnaHQ6IDAuNSxcclxuXHRcdFx0c2hvZUhlaWdodDogMCxcclxuXHRcdFx0bGVnQ292ZXJhZ2U6MSxcclxuXHRcdC8qXHJcblx0XHRcdHNob2VIZWlnaHQ6IDAuNCxcclxuXHRcdFx0dG9uZ3VlOiA0LFxyXG5cdFx0XHR0aXA6IC0xMCxcclxuXHRcdFx0bGVnQ292ZXJhZ2U6IDAuNjlcclxuXHRcdCovXHJcblx0XHRcdC8vMC40NVxyXG5cdFx0XHQvKlxyXG5cdFx0XHRcclxuXHRcdFx0Ki9cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFxyXG5cdFx0XHQvL0JBU0VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0hpZ2hTbmVha2Vyc1BhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0hpZ2hTbmVha2Vyc1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXHJcblx0XHRcclxuIFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyB3U2ltcGxlU25lYWtlcnMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHR0aWdodDogMC41LFxyXG5cdFx0XHRzaG9lSGVpZ2h0OiAwLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG5cdFx0XHJcblx0XHRcdC8vQkFTRVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3U2ltcGxlU25lYWtlcnNQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTaW1wbGVTbmVha2Vyc1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXHJcblx0XHRcclxuIFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyB3U2ltcGxlU2hvZXMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHR0aWdodDogMC41LFxyXG5cdFx0XHRzaG9lSGVpZ2h0OiAwLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG5cdFx0XHJcblx0XHRcdC8vQkFTRVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3U2ltcGxlU2hvZXNQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTaW1wbGVTaG9lc1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXHJcblx0XHRcclxuIFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4gZXhwb3J0IGNsYXNzIHd3U25lYWtlcnMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHR0aWdodDogMC41LFxyXG5cdFx0XHRzaG9lSGVpZ2h0OiAwLFxyXG5cdFx0ICAgLyogc3RyYXBXaWR0aDogMixcclxuXHRcdFx0c3BhY2U6IDQsIFxyXG5cdFx0XHRjcm9zc2VzOiBmYWxzZSxcclxuXHRcdFx0c3RyYXBzOiAyLFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdHRvZUNvdmVyYWdlOiAwLjUsXHJcblx0XHRcdFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMCxcclxuXHRcdFx0Ki9cclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFxyXG5cdFx0XHQvL0JBU0VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU25lYWtlcnNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdC8qXHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTbmVha2Vyc1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKi9cclxuXHRcdFxyXG4gXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5mdW5jdGlvbiBjYWxjTGVnUG9pbnRzKGV4LHRvcCxib3R0b20pIHtcclxuXHRsZXQgY29udHJvbFBvaW50O1xyXG5cdGxldCBpbm5lcjtcclxuXHRsZXQgb3V0ZXI7XHJcblx0XHJcblx0Ly9tdXNjbGVzXHJcblx0bGV0ICBhZGRQb2ludHNNaWQ9W107XHJcblx0aWYodHlwZW9mIGV4LnF1YWRzICE9PSBcInVuZGVmaW5lZFwiKXtcclxuXHRcdGFkZFBvaW50c01pZFswXSA9ICBjbG9uZShleC5xdWFkcy50b3ApO1xyXG5cdFx0YWRkUG9pbnRzTWlkWzBdLnggPSBleC50aGlnaC5vdXQueDtcclxuXHRcdGFkZFBvaW50c01pZFsxXSA9IGNsb25lKGV4LnF1YWRzLm91dCk7XHJcblx0fVxyXG5cdFxyXG5cdC8vYmFzaWNhbGx5IGN1dHMgdGhlIHBvaW50cyBhYm92ZSBUT1BcclxuXHRpbm5lciA9ICBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQodG9wLHRydWUsZXguZ3JvaW4sZXgudGhpZ2gudG9wLGV4LnRoaWdoLmluLGV4LmtuZWUuaW50b3AsZXgua25lZS5pbixleC5jYWxmLmluLGV4LmFua2xlLmluLGV4LmFua2xlLmluYm90KTtcclxuXHQvL2dldExpbWJQb2ludHNCZWxsb3dQb2ludChjb250cm9sUG9pbnQsdHJ1ZSxleC5hcm1waXQsZXguZWxib3cuaW4sZXgud3Jpc3QuaW4sZXgudGh1bWIub3V0LGV4LnRodW1iLnRpcCk7XHJcblx0b3V0ZXIgPSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQoYWRqdXN0KGlubmVyW2lubmVyLmxlbmd0aC0xXSwwLDApLGZhbHNlLCBleC5oaXAsZXgudGhpZ2gub3V0LCAuLi5hZGRQb2ludHNNaWQsIGV4LmtuZWUub3V0LGV4LmNhbGYub3V0LGV4LmFua2xlLm91dCxleC5hbmtsZS5vdXRib3QpO1xyXG5cdC8vZ2V0TGltYlBvaW50c0JlbGxvd1BvaW50KGFkanVzdChpbm5lcltpbm5lci5sZW5ndGgtMV0sMCwyKSxmYWxzZSxleC5jb2xsYXJib25lLGV4LmRlbHRvaWRzLGV4LnNob3VsZGVyLGV4LmVsYm93Lm91dCxleC53cmlzdC5vdXQsZXguaGFuZC5rbnVja2xlKTtcclxuXHRcclxuXHQvL2Jhc2ljYWxseSBjdXRzIHRoZSBwb2ludHMgYmVsbG93IEJPVFRPTVxyXG5cdGlubmVyLnJldmVyc2UoKTsgLy90byBnZXRMaW1wUG9pbnRzIGZ1bmN0aW9ucyB0aGV5IGhhdmUgdG8gYmUgaW5wdXRlZCBzb3J0ZWQgZnJvbSB0b3AgdG8gYm90dG9tICh0byBrZWVwIHRoZSBzYW1lIHN0eWxlIGFzIG91dGVyIHBvaW50cyksIGJ1dCB0aGV5IGFyZSBvdXRwdXR0ZWQgZnJvbSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQgc29ydGVkIGJvdHRvbSB0byB0b3AgKGFzIHRoZXkgYXJlIGFjdHVhbGx5IGRyYXduKVxyXG5cdGlubmVyID0gZ2V0TGltYlBvaW50c0Fib3ZlUG9pbnQoIGJvdHRvbSwgdHJ1ZSwuLi5pbm5lcik7XHJcblx0b3V0ZXIgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCggYm90dG9tLCBmYWxzZSwuLi5vdXRlcik7XHJcblxyXG5cdG91dGVyWzBdID0gZXh0cmFjdFBvaW50KCBvdXRlclswXSApO1xyXG5cdGlubmVyWzBdID0gZXh0cmFjdFBvaW50KCBpbm5lclswXSApO1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5uZXIsXHJcblx0XHRvdXRlclxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY1N0cmFwKGV4LGNvbnRyb2wsd2lkdGgpIHtcclxuXHRsZXQgdG9wICA9IHtcclxuXHRcdHk6IGNvbnRyb2wueSt3aWR0aFxyXG5cdH07XHJcblx0bGV0IGJvdHRvbSA9IGNvbnRyb2w7XHJcblx0XHJcblx0Y29uc3Qge291dGVyLGlubmVyfSA9IGNhbGNMZWdQb2ludHMoZXgsdG9wLGJvdHRvbSlcclxuXHJcblx0b3V0ZXJbMF0uY3AxID0ge1xyXG5cdFx0eDpmaW5kQmV0d2Vlbihpbm5lcltpbm5lci5sZW5ndGgtMV0ueCxvdXRlclswXS54LDAuNSksXHJcblx0XHR5Om91dGVyWzBdLnktMlxyXG5cdH07XHJcblxyXG5cdGlubmVyWzBdLmNwMSA9IHtcclxuXHRcdHg6ZmluZEJldHdlZW4ob3V0ZXJbb3V0ZXIubGVuZ3RoLTFdLngsaW5uZXJbMF0ueCwwLjUpLFxyXG5cdFx0eTppbm5lclswXS55LTJcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5uZXIsXHJcblx0XHRvdXRlclxyXG5cdH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgR2FpdGVyUGFydCBleHRlbmRzIEhlZWxQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbi8qXHJcbiAgICAgICAgY29uc3QgdG9lID0gZXgudG9lO1xyXG5cclxuICAgICAgICB0b2UudG9lYm94ID0ge1xyXG4gICAgICAgICAgICB4OiB0b2UuY2VudGVyLngsXHJcbiAgICAgICAgICAgIHk6IHRvZS5jZW50ZXIueVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHtvdXQsIG91dEJvdCwgYm90LCBpbkJvdCwgaW5Ub3AsIHRvbmd1ZX0gPSBjYWxjSGVlbHMuY2FsbCh0aGlzLCBleCk7XHJcblxyXG4gICAgICAgXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCBvdXQsIG91dEJvdCwgYm90LCBpbkJvdCwgaW5Ub3AsIHRvbmd1ZSwgb3V0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgICAvLyBiYWNrIG9mIHRoZSBoZWVsc1xyXG4gICAgICAgIGNvbnN0IGJhY2tUb3AgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUuaW4pO1xyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC42LCBleC50b2UuaW4sIGV4LmFua2xlLmluYm90KTtcclxuICAgICAgICBjb25zdCBiYWNrQm90ID0gc3AubGVmdC5wMjtcclxuICAgICAgICBiYWNrQm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhiYWNrVG9wLCBiYWNrQm90LCAwLjIsIC0zLjMpO1xyXG4gICAgICAgIGJhY2tUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGJhY2tCb3QsIGJhY2tUb3AsIDAuNywgMS40KTtcclxuKi9cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsIGV4LmFua2xlLm91dGJvdCwgZXgudG9lLm91dCwgZXgudG9lLmluLCBleC5hbmtsZS5pbmJvdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU2FuZGFsUmlnaHRQYXJ0IGV4dGVuZHMgSGVlbFBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdHNldFN0cm9rZUFuZEZpbGwoY3R4LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWxsICA6IHRoaXMuZmlsbCxcclxuICAgICAgICAgICAgICAgIHN0cm9rZTogdGhpcy5maWxsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4KTtcclxuXHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdGV4LnRvZS5vdXQsXHRcdFxyXG5cdFx0XHRleC50b2UuaW4sXHJcblx0XHRcdGV4LmFua2xlLmluYm90LFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTYW5kYWxMZWZ0UGFydCBleHRlbmRzIEhlZWxQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlciguLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmZpbGwsXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuZmlsbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleCk7XHJcblxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoY3R4LCBcclxuXHRcdFx0ZXguYW5rbGUub3V0Ym90LFxyXG5cdFx0XHRleC50b2Uub3V0LFxyXG5cdFx0XHRleC50b2UuaW4sXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNhbmRhbFBhcnQgZXh0ZW5kcyBIZWVsUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdC8qXHJcblx0Y29uc29sZS5sb2coZXguYW5rbGUuaW5ib3QpXHJcblx0Y29uc29sZS5sb2coZXguYW5rbGUub3V0Ym90KVxyXG5cdFx0bGV0IGEgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUub3V0KTtcclxuXHRcdGxldCBiID0gZXh0cmFjdFBvaW50KGV4LmFua2xlLm91dGJvdCk7IFxyXG5cdFx0Ki9cclxuXHRcdFxyXG5cdFx0c2V0U3Ryb2tlQW5kRmlsbChjdHgsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZpbGwgIDogdGhpcy5maWxsLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB0aGlzLmZpbGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG5cdFx0XHRcclxuXHRcdFxyXG5cdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKDAuNSwgZXguYW5rbGUub3V0Ym90LCBleC50b2Uub3V0KTtcclxuXHRcdGxldCBhbnRva2UgPSB0ZW1wLnJpZ2h0LnAxO1xyXG5cdFx0dGVtcCA9IHNwbGl0Q3VydmUoMC4zNSwgZXgudG9lLmluLCBleC5hbmtsZS5pbmJvdCk7XHRcclxuXHRcdGxldCBpbkFudG9lQm90ID0gdGVtcC5yaWdodC5wMTtcclxuXHRcdHRlbXAgPSBzcGxpdEN1cnZlKDAuNjUsIGV4LnRvZS5pbiwgZXguYW5rbGUuaW5ib3QpO1x0XHJcblx0XHRsZXQgaW5BbnRvZVRvcCA9IHRlbXAucmlnaHQucDE7XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGV4LmFua2xlLmluYm90LFxyXG5cdFx0XHRleHRyYWN0UG9pbnQoZXguYW5rbGUub3V0KSxcclxuXHRcdFx0XHRicmVha1BvaW50LFxyXG5cdFx0XHRleC5hbmtsZS5pbixcclxuXHRcdFx0ZXh0cmFjdFBvaW50KGV4LmFua2xlLm91dGJvdCksXHJcblx0XHRcdFx0YnJlYWtQb2ludCxcclxuXHRcdFx0YW50b2tlLFxyXG5cdFx0XHRleHRyYWN0UG9pbnQoaW5BbnRvZUJvdCksXHJcblx0XHRcdFx0YnJlYWtQb2ludCxcclxuXHRcdFx0ZXgudG9lLm91dCxcclxuXHRcdFx0ZXh0cmFjdFBvaW50KGluQW50b2VUb3ApLFxyXG5cdFx0XHRcdGJyZWFrUG9pbnQsXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcblx0XHRcclxuXHJcbiAgICAgICAgLy8gYmFjayBvZiB0aGUgaGVlbHNcclxuICAgICAgICBjb25zdCBiYWNrVG9wID0gZXh0cmFjdFBvaW50KGV4LmFua2xlLmluKTtcclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuNiwgZXgudG9lLmluLCBleC5hbmtsZS5pbmJvdCk7XHJcbiAgICAgICAgY29uc3QgYmFja0JvdCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgYmFja0JvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYmFja1RvcCwgYmFja0JvdCwgMC4yLCAtMy4zKTtcclxuICAgICAgICBiYWNrVG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhiYWNrQm90LCBiYWNrVG9wLCAwLjcsIDEuNCk7XHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgYmFja1RvcCwgYmFja0JvdCwgYmFja1RvcCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuIFxyXG4gICAgfVxyXG59XHJcblxyXG4gXHJcblxyXG5cclxuXHJcblxyXG4gLypcclxuIGV4cG9ydCBjbGFzcyB3Q2xvc2VkVG9lUHVtcHMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogSGVlbEJhc2VQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxCYXNlU2hpbmVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxTaWRlQmFzZUNsb3NlZFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFN0aWxldHRvUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogUGxhdGZvcm1TaWRlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuICovXHJcbiBcclxuIFxyXG4gZXhwb3J0IGNsYXNzIFNhbmRhbHMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdHJhcFdpZHRoOiAyLFxyXG5cdFx0XHRzcGFjZTogNCwgXHJcblx0XHRcdGNyb3NzZXM6IGZhbHNlLFxyXG5cdFx0XHRzdHJhcHM6IDIsXHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0dG9lQ292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0Ly9QTEFURk9STVxyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTYW5kYWxSaWdodFBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU2FuZGFsTGVmdFBhcnRcclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0XHJcblx0XHRcdC8vQkFTRVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTYW5kYWxQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IFNhbmRhbFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXHJcblx0XHRcclxuIFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3SGVlbFN0cmFwUGFydCBleHRlbmRzIEhlZWxQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdC8vc3RyYXBXaWR0aDogMS41LFxyXG5cdFx0XHQvL2Nyb3NzZXM6IHRydWUsXHJcblx0XHR9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHQvL2xldCB3aWR0aCA9ICgoMS10aGlzLmxlZ0NvdmVyYWdlKS90aGlzLnN0cmFwcykvdGhpcy5zdHJhcFdpZHRoO1xyXG5cdFx0bGV0IHdpZHRoID0gdGhpcy5zdHJhcFdpZHRoO1xyXG5cdFx0bGV0IHNwYWNlID0gdGhpcy5zcGFjZTtcclxuXHRcdGxldCBhbmNob3IgPSBhZGp1c3QoZXguYW5rbGUub3V0Ym90LDAsMClcclxuXHJcblx0XHRsZXQgc3RyYXAgPSBbXTtcclxuXHRcdGxldCB0b3RhbCA9IFtdO1xyXG5cdFx0bGV0IGlubmVyID0gW107XHJcblx0XHRsZXQgb3V0ZXIgPSBbXTtcclxuXHRcdGxldCB0ZW1wID0gY2FsY1N0cmFwKGV4LGFuY2hvcix3aWR0aCk7XHJcblxyXG5cclxuXHRcdGlmKCF0aGlzLmNyb3NzZXMpe1xyXG5cdFx0XHR0b3RhbCA9IFsuLi50b3RhbCwgLi4udGVtcC5vdXRlciwgLi4udGVtcC5pbm5lciwgdGVtcC5vdXRlclswXV1cclxuXHRcdH1lbHNle1xyXG5cdFx0XHRpbm5lcltpbm5lci5sZW5ndGhdID0gZXh0cmFjdFBvaW50KHRlbXAuaW5uZXJbMF0pO1x0XHJcblx0XHRcdG91dGVyW291dGVyLmxlbmd0aF0gPSBleHRyYWN0UG9pbnQodGVtcC5vdXRlclt0ZW1wLm91dGVyLmxlbmd0aC0xXSk7XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRmb3IobGV0IGkgPSAxOyBpIDwgdGhpcy5zdHJhcHM7IGkrKyl7XHJcblx0XHRcdHRlbXAgPSBjYWxjU3RyYXAoZXgsYWRqdXN0KGFuY2hvciwwLCh3aWR0aCtzcGFjZSkqaSksd2lkdGgpO1xyXG5cdFx0XHQvL1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoIXRoaXMuY3Jvc3Nlcyl7XHJcblx0XHRcdFx0dG90YWwgPSBbLi4udG90YWwsIGJyZWFrUG9pbnQsIC4uLnRlbXAub3V0ZXIsIC4uLnRlbXAuaW5uZXIsIHRlbXAub3V0ZXJbMF1dO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRpZihpJTI+MCl7XHJcblx0XHRcdFx0XHRpbm5lcltpbm5lci5sZW5ndGhdID0gZXh0cmFjdFBvaW50KHRlbXAub3V0ZXJbdGVtcC5vdXRlci5sZW5ndGgtMV0pO1xyXG5cdFx0XHRcdFx0b3V0ZXJbb3V0ZXIubGVuZ3RoXSA9IGV4dHJhY3RQb2ludCh0ZW1wLmlubmVyWzBdKTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdGlubmVyW2lubmVyLmxlbmd0aF0gPSBleHRyYWN0UG9pbnQodGVtcC5pbm5lclswXSk7XHJcblx0XHRcdFx0XHRvdXRlcltvdXRlci5sZW5ndGhdID0gZXh0cmFjdFBvaW50KHRlbXAub3V0ZXJbdGVtcC5vdXRlci5sZW5ndGgtMV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdC8qXHJcblx0XHRzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLmZpbGwsXHJcbiAgICAgICAgICAgICAgICBzdHJva2U6IHRoaXMuZmlsbFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleCk7XHJcblx0XHQqL1xyXG5cclxuXHRcdGlmKCF0aGlzLmNyb3NzZXMpe1xyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFsuLi50b3RhbF0sW10pXHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtdLFtcdFx0XHJcblx0XHRcdFx0Li4uaW5uZXIsIGJyZWFrUG9pbnQsIC4uLm91dGVyLFxyXG5cdFx0XHRdKVxyXG5cdFx0fTtcclxuXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0Nsb3NlZFRvZVN0cmFwcGVkUHVtcHMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBcclxuLypcdC8vc2x1dHR5IGNyb3NzZXNcdFx0XHJcblx0XHRcdHN0cmFwV2lkdGg6IDIsXHJcblx0XHRcdFxyXG5cdFx0XHRzdHJhcHM6IDYsIC8vNCAtIDdcclxuXHRcdFx0c3BhY2U6IDYsICAvLzQtOCBcclxuXHRcdFx0Y3Jvc3NlczogdHJ1ZSxcclxuXHRcdFx0XHJcblx0XHRcdGJhc2VQb2ludGluZXNzOiA2LFxyXG5cdFx0XHRzaG9lSGVpZ2h0OiA2LFxyXG5cdFx0XHRzaG9lVGlnaHRuZXNzOiA5LFxyXG5cdFx0XHR0b2VDb3ZlcmFnZTogLTEsXHJcbiovXHRcdFxyXG5cdFx0XHRcclxuLypcdC8vbm9ybWFsIGNyb3NzZXNcclxuXHRcdFx0c3RyYXBXaWR0aDogMixcclxuXHRcdFx0XHJcblx0XHRcdHN0cmFwczogMixcclxuXHRcdFx0c3BhY2U6IDQsIFxyXG5cdFx0XHRjcm9zc2VzOiB0cnVlLFxyXG5cdFx0XHRcclxuXHRcdFx0YmFzZVBvaW50aW5lc3M6IDMsXHJcblx0XHRcdHNob2VIZWlnaHQ6IDEsXHJcblx0XHRcdHNob2VUaWdodG5lc3M6IDksXHJcblx0XHRcdHRvZUNvdmVyYWdlOiAxLFxyXG4qL1x0XHRcdFxyXG5cclxuLyogc2x1dHkgc3RyYXBzXHJcblx0XHRcdHN0cmFwV2lkdGg6IDMsIC8vMiAtIDNcclxuXHRcdFx0XHJcblx0XHRcdHN0cmFwczogMiwgLy8xIC0gMiBcclxuXHRcdFx0c3BhY2U6IDQsIC8vNCBcclxuXHRcdFx0Y3Jvc3NlczogZmFsc2UsXHJcblx0XHRcdFxyXG5cdFx0XHRiYXNlUG9pbnRpbmVzczogNixcclxuXHRcdFx0c2hvZUhlaWdodDogNixcclxuXHRcdFx0c2hvZVRpZ2h0bmVzczogOSxcclxuXHRcdFx0dG9lQ292ZXJhZ2U6IC0xLFxyXG4qL1x0XHRcdFxyXG5cdFx0XHRcclxuLyogc3RyYXBzIG5vcm1hbFxyXG5cdFx0XHRzdHJhcFdpZHRoOiAyLCAvLzIgLSAzXHJcblx0XHRcdFxyXG5cdFx0XHRzdHJhcHM6IDIsIC8vMCAtIDEgXHJcblx0XHRcdHNwYWNlOiAzLCAvLzAgLSAzIFxyXG5cdFx0XHRjcm9zc2VzOiBmYWxzZSxcclxuXHRcdFx0XHJcblx0XHRcdGJhc2VQb2ludGluZXNzOiAzLFxyXG5cdFx0XHRzaG9lSGVpZ2h0OiAxLFxyXG5cdFx0XHRzaG9lVGlnaHRuZXNzOiA5LFxyXG5cdFx0XHR0b2VDb3ZlcmFnZTogMSxcclxuKi9cclxuXHJcblx0XHRzdHJhcFdpZHRoOiAyLFxyXG5cdFx0XHRcclxuXHRcdFx0c3RyYXBzOiAyLFxyXG5cdFx0XHRzcGFjZTogNCwgXHJcblx0XHRcdGNyb3NzZXM6IHRydWUsXHJcblx0XHRcdFxyXG5cdFx0XHRiYXNlUG9pbnRpbmVzczogMyxcclxuXHRcdFx0c2hvZUhlaWdodDogMSxcclxuXHRcdFx0c2hvZVRpZ2h0bmVzczogOSxcclxuXHRcdFx0dG9lQ292ZXJhZ2U6IDEsXHJcblx0XHRcdFxyXG5cdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG5cdFx0LypcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5SSUdIVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEdhaXRlclBhcnRcclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0Ki9cclxuXHRcdFx0Ly9CQVNFXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdIZWVsQmFzZVBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0hlZWxCYXNlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcclxuXHRcdFx0Ly9TVFJBUFxyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3SGVlbFN0cmFwUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0hlZWxTdHJhcFBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgIFx0ICAgICAgICBcclxuXHRcdFx0Ly9TSElORVxyXG5cdFx0XHR7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBIZWVsQmFzZVNoaW5lXHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcclxuIFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuZXhwb3J0IGNsYXNzIHdIZWVsQmFzZVBhcnQgZXh0ZW5kcyBIZWVsUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuICAgICAgICBjb25zdCB0b2UgPSBleC50b2U7XHJcblxyXG4gICAgICAgIHRvZS50b2Vib3ggPSB7XHJcbiAgICAgICAgICAgIHg6IHRvZS5jZW50ZXIueCxcclxuICAgICAgICAgICAgeTogdG9lLmNlbnRlci55XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3Qge291dCwgb3V0Qm90LCBib3QsIGluQm90LCBpblRvcCwgdG9uZ3VlfSA9IGNhbGNIZWVscy5jYWxsKHRoaXMsIGV4KTtcclxuXHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBiYWNrIG9mIHRoZSBoZWVsc1xyXG4gICAgICAgIGNvbnN0IGJhY2tUb3AgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUuaW4pO1xyXG4gICAgICAgIGxldCBzcCA9IHNwbGl0Q3VydmUoMC42LCBleC50b2UuaW4sIGV4LmFua2xlLmluYm90KTtcclxuICAgICAgICBjb25zdCBiYWNrQm90ID0gc3AubGVmdC5wMjtcclxuICAgICAgICBiYWNrQm90LmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhiYWNrVG9wLCBiYWNrQm90LCAwLjIsIC0zLjMpO1xyXG4gICAgICAgIGJhY2tUb3AuY3AxID0gc2ltcGxlUXVhZHJhdGljKGJhY2tCb3QsIGJhY2tUb3AsIDAuNywgMS40KTtcclxuXHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHRvdXQsIG91dEJvdCwgYm90LCBpbkJvdCwgaW5Ub3AsIHRvbmd1ZSwgb3V0LCBcclxuXHRcdFx0XHRicmVha1BvaW50LCBcclxuXHRcdFx0XHRiYWNrVG9wLCBiYWNrQm90LCBiYWNrVG9wLFxyXG5cdFx0XSk7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3Q2xvc2VkVG9lUHVtcHMgZXh0ZW5kcyBIZWVscyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHQvKlxyXG5cdFx0XHRiYXNlUG9pbnRpbmVzczogNixcclxuXHRcdFx0c2hvZUhlaWdodDogNixcclxuXHRcdFx0c2hvZVRpZ2h0bmVzczogOSxcclxuXHRcdFx0dG9lQ292ZXJhZ2U6IC0xLFxyXG5cdFx0XHQqL1xyXG5cdFxyXG5cdFx0XHRcclxuXHRcdFx0YmFzZVBvaW50aW5lc3M6IDMsXHJcblx0XHRcdHNob2VIZWlnaHQ6IDEsXHJcblx0XHRcdHNob2VUaWdodG5lc3M6IDksXHJcblx0XHRcdHRvZUNvdmVyYWdlOiAxLFxyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3SGVlbEJhc2VQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3SGVlbEJhc2VQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxCYXNlU2hpbmVcclxuICAgICAgICAgICAgfSxcclxuIFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbiBcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdEb3VibGVkU25lYWtlcnNQYXJ0IGV4dGVuZHMgSGVlbFBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHt9LHtcclxuXHRcdFx0dGlwOiAwLFxyXG5cdFx0XHRsYWNlVGhpY2tuZXNzOiAwLjgsXHJcblx0XHRcdHRvbmd1ZTogNi42LFxyXG5cdFx0XHRoaWdobGlnaHQ6IFwid2hpdGVcIixcclxuXHRcdFx0Y3Jvc3NlczogMixcclxuXHRcdFx0aHVlOiAxMCxcclxuXHRcdFx0c2F0dXI6IDgwLFxyXG5cdFx0XHRsaWdodDogNTAsXHJcblx0XHRcdGFscGhhOiAxLFxyXG5cdFx0XHR0cmFuc2Zvcm1hdGlvbjogMC41LFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblxyXG5cdFxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcbiBcclxuXHRcclxuXHQvL0JBU0VcclxuXHRcdGNvbnN0IGFua2xlT3V0ID0gYWRqdXN0KGV4LmFua2xlLm91dGJvdCx0aGlzLnRpZ2h0LDApXHJcblx0XHRjb25zdCBhbmtsZUluID0gYWRqdXN0KGV4LmFua2xlLmluYm90LC10aGlzLnRpZ2h0LDApO1xyXG5cdFx0YW5rbGVJbi5jcDIueCAtPSAxK3RoaXMudGlnaHQ7XHJcblx0XHRjb25zdCB0b2VPdXQgPSBhZGp1c3QoZXgudG9lLm91dCx0aGlzLnRpZ2h0KzEsMClcclxuXHRcdGNvbnN0IHRvZUluID0gYWRqdXN0KGV4LnRvZS5pbiwtdGhpcy50aWdodCwtdGhpcy50aWdodClcclxuXHRcdHd3YmJfZnR3X2QuY2FsbCh0aGlzLGV4LGN0eCx0aGlzLnRyYW5zZm9ybWF0aW9uLFtcclxuXHRcdFx0ZXguYW5rbGUub3V0LFxyXG5cdFx0XHRhbmtsZU91dCwgXHJcblx0XHRcdHRvZU91dCwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0YW5rbGVJbiwgXHJcblx0XHRcdGV4LmFua2xlLmluLFxyXG5cdFx0XSk7XHJcblx0XHQvKlxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHRleC5hbmtsZS5vdXQsXHJcblx0XHRcdGFua2xlT3V0LCBcclxuXHRcdFx0dG9lT3V0LCBcclxuXHRcdFx0dG9lSW4sIFxyXG5cdFx0XHRhbmtsZUluLCBcclxuXHRcdFx0ZXguYW5rbGUuaW4sXHJcblx0XHRcdFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cdFx0XHJcblx0XHRcclxuXHQvL1RJUFx0XHJcblx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUoMC40LHRvZUluLGFua2xlSW4pO1xyXG5cdFx0dGVtcCA9IHRlbXAubGVmdC5wMjtcclxuXHRcdFxyXG5cdFx0bGV0IHRvZSA9IGV4dHJhY3RQb2ludCh0b2VPdXQpO1xyXG5cdFx0dG9lLmNwMSA9IHtcclxuXHRcdFx0eDogZmluZEJldHdlZW4odG9lLngsdGVtcC54KSxcclxuXHRcdFx0eTogdG9lLnktKDIrdGhpcy5zaG9lSGVpZ2h0KSt0aGlzLnRpcCxcclxuXHRcdH07XHJcblx0XHR3d2JiX2Z0d19kLmNhbGwodGhpcyxleCxjdHgsdGhpcy50cmFuc2Zvcm1hdGlvbixbXHJcblx0XHRcdHRvZSwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0dGVtcCxcclxuXHRcdFx0dG9lLFxyXG5cdFx0XSxbXSx7ZmlsbFdpdGhIaWdobGlnaHQ6IHRydWV9KTtcclxuXHRcdC8qXHJcblx0XHQvL1RPRE8gLSBmaWxsIHdpdGggaGlnaGxpZ2h0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdHRvZSwgXHJcblx0XHRcdHRvZUluLCBcclxuXHRcdFx0dGVtcCxcclxuXHRcdFx0dG9lLFxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cdFx0XHJcblx0XHRcclxuXHJcblxyXG5cdC8vTEFDSU5HXHRcclxuXHRcdGxldCBvdXRUb3AgPSBleHRyYWN0UG9pbnQoZXguYW5rbGUub3V0KTtcclxuXHRcdGxldCBvdXRCb3QgPSBhZGp1c3Qob3V0VG9wLC0yLC05KTtcclxuXHRcdGxldCBpblRvcCA9IGV4dHJhY3RQb2ludChleC5hbmtsZS5pbik7XHJcblx0XHRsZXQgaW5Cb3QgPSBhZGp1c3QoaW5Ub3AsLTAuNSwtOSlcclxuXHRcdGxldCBwb2ludHMgPSBnZXRMYWNpbmdQb2ludHMob3V0Qm90LG91dFRvcCxpbkJvdCxpblRvcCx0aGlzLmNyb3NzZXMsLTEpO1xyXG5cdFx0d3diYl9mdHdfZC5jYWxsKHRoaXMsZXgsY3R4LHRoaXMudHJhbnNmb3JtYXRpb24sW10sW1xyXG5cdFx0XHQuLi5wb2ludHMuaW5uZXIsXHJcblx0XHRcdGJyZWFrUG9pbnQsXHJcblx0XHRcdC4uLnBvaW50cy5vdXRlcixcclxuXHRcdF0se3N0cm9rZVdpdGhIaWdobGlnaHQ6IHRydWUsIGxpbmVXaWR0aDp0aGlzLmxhY2VUaGlja25lc3N9ICk7XHJcblx0XHRcclxuXHRcdC8qXHJcblx0XHQvL1RPRE8gLSBzdHJva2UgaGlnaGxpZ2h0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdC8vb3V0Qm90LFxyXG5cdFx0XHQvL2V4dHJhY3RQb2ludChvdXRJbikvL1xyXG5cdFx0XHQuLi5wb2ludHMuaW5uZXIsXHJcblx0XHRcdGJyZWFrUG9pbnQsXHJcblx0XHRcdC4uLnBvaW50cy5vdXRlcixcclxuXHRcdCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cdFx0XHJcblx0XHRcclxuXHQvL1RPTkdVRVx0XHJcblxyXG5cdFx0Y29uc3QgdG9uZ3VlT3V0ID0gYWRqdXN0KG91dFRvcCwtMSwwKTtcclxuXHRcdGNvbnN0IHRvbmd1ZUluID0gYWRqdXN0KGluVG9wLDEsMClcclxuXHRcdHRvbmd1ZU91dC5jcDEgPSBwZXJwZW5kaWN1bGFyUG9pbnQob3V0VG9wLHRvbmd1ZUluLDAuNSwtdGhpcy50b25ndWUpO1xyXG5cdFx0XHJcblx0XHQvL1RPRE8gLSBmaWxsIHdpdGggc3Ryb2tlXHJcblx0XHQvL2N0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XHJcblx0XHQvKlxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0ZHJhd1BvaW50cyhjdHgsIFxyXG5cdFx0XHR0b25ndWVJbixcclxuXHRcdFx0dG9uZ3VlT3V0LFxyXG5cdFx0XHR0b25ndWVJblxyXG5cdFx0KTtcclxuXHRcdGN0eC5maWxsKCk7XHJcblx0XHRjdHguc3Ryb2tlKCk7XHJcblx0XHQqL1xyXG5cdFx0XHJcblx0XHR3d2JiX2Z0d19kLmNhbGwodGhpcyxleCxjdHgsdGhpcy50cmFuc2Zvcm1hdGlvbixbXHJcblx0XHRcdHRvbmd1ZUluLFxyXG5cdFx0XHR0b25ndWVPdXQsXHJcblx0XHRcdHRvbmd1ZUluXHJcblx0XHRdLFtdLHtmaWxsV2l0aFN0cm9rZTogdHJ1ZX0pO1xyXG5cclxuIFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0RvdWJsZUhlZWxQYXJ0IGV4dGVuZHMgSGVlbFBhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgdG9lID0gZXgudG9lO1xyXG5cclxuICAgICAgICB0b2UudG9lYm94ID0ge1xyXG4gICAgICAgICAgICB4OiB0b2UuY2VudGVyLngsXHJcbiAgICAgICAgICAgIHk6IHRvZS5jZW50ZXIueVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHtvdXQsIG91dEJvdCwgYm90LCBpbkJvdCwgaW5Ub3AsIHRvbmd1ZX0gPSBjYWxjSGVlbHMuY2FsbCh0aGlzLCBleCk7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gYmFjayBvZiB0aGUgaGVlbHNcclxuICAgICAgICBjb25zdCBiYWNrVG9wID0gZXh0cmFjdFBvaW50KGV4LmFua2xlLmluKTtcclxuICAgICAgICBsZXQgc3AgPSBzcGxpdEN1cnZlKDAuNiwgZXgudG9lLmluLCBleC5hbmtsZS5pbmJvdCk7XHJcbiAgICAgICAgY29uc3QgYmFja0JvdCA9IHNwLmxlZnQucDI7XHJcbiAgICAgICAgYmFja0JvdC5jcDEgPSBzaW1wbGVRdWFkcmF0aWMoYmFja1RvcCwgYmFja0JvdCwgMC4yLCAtMy4zKTtcclxuICAgICAgICBiYWNrVG9wLmNwMSA9IHNpbXBsZVF1YWRyYXRpYyhiYWNrQm90LCBiYWNrVG9wLCAwLjcsIDEuNCk7XHJcblxyXG5cdFx0d3diYl9mdHdfZC5jYWxsKHRoaXMsZXgsY3R4LDEtdGhpcy50cmFuc2Zvcm1hdGlvbixbXHJcblx0XHRcdFx0b3V0LCBvdXRCb3QsIGJvdCwgaW5Cb3QsIGluVG9wLCB0b25ndWUsIG91dCwgXHJcblx0XHRcdFx0YnJlYWtQb2ludCwgXHJcblx0XHRcdFx0YmFja1RvcCwgYmFja0JvdCwgYmFja1RvcCxcclxuXHRcdF0pO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0RvdWJsZVNob2VzIGV4dGVuZHMgSGVlbHMge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0XHJcblx0XHRcdHRpZ2h0OiAwLjUsXHJcblx0XHRcdFxyXG5cdFx0XHRiYXNlUG9pbnRpbmVzczogMCxcclxuXHRcdFx0c2hvZUhlaWdodDogMCxcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdHRyYW5zZm9ybWF0aW9uOiAwLFxyXG5cdFx0XHRcclxuXHRcdFx0dG91bmdlOiA2LjYsXHJcblx0XHRcdGxhY2VUaGlja25lc3M6IDAuOCxcclxuXHRcdFx0dGlwOiAwLFxyXG5cdFx0XHJcblx0XHRcdHRvZUNvdmVyYWdlOiAxLFxyXG5cdFx0XHJcblx0LyogLy9TTFVUWTpcdFxyXG5cdFx0dGlnaHQ6IDAuNSxcclxuXHRcdFxyXG5cdFx0YmFzZVBvaW50aW5lc3M6IDYsXHJcblx0XHRzaG9lSGVpZ2h0OiA2LFxyXG5cdFx0c2hvZVRpZ2h0bmVzczogOSxcclxuXHRcdHRvZUNvdmVyYWdlOiAtMSxcclxuXHRcdFxyXG5cdFx0dHJhbnNmb3JtYXRpb246IDAuOCxcclxuXHRcdFxyXG5cdFxyXG5cdFx0dG9uZ3VlIDogMCxcclxuXHRcdGxhY2VUaGlja25lc3M6IDAuMDEsXHJcblx0XHR0aXA6IC03LFxyXG5cdCovXHJcblx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFxyXG5cdFx0XHQvL0JBU0VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RvdWJsZWRTbmVha2Vyc1BhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RvdWJsZWRTbmVha2Vyc1BhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdEb3VibGVIZWVsUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RvdWJsZUhlZWxQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IEhlZWxCYXNlU2hpbmVcclxuICAgICAgICAgICAgfSxcclxuXHRcdFxyXG4gXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgc2ltcGxlUXVhZHJhdGljLFxyXG4gICAgZHJhd1BvaW50cyxcclxuICAgIGV4dHJhY3RQb2ludCxcclxuICAgIHNwbGl0Q3VydmUsXHJcblx0aW50ZXJwb2xhdGVDdXJ2ZSxcclxuXHRhZGp1c3QsXHJcbiAgICBjbG9uZSxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdGdldExpbWJQb2ludHNOZWdhdGl2ZSxcclxuXHRnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQsXHJcblx0Z2V0TGltYlBvaW50c0Fib3ZlUG9pbnQsXHJcblx0ZmluZEJldHdlZW4sXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdFNvY2ssXHJcblx0U29ja1BhcnRcclxufSBmcm9tIFwiLi9zb2Nrc1wiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRjYWxjU3VwZXJTb2NrcyxcclxuXHRTdXBlclNvY2tCYW5kUGFydCxcclxuXHRHYXJ0ZXJcclxufSBmcm9tIFwiLi9zdXBlcl9zb2Nrc1wiO1xyXG5cclxuaW1wb3J0IHtcclxuXHR3d2JiX2Z0d1xyXG59IGZyb20gXCIuL3d3YmJcIjtcclxuXHJcbmltcG9ydCB7Y2FsY1N1cGVyUGFudHNUb3B9IGZyb20gXCIuL3N1cGVyX3BhbnRzXCI7XHJcbi8qXHJcbmZ1bmN0aW9uIGNhbGNTdXBlclNvY2tzKGV4LCBsZWdDb3ZlcmFnZSwgbG9ja0dyb2luKSB7XHJcblx0XHJcblx0bGV0ICBhZGRQb2ludHNNaWQ9W107XHJcblx0aWYodHlwZW9mIGV4LnF1YWRzICE9PSBcInVuZGVmaW5lZFwiKXtcclxuXHRcdGFkZFBvaW50c01pZFswXSA9ICBjbG9uZShleC5xdWFkcy50b3ApO1xyXG5cdFx0YWRkUG9pbnRzTWlkWzBdLnggPSBleC50aGlnaC5vdXQueDtcclxuXHRcdGFkZFBvaW50c01pZFsxXSA9IGNsb25lKGV4LnF1YWRzLm91dCk7XHJcblx0fVxyXG5cdFxyXG5cdGlmKGxlZ0NvdmVyYWdlPj0xKXtsZWdDb3ZlcmFnZT0wLjk5fVxyXG5cclxuXHRcclxuXHRsZXQgIG91dGVyUG9pbnRzID0gZ2V0TGltYlBvaW50c05lZ2F0aXZlKGV4LmhpcCxleC5hbmtsZS5vdXQsbGVnQ292ZXJhZ2UsZXguaGlwLGV4LnRoaWdoLm91dCwgLi4uYWRkUG9pbnRzTWlkLCBleC5rbmVlLm91dCxleC5jYWxmLm91dCxleC5hbmtsZS5vdXQpO1xyXG5cdFxyXG5cdGlmKCFsb2NrR3JvaW4mJmxlZ0NvdmVyYWdlPDApeyAvL2NhbiBpbmNsdWRlIHdhaXN0IFxyXG5cdFx0bGV0IHRvcnNvUG9pbnRzID0gZ2V0TGltYlBvaW50c05lZ2F0aXZlKGV4LmFybXBpdCxleC5oaXAsKDErbGVnQ292ZXJhZ2UpLGV4LmFybXBpdCxleC53YWlzdCxleC5oaXApO1xyXG5cdFx0dG9yc29Qb2ludHMucG9wKCk7XHJcblx0XHRvdXRlclBvaW50cyA9IHRvcnNvUG9pbnRzLmNvbmNhdChvdXRlclBvaW50cyk7XHJcblx0fVxyXG5cdFxyXG5cdGxldCAgaW5uZXJQb2ludHMgPSBnZXRMaW1iUG9pbnRzQmVsbG93UG9pbnQob3V0ZXJQb2ludHNbMF0sdHJ1ZSxleC5ncm9pbixleC50aGlnaC50b3AsZXgudGhpZ2guaW4sZXgua25lZS5pbnRvcCxleC5rbmVlLmluLGV4LmNhbGYuaW4sZXguYW5rbGUuaW4pO1xyXG5cdFx0XHJcblx0b3V0ZXJQb2ludHNbMF0gPSBleHRyYWN0UG9pbnQoIG91dGVyUG9pbnRzWzBdKTsgXHJcblxyXG5cdCAvL1RPUFxyXG5cdCAvL3NvY2tzIHRvcCBjdXJ2ZVxyXG5cdCBpZihvdXRlclBvaW50c1swXS55LTY8PWV4LnRoaWdoLnRvcC55KXtcclxuXHRcdG91dGVyUG9pbnRzWzBdLmNwMSA9IHtcclxuXHRcdFx0eDpmaW5kQmV0d2Vlbihpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGgtMV0ueCxvdXRlclBvaW50c1swXS54LDAuNSksXHJcblx0XHRcdHk6b3V0ZXJQb2ludHNbMF0ueS02XHJcblx0XHR9O1xyXG5cdC8vc2hvdWxkIGJlIHRpZ2h0cyBidXQgbWFudWFsbHkgb3ZlcnJpZGRlbiB0byBzdGF5IHNvY2tzIChzdG9ja2luZ3MpXHJcblx0fWVsc2UgaWYobG9ja0dyb2luKXtcclxuXHRcdGlubmVyUG9pbnRzLnNwbGljZShpbm5lclBvaW50cy5sZW5ndGgtMSwgMSk7XHJcblx0XHRsZXQgdGVtcCA9IGludGVycG9sYXRlQ3VydmUoIGV4LmhpcCwgZXgudGhpZ2gub3V0LCB7eDpudWxsLHk6ZXgudGhpZ2gudG9wLnl9KTtcclxuXHRcdG91dGVyUG9pbnRzWzBdID0gZXh0cmFjdFBvaW50KHRlbXBbMF0pO1xyXG5cdFx0b3V0ZXJQb2ludHNbMV0gPSBleHRyYWN0UG9pbnQob3V0ZXJQb2ludHNbMV0pOy8vbGFzc28gbG9vcCBhYm92ZSBvdXRlclBvaW50c1swXTsgXHJcblx0XHRvdXRlclBvaW50c1swXS5jcDEgPSB7XHJcblx0XHRcdHg6ZmluZEJldHdlZW4oaW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoLTFdLngsb3V0ZXJQb2ludHNbMF0ueCwwLjUpLFxyXG5cdFx0XHR5Om91dGVyUG9pbnRzWzBdLnktNlxyXG5cdFx0fTtcdFx0XHJcblx0Ly90aWdodHMgLSB0b3AgJiB0b3AgY3VydmVcclxuXHR9ZWxzZXtcclxuXHRcdGxldCB3YWlzdEN1cnZlID0gb3V0ZXJQb2ludHNbMF0ueSAtIGV4LmhpcC55O1xyXG5cdFx0bGV0ICB0b3AgPSB7XHJcblx0XHRcdHg6IC0wLjEsICBcclxuXHRcdFx0eTogZXgucGVsdmlzLnkgKyB3YWlzdEN1cnZlICogMS4yXHJcblx0XHR9OyAvL2Zvcm11bGEgZnJvbSBvcmlnaW5hbCBwYW50cyBcclxuXHRcdFxyXG5cdFx0b3V0ZXJQb2ludHNbMF0uY3AyID0gdm9pZCAwO1xyXG5cdFx0b3V0ZXJQb2ludHNbMF0uY3AxID0ge1xyXG5cdFx0XHR4OiBmaW5kQmV0d2VlbihvdXRlclBvaW50c1swXS54LHRvcC54LDAuNSksXHJcblx0XHRcdHk6IHRvcC55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRvdXRlclBvaW50cy51bnNoaWZ0KHRvcCk7XHJcblx0XHRcclxuXHRcdC8vYXJjaCBiZXR3ZWVuIHRoaWdocyBcclxuXHRcdGlubmVyUG9pbnRzW2lubmVyUG9pbnRzLmxlbmd0aC0xXS5jcDEgPSB7XHJcblx0XHRcdHg6IGlubmVyUG9pbnRzW2lubmVyUG9pbnRzLmxlbmd0aC0xXS54ICogMC41ICsgZXgudGhpZ2gudG9wLnggKiAwLjUsXHJcblx0XHRcdHk6IGlubmVyUG9pbnRzW2lubmVyUG9pbnRzLmxlbmd0aC0xXS55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRpbm5lclBvaW50c1tpbm5lclBvaW50cy5sZW5ndGhdPXRvcDtcclxuXHR9XHJcblx0XHJcblx0cmV0dXJuIHtcclxuXHRcdG91dGVyUG9pbnRzLFxyXG5cdFx0aW5uZXJQb2ludHMsXHJcbiAgfTtcclxufVxyXG4qL1xyXG4vKlxyXG5leHBvcnQgY2xhc3MgR2FydGVyIGV4dGVuZHMgU29ja1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgYWJvdmVTYW1lTGF5ZXJQYXJ0czogW1wiZmVldFwiXSxcclxuXHRcdFx0YWJvdmVQYXJ0czogW1wicGFydHMgZmVldFwiLFwicGFydHMgbGVnXCIsXCJjbG90aGluZ1BhcnRzIGdyb2luXCJdLFxyXG5cdFx0XHRyZWZsZWN0OnRydWUsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Y29uc3Qge291dGVyUG9pbnRzLCBpbm5lclBvaW50c30gPSBjYWxjU3VwZXJTb2NrcyhleCwgdGhpcy5sZWdDb3ZlcmFnZSwgdGhpcy5sb2NrR3JvaW4pO1xyXG5cdFx0Ly9DbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5oaWdobGlnaHQ7XHJcblx0XHRcclxuXHRcdC8vdGhpcy5iZWx0V2lkdGggPSAxMDtcclxuXHRcdFxyXG5cdFx0Ly9UT1BcclxuXHRcclxuXHRcdC8vYmFzZWQgb24gY29kZSBmcm9tIGZyb20gY2FsY1N1cGVyUGFudHNcclxuXHRcdGxldCBvdXRUb3A7XHJcblx0XHRsZXQgb3V0Qm90cztcclxuXHRcdGlmKHRoaXMud2Fpc3RDb3ZlcmFnZT4wKXtcclxuXHRcdFx0bGV0IHNwID0gc3BsaXRDdXJ2ZSgoMS10aGlzLndhaXN0Q292ZXJhZ2UpLGV4LndhaXN0LGV4LmhpcCk7XHRcclxuXHRcdFx0b3V0VG9wID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG5cdFx0XHQvL2xldCAgaGlwID0gdGVtcC5yaWdodC5wMjtcclxuXHRcdFx0bGV0IHRlbXAgPSB7eDowLHk6b3V0VG9wLnktdGhpcy5iZWx0V2lkdGh9O1xyXG5cdFx0XHRvdXRCb3RzID0gZ2V0TGltYlBvaW50c0Fib3ZlUG9pbnQodGVtcCxmYWxzZSxvdXRUb3AsZXguaGlwLGV4LnRoaWdoLm91dCk7XHJcblx0XHRcdC8vbGV0ICB0aGlnaE91dCA9IGV4LnRoaWdoLm91dDtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKE1hdGguYWJzKHRoaXMud2Fpc3RDb3ZlcmFnZSksZXguaGlwLGV4LnRoaWdoLm91dCk7XHRcclxuXHRcdFx0b3V0VG9wID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG5cdFx0XHQvL2xldCAgaGlwO1xyXG5cdFx0XHRsZXQgdGVtcCA9IHt4OjAseTpvdXRUb3AueS10aGlzLmJlbHRXaWR0aH07XHJcblx0XHRcdG91dEJvdHMgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCh0ZW1wLGZhbHNlLG91dFRvcCxleC50aGlnaC5vdXQpO1xyXG5cdFx0XHQvL2xldCAgdGhpZ2hPdXQgPSB0ZW1wLnJpZ2h0LnAyO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vbGV0ICB3YWlzdEN1cnZlID0gb3V0Qm90c1tvdXRCb3RzLmxlbmd0aC0xXS55IC0gZXguaGlwLnk7XHJcblx0XHRsZXQgIGluVG9wID0ge1xyXG5cdFx0XHR4OiAtMC4xLCAgXHJcblx0XHRcdHk6IG91dFRvcC55LTYsXHJcblx0XHRcdC8veTogZXgucGVsdmlzLnkgKyB3YWlzdEN1cnZlICogMS4yLy8xLjJcclxuXHRcdH07XHJcblx0XHRvdXRUb3AuY3AxID0ge1xyXG5cdFx0XHR4OiBvdXRUb3AueCAqIDAuNSArIGluVG9wLnggKiAwLjUsXHJcblx0XHRcdHk6IGluVG9wLnlcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdC8vQ09OTkVDVElPTiBUTyBTT0NLU1xyXG5cdFx0bGV0ICBzb2NrSW4gPSAgaW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoLTFdO1xyXG5cdFx0bGV0ICBzb2NrT3V0ID0gZXh0cmFjdFBvaW50KG91dGVyUG9pbnRzWzBdKTtcclxuXHRcdHNvY2tJbi55LT02O1x0XHRcclxuXHRcdHNvY2tPdXQueS09NjtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRsZXQgIGNvbm5lY3RPdXQgPSB7XHJcblx0XHRcdHk6c29ja091dC55LFxyXG5cdFx0XHR4OigoKHNvY2tJbi54LXNvY2tPdXQueCkqMC40K3NvY2tPdXQueCkgICkrM1xyXG5cdFx0fTtcclxuXHRcdGNvbm5lY3RPdXQuY3AxID0ge1xyXG5cdFx0XHR5OiAoKG91dEJvdHNbb3V0Qm90cy5sZW5ndGgtMV0ueS1jb25uZWN0T3V0LnkpKjAuOSkrY29ubmVjdE91dC55LFxyXG5cdFx0XHR4OiAoKG91dEJvdHNbb3V0Qm90cy5sZW5ndGgtMV0ueC1jb25uZWN0T3V0LngpKigtMC4xKSkrY29ubmVjdE91dC54XHJcblx0XHR9O1xyXG5cdFx0bGV0ICBjb25uZWN0SW4gPSB7XHJcblx0XHRcdHk6IHNvY2tJbi55LFxyXG5cdFx0XHR4OiBjb25uZWN0T3V0LngtMyxcclxuXHRcdH07XHJcblx0XHRsZXQgIGluQm90ID0ge1xyXG5cdFx0XHR4OiBleC5wZWx2aXMueC0wLjEsXHJcblx0XHRcdHk6IGluVG9wLnktKG91dFRvcC55LW91dEJvdHNbb3V0Qm90cy5sZW5ndGgtMV0ueSlcclxuXHRcdH07XHJcblx0XHRpbkJvdC5jcDEgPSB7XHJcblx0XHRcdHk6ICgoY29ubmVjdEluLnktaW5Ub3AueSkqMC4yKStpblRvcC55LFxyXG5cdFx0XHR4OiAoKGNvbm5lY3RJbi54LWluVG9wLngpKigwLjkpKStpblRvcC54XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhcclxuICAgICAgICAgICAgY3R4LCAgXHJcblx0XHRcdGluVG9wLFxyXG5cdFx0XHRvdXRUb3AsXHJcblx0XHRcdC4uLm91dEJvdHMsXHJcblx0XHRcdGNvbm5lY3RPdXQsXHJcblx0XHRcdGNvbm5lY3RJbixcclxuXHRcdFx0aW5Cb3RcclxuXHRcdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgLy8gIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxufVx0XHRcclxuXHRcdCovXHJcblx0XHRcclxuXHQvKlx0XHJcbmV4cG9ydCBjbGFzcyBTdXBlclNvY2tCYW5kUGFydCBleHRlbmRzIFNvY2tQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImZlZXRcIl0sXHJcblx0XHRcdGFib3ZlUGFydHM6IFtcInBhcnRzIGZlZXRcIixcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRjb25zdCB7b3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzfSA9IGNhbGNTdXBlclNvY2tzKGV4LCB0aGlzLmxlZ0NvdmVyYWdlLHRoaXMubG9ja0dyb2luKTtcclxuXHRcdC8vQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuaGlnaGxpZ2h0O1xyXG5cdFx0XHJcblx0XHRsZXQgIHRvcEluID0gaW5uZXJQb2ludHNbaW5uZXJQb2ludHMubGVuZ3RoLTFdO1xyXG5cdFx0bGV0ICB0b3BPdXQgPSBleHRyYWN0UG9pbnQob3V0ZXJQb2ludHNbMF0pO1xyXG5cdFx0XHJcblx0XHRsZXQgdGVtcFBvaW50ID0gY2xvbmUodG9wSW4pO1xyXG5cdFx0dGVtcFBvaW50LnkgPSB0ZW1wUG9pbnQueS10aGlzLmJhbmRXaWR0aDtcclxuXHRcdFxyXG5cdFx0aW5uZXJQb2ludHMucmV2ZXJzZSgpOyAvL3RoZXkgYXJlIGFscmVhZHkgaW4gb3JkZXIgZm9yIGRyYXdQb2ludHMgKGxvd2VzdCB0byBoaWdoZXN0KSBidXQgXHJcblx0XHRsZXQgIGJvdElucyAgPSBnZXRMaW1iUG9pbnRzQWJvdmVQb2ludCh0ZW1wUG9pbnQsdHJ1ZSwuLi5pbm5lclBvaW50cyk7XHRcdFxyXG5cdFx0bGV0ICBib3RPdXRzID0gZ2V0TGltYlBvaW50c0Fib3ZlUG9pbnQodGVtcFBvaW50LGZhbHNlLC4uLm91dGVyUG9pbnRzKTtcclxuXHRcdFxyXG5cdFx0Ly90b3AgY3VydmVcclxuXHRcdHRvcE91dC5jcDEgPSB7XHJcblx0XHRcdHg6ZmluZEJldHdlZW4odG9wSW4ueCx0b3BPdXQueCwwLjUpLFxyXG5cdFx0XHR5OnRvcE91dC55LTZcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdC8vYm90dG9tIGN1cnZlXHJcblx0XHRib3RJbnNbMF0gPSBleHRyYWN0UG9pbnQoYm90SW5zWzBdKTtcclxuXHRcdGJvdEluc1swXS5jcDEgPSB7XHJcblx0XHRcdHg6ZmluZEJldHdlZW4oYm90T3V0c1tib3RPdXRzLmxlbmd0aC0xXS54LGJvdEluc1swXS54LDAuNSksXHJcblx0XHRcdHk6Ym90SW5zWzBdLnktNlxyXG5cdFx0fTtcclxuXHRcdFx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKFxyXG4gICAgICAgICAgICBjdHgsICBcclxuXHRcdFx0dG9wT3V0LCBcclxuXHRcdFx0Li4uYm90T3V0cyxcclxuXHRcdFx0Li4uYm90SW5zLCBcclxuXHRcdFx0dG9wSW4sXHJcblx0XHRcdHRvcE91dFxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIC8vY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcbiovXHRcdFxyXG5cdFx0XHJcbmV4cG9ydCBjbGFzcyB3U3VwZXJTb2NrUGFydCBleHRlbmRzIFNvY2tQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImZlZXRcIl0sXHJcblx0XHRcdGFib3ZlUGFydHM6IFtcInBhcnRzIGZlZXRcIixcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiXSxcclxuICAgICAgICB9LHtcclxuXHRcdFx0aHVlOiAxMDAsXHJcblx0XHRcdHNhdHVyOiAxMDAsXHJcblx0XHRcdGxpZ2h0OiA0MixcclxuXHRcdFx0YWxwaGE6IDEsXHJcblx0XHRcdFxyXG5cdFx0XHRcclxuXHRcdFx0ZmlzaG5lc3M6IDAsXHJcblx0XHRcdHBhdDogXCJmaXNobmV0XCIsXHJcblx0XHRcdHBhdF9zaXplOiA3NSxcclxuXHRcdFx0XHJcblx0XHRcdGJvZHlzdWl0OmZhbHNlLFxyXG5cdFx0XHRcclxuXHRcdH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdGNvbnN0IHtvdXRlclBvaW50cywgaW5uZXJQb2ludHN9ID0gY2FsY1N1cGVyU29ja3MuY2FsbCh0aGlzLGV4KTsgLy9jYWxjU3VwZXJTb2NrcyhleCwgdGhpcy5sZWdDb3ZlcmFnZSx0aGlzLmxvY2tHcm9pbik7XHJcblx0XHRcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHQuLi5vdXRlclBvaW50cywgXHJcblx0XHRcdFx0ZXguYW5rbGUub3V0Ym90LCBleC50b2Uub3V0LCBleC50b2UuaW4sIGV4LmFua2xlLmluYm90LFxyXG5cdFx0XHRcdC4uLmlubmVyUG9pbnRzLCBcclxuXHRcdFx0XHRvdXRlclBvaW50c1swXVxyXG5cdFx0XHRdLFtcclxuXHRcdFx0XHQuLi5vdXRlclBvaW50cywgXHJcblx0XHRcdFx0ZXguYW5rbGUub3V0Ym90LCBleC50b2Uub3V0LCBleC50b2UuaW4sIGV4LmFua2xlLmluYm90LFxyXG5cdFx0XHRcdC4uLmlubmVyUG9pbnRzLCBcclxuXHRcdFx0XHRvdXRlclBvaW50c1swXSxcclxuXHRcdFx0XHR0cnVlXHJcblx0XHRcdF0pXHJcblx0XHRcdFxyXG5cdFx0XHQvKlxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGRyYXdQb2ludHMoXHJcbiAgICAgICAgICAgIGN0eCwgIFxyXG5cdFx0XHQuLi5vdXRlclBvaW50cywgXHJcblx0XHRcdGV4LmFua2xlLm91dGJvdCwgZXgudG9lLm91dCwgZXgudG9lLmluLCBleC5hbmtsZS5pbmJvdCxcclxuXHRcdFx0Li4uaW5uZXJQb2ludHMsIFxyXG5cdFx0XHRvdXRlclBvaW50c1swXVxyXG5cdFx0KTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdTdXBlclNvY2tzIGV4dGVuZHMgU29jayB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC41LFxyXG5cdFx0XHR0aGlja25lc3M6IDAuNSxcclxuXHRcdFx0bG9ja0dyb2luOiBmYWxzZSxcclxuXHRcdH0sLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlclNvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyU29ja1BhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdTdG9ja2luZ3MgZXh0ZW5kcyBTb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjIsXHJcblx0XHRcdHRoaWNrbmVzczogMC4zLFxyXG5cdFx0XHRiYW5kV2lkdGggIDogNyxcclxuXHRcdFx0aGlnaGxpZ2h0OiBcImhzbGEoMCwgMCUsIDExJSwgMSlcIixcclxuXHRcdFx0bG9ja0dyb2luOiB0cnVlLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDAsIDAlLCAyOCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJTb2NrQmFuZFBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNvY2tCYW5kUGFydCxcclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0XHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlclNvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyU29ja1BhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyB3U3RvY2tpbmdzR2FydGVyIGV4dGVuZHMgU29jayB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKXtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjIsXHJcblx0XHRcdHRoaWNrbmVzczogMC4zLFxyXG5cdFx0XHRiYW5kV2lkdGggIDogOSxcclxuXHRcdFx0YmVsdFdpZHRoIDogMTAsXHJcblx0XHRcdGhpZ2hsaWdodDogXCJoc2xhKDAsIDAlLCAxMSUsIDEpXCIsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0bG9ja0dyb2luOiB0cnVlLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMCwgMCUsIDI4JSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpe1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuXHRcdFx0XHRzaWRlOiBQYXJ0LlJJR0hULFxyXG5cdFx0XHRcdFBhcnQ6IEdhcnRlclxyXG5cdFx0XHR9LCBcclxuXHRcdFx0e1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJTb2NrQmFuZFBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlclNvY2tCYW5kUGFydCxcclxuICAgICAgICAgICAgfSxcclxuXHRcdFx0XHJcblx0XHRcdHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlclNvY2tQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyU29ja1BhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcblx0XHRcdFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1BhbnR5aG9zZVBhcnQgZXh0ZW5kcyBTb2NrUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBhYm92ZVNhbWVMYXllclBhcnRzOiBbXCJmZWV0XCJdLFxyXG5cdFx0XHRhYm92ZVBhcnRzOiBbXCJwYXJ0cyBmZWV0XCIsXCJwYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Y29uc3Qge3RvcCwgb3V0LCBoaXAsIHRoaWdoT3V0fSA9IGNhbGNTdXBlclBhbnRzVG9wLmNhbGwodGhpcyxleCk7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHJcblx0XHRjb25zdCBhZGRQb2ludHNNaWQgPSBbXTsgLy9pZSBzaG91bGQgYmUgbXVzY2xlcyBpbmNsdWRlZD9cclxuXHRcdGlmKHR5cGVvZiBleC5xdWFkcyAhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdGFkZFBvaW50c01pZFswXSA9ICBjbG9uZShleC5xdWFkcy50b3ApO1xyXG5cdFx0XHRhZGRQb2ludHNNaWRbMF0ueCA9ICBleC50aGlnaC5vdXQueDtcclxuXHRcdFx0YWRkUG9pbnRzTWlkWzFdID0gY2xvbmUoZXgucXVhZHMub3V0KTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bGV0IHRoaWdoID0gZXgudGhpZ2gudG9wO1xyXG5cdFx0bGV0IGdyb2luID0gZXguZ3JvaW47XHJcblx0XHRcclxuXHRcdGlmKHRoaXMub3Blbj4wLjAyKXtcclxuXHRcdFx0bGV0IHRlbXAgPSAodG9wLnktZ3JvaW4ueSkqMC43KnRoaXMub3BlbjtcclxuXHRcdFx0Z3JvaW4gPSBhZGp1c3QoZXguZ3JvaW4sMCx0ZW1wKVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdGdyb2luLmNwMiA9IGFkanVzdChleC5ncm9pbiwyMip0aGlzLm9wZW4sMjIqdGhpcy5vcGVuKVxyXG5cdFx0XHRncm9pbi5jcDEgPSBhZGp1c3QoZXguZ3JvaW4sMTIqdGhpcy5vcGVuLC0xNCp0aGlzLm9wZW4pXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0dGVtcCA9IGRhLnNwbGl0Q3VydmUoMS0oMC45KnRoaXMub3BlbiksZXgudGhpZ2guaW4sZXgudGhpZ2gudG9wKTtcclxuXHRcdFx0dGhpZ2ggPSB0ZW1wLmxlZnQucDI7XHJcblx0XHR9O1xyXG5cdFx0LypcdFx0XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgZHJhd1BvaW50cyhjdHgsICBcclxuXHRcdCovXHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0dG9wLG91dCxoaXAsdGhpZ2hPdXQsXHJcblx0XHRcdC4uLmFkZFBvaW50c01pZCxcclxuXHRcdFx0ZXgua25lZS5vdXQsZXguY2FsZi5vdXQsZXguYW5rbGUub3V0LFxyXG5cdFx0XHRleC5hbmtsZS5vdXRib3QsIGV4LnRvZS5vdXQsIGV4LnRvZS5pbiwgZXguYW5rbGUuaW5ib3QsXHJcblx0XHRcdGV4LmFua2xlLmluLGV4LmNhbGYuaW4sZXgua25lZS5pbixleC5rbmVlLmludG9wLGV4LnRoaWdoLmluLFxyXG5cdFx0XHR0aGlnaCxcclxuXHRcdFx0Z3JvaW4sIHRvcFxyXG5cdFx0XSk7XHRcclxuXHRcdC8qKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHRcdCovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdQYW50eWhvc2UgZXh0ZW5kcyBTb2NrIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdHdhaXN0Q292ZXJhZ2UgOiAwLjQ1LFxyXG5cdFx0XHR0aGlja25lc3MgOiAwLjMsXHJcblx0XHRcdG9wZW46IDAsXHJcblx0XHRcdGZpc2huZXNzOiAwLFxyXG5cdFx0fSwuLi5kYXRhKTtcclxuICAgIH1cclxuXHRcclxuXHRmaWxsKCl7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgwLDIwJSwzMCUsMC41KVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpe1xyXG4gICAgICAgIHJldHVybiBcImhzbGEoMC4wLDUlLDMwJSwxKVwiO1xyXG4gICAgfVxyXG5cdFxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdQYW50eWhvc2VQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1BhbnR5aG9zZVBhcnQsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge0xheWVyfSBmcm9tIFwiLi4vdXRpbC9jYW52YXNcIjtcclxuaW1wb3J0IHtcclxuXHRkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGNsb25lLFxyXG5cdGFkanVzdCxcclxuXHRpbnRlcnBvbGF0ZUN1cnZlLFxyXG5cdGJyZWFrUG9pbnQsXHJcblx0cmVmbGVjdCxcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG5cdGZpbmRCZXR3ZWVuLFxyXG5cdGdldExpbWJQb2ludHMsXHJcblx0Z2V0TGltYlBvaW50c0Fib3ZlUG9pbnQsXHJcblx0Z2V0TGFjaW5nUG9pbnRzLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuaW1wb3J0IHt3d2JiX2Z0d30gZnJvbSBcIi4vd3diYlwiO1xyXG5pbXBvcnQge1BhbnRzLENvdmVyZWRCdXR0UGFydH0gZnJvbSBcIi4vcGFudHNcIjtcclxuaW1wb3J0IHtjYWxjU3VwZXJQYW50cyxjYWxjU3VwZXJQYW50c1ppcH0gZnJvbSBcIi4vc3VwZXJfcGFudHNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0xhY2VkU3VwZXJMZWdnaW5zUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5GUk9OVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJsZWdcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgbGVnXCJdLFxyXG5cdFx0XHRiZWxvd1NhbWVMYXllclBhcnRzOiBbXCJ0b3Jzb1wiXSxcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICBjb25zdCB7emlwLCB0b3AsIG1pZCwgb3V0LCBoaXAsIHRoaWdoT3V0LCBncm9pbiwgb3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzfSA9IGNhbGNTdXBlclBhbnRzWmlwLmNhbGwodGhpcyxleCk7XHJcblxyXG4gICAgICAgIENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcbiBcclxuXHJcblx0XHRpZih0aGlzLmlubmVyTG9vc2U+PTEpeyAvL3NraXJ0IC0gZG8gbm90IGRyYXcgdGhlIG1pZGRsZSBsaW5lXHJcblx0XHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRcdHppcCwgbWlkLCAuLi5vdXRlclBvaW50cywgaW5uZXJQb2ludHNbMF0sIHppcFxyXG5cdFx0XHRdLFtcclxuXHRcdFx0XHQuLi5vdXRlclBvaW50cywgaW5uZXJQb2ludHNbMF1cclxuXHRcdFx0XSk7XHRcdFx0XHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHR6aXAsIG1pZCwgLi4ub3V0ZXJQb2ludHMsICAuLi5pbm5lclBvaW50cywgZ3JvaW4sIHppcFxyXG5cdFx0XHRdLFtcclxuXHRcdFx0XHQuLi5vdXRlclBvaW50cywgIC4uLmlubmVyUG9pbnRzLCBncm9pblxyXG5cdFx0XHRdKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly9MQUNJTkchIVxyXG5cdFx0Y29uc3QgY3Jvc3NlcyA9IHRoaXMuY3Jvc3NlcyA+IDAgPyB0aGlzLmNyb3NzZXMgOiAzO1xyXG5cdFx0Y29uc3QgcG9pbnRzID0gZ2V0TGFjaW5nUG9pbnRzKHppcCxtaWQsemlwLHJlZmxlY3QobWlkKSxjcm9zc2VzLDEpO1xyXG5cdFx0Y3R4LmxpbmVXaWR0aCA9IDE7XHJcblx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRkcmF3UG9pbnRzKGN0eCwgLi4ucG9pbnRzLmlubmVyLCBicmVha1BvaW50LCAuLi5wb2ludHMub3V0ZXIpO1xyXG5cdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHQvL2JlbHRcclxuXHRcdGlmKCF0aGlzLmJvZHlzdWl0KXtcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRjdHgubGluZVdpZHRoID0gMS41O1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxtaWQsYWRqdXN0KG91dCwtMC41LDApKTtcclxuXHRcdFx0Y3R4LnN0cm9rZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdMYWNlZExlZ2dpbnMgZXh0ZW5kcyBQYW50cyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk1JRCxcclxuICAgICAgICAgICAgXHJcblx0XHRcdHppcE9wZW46IDAuMiwgLy9UT0RPXHJcblx0XHRcdHppcERlZXA6IDAuMixcclxuXHRcdFx0XHJcblx0XHRcdGlubmVyTG9vc2U6IDAsXHJcblx0XHRcdG91dGVyTG9vc2U6IDAsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjksXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuNSxcclxuXHRcdFx0b3BhY2l0eTogMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRidXN0bGU6ZmFsc2UsXHJcblx0XHRcdFxyXG5cdFx0XHRodWU6IDIwMCxcclxuXHRcdFx0c2F0dXI6IDY1LFxyXG5cdFx0XHRsaWdodDogMjAsXHJcblx0XHRcdGFscGhhOiAxLFxyXG5cdFx0XHRcclxuXHRcdFx0ZmlzaG5lc3M6IDAsXHJcblx0XHRcdHBhdDogXCJmaXNobmV0XCIsXHJcblx0XHRcdHBhdF9zaXplOiA3NSxcclxuXHRcdFx0XHJcblx0XHRcdGJvZHlzdWl0OmZhbHNlLFxyXG5cdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcblx0ZmlsbCgpIHtcclxuICAgICAgICByZXR1cm4gXCJoc2xhKDIwMCwgMCUsIDIwJSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2xhKDIwMCwgMCUsIDEwJSwgMSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRcclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW3tcclxuICAgIC8qICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ292ZXJlZEJ1dHRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgKi8gICAgICAgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3TGFjZWRTdXBlckxlZ2dpbnNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3TGFjZWRTdXBlckxlZ2dpbnNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyU2tpcnRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLk1JRFJJRlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0YmVsb3dTYW1lTGF5ZXJQYXJ0czogW1widG9yc29cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIG91dCwgaGlwLCB0aGlnaE91dCwgZ3JvaW4sIG91dGVyUG9pbnRzLCBpbm5lclBvaW50c30gPSBjYWxjU3VwZXJQYW50cy5jYWxsKHRoaXMsZXgpO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0aWYodGhpcy5pbm5lckxvb3NlPj0xKXsgLy9za2lydCAtIGRvIG5vdCBkcmF3IHRoZSBtaWRkbGUgbGluZVxyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHR0b3AsIC4uLm91dGVyUG9pbnRzLCBpbm5lclBvaW50c1swXSx0b3BcclxuXHRcdFx0XSxbXHJcblx0XHRcdFx0Li4ub3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzWzBdXHJcblx0XHRcdF0pO1xyXG4gXHJcblx0XHRcdFx0XHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHR0b3AsIC4uLm91dGVyUG9pbnRzLCAgLi4uaW5uZXJQb2ludHMsIGdyb2luLCB0b3BcclxuXHRcdFx0XSxbXHJcblx0XHRcdFx0Li4ub3V0ZXJQb2ludHMsICAuLi5pbm5lclBvaW50cywgZ3JvaW5cclxuXHRcdFx0XSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vYmVsdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuYmVsdDtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCB0b3AsYWRqdXN0KG91dCwtMC41LDApKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyU2tpcnRBYm92ZVBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuTUlEUklGVCxcclxuICAgICAgICAgICAgbG9jICAgICAgIDogXCJsZWdcIixcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wicGFydHMgbGVnXCIsIFwidG9yc29cIl0sXHJcblx0XHRcdC8vYmVsb3dTYW1lTGF5ZXJQYXJ0czogW1widG9yc29cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIG91dCwgaGlwLCB0aGlnaE91dCwgZ3JvaW4sIG91dGVyUG9pbnRzLCBpbm5lclBvaW50c30gPSBjYWxjU3VwZXJQYW50cy5jYWxsKHRoaXMsZXgpO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0aWYodGhpcy5pbm5lckxvb3NlPj0xKXsgLy9za2lydCAtIGRvIG5vdCBkcmF3IHRoZSBtaWRkbGUgbGluZVxyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHR0b3AsIC4uLm91dGVyUG9pbnRzLCBpbm5lclBvaW50c1swXSx0b3BcclxuXHRcdFx0XSxbXHJcblx0XHRcdFx0Li4ub3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzWzBdXHJcblx0XHRcdF0pO1xyXG4gXHJcblx0XHRcdFx0XHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHR0b3AsIC4uLm91dGVyUG9pbnRzLCAgLi4uaW5uZXJQb2ludHMsIGdyb2luLCB0b3BcclxuXHRcdFx0XSxbXHJcblx0XHRcdFx0Li4ub3V0ZXJQb2ludHMsICAuLi5pbm5lclBvaW50cywgZ3JvaW5cclxuXHRcdFx0XSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vYmVsdFxyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuYmVsdDtcclxuXHRcdGRyYXdQb2ludHMoY3R4LCB0b3AsYWRqdXN0KG91dCwtMC41LDApKTtcclxuXHRcdGN0eC5zdHJva2UoKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyTGVnZ2luc1BhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwibGVnXCIsXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHM6IFtcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0YmVsb3dTYW1lTGF5ZXJQYXJ0czogW1widG9yc29cIl0sXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG4gICAgICAgIGNvbnN0IHt0b3AsIG91dCwgaGlwLCB0aGlnaE91dCwgZ3JvaW4sIG91dGVyUG9pbnRzLCBpbm5lclBvaW50c30gPSBjYWxjU3VwZXJQYW50cy5jYWxsKHRoaXMsZXgpO1xyXG5cclxuICAgICAgICBDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblxyXG5cdFx0aWYodGhpcy5pbm5lckxvb3NlPj0xKXsgLy9za2lydCAtIGRvIG5vdCBkcmF3IHRoZSBtaWRkbGUgbGluZVxyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHR0b3AsIC4uLm91dGVyUG9pbnRzLCBpbm5lclBvaW50c1swXSx0b3BcclxuXHRcdFx0XSxbXHJcblx0XHRcdFx0Li4ub3V0ZXJQb2ludHMsIGlubmVyUG9pbnRzWzBdXHJcblx0XHRcdF0pO1xyXG4gXHJcblx0XHRcdFx0XHRcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHR0b3AsIC4uLm91dGVyUG9pbnRzLCAgLi4uaW5uZXJQb2ludHMsIGdyb2luLCB0b3BcclxuXHRcdFx0XSxbXHJcblx0XHRcdFx0Li4ub3V0ZXJQb2ludHMsICAuLi5pbm5lclBvaW50cywgZ3JvaW5cclxuXHRcdFx0XSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vYmVsdFxyXG5cdFx0aWYoIXRoaXMuYm9keXN1aXQpe1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGN0eC5saW5lV2lkdGggPSAyO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCwgdG9wLGFkanVzdChvdXQsLTAuNSwwKSk7XHJcblx0XHRcdGN0eC5zdHJva2UoKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1N1cGVyTGVnZ2lucyBleHRlbmRzIFBhbnRzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICBpbm5lckxvb3NlOiAwLFxyXG5cdFx0XHRvdXRlckxvb3NlOiAwLFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC45LFxyXG5cdFx0XHR3YWlzdENvdmVyYWdlOiAwLjUsXHJcblx0XHRcdG9wYWNpdHk6IDEsXHJcblx0XHRcdHRoaWNrbmVzczogMSxcclxuXHRcdFx0YnVzdGxlOmZhbHNlLFxyXG5cdFx0XHRcclxuXHRcdFx0aHVlOiAyMDAsXHJcblx0XHRcdHNhdHVyOiA2NSxcclxuXHRcdFx0bGlnaHQ6IDIwLFxyXG5cdFx0XHRhbHBoYTogMSxcclxuXHRcdFx0XHJcblx0XHRcdGZpc2huZXNzOiAwLFxyXG5cdFx0XHRwYXQ6IFwiZmlzaG5ldFwiLFxyXG5cdFx0XHRwYXRfc2l6ZTogNzUsXHJcblx0XHRcdFxyXG5cdFx0XHRib2R5c3VpdDpmYWxzZSxcclxuXHRcdFx0XHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsYSgyMDAsIDAlLCAyMCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0c3Ryb2tlKCkge1xyXG4gICAgICAgcmV0dXJuIFwiaHNsYSgyMDAsIDAlLCAxMCUsIDEpXCI7XHJcbiAgICB9XHJcblx0XHJcblx0XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgIC8qICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogQ292ZXJlZEJ1dHRQYXJ0LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgKi8gICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlckxlZ2dpbnNQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3U3VwZXJMZWdnaW5zUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyB3U3VwZXJTa2lydCBleHRlbmRzIFBhbnRzIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGNsb3RoaW5nTGF5ZXI6IENsb3RoZXMuTGF5ZXIuTUlELFxyXG4gICAgICAgICAgICBpbm5lckxvb3NlOiAxLFxyXG5cdFx0XHRvdXRlckxvb3NlOiAxLjMsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAwLjQsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAuMSxcclxuXHRcdFx0b3BhY2l0eTogMSxcclxuXHRcdFx0dGhpY2tuZXNzOiAxLFxyXG5cdFx0XHRidXN0bGU6ZmFsc2UsXHJcblx0XHRcdGJlbHQ6IDIsXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG5cdGZpbGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiaHNsKDAsIDY1JSwgMjAlKVwiO1xyXG4gICAgfVxyXG5cdFxyXG5cdHN0cm9rZSgpIHtcclxuICAgICAgIHJldHVybiBcImhzbCgwLCA1MCUsIDEwJSlcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgIC8qICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBTdXBlckJ1dHRQYXJ0LFxyXG4gICAgICAgICAgIH0sXHJcbiAgICAqLyAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlclNraXJ0UGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyU2tpcnRQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHdTdXBlclNraXJ0QWJvdmUgZXh0ZW5kcyBQYW50cyB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk1JRCxcclxuICAgICAgICAgICAgaW5uZXJMb29zZTogMSxcclxuXHRcdFx0b3V0ZXJMb29zZTogMS4zLFxyXG5cdFx0XHRsZWdDb3ZlcmFnZTogMC40LFxyXG5cdFx0XHR3YWlzdENvdmVyYWdlOiAwLjEsXHJcblx0XHRcdG9wYWNpdHk6IDEsXHJcblx0XHRcdHRoaWNrbmVzczogMSxcclxuXHRcdFx0YnVzdGxlOmZhbHNlLFxyXG5cdFx0XHRiZWx0OiAyLFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcImhzbCgwLCA2NSUsIDIwJSlcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCJoc2woMCwgNTAlLCAxMCUpXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAvKiAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogU3VwZXJCdXR0UGFydCxcclxuICAgICAgICAgICB9LFxyXG4gICAgKi8gICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3U3VwZXJTa2lydEFib3ZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyU2tpcnRBYm92ZVBhcnRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7Y292ZXJOaXBwbGVzSWZIYXZlTm9CcmVhc3RzfSBmcm9tIFwiLi4vZHJhdy9kcmF3XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG4vL2ltcG9ydCB7c2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uL3V0aWwvZHJhd1wiO1xyXG5pbXBvcnQge1xyXG5cdGV4dHJhY3RQb2ludCxcclxuXHRkcmF3UG9pbnRzLCBcclxuXHRzcGxpdEN1cnZlLFxyXG5cdGJyZWFrUG9pbnQsXHJcblx0Y2xvbmUsXHJcblx0YWRqdXN0LFxyXG59IGZyb20gXCJkcmF3cG9pbnRcIjtcclxuaW1wb3J0IHtcclxuXHRzdHJhaWdodGVuQ3VydmUsXHJcblx0ZmluZEJldHdlZW4sXHJcblx0bGluZUxpbmVJbnRlcnNlY3Rpb24sXHJcblx0Z2V0TGltYlBvaW50c05lZ2F0aXZlLFxyXG5cdC8vZ2V0TGFjaW5nUG9pbnRzLFxyXG59IGZyb20gXCIuLi91dGlsL2F1eGlsaWFyeVwiO1xyXG5cclxuaW1wb3J0IHtjYWxjRHJlc3NDbGVhdmFnZSxMYWNpbmdQYXJ0fSBmcm9tIFwiLi9kcmVzc1wiO1xyXG5cclxuaW1wb3J0IHtUb3AsY2FsY1RvcEJvZHksY2FsY1RlZX0gZnJvbSBcIi4vdG9wc1wiO1xyXG5cclxuaW1wb3J0IHt3RHJlc3NCcmVhc3RQYXJ0LHdEZXRhY2hlZFNsZWV2ZVBhcnQsd1N1cGVyU2xlZXZlUGFydH0gZnJvbSBcIi4vd0RyZXNzXCI7XHJcbmltcG9ydCB7XHJcblx0TmlwcGxlUGFydCxcclxuXHR3d2JiX2Z0dyxcclxuXHR3Q292ZXJOaXBwbGVzXHJcbn0gZnJvbSBcIi4vd3diYlwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3VGVlUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgLyogYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLCovXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHNcdFx0XHQ6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLCBcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0LyphYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcInBhcnRzIGxlZ1wiXSwqL1xyXG5cdFx0XHRcclxuICAgICAgICB9LCB7XHJcblxyXG5cdFx0fSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cclxuXHRcdGNvbnN0IHtcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsY2xlYXZhZ2VUb3AsbmVjayxzaG91bGRlcixhcm1waXQsd2Fpc3QsaGlwLG91dCxib3R0b20sXHJcblx0XHR9ID0gY2FsY1RlZS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0IENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHRjbGVhdmFnZUJvdCwgIFxyXG5cdFx0XHRcdGNsZWF2YWdlVG9wLCAgXHJcblx0XHRcdFx0bmVjaywgXHJcblx0XHRcdFx0c2hvdWxkZXIsIFxyXG5cdFx0XHRcdGFybXBpdCwgIFxyXG5cdFx0XHRcdHdhaXN0LFxyXG5cdFx0XHRcdGhpcCxcclxuXHRcdFx0XHRvdXQsXHJcblx0XHRcdFx0Ym90dG9tXHJcblx0XHRdLFtcclxuXHRcdFx0Y2xlYXZhZ2VCb3QsICBcclxuXHRcdFx0Y2xlYXZhZ2VUb3AsICBcclxuXHRcdFx0bmVjaywgXHJcblx0XHRcdHNob3VsZGVyLCBcclxuXHRcdFx0YXJtcGl0LCAgXHJcblx0XHRcdHdhaXN0LFxyXG5cdFx0XHRoaXAsXHJcblx0XHRcdG91dCxcclxuXHRcdFx0Ym90dG9tLFxyXG5cdFx0XHR0cnVlXHJcblx0XHRdKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd0hhbHRlclRvcEJyZWFzdFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cclxuXHRcdC8vY2hlY2sgYW5kIHJlY2FsY3VsYXRlIGNsZWF2YWdlIGlmIGRlZXAgYmV5b25kIGxpbWl0XHJcblx0XHRmdW5jdGlvbiBjaGVja0NsZWF2YWdlKGNvbnRleHQsYm90dG9tKXtcclxuXHRcdFx0aWYoY2xlYXZhZ2UueTxib3R0b20ueSljbGVhdmFnZS55PWJvdHRvbS55KzM7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRzcCA9IHNwbGl0Q3VydmUoMC41LGNsZWF2YWdlLHRvcEluKTtcclxuXHRcdFx0dG9wSW4uY3AxID0ge1xyXG5cdFx0XHRcdHg6IHNwLmxlZnQucDIueCtjb250ZXh0LmN1cnZlQ2xlYXZhZ2VYLFxyXG5cdFx0XHRcdHk6IHNwLmxlZnQucDIueStjb250ZXh0LmN1cnZlQ2xlYXZhZ2VZLFxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvL0NMRUFWQUdFXHJcblx0XHRsZXQgc3AgPSBzcGxpdEN1cnZlKHRoaXMuY2xlYXZhZ2VDb3ZlcmFnZSxleC5uZWNrLmN1c3AsIGV4Lmdyb2luKTtcclxuXHRcdGxldCBjbGVhdmFnZSA9IHtcclxuXHRcdFx0eCA6IC0wLjEsXHJcblx0XHRcdHkgOiBzcC5sZWZ0LnAyLnlcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGlmKHRoaXMub3V0ZXJOZWNrQ292ZXJhZ2U8dGhpcy5pbm5lck5lY2tDb3ZlcmFnZSl0aGlzLm91dGVyTmVja0NvdmVyYWdlPXRoaXMuaW5uZXJOZWNrQ292ZXJhZ2U7XHJcblx0XHRpZih0aGlzLmlubmVyTmVja0NvdmVyYWdlPnRoaXMub3V0ZXJOZWNrQ292ZXJhZ2UpdGhpcy5pbm5lck5lY2tDb3ZlcmFnZT10aGlzLm91dGVyTmVja0NvdmVyYWdlO1xyXG5cdFx0XHJcblx0XHRsZXQgY3VzcCA9IGV4Lm5lY2suY3VzcDtcclxuXHRcdGlmKGV4LnRyYXBleml1cyljdXNwPWV4LnRyYXBleml1cztcclxuXHRcdHNwID0gc3BsaXRDdXJ2ZSh0aGlzLm91dGVyTmVja0NvdmVyYWdlLGN1c3AsIGV4LmNvbGxhcmJvbmUpO1xyXG5cdFx0bGV0IHRvcE91dCA9IHNwLmxlZnQucDI7XHJcblx0XHRcdFx0XHJcblx0XHRpZih0aGlzLmlubmVyTmVja0NvdmVyYWdlPDApe1xyXG5cdFx0XHRzcCA9IHNwbGl0Q3VydmUoMSt0aGlzLmlubmVyTmVja0NvdmVyYWdlLCBleC5uZWNrLnRvcCwgY3VzcCk7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0c3AgPSBzcGxpdEN1cnZlKHRoaXMuaW5uZXJOZWNrQ292ZXJhZ2UsIGN1c3AsIGV4LmNvbGxhcmJvbmUpO1xyXG5cdFx0fVxyXG5cdFx0bGV0IHRvcEluID0gZXh0cmFjdFBvaW50KHNwLmxlZnQucDIpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHJcblx0XHQvL05PIEJSRUFTVFNcclxuXHRcdGlmIChleC5oYXNPd25Qcm9wZXJ0eShcImJyZWFzdFwiKSA9PT0gZmFsc2UpIHtcclxuXHRcdFx0bGV0IGFybXBpdCA9IGFkanVzdChleC5hcm1waXQsMCwwKTtcclxuXHRcdFx0bGV0IGJvdHRvbSA9IHtcclxuXHRcdFx0XHR4OiAtMC4xLFxyXG5cdFx0XHRcdHk6IGFybXBpdC55LTFcclxuXHRcdFx0fTtcdFx0XHJcblx0XHRcdC8vaWYoY2xlYXZhZ2UueTxib3R0b20ueSljbGVhdmFnZS55PWJvdHRvbS55KzM7XHJcblx0XHRcdGNoZWNrQ2xlYXZhZ2UodGhpcyxib3R0b20pO1xyXG5cdFx0XHRcclxuXHRcdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdFx0Y2xlYXZhZ2UsXHJcblx0XHRcdFx0dG9wSW4sXHJcblx0XHRcdFx0dG9wT3V0LFxyXG5cdFx0XHRcdGV4dHJhY3RQb2ludChhcm1waXQpLFxyXG5cdFx0XHRcdGJvdHRvbVxyXG5cdFx0XHRdLFtcclxuXHRcdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0XHR0b3BJbixcclxuXHRcdFx0XHR0b3BPdXQsXHJcblx0XHRcdFx0ZXh0cmFjdFBvaW50KGFybXBpdClcclxuXHRcdFx0XSk7XHJcblx0XHRcclxuXHRcdFx0d0NvdmVyTmlwcGxlcyhleCwgY3R4LCB0aGlzKVxyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHQvL0JSRUFTVFx0XHRcclxuXHRcdC8vY2FsY3VsYXRlIHBvaW50cyAtIEkgcmVhbGx5IGR1bm5vIGhvdywgYnV0IGl0IGRvIFxyXG5cdFx0Y29uc3QgdGlwID0gYWRqdXN0KGV4LmJyZWFzdC50aXAsIDAuMSwgMCk7XHJcblx0XHRjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuMSk7XHJcblx0XHRcclxuXHRcdGxldCBib3R0b20gPSB7XHJcblx0XHRcdHg6IC0wLjEsXHJcblx0XHRcdHk6IGJvdC55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHQvL2lmKGNsZWF2YWdlLnk8Ym90dG9tLnkpY2xlYXZhZ2UueT1ib3R0b20ueSszO1xyXG5cdFx0Y2hlY2tDbGVhdmFnZSh0aGlzLGJvdHRvbSk7XHJcblx0XHRcclxuXHRcdHd3YmJfZnR3LmNhbGwodGhpcyxleCxjdHgsW1xyXG5cdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0dG9wSW4sXHJcblx0XHRcdHRvcE91dCxcclxuXHRcdFx0Ly90b3AsXHJcblx0XHRcdHRpcCxcclxuXHRcdFx0Ym90LFxyXG5cdFx0XHRib3R0b21cclxuXHRcdF0sW1xyXG5cdFx0XHRjbGVhdmFnZSxcclxuXHRcdFx0dG9wSW4sXHJcblx0XHRcdHRvcE91dCxcclxuXHRcdFx0Ly90b3AsXHJcblx0XHRcdHRpcCxcclxuXHRcdFx0Ym90XHJcblx0XHRdKTtcclxuXHRcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3VHViZVRvcEJyZWFzdFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgICAgICAgICAgIDogTGF5ZXIuR0VOSVRBTFMsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICAgICAgICAgICA6IFwiY2hlc3RcIixcclxuICAgICAgICAgICAgcmVmbGVjdCAgICAgICAgICAgIDogdHJ1ZSxcclxuICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJwYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiXVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSwgLi4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0aWYgKHdDb3Zlck5pcHBsZXMoZXgsIGN0eCwgdGhpcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHJcblx0XHRsZXQgdG9wT3V0ID0gW107XHJcblx0XHQvL2ZvciB0cmFuc2Zvcm1hdGlvbnM6XHJcblx0XHRpZih0aGlzLmNoZXN0Q292ZXJhZ2U+MSl7XHJcblx0XHRcdGlmKHRoaXMuY2hlc3RDb3ZlcmFnZT4yKXRoaXMuY2hlc3RDb3ZlcmFnZT0xLjk7XHJcblx0XHRcdGxldCBjb3ZlcmFnZSA9IDEtKHRoaXMuY2hlc3RDb3ZlcmFnZS0xKVxyXG5cdFx0XHR0b3BPdXQgPSBnZXRMaW1iUG9pbnRzTmVnYXRpdmUoZXgubmVjay50b3AsZXguYnJlYXN0LnRvcCwxLSh0aGlzLmNoZXN0Q292ZXJhZ2UtMSksZXgubmVjay50b3AsZXgubmVjay5jdXNwLGV4LmNvbGxhcmJvbmUsIGV4dHJhY3RQb2ludChleC5icmVhc3QudG9wKSApO1x0XHRcclxuXHRcdFx0dG9wT3V0WzBdID0gZXh0cmFjdFBvaW50KHRvcE91dFswXSk7XHJcblx0XHRcdHRvcE91dFt0b3BPdXQubGVuZ3RoXSA9IGFkanVzdChleC5icmVhc3QudGlwLCAwLjEsIDApOyBcclxuXHRcdC8vbm9ybWFsOlxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGxldCB0ZW1wID0gc3BsaXRDdXJ2ZSgxLXRoaXMuY2hlc3RDb3ZlcmFnZSxleC5icmVhc3QudG9wLGV4LmJyZWFzdC50aXApO1xyXG5cdFx0XHR0b3BPdXRbMF0gPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdFx0dG9wT3V0WzFdID0gYWRqdXN0KHRlbXAucmlnaHQucDIsIDAuMSwgMCk7IC8vdGlwXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGNvbnN0IHRvcEluID0ge1xyXG5cdFx0XHR4IDogLTAuMSxcclxuXHRcdFx0eSA6IHRvcE91dFswXS55XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRjb25zdCBib3QgPSBhZGp1c3QoZXguYnJlYXN0LmJvdCwgMCwgLTAuMSk7XHJcblx0XHRcclxuXHRcdGNvbnN0IGJvdHRvbSA9IHtcclxuXHRcdFx0eDogLTAuMSxcclxuXHRcdFx0eTogYm90LnlcclxuXHRcdH07XHJcblx0XHRcdFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHQuLi50b3BPdXQsXHJcblx0XHRcdGJvdCxcclxuXHRcdFx0Ym90dG9tXHJcblx0XHRdLFtcclxuXHRcdFx0dG9wSW4sXHJcblx0XHRcdC4uLnRvcE91dCxcclxuXHRcdFx0Ym90XHJcblx0XHRdKVxyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1RvcENoZXN0UGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBsYXllciAgICAgICAgICAgICAgOiBMYXllci5NSURSSUZULFxyXG4gICAgICAgICAgICBsb2MgICAgICAgICAgICAgICAgOiBcInRvcnNvXCIsXHJcbiAgICAgICAgICAgIHJlZmxlY3QgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgICAgLyogYWJvdmVQYXJ0cyAgICAgICAgIDogW1wicGFydHMgbmVja1wiLCBcInBhcnRzIHRvcnNvXCIsIFwiZGVjb3JhdGl2ZVBhcnRzIHRvcnNvXCJdLCovXHJcbiAgICAgICAgICAgIGFib3ZlUGFydHNcdFx0XHQ6IFtcInBhcnRzIG5lY2tcIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiLCBcInBhcnRzIGxlZ1wiXSxcclxuXHRcdFx0LyphYm92ZVNhbWVMYXllclBhcnRzOiBbXCJncm9pblwiLCBcInBhcnRzIGxlZ1wiXSovXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcblx0XHRDbG90aGVzLnNpbXBsZVN0cm9rZUZpbGwoY3R4LCBleCwgdGhpcyk7XHJcblx0XHRcclxuXHRcdGlmKHRoaXMud2Fpc3RDb3ZlcmFnZT49MilyZXR1cm47XHJcblx0XHRcclxuXHRcdC8vd2Fpc3QgcG9pbnRzXHJcblx0XHRjb25zdCB7YXJtcGl0LGxhdCx3YWlzdCxoaXAsb3V0LGJvdHRvbX0gPSBjYWxjVG9wQm9keS5jYWxsKHRoaXMsIGV4KTtcclxuXHRcdFxyXG5cdFx0bGV0IHRvcDtcclxuXHRcdGlmKGV4LmJyZWFzdCl7XHJcblx0XHRcdHRvcCA9IHtcclxuXHRcdFx0XHR4OiAtMC4xLFxyXG5cdFx0XHRcdHk6IGV4LmJyZWFzdC5pbi55XHJcblx0XHRcdH07XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0dG9wID0ge1xyXG5cdFx0XHRcdHg6IC0wLjEsXHJcblx0XHRcdFx0eTogZXguYXJtcGl0LnlcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0d3diYl9mdHcuY2FsbCh0aGlzLGV4LGN0eCxbXHJcblx0XHRcdGFybXBpdCwgIFxyXG5cdFx0XHRsYXQsXHJcblx0XHRcdHdhaXN0LFxyXG5cdFx0XHRoaXAsXHJcblx0XHRcdG91dCxcclxuXHRcdFx0Ym90dG9tLFxyXG5cdFx0XHR0b3AsXHJcblx0XHRcdGV4dHJhY3RQb2ludChhcm1waXQpXHJcblx0XHRdLFtcclxuXHRcdFx0YXJtcGl0LCBcclxuXHRcdFx0bGF0LFxyXG5cdFx0XHR3YWlzdCxcclxuXHRcdFx0aGlwLFxyXG5cdFx0XHRvdXQsXHJcblx0XHRcdGJvdHRvbSxcclxuXHRcdFx0dHJ1ZVxyXG5cdFx0XSlcclxuXHRcdFxyXG5cdFx0XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyB3VGVlIGV4dGVuZHMgVG9wIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNsZWF2YWdlT3BlbmVzczogMC4zLFxyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjE2LFxyXG5cdFx0XHRzaWRlTG9vc2U6IDAsXHJcblx0XHRcdHdhaXN0Q292ZXJhZ2U6IDAsXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VYOjAsXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VZOjAsXHJcblx0XHRcdGxlZ0NvdmVyYWdlOiAxLCAvL3VzZWQgb25seSBieSBEcmVzc0JyZWFzdFBhcnQgYnV0IGltcG9ydGFudFxyXG5cdFx0XHRcclxuXHRcdFx0aHVlOiAxMDAsXHJcblx0XHRcdHNhdHVyOiAxMDAsXHJcblx0XHRcdGxpZ2h0OiA0MixcclxuXHRcdFx0YWxwaGE6IDEsXHJcblx0XHRcdFxyXG5cdFx0XHRmaXNobmVzczogMCxcclxuXHRcdFx0cGF0OiBcImZpc2huZXRcIixcclxuXHRcdFx0cGF0X3NpemU6IDc1LFxyXG5cdFx0XHRcclxuXHRcdFx0Ym9keXN1aXQ6ZmFsc2UsXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogTmlwcGxlUGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IExhY2luZ1BhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1RlZVBhcnRcclxuICAgICAgICAgICAgfSx7IFxyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RyZXNzQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTdXBlclNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd1N1cGVyU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG5cdFx0XHRcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3Mgd0hhbHRlclRvcCBleHRlbmRzIFRvcCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRjbGVhdmFnZUNvdmVyYWdlOiAwLjMsXHJcblx0XHRcdG91dGVyTmVja0NvdmVyYWdlOiAwLjM1LFxyXG5cdFx0XHRpbm5lck5lY2tDb3ZlcmFnZTogMC4xNSxcclxuXHRcdFx0Y3VydmVDbGVhdmFnZVg6IDksXHJcblx0XHRcdGN1cnZlQ2xlYXZhZ2VZOiAtOSxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC42NixcclxuXHRcdFx0c2lkZUxvb3NlOiAwLFxyXG5cdFx0XHRcclxuXHRcdFx0c2hvdWxkZXJDb3ZlcmFnZTogMCxcclxuXHRcdFx0YXJtQ292ZXJhZ2U6IDAsXHJcblx0XHRcdGFybUxvb3NlOiAwLFxyXG5cdFx0XHRcclxuXHRcdFx0aHVlOiAxMDAsXHJcblx0XHRcdHNhdHVyOiAxMDAsXHJcblx0XHRcdGxpZ2h0OiA0MixcclxuXHRcdFx0YWxwaGE6IDEsXHJcblx0XHRcdFxyXG5cdFx0XHRmaXNobmVzczogMCxcclxuXHRcdFx0cGF0OiBcImZpc2huZXRcIixcclxuXHRcdFx0cGF0X3NpemU6IDc1LFxyXG5cdFx0XHRcclxuXHRcdFx0Ym9keXN1aXQ6ZmFsc2UsXHJcblx0XHRcdFxyXG4gICAgICAgIH0sIC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2lkZTogbnVsbCwgIFxyXG4gICAgICAgICAgICAgICAgUGFydDogTmlwcGxlUGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3SGFsdGVyVG9wQnJlYXN0UGFydFxyXG4gICAgICAgICAgICB9LHsgXHJcbiAgICAgICAgICAgICAgICBzaWRlOiBudWxsLCAgXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3VG9wQ2hlc3RQYXJ0XHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgc2lkZTogUGFydC5MRUZULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RldGFjaGVkU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3RGV0YWNoZWRTbGVldmVQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufVx0XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdUdWJlVG9wIGV4dGVuZHMgVG9wIHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGNoZXN0Q292ZXJhZ2U6IDAuMyxcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4zLFxyXG5cdFx0XHRzaWRlTG9vc2U6IDAsXHJcblx0XHRcdFxyXG5cdFx0XHJcblx0XHRcdFxyXG5cdFx0XHRodWU6IDEwMCxcclxuXHRcdFx0c2F0dXI6IDEwMCxcclxuXHRcdFx0bGlnaHQ6IDQyLFxyXG5cdFx0XHRhbHBoYTogMSxcclxuXHRcdFx0XHRcclxuXHRcdFx0ZmlzaG5lc3M6IDAsXHJcblx0XHRcdHBhdDogXCJmaXNobmV0XCIsXHJcblx0XHRcdHBhdF9zaXplOiA3NSxcclxuXHRcdFx0XHJcblx0XHRcdGJvZHlzdWl0OmZhbHNlLFxyXG5cdFx0XHRcclxuXHRcdFx0c2hvdWxkZXJDb3ZlcmFnZTogMCxcclxuXHRcdFx0YXJtQ292ZXJhZ2U6IDAsXHJcblx0XHRcdGFybUxvb3NlOiAwLFxyXG5cdFx0XHRcclxuICAgICAgICB9LCAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuXHRcdFx0e1xyXG5cdFx0IFx0XHRzaWRlOiBudWxsLCAgXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiBOaXBwbGVQYXJ0XHJcbiAgICAgICAgICAgIH0se1x0XHRcdFx0XHJcbiAgICAgICAgICAgICAgIHNpZGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3VHViZVRvcEJyZWFzdFBhcnRcclxuICAgICAgICAgICAgfSx7ICBcclxuICAgICAgICAgICAgICAgIHNpZGU6IG51bGwsICBcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdUb3BDaGVzdFBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdEZXRhY2hlZFNsZWV2ZVBhcnRcclxuICAgICAgICAgICAgfSx7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd0RldGFjaGVkU2xlZXZlUGFydFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtDbG90aGVzLCBDbG90aGluZ1BhcnQsIENsb3RoaW5nfSBmcm9tIFwiLi9jbG90aGluZ1wiO1xyXG5pbXBvcnQge1BhcnR9IGZyb20gXCIuLi9wYXJ0cy9wYXJ0XCI7XHJcbmltcG9ydCB7TGF5ZXJ9IGZyb20gXCIuLi91dGlsL2NhbnZhc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgLy9zaW1wbGVRdWFkcmF0aWMsXHJcbiAgICBkcmF3UG9pbnRzLFxyXG4gICAgZXh0cmFjdFBvaW50LFxyXG4gICAgc3BsaXRDdXJ2ZSxcclxuICAgIGFkanVzdCxcclxuXHRyZWZsZWN0LFxyXG5cdGludGVycG9sYXRlQ3VydmUsXHJcbiAgICAgIGJyZWFrUG9pbnRcclxufSBmcm9tIFwiZHJhd3BvaW50XCI7XHJcbi8vaW1wb3J0IHthZGp1c3RDb2xvcn0gZnJvbSBcIi4uL3V0aWwvdXRpbGl0eVwiO1xyXG5cclxuaW1wb3J0IHtcclxuXHRwZXJwZW5kaWN1bGFyUG9pbnQsXHJcblx0ZmluZEJldHdlZW4sXHJcbn0gZnJvbSBcIi4uL3V0aWwvYXV4aWxpYXJ5XCI7XHJcblxyXG5pbXBvcnQge3d3YmJfZnR3fSBmcm9tIFwiLi93d2JiXCI7XHJcbmltcG9ydCB7QWNjZXNzb3J5LGNhbGNCZWx0fSBmcm9tIFwiLi9hY2Nlc3NvcnlcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3Mgd1NpbXBsZUJlbHRQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGxheWVyICAgICA6IExheWVyLkdFTklUQUxTLCAvL1RFTVAgRklYISBiZWNhdXNlIGZhbGxlbiBoYXMgdG8gYmUgZ2VuaXRhbCBiZWNhdXNlIGJvb2JzIGFuZCBhcm1zIFxyXG4gICAgICAgICAgICBsb2MgICAgICAgOiBcIit0b3Jzb1wiLFxyXG5cdFx0XHRyZWZsZWN0XHRcdDp0cnVlLCBcclxuICAgICAgICAgICAgYWJvdmVQYXJ0czogWyBcInBhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiLCBcInBhcnRzIGNoZXN0XCIsIC8qXCJjbG90aGluZ1BhcnRzIGNoZXN0XCIsIFwiZGVjb3JhdGl2ZVBhcnRzIGNoZXN0XCIgKi8gLypcImNsb3RoaW5nUGFydHMgbGVnXCIsXCJjbG90aGluZ1BhcnRzIGdyb2luXCIqL10sXHJcblx0XHRcdGFib3ZlU2FtZUxheWVyUGFydHM6IFtcImNsb3RoaW5nUGFydHMgdG9yc29cIl0sXHJcbi8vXHRcdFx0IGFib3ZlUGFydHM6IFsgXCJwYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiwgXCJwYXJ0cyB0b3Jzb1wiLCBcImRlY29yYXRpdmVQYXJ0cyB0b3Jzb1wiICwgXCJkZWNvcmF0aXZlUGFydHMgdG9yc29cIixcInBhcnRzIGNoZXN0XCIsIFwiY2xvdGhpbmdQYXJ0cyBjaGVzdFwiLCBcImRlY29yYXRpdmVQYXJ0cyBjaGVzdFwiICAvKlwiY2xvdGhpbmdQYXJ0cyBsZWdcIixcImNsb3RoaW5nUGFydHMgZ3JvaW5cIiovXSxcclxuXHRcdH0sXHJcblx0XHR7XHRcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4yLFxyXG5cdFx0XHRiZWx0V2lkdGg6NCxcclxuXHRcdFx0YmVsdEN1cnZlOi0xLFxyXG5cdFx0XHRoaWdobGlnaHQ6XCIjY2RjMzMxXCIsXHJcbiAgICAgICAgfSxcclxuXHRcdC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdFxyXG5cdFx0Y29uc3Qge2luVG9wLG91dFRvcCxvdXRNaWQsb3V0Qm90LGluQm90fSA9IGNhbGNCZWx0LmNhbGwodGhpcywgZXgpO1xyXG5cdFx0XHJcblx0XHR3d2JiX2Z0dy5jYWxsKHRoaXMsZXgsY3R4LFtcclxuXHRcdFx0XHRpblRvcCxcclxuXHRcdFx0XHRvdXRUb3AsXHJcblx0XHRcdFx0b3V0TWlkLFxyXG5cdFx0XHRcdG91dEJvdCxcclxuXHRcdFx0XHRpbkJvdCxcclxuXHRcdF0pO1xyXG5cdFx0XHRcclxuXHRcdFxyXG4gXHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdHbGFzc2VzUGFydCBleHRlbmRzIENsb3RoaW5nUGFydCB7XHJcbiAgICBjb25zdHJ1Y3RvciguLi5kYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRsYXllcjogTGF5ZXIuQkVMT1dfSEFJUixcclxuXHRcdFx0bG9jOiBcImhlYWRcIixcclxuXHRcdFx0cmVmbGVjdDogdHJ1ZSxcclxuXHRcdFx0YWJvdmVQYXJ0czogW1wiZXllbGlkXCIsXCJicm93XCIsXCJleWVsYXNoXCJdXHJcblx0XHR9LFxyXG5cdFx0e1x0XHJcblx0XHRcdGVjY2VudHJpY2l0eSA6IDUsXHJcblx0XHRcdGhlaWdodCA6IDMsXHJcblx0XHRcdHRoaWNrbmVzcyA6IDAuNSxcclxuXHRcdFx0XHJcblx0XHRcdGludmlzaWJsZTogMCxcclxuICAgICAgICB9LFxyXG5cdFx0Li4uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQ2xvdGhpbmdQb2ludHMoZXgsIGN0eCkge1xyXG5cdFx0Q2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRsZXQgZWFyID0gZXh0cmFjdFBvaW50KGV4LmVhci5taWQpO1xyXG5cdFx0ZWFyLnkgKz0gMTtcclxuXHRcdGVhci54IC09IDE7XHJcblxyXG5cdFx0bGV0IG91dGVyQ29udHJvbFBvaW50ID0gZXh0cmFjdFBvaW50KGV4LmV5ZXMub3V0KTtcclxuXHRcdG91dGVyQ29udHJvbFBvaW50LnggKz0gMTtcclxuXHRcdFxyXG5cdFx0bGV0IHRvRWFyID0gZXh0cmFjdFBvaW50KGV4LmVhci5taWQpO1xyXG5cdFx0dG9FYXIueCAtPSAyO1xyXG5cdFx0dG9FYXIueSArPSAyO1xyXG5cclxuXHRcdGxldCBpbm5lckNvbnRyb2xQb2ludCA9IGV4dHJhY3RQb2ludChleC5leWVzLmluKTtcclxuXHRcdGlubmVyQ29udHJvbFBvaW50LnggLT0gMS44O1xyXG5cdFx0XHJcblx0XHRjb25zdCBlY2NlbnRyaWNpdHkgPSB0aGlzLmVjY2VudHJpY2l0eTtcclxuXHRcdGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG5cdFx0Ly9sZXQgaGFsZkNvbnRyb2xQb2ludCA9IHt4OmZpbmRCZXR3ZWVuKGlubmVyQ29udHJvbFBvaW50Lngsb3V0ZXJDb250cm9sUG9pbnQueCkseTpmaW5kQmV0d2Vlbihpbm5lckNvbnRyb2xQb2ludC55LG91dGVyQ29udHJvbFBvaW50LnkpIH07XHJcblx0XHRcclxuXHRcdGxldCBpbm5lckNvbnRyb2xQb2ludFRvcCA9ICB7eDppbm5lckNvbnRyb2xQb2ludC54LHk6aW5uZXJDb250cm9sUG9pbnQueX07XHJcblx0XHRpbm5lckNvbnRyb2xQb2ludFRvcC5jcDEgPSBwZXJwZW5kaWN1bGFyUG9pbnQoaW5uZXJDb250cm9sUG9pbnQsb3V0ZXJDb250cm9sUG9pbnQsMC41LGhlaWdodCk7XHJcblx0XHRpbm5lckNvbnRyb2xQb2ludFRvcC5jcDEueCArPSBlY2NlbnRyaWNpdHk7XHJcblx0XHRpbm5lckNvbnRyb2xQb2ludFRvcC5jcDIgPSBwZXJwZW5kaWN1bGFyUG9pbnQoaW5uZXJDb250cm9sUG9pbnQsb3V0ZXJDb250cm9sUG9pbnQsMC41LGhlaWdodCk7XHJcblx0XHRpbm5lckNvbnRyb2xQb2ludFRvcC5jcDIueCArPSAtZWNjZW50cmljaXR5O1xyXG5cdFx0XHJcblx0XHRsZXQgaW5uZXJDb250cm9sUG9pbnRCb3QgPSAge3g6aW5uZXJDb250cm9sUG9pbnQueCx5OmlubmVyQ29udHJvbFBvaW50Lnl9O1xyXG5cdFx0aW5uZXJDb250cm9sUG9pbnRCb3QuY3AxID0gcGVycGVuZGljdWxhclBvaW50KGlubmVyQ29udHJvbFBvaW50LG91dGVyQ29udHJvbFBvaW50LDAuNSwtaGVpZ2h0KTtcclxuXHRcdGlubmVyQ29udHJvbFBvaW50Qm90LmNwMS54ICs9IGVjY2VudHJpY2l0eTtcclxuXHRcdGlubmVyQ29udHJvbFBvaW50Qm90LmNwMiA9IHBlcnBlbmRpY3VsYXJQb2ludChpbm5lckNvbnRyb2xQb2ludCxvdXRlckNvbnRyb2xQb2ludCwwLjUsLWhlaWdodCk7XHJcblx0XHRpbm5lckNvbnRyb2xQb2ludEJvdC5jcDIueCArPSAtZWNjZW50cmljaXR5O1xyXG5cdFx0XHJcblx0XHRsZXQgdG9Ob3NlID0gcmVmbGVjdChpbm5lckNvbnRyb2xQb2ludCk7XHJcblxyXG5cdFx0dG9Ob3NlLmNwMSA9IHtcclxuXHRcdFx0eTppbm5lckNvbnRyb2xQb2ludC55KzIsXHJcblx0XHRcdHg6MFxyXG5cdFx0fTtcdFx0XHRcclxuXHRcdFxyXG5cdFx0aWYodGhpcy5pbnZpc2libGU8MSl7XHJcblx0XHRcdGN0eC5nbG9iYWxBbHBoYSA9IDEgLSB0aGlzLmludmlzaWJsZTtcclxuXHRcdFx0aWYoY3R4Lmdsb2JhbEFscGhhPDApY3R4Lmdsb2JhbEFscGhhPTA7XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsb3V0ZXJDb250cm9sUG9pbnQsaW5uZXJDb250cm9sUG9pbnRUb3AsYnJlYWtQb2ludCwgb3V0ZXJDb250cm9sUG9pbnQsIGlubmVyQ29udHJvbFBvaW50Qm90KTtcclxuXHRcdFx0Y3R4LmZpbGwoKTtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsdG9FYXIsb3V0ZXJDb250cm9sUG9pbnQsaW5uZXJDb250cm9sUG9pbnRUb3AsYnJlYWtQb2ludCwgb3V0ZXJDb250cm9sUG9pbnQsIGlubmVyQ29udHJvbFBvaW50Qm90LCB0b05vc2UpO1xyXG5cdFx0XHRjdHguc3Ryb2tlKCk7XHRcclxuXHRcdH07XHJcblx0fVxyXG59XHRcclxuXHRcdFxyXG4vKlxyXG5leHBvcnQgY2xhc3MgQmVsdFBhcnQgZXh0ZW5kcyBDbG90aGluZ1BhcnQge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgbGF5ZXIgICAgIDogTGF5ZXIuRlJPTlQsXHJcbiAgICAgICAgICAgIGxvYyAgICAgICA6IFwiK3RvcnNvXCIsXHJcblx0XHRcdHJlZmxlY3RcdFx0OnRydWUsIFxyXG4gICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJjbG90aGluZ1BhcnRzIGxlZ1wiLFwiY2xvdGhpbmdQYXJ0cyBncm9pblwiXSxcclxuXHRcdH0sXHJcblx0XHR7XHRcclxuXHRcdFx0d2Fpc3RDb3ZlcmFnZTogMC4zMyxcclxuXHRcdFx0d2lkdGg6NCxcclxuXHRcdFx0Y3VydmU6LTUsXHJcblx0XHRcdGJ1Y2tsZToyLFxyXG5cdFx0XHRoaWdobGlnaHQ6XCIjY2RjMzMxXCIsXHJcbiAgICAgICAgfSxcclxuXHRcdC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlckNsb3RoaW5nUG9pbnRzKGV4LCBjdHgpIHtcclxuXHRcdENsb3RoZXMuc2ltcGxlU3Ryb2tlRmlsbChjdHgsIGV4LCB0aGlzKTtcclxuXHRcdGxldCB0ZW1wO1xyXG5cdFx0XHJcblx0XHQvL1RPUFxyXG5cdFx0bGV0IHRvcE91dDtcclxuXHRcdGlmKHRoaXMud2Fpc3RDb3ZlcmFnZT4wKXtcclxuXHRcdFx0bGV0IHRlbXAgPSBzcGxpdEN1cnZlKCgxLXRoaXMud2Fpc3RDb3ZlcmFnZSksZXgud2Fpc3QsZXguaGlwKTtcdFxyXG5cdFx0XHR0b3BPdXQgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRsZXQgdGVtcCA9IHNwbGl0Q3VydmUoTWF0aC5hYnModGhpcy53YWlzdENvdmVyYWdlKSxleC5oaXAsZXgudGhpZ2gub3V0KTtcdFxyXG5cdFx0XHR0b3BPdXQgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8vQk9UXHJcblx0XHRsZXQgYm90T3V0O1xyXG5cdFx0aWYodG9wT3V0LnktdGhpcy53aWR0aD5leC5oaXAueSl7XHJcblx0XHRcdGJvdE91dCA9IGludGVycG9sYXRlQ3VydmUoZXgud2Fpc3QsIGV4LmhpcCx7XHJcblx0XHRcdFx0eDogbnVsbCxcclxuXHRcdFx0XHR5OiB0b3BPdXQueS10aGlzLndpZHRoXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRib3RPdXQ9Ym90T3V0WzBdO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGJvdE91dCA9IGludGVycG9sYXRlQ3VydmUoZXguaGlwLCBleC50aGlnaC5vdXQse1xyXG5cdFx0XHRcdHg6IG51bGwsXHJcblx0XHRcdFx0eTogdG9wT3V0LnktdGhpcy53aWR0aFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0Ym90T3V0PWJvdE91dFswXTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0bGV0IHRvcEluID0ge1xyXG5cdFx0XHR4OiAtMC4xLCAgXHJcblx0XHRcdHk6IHRvcE91dC55ICsgdGhpcy5jdXJ2ZVxyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0bGV0IGJvdEluID0ge1xyXG5cdFx0XHR4OiAtMC4xLCAgXHJcblx0XHRcdHk6XHR0b3BJbi55IC0gdGhpcy53aWR0aFxyXG5cdFx0fTtcclxuXHJcblx0XHRcclxuXHRcdC8vQlVDS0xFXHJcblx0XHRcdHRlbXAgPSBzcGxpdEN1cnZlKHRoaXMuYnVja2xlLzEwLHRvcEluLHRvcE91dCk7XHRcclxuXHRcdGxldCB0b3BNaWQgPSBleHRyYWN0UG9pbnQodGVtcC5sZWZ0LnAyKTtcclxuXHRcdHRvcEluID0ge1xyXG5cdFx0XHR4OnRvcEluLngsXHJcblx0XHRcdHk6dG9wTWlkLnlcclxuXHRcdH07XHJcblx0XHJcblx0IFxyXG5cdFx0XHR0ZW1wID0gc3BsaXRDdXJ2ZSh0aGlzLmJ1Y2tsZS8xMCxib3RJbixib3RPdXQpO1x0XHJcblx0XHRsZXQgYm90TWlkID0ge1xyXG5cdFx0XHR4OnRvcE1pZC54LFxyXG5cdFx0XHR5OnRlbXAubGVmdC5wMi55XHJcblx0XHR9O1xyXG5cdFx0Ym90SW4gPSB7XHJcblx0XHRcdHk6Ym90TWlkLnksXHJcblx0XHRcdHg6dG9wSW4ueCxcclxuXHRcdH07XHJcblx0XHRcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdHRvcEluLFxyXG5cdFx0XHR0b3BNaWQsXHJcblx0XHRcdHRvcE91dCxcclxuXHRcdFx0Ym90T3V0LFxyXG5cdFx0XHRib3RNaWQsXHJcblx0XHRcdGJvdEluXHJcblx0XHQpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG5cdFx0XHJcblx0XHRjdHguZmlsbFN0eWxlPXRoaXMuaGlnaGxpZ2h0O1xyXG5cdFx0Y29uc3QgYWRqdXN0ZW1lbnQ9MTtcclxuXHRcdGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBkcmF3UG9pbnRzKGN0eCwgXHJcblx0XHRcdGFkanVzdCh0b3BJbiwtMC4yLGFkanVzdGVtZW50KSxcclxuXHRcdFx0YWRqdXN0KHRvcE1pZCwwLGFkanVzdGVtZW50KSxcclxuXHRcdFx0YWRqdXN0KGJvdE1pZCwwLC1hZGp1c3RlbWVudCksXHJcblx0XHRcdGFkanVzdChib3RJbiwtMC4yLC1hZGp1c3RlbWVudClcclxuXHRcdCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblx0fVxyXG59XHJcbiovXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDb25jcmV0ZSBDbG90aGluZyBjbGFzc2VzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3Mgd0dsYXNzZXMgZXh0ZW5kcyBBY2Nlc3Nvcnkge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiNhMmEyYTJcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCIjMWUxZTFlXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdHbGFzc2VzUGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIHdTaW1wbGVCZWx0IGV4dGVuZHMgQWNjZXNzb3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcblx0XHRcdGZpc2huZXNzOiAwLFxyXG4gICAgICAgICAgICBjbG90aGluZ0xheWVyOiBDbG90aGVzLkxheWVyLk9VVEVSLCAvL01JRD9cclxuICAgICAgICB9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiM0NjQ2NDZcIjtcclxuICAgIH1cclxuXHRcclxuXHRzdHJva2UoKSB7XHJcbiAgICAgICByZXR1cm4gXCIjMWUxZTFlXCI7XHJcbiAgICB9XHJcblx0XHJcbiAgICBnZXQgcGFydFByb3RvdHlwZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc2lkZTogbnVsbCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdTaW1wbGVCZWx0UGFydCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7Q2xvdGhlcywgQ2xvdGhpbmdQYXJ0LCBDbG90aGluZ30gZnJvbSBcIi4vY2xvdGhpbmdcIjtcclxuaW1wb3J0IHtQYXJ0fSBmcm9tIFwiLi4vcGFydHMvcGFydFwiO1xyXG5pbXBvcnQge2Nvbm5lY3RFbmRQb2ludHN9IGZyb20gXCIuLi9kcmF3L2RyYXdcIjtcclxuaW1wb3J0IHtMYXllcn0gZnJvbSBcIi4uL3V0aWwvY2FudmFzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBleHRyYWN0UG9pbnQsXHJcblx0ZHJhd1BvaW50cywgXHJcblx0c3BsaXRDdXJ2ZSxcclxuXHRub25lLFxyXG5cdFxyXG5cdC8vY2xvbmUsXHJcblx0Ly9hZGp1c3QsXHJcbn0gZnJvbSBcImRyYXdwb2ludFwiO1xyXG5cclxuaW1wb3J0IHtMb2NhdGlvbiwgc2V0U3Ryb2tlQW5kRmlsbH0gZnJvbSBcIi4uXCI7XHJcbiBcclxuaW1wb3J0IHtNYWtldXB9IGZyb20gXCIuL21ha2V1cFwiOyBcclxuXHJcbmV4cG9ydCBjbGFzcyB3TGlwc3RpY2tQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICAgICAgbG9jICAgICAgIDogYCR7TG9jYXRpb24uTElQU31gLFxyXG4gICAgICAgICAgICAgICAgcmVmbGVjdCAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhYm92ZVBhcnRzOiBbXCJmYWNlUGFydHMgbGlwc1wiXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgIGZpbGw6IFwiaHNsYXszNTAsMTAwJSwyOSUsMX1cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgQ2xvdGhlcy5zaW1wbGVTdHJva2VGaWxsKGN0eCwgZXgsIHRoaXMpO1xyXG5cdFx0XHJcblx0XHRpZih0aGlzLmludmlzaWJsZTwxKXtcclxuXHRcdFx0Y3R4Lmdsb2JhbEFscGhhID0gMSAtIHRoaXMuaW52aXNpYmxlO1xyXG5cdFx0XHRpZihjdHguZ2xvYmFsQWxwaGE8MCljdHguZ2xvYmFsQWxwaGE9MDtcclxuXHRcdFx0XHJcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcclxuXHRcdFx0ZHJhd1BvaW50cyhjdHgsXHJcblx0XHRcdFx0ZXgubGlwcy50b3AsXHJcblx0XHRcdFx0ZXgubGlwcy50aXAsXHJcblx0XHRcdFx0Ly8gdHJhY2VQb2ludChleC5saXBzLm91dCwgMC41KSxcclxuXHRcdFx0XHRleC5saXBzLm91dCxcclxuXHRcdFx0XHRleC5saXBzLmJvdCxcclxuXHRcdFx0XHRleC5saXBzLmJvdC50b3AsXHJcblx0XHRcdFx0ZXgubGlwcy5vdXQuaW4sXHJcblx0XHRcdFx0ZXgubGlwcy50b3AuYm90LFxyXG5cdFx0XHRcdGV4LmxpcHMudG9wLFxyXG5cdFx0XHQpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0fVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3Mgd01hc2NhcmFQYXJ0IGV4dGVuZHMgQ2xvdGhpbmdQYXJ0IHtcclxuICAgIGNvbnN0cnVjdG9yKC4uLmRhdGEpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgICAgICBsYXllciAgICAgOiBMYXllci5CRUxPV19IQUlSLFxyXG4gICAgICAgICAgICAgICAgbG9jICAgICAgIDogXCIrZXllbGFzaFwiLCAvL2Ake0xvY2F0aW9uLkVZRUxBU0h9YCxcclxuICAgICAgICAgICAgICAgIHJlZmxlY3QgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYWJvdmVQYXJ0czogW1wiZmFjZVBhcnRzIGV5ZWxhc2hcIl1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgdG9wRmlsbDogXCJibGFja1wiLFxyXG4gICAgICAgICAgICAgICAgYm90RmlsbDogXCJibGFja1wiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAuLi5kYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJDbG90aGluZ1BvaW50cyhleCwgY3R4KSB7XHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIGlmKHRoaXMuaW52aXNpYmxlPDEpe1xyXG5cdFx0XHRzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiBub25lLFxyXG4gICAgICAgICAgICAgICAgZmlsbCAgOiB0aGlzLnRvcEZpbGxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXgpO1xyXG5cdFx0XHRjdHguZ2xvYmFsQWxwaGEgPSAxIC0gdGhpcy5pbnZpc2libGU7XHJcblx0XHRcdGlmKGN0eC5nbG9iYWxBbHBoYTwwKWN0eC5nbG9iYWxBbHBoYT0wO1xyXG5cdFx0XHRcclxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRkcmF3UG9pbnRzKGN0eCxcclxuXHRcdFx0XHRleC5leWVzLm91dCxcclxuXHRcdFx0XHRleC5leWVsaWQudG9wLFxyXG5cdFx0XHRcdGV4LmV5ZWxpZC5pbixcclxuXHRcdFx0XHRleC5leWVsYXNoLnRvcCxcclxuXHRcdFx0XHRleC5leWVsYXNoLm91dCk7XHJcblx0XHRcdGN0eC5maWxsKCk7XHJcblxyXG5cdFx0XHRzZXRTdHJva2VBbmRGaWxsKGN0eCxcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzdHJva2U6IG5vbmUsXHJcblx0XHRcdFx0XHRmaWxsICA6IHRoaXMuYm90RmlsbFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0ZXgpO1xyXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XHJcblx0XHRcdGRyYXdQb2ludHMoY3R4LFxyXG5cdFx0XHRcdGV4LmV5ZXMub3V0LFxyXG5cdFx0XHRcdGV4LmV5ZXMuaW4sXHJcblx0XHRcdFx0ZXguZXllbGFzaC5vdXRCb3QpO1xyXG5cdFx0XHRjdHguZmlsbCgpO1xyXG5cdFx0fVxyXG4gICAgfVxyXG59XHJcblxyXG4vKlxyXG5cclxuKi9cclxuIFxyXG5leHBvcnQgY2xhc3Mgd0xpcHN0aWNrIGV4dGVuZHMgTWFrZXVwIHtcclxuICAgY29uc3RydWN0b3IoLi4uZGF0YSl7XHJcbiAgICAgICAgc3VwZXIoe1xyXG5cdFx0XHRpbnZpc2libGU6IDAsXHJcblx0XHR9LC4uLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuXHRmaWxsKCkge1xyXG4gICAgICAgIHJldHVybiBcIiNiOTQzMzdcIjtcclxuICAgIH1cclxuXHRcclxuICAgIGdldCBwYXJ0UHJvdG90eXBlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LkxFRlQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3TGlwc3RpY2tQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuUklHSFQsXHJcbiAgICAgICAgICAgICAgICBQYXJ0OiB3TGlwc3RpY2tQYXJ0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3Mgd01hc2NhcmEgZXh0ZW5kcyBNYWtldXAge1xyXG4gICAgY29uc3RydWN0b3IoLi4uZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuXHRcdFx0ZXh0cmFMZW5ndGg6IDIsXHJcblx0XHRcdGludmlzaWJsZTogMCxcclxuXHRcdH0sIC4uLmRhdGEpO1xyXG4gICAgICAgIHRoaXMuTW9kcyA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICBleWVsYXNoTGVuZ3RoOiB0aGlzLmV4dHJhTGVuZ3RoLFxyXG4gICAgICAgIH0sIHRoaXMuTW9kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhcnRQcm90b3R5cGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHNpZGU6IFBhcnQuTEVGVCxcclxuICAgICAgICAgICAgICAgIFBhcnQ6IHdNYXNjYXJhUGFydFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzaWRlOiBQYXJ0LlJJR0hULFxyXG4gICAgICAgICAgICAgICAgUGFydDogd01hc2NhcmFQYXJ0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufSIsInZhciBQYXRoID0gcmVxdWlyZSgnLi9wYXRoJylcbi8qKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMgeyp9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG8sIHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhdGggbXVzdCBiZSBhIHN0cmluZycpXG4gIH1cbiAgaWYgKHR5cGVvZiBvICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29iamVjdCBtdXN0IGJlIHBhc3NlZCcpXG4gIH1cbiAgdmFyIHBhdGhPYmogPSBQYXRoLmdldChwYXRoKVxuICBpZiAoIXBhdGhPYmoudmFsaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3BhdGggaXMgbm90IGEgdmFsaWQgb2JqZWN0IHBhdGgnKVxuICB9XG4gIHJldHVybiBwYXRoT2JqLmdldFZhbHVlRnJvbShvKVxufVxuIiwiLy8gZ3V0dGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvb2JzZXJ2ZS1qcy9ibG9iL21hc3Rlci9zcmMvb2JzZXJ2ZS5qc1xuZnVuY3Rpb24gbm9vcCAoKSB7fVxuZnVuY3Rpb24gZGV0ZWN0RXZhbCAoKSB7XG4gIC8vIERvbid0IHRlc3QgZm9yIGV2YWwgaWYgd2UncmUgcnVubmluZyBpbiBhIENocm9tZSBBcHAgZW52aXJvbm1lbnQuXG4gIC8vIFdlIGNoZWNrIGZvciBBUElzIHNldCB0aGF0IG9ubHkgZXhpc3QgaW4gYSBDaHJvbWUgQXBwIGNvbnRleHQuXG4gIGlmICh0eXBlb2YgY2hyb21lICE9PSAndW5kZWZpbmVkJyAmJiBjaHJvbWUuYXBwICYmIGNocm9tZS5hcHAucnVudGltZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gRmlyZWZveCBPUyBBcHBzIGRvIG5vdCBhbGxvdyBldmFsLiBUaGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGlzIHZlcnkgaGFja3lcbiAgLy8gYnV0IGV2ZW4gaWYgc29tZSBvdGhlciBwbGF0Zm9ybSBhZGRzIHN1cHBvcnQgZm9yIHRoaXMgZnVuY3Rpb24gdGhpcyBjb2RlXG4gIC8vIHdpbGwgY29udGludWUgdG8gd29yay5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLmdldERldmljZVN0b3JhZ2UpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGYgPSBuZXcgRnVuY3Rpb24oJycsICdyZXR1cm4gdHJ1ZTsnKVxuICAgIHJldHVybiBmKClcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG52YXIgaGFzRXZhbCA9IGRldGVjdEV2YWwoKVxuXG5mdW5jdGlvbiBpc0luZGV4IChzKSB7XG4gIHJldHVybiArcyA9PT0gcyA+Pj4gMCAmJiBzICE9PSAnJ1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogPT09IE9iamVjdChvYmopXG59XG5cbnZhciBjcmVhdGVPYmplY3QgPSAoJ19fcHJvdG9fXycgaW4ge30pID9cbiAgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpcbiAgfSA6XG4gIGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgcHJvdG8gPSBvYmouX19wcm90b19fXG4gICAgaWYgKCFwcm90bylcbiAgICAgIHJldHVybiBvYmpcbiAgICB2YXIgbmV3T2JqZWN0ID0gT2JqZWN0LmNyZWF0ZShwcm90bylcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmplY3QsIG5hbWUsXG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBuYW1lKSlcbiAgICB9KVxuICAgIHJldHVybiBuZXdPYmplY3RcbiAgfVxuXG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgdmFyIGtleXMgPSBbXVxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgYywgbmV3Q2hhciwga2V5LCB0eXBlLCB0cmFuc2l0aW9uLCBhY3Rpb24sIHR5cGVNYXAsIG1vZGUgPSAnYmVmb3JlUGF0aCdcblxuICB2YXIgYWN0aW9ucyA9IHtcbiAgICBwdXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVyblxuXG4gICAgICBrZXlzLnB1c2goa2V5KVxuICAgICAga2V5ID0gdW5kZWZpbmVkXG4gICAgfSxcblxuICAgIGFwcGVuZDogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBrZXkgPSBuZXdDaGFyXG4gICAgICBlbHNlXG4gICAgICAgIGtleSArPSBuZXdDaGFyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWF5YmVVbmVzY2FwZVF1b3RlICgpIHtcbiAgICBpZiAoaW5kZXggPj0gcGF0aC5sZW5ndGgpXG4gICAgICByZXR1cm5cblxuICAgIHZhciBuZXh0Q2hhciA9IHBhdGhbaW5kZXggKyAxXVxuICAgIGlmICgobW9kZSA9PSAnaW5TaW5nbGVRdW90ZScgJiYgbmV4dENoYXIgPT0gXCInXCIpIHx8XG4gICAgICAobW9kZSA9PSAnaW5Eb3VibGVRdW90ZScgJiYgbmV4dENoYXIgPT0gJ1wiJykpIHtcbiAgICAgIGluZGV4KytcbiAgICAgIG5ld0NoYXIgPSBuZXh0Q2hhclxuICAgICAgYWN0aW9ucy5hcHBlbmQoKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICB3aGlsZSAobW9kZSkge1xuICAgIGluZGV4KytcbiAgICBjID0gcGF0aFtpbmRleF1cblxuICAgIGlmIChjID09ICdcXFxcJyAmJiBtYXliZVVuZXNjYXBlUXVvdGUobW9kZSkpXG4gICAgICBjb250aW51ZVxuXG4gICAgdHlwZSA9IGdldFBhdGhDaGFyVHlwZShjKVxuICAgIHR5cGVNYXAgPSBwYXRoU3RhdGVNYWNoaW5lW21vZGVdXG4gICAgdHJhbnNpdGlvbiA9IHR5cGVNYXBbdHlwZV0gfHwgdHlwZU1hcFsnZWxzZSddIHx8ICdlcnJvcidcblxuICAgIGlmICh0cmFuc2l0aW9uID09ICdlcnJvcicpXG4gICAgICByZXR1cm4gLy8gcGFyc2UgZXJyb3JcblxuICAgIG1vZGUgPSB0cmFuc2l0aW9uWzBdXG4gICAgYWN0aW9uID0gYWN0aW9uc1t0cmFuc2l0aW9uWzFdXSB8fCBub29wXG4gICAgbmV3Q2hhciA9IHRyYW5zaXRpb25bMl0gPT09IHVuZGVmaW5lZCA/IGMgOiB0cmFuc2l0aW9uWzJdXG4gICAgYWN0aW9uKClcblxuICAgIGlmIChtb2RlID09PSAnYWZ0ZXJQYXRoJykge1xuICAgICAgcmV0dXJuIGtleXNcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLy8gcGFyc2UgZXJyb3Jcbn1cblxudmFyIGlkZW50U3RhcnQgPSAnW1xcJF9hLXpBLVpdJ1xudmFyIGlkZW50UGFydCA9ICdbXFwkX2EtekEtWjAtOV0nXG52YXIgaWRlbnRSZWdFeHAgPSBuZXcgUmVnRXhwKCdeJyArIGlkZW50U3RhcnQgKyAnKycgKyBpZGVudFBhcnQgKyAnKicgKyAnJCcpXG5cbmZ1bmN0aW9uIGlzSWRlbnQgKHMpIHtcbiAgcmV0dXJuIGlkZW50UmVnRXhwLnRlc3Qocylcbn1cblxudmFyIGNvbnN0cnVjdG9ySXNQcml2YXRlID0ge31cblxuZnVuY3Rpb24gUGF0aCAocGFydHMsIHByaXZhdGVUb2tlbikge1xuICBpZiAocHJpdmF0ZVRva2VuICE9PSBjb25zdHJ1Y3RvcklzUHJpdmF0ZSlcbiAgICB0aHJvdyBFcnJvcignVXNlIFBhdGguZ2V0IHRvIHJldHJpZXZlIHBhdGggb2JqZWN0cycpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucHVzaChTdHJpbmcocGFydHNbaV0pKVxuICB9XG5cbiAgaWYgKGhhc0V2YWwgJiYgdGhpcy5sZW5ndGgpIHtcbiAgICB0aGlzLmdldFZhbHVlRnJvbSA9IHRoaXMuY29tcGlsZWRHZXRWYWx1ZUZyb21GbigpXG4gIH1cbn1cblxudmFyIHBhdGhDYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIGdldFBhdGggKHBhdGhTdHJpbmcpIHtcbiAgaWYgKHBhdGhTdHJpbmcgaW5zdGFuY2VvZiBQYXRoKVxuICAgIHJldHVybiBwYXRoU3RyaW5nXG5cbiAgaWYgKHBhdGhTdHJpbmcgPT0gbnVsbCB8fCBwYXRoU3RyaW5nLmxlbmd0aCA9PSAwKVxuICAgIHBhdGhTdHJpbmcgPSAnJ1xuXG4gIGlmICh0eXBlb2YgcGF0aFN0cmluZyAhPSAnc3RyaW5nJykge1xuICAgIGlmIChpc0luZGV4KHBhdGhTdHJpbmcubGVuZ3RoKSkge1xuICAgICAgLy8gQ29uc3RydWN0ZWQgd2l0aCBhcnJheS1saWtlIChwcmUtcGFyc2VkKSBrZXlzXG4gICAgICByZXR1cm4gbmV3IFBhdGgocGF0aFN0cmluZywgY29uc3RydWN0b3JJc1ByaXZhdGUpXG4gICAgfVxuXG4gICAgcGF0aFN0cmluZyA9IFN0cmluZyhwYXRoU3RyaW5nKVxuICB9XG5cbiAgdmFyIHBhdGggPSBwYXRoQ2FjaGVbcGF0aFN0cmluZ11cbiAgaWYgKHBhdGgpXG4gICAgcmV0dXJuIHBhdGhcblxuICB2YXIgcGFydHMgPSBwYXJzZVBhdGgocGF0aFN0cmluZylcbiAgaWYgKCFwYXJ0cylcbiAgICByZXR1cm4gaW52YWxpZFBhdGhcblxuICB2YXIgcGF0aCA9IG5ldyBQYXRoKHBhcnRzLCBjb25zdHJ1Y3RvcklzUHJpdmF0ZSlcbiAgcGF0aENhY2hlW3BhdGhTdHJpbmddID0gcGF0aFxuICByZXR1cm4gcGF0aFxufVxuXG5QYXRoLmdldCA9IGdldFBhdGhcblxuZnVuY3Rpb24gZm9ybWF0QWNjZXNzb3IgKGtleSkge1xuICBpZiAoaXNJbmRleChrZXkpKSB7XG4gICAgcmV0dXJuICdbJyArIGtleSArICddJ1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnW1wiJyArIGtleS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykgKyAnXCJdJ1xuICB9XG59XG5cblBhdGgucHJvdG90eXBlID0gY3JlYXRlT2JqZWN0KHtcbiAgX19wcm90b19fOiBbXSxcbiAgdmFsaWQ6IHRydWUsXG5cbiAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aFN0cmluZyA9ICcnXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gdGhpc1tpXVxuICAgICAgaWYgKGlzSWRlbnQoa2V5KSkge1xuICAgICAgICBwYXRoU3RyaW5nICs9IGkgPyAnLicgKyBrZXkgOiBrZXlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGhTdHJpbmcgKz0gZm9ybWF0QWNjZXNzb3Ioa2V5KVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXRoU3RyaW5nXG4gIH0sXG5cbiAgZ2V0VmFsdWVGcm9tOiBmdW5jdGlvbiAob2JqLCBkaXJlY3RPYnNlcnZlcikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG9iaiA9PSBudWxsKVxuICAgICAgICByZXR1cm5cbiAgICAgIG9iaiA9IG9ialt0aGlzW2ldXVxuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH0sXG5cbiAgaXRlcmF0ZU9iamVjdHM6IGZ1bmN0aW9uIChvYmosIG9ic2VydmUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpKVxuICAgICAgICBvYmogPSBvYmpbdGhpc1tpIC0gMV1dXG4gICAgICBpZiAoIWlzT2JqZWN0KG9iaikpXG4gICAgICAgIHJldHVyblxuICAgICAgb2JzZXJ2ZShvYmosIHRoaXNbaV0pXG4gICAgfVxuICB9LFxuXG4gIGNvbXBpbGVkR2V0VmFsdWVGcm9tRm46IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RyID0gJydcbiAgICB2YXIgcGF0aFN0cmluZyA9ICdvYmonXG4gICAgc3RyICs9ICdpZiAob2JqICE9IG51bGwnXG4gICAgdmFyIGkgPSAwXG4gICAgdmFyIGtleVxuICAgIGZvciAoOyBpIDwgKHRoaXMubGVuZ3RoIC0gMSk7IGkrKykge1xuICAgICAga2V5ID0gdGhpc1tpXVxuICAgICAgcGF0aFN0cmluZyArPSBpc0lkZW50KGtleSkgPyAnLicgKyBrZXkgOiBmb3JtYXRBY2Nlc3NvcihrZXkpXG4gICAgICBzdHIgKz0gJyAmJlxcbiAgICAgJyArIHBhdGhTdHJpbmcgKyAnICE9IG51bGwnXG4gICAgfVxuICAgIHN0ciArPSAnKVxcbidcblxuICAgIHZhciBrZXkgPSB0aGlzW2ldXG4gICAgcGF0aFN0cmluZyArPSBpc0lkZW50KGtleSkgPyAnLicgKyBrZXkgOiBmb3JtYXRBY2Nlc3NvcihrZXkpXG5cbiAgICBzdHIgKz0gJyAgcmV0dXJuICcgKyBwYXRoU3RyaW5nICsgJztcXG5lbHNlXFxuICByZXR1cm4gdW5kZWZpbmVkOydcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdvYmonLCBzdHIpXG4gIH0sXG5cbiAgc2V0VmFsdWVGcm9tOiBmdW5jdGlvbiAob2JqLCB2YWx1ZSkge1xuICAgIGlmICghdGhpcy5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2VcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICBvYmogPSBvYmpbdGhpc1tpXV1cbiAgICB9XG5cbiAgICBpZiAoIWlzT2JqZWN0KG9iaikpXG4gICAgICByZXR1cm4gZmFsc2VcblxuICAgIG9ialt0aGlzW2ldXSA9IHZhbHVlXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufSlcblxuZnVuY3Rpb24gZ2V0UGF0aENoYXJUeXBlIChjaGFyKSB7XG4gIGlmIChjaGFyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuICdlb2YnXG5cbiAgdmFyIGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMClcblxuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlIDB4NUI6IC8vIFtcbiAgICBjYXNlIDB4NUQ6IC8vIF1cbiAgICBjYXNlIDB4MkU6IC8vIC5cbiAgICBjYXNlIDB4MjI6IC8vIFwiXG4gICAgY2FzZSAweDI3OiAvLyAnXG4gICAgY2FzZSAweDMwOiAvLyAwXG4gICAgICByZXR1cm4gY2hhclxuXG4gICAgY2FzZSAweDVGOiAvLyBfXG4gICAgY2FzZSAweDI0OiAvLyAkXG4gICAgICByZXR1cm4gJ2lkZW50J1xuXG4gICAgY2FzZSAweDIwOiAvLyBTcGFjZVxuICAgIGNhc2UgMHgwOTogLy8gVGFiXG4gICAgY2FzZSAweDBBOiAvLyBOZXdsaW5lXG4gICAgY2FzZSAweDBEOiAvLyBSZXR1cm5cbiAgICBjYXNlIDB4QTA6IC8vIE5vLWJyZWFrIHNwYWNlXG4gICAgY2FzZSAweEZFRkY6IC8vIEJ5dGUgT3JkZXIgTWFya1xuICAgIGNhc2UgMHgyMDI4OiAvLyBMaW5lIFNlcGFyYXRvclxuICAgIGNhc2UgMHgyMDI5OiAvLyBQYXJhZ3JhcGggU2VwYXJhdG9yXG4gICAgICByZXR1cm4gJ3dzJ1xuICB9XG5cbiAgLy8gYS16LCBBLVpcbiAgaWYgKCgweDYxIDw9IGNvZGUgJiYgY29kZSA8PSAweDdBKSB8fCAoMHg0MSA8PSBjb2RlICYmIGNvZGUgPD0gMHg1QSkpXG4gICAgcmV0dXJuICdpZGVudCdcblxuICAvLyAxLTlcbiAgaWYgKDB4MzEgPD0gY29kZSAmJiBjb2RlIDw9IDB4MzkpXG4gICAgcmV0dXJuICdudW1iZXInXG5cbiAgcmV0dXJuICdlbHNlJ1xufVxuXG52YXIgcGF0aFN0YXRlTWFjaGluZSA9IHtcbiAgJ2JlZm9yZVBhdGgnOiB7XG4gICAgJ3dzJzogWydiZWZvcmVQYXRoJ10sXG4gICAgJ2lkZW50JzogWydpbklkZW50JywgJ2FwcGVuZCddLFxuICAgICdbJzogWydiZWZvcmVFbGVtZW50J10sXG4gICAgJ2VvZic6IFsnYWZ0ZXJQYXRoJ11cbiAgfSxcblxuICAnaW5QYXRoJzoge1xuICAgICd3cyc6IFsnaW5QYXRoJ10sXG4gICAgJy4nOiBbJ2JlZm9yZUlkZW50J10sXG4gICAgJ1snOiBbJ2JlZm9yZUVsZW1lbnQnXSxcbiAgICAnZW9mJzogWydhZnRlclBhdGgnXVxuICB9LFxuXG4gICdiZWZvcmVJZGVudCc6IHtcbiAgICAnd3MnOiBbJ2JlZm9yZUlkZW50J10sXG4gICAgJ2lkZW50JzogWydpbklkZW50JywgJ2FwcGVuZCddXG4gIH0sXG5cbiAgJ2luSWRlbnQnOiB7XG4gICAgJ2lkZW50JzogWydpbklkZW50JywgJ2FwcGVuZCddLFxuICAgICcwJzogWydpbklkZW50JywgJ2FwcGVuZCddLFxuICAgICdudW1iZXInOiBbJ2luSWRlbnQnLCAnYXBwZW5kJ10sXG4gICAgJ3dzJzogWydpblBhdGgnLCAncHVzaCddLFxuICAgICcuJzogWydiZWZvcmVJZGVudCcsICdwdXNoJ10sXG4gICAgJ1snOiBbJ2JlZm9yZUVsZW1lbnQnLCAncHVzaCddLFxuICAgICdlb2YnOiBbJ2FmdGVyUGF0aCcsICdwdXNoJ11cbiAgfSxcblxuICAnYmVmb3JlRWxlbWVudCc6IHtcbiAgICAnd3MnOiBbJ2JlZm9yZUVsZW1lbnQnXSxcbiAgICAnMCc6IFsnYWZ0ZXJaZXJvJywgJ2FwcGVuZCddLFxuICAgICdudW1iZXInOiBbJ2luSW5kZXgnLCAnYXBwZW5kJ10sXG4gICAgXCInXCI6IFsnaW5TaW5nbGVRdW90ZScsICdhcHBlbmQnLCAnJ10sXG4gICAgJ1wiJzogWydpbkRvdWJsZVF1b3RlJywgJ2FwcGVuZCcsICcnXVxuICB9LFxuXG4gICdhZnRlclplcm8nOiB7XG4gICAgJ3dzJzogWydhZnRlckVsZW1lbnQnLCAncHVzaCddLFxuICAgICddJzogWydpblBhdGgnLCAncHVzaCddXG4gIH0sXG5cbiAgJ2luSW5kZXgnOiB7XG4gICAgJzAnOiBbJ2luSW5kZXgnLCAnYXBwZW5kJ10sXG4gICAgJ251bWJlcic6IFsnaW5JbmRleCcsICdhcHBlbmQnXSxcbiAgICAnd3MnOiBbJ2FmdGVyRWxlbWVudCddLFxuICAgICddJzogWydpblBhdGgnLCAncHVzaCddXG4gIH0sXG5cbiAgJ2luU2luZ2xlUXVvdGUnOiB7XG4gICAgXCInXCI6IFsnYWZ0ZXJFbGVtZW50J10sXG4gICAgJ2VvZic6IFsnZXJyb3InXSxcbiAgICAnZWxzZSc6IFsnaW5TaW5nbGVRdW90ZScsICdhcHBlbmQnXVxuICB9LFxuXG4gICdpbkRvdWJsZVF1b3RlJzoge1xuICAgICdcIic6IFsnYWZ0ZXJFbGVtZW50J10sXG4gICAgJ2VvZic6IFsnZXJyb3InXSxcbiAgICAnZWxzZSc6IFsnaW5Eb3VibGVRdW90ZScsICdhcHBlbmQnXVxuICB9LFxuXG4gICdhZnRlckVsZW1lbnQnOiB7XG4gICAgJ3dzJzogWydhZnRlckVsZW1lbnQnXSxcbiAgICAnXSc6IFsnaW5QYXRoJywgJ3B1c2gnXVxuICB9XG59XG5cbnZhciBpbnZhbGlkUGF0aCA9IG5ldyBQYXRoKCcnLCBjb25zdHJ1Y3RvcklzUHJpdmF0ZSlcbmludmFsaWRQYXRoLnZhbGlkID0gZmFsc2VcbmludmFsaWRQYXRoLmdldFZhbHVlRnJvbSA9IGludmFsaWRQYXRoLnNldFZhbHVlRnJvbSA9IGZ1bmN0aW9uICgpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gUGF0aFxuIiwiY29uc3QgTWF0cml4ID0gcmVxdWlyZShcInRyYW5zZm9ybWF0aW9uLW1hdHJpeC1qc1wiKS5NYXRyaXg7XHJcblxyXG5mdW5jdGlvbiBsYXN0RWxlbWVudChhcnJheSkge1xyXG4gICAgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1c2luZyhzdGFydCwgY2xvc2UsIGV4ZWN1dGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgc3RhcnQuY2FsbCh0aGlzKTtcclxuICAgICAgICByZXR1cm4gZXhlY3V0ZS5jYWxsKHRoaXMpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBjbG9zZS5jYWxsKHRoaXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzIENvbnRleHQyRFRyYWNrZWQge1xyXG4gICAgY29uc3RydWN0b3IodGFyZ2V0KSB7XHJcbiAgICAgICAgLy8gdXNlOiBjb25zdCBjdHggPSBuZXcgQ29udGV4dDJEVHJhY2tlZChjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpKTtcclxuICAgICAgICAvLyB0YXJnZXQgaXMgQ2FudmFzIENvbnRleHQyRCB0aGF0IHdpbGwgYmUgd3JhcHBlZCBhbmQgdHJhY2tlZFxyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRhcmdldDtcclxuXHJcbiAgICAgICAgdGhpcy50ZiA9IFtuZXcgTWF0cml4KCldOyAgLy8ga2VlcCB0cmFjayBvZiB0cmFuc2Zvcm1hdGlvbnNcclxuXHJcbiAgICAgICAgLy8gdHJhY2tpbmcgd2hlcmUgdGhlIGN1cnJlbnQgcGVuIGlzIG9uIHRoZSBjYW52YXNcclxuICAgICAgICB0aGlzLnBlbnggPSAwO1xyXG4gICAgICAgIHRoaXMucGVueSA9IDA7XHJcbiAgICAgICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgcGF0aFxyXG4gICAgICAgIHRoaXMuanVzdEJlZ3VuID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5icGVueCA9IDA7XHJcbiAgICAgICAgdGhpcy5icGVueSA9IDA7XHJcblxyXG5cclxuICAgICAgICAvLyB0cmFuc2xhdGVcclxuICAgICAgICB0aGlzLm94ID0gMDtcclxuICAgICAgICB0aGlzLm95ID0gMDtcclxuXHJcbiAgICAgICAgLy8gZm9yIGZpbmUgY29udHJvbCBvZiB3aGVuIHRvIHNob3cgY29udHJvbHNcclxuICAgICAgICB0aGlzLnNob3djb250cm9sID0gZmFsc2U7XHJcblxyXG5cclxuICAgICAgICBjb25zdCBkZXByZWNhdGVkUHJvcGVydGllcyA9IFsnd2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkJ107XHJcbiAgICAgICAgLy8gXCJpbmhlcml0XCIgbWV0aG9kcyBhbmQgcHJvcGVydGllcyBmcm9tIENvbnRleHRcclxuICAgICAgICBjb25zdCBvcmlnUHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQuX19wcm90b19fKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9yaWdQcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgcCA9IG9yaWdQcm9wc1tpXTtcclxuICAgICAgICAgICAgaWYgKGRlcHJlY2F0ZWRQcm9wZXJ0aWVzLmluZGV4T2YocCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbcF0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgLy8gbm90IHByb3ZpZGluZyBhbiBvdmVycmlkZSwgdGhlbiBqdXN0IHVzZSB0aGUgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW3BdID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1twXSA9IHRhcmdldFtwXS5iaW5kKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIGFjY2VzcyBvbmx5IDEgY29weSBvZiB0aGUgZGF0YVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3BdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0uYmluZChudWxsLCBwKSxcclxuICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwLCB2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcF0gPSB2O1xyXG4gICAgICAgICAgICAgICAgICAgIH0uYmluZChudWxsLCBwKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbmV3IG1ldGhvZHNcclxuICAgIC8qKlxyXG4gICAgICogQ3VycmVudCB0cmFuc2Zvcm1cclxuICAgICAqL1xyXG4gICAgY2YoKSB7XHJcbiAgICAgICAgcmV0dXJuIGxhc3RFbGVtZW50KHRoaXMudGYpO1xyXG4gICAgfVxyXG5cclxuICAgIHVzaW5nU2NhbGVkTGluZVdpZHRoKGV4ZWN1dGUpIHtcclxuICAgICAgICBjb25zdCB0bXAgPSB0aGlzLmNvbnRleHQubGluZVdpZHRoO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoICo9IE1hdGguYWJzKHRoaXMuY2YoKS5hKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gdG1wO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHVzaW5nLmNhbGwodGhpcywgc3RhcnQsIGNsb3NlLCBleGVjdXRlKTtcclxuICAgIH1cclxuXHJcbiAgICB1c2luZ1NjYWxlZEZvbnRTaXplKGV4ZWN1dGUpIHtcclxuICAgICAgICBjb25zdCB0bXAgPSB0aGlzLmNvbnRleHQuZm9udDtcclxuICAgICAgICBjb25zdCBpbmZvID0gdG1wLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgY29uc3QgbmV3U2l6ZSA9IE1hdGgucm91bmQocGFyc2VJbnQoaW5mb1swXSkgKiBNYXRoLmFicyh0aGlzLmNmKCkuYSkpO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IG5ld1NpemUgKyAncHggJyArIGluZm9baW5mby5sZW5ndGggLSAxXTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGNsb3NlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IHRtcDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB1c2luZy5jYWxsKHRoaXMsIHN0YXJ0LCBjbG9zZSwgZXhlY3V0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludCBjcm9zc2hhaXJzIGF0IHRoZSBjdXJyZW50IHBlbiBsb2NhdGlvbiBhbmQgcmV0dXJuIHRoZWlyIGxvY2F0aW9uc1xyXG4gICAgICovXHJcbiAgICB0cmFjZSgpIHtcclxuICAgICAgICBjb25zdCB4ID0gdGhpcy5wZW54LCB5ID0gdGhpcy5wZW55O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKE1hdGgucm91bmQoeCAqIDEwKSAvIDEwICsgdGhpcy5veCwgTWF0aC5yb3VuZCh5ICogMTApIC8gMTAgKyB0aGlzLm95KTtcclxuICAgICAgICAvLyBhc3N1bWUgcGF0aFxyXG4gICAgICAgIC8vIGhhcyBiZWd1blxyXG4gICAgICAgIHRoaXMuY29udGV4dC5tb3ZlVG8oeCAtIDUsIHkpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5saW5lVG8oeCArIDUsIHkpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5tb3ZlVG8oeCwgeSArIDUpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5saW5lVG8oeCwgeSAtIDUpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgeVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNmb3JtcyBhIHBvaW50IGluIGJhc2UgY29vcmRpbmF0ZXMgdG8gY29udGV4dCBjb29yZGluYXRlcyBieSBhcHBseWluZyB0aGUgdHJhbnNmb3JtcyB0aGUgY29udGV4dCB3ZW50IHRocm91Z2hcclxuICAgICAqIEBwYXJhbSB4XHJcbiAgICAgKiBAcGFyYW0geVxyXG4gICAgICogQHJldHVybnMgeyp8e3gsIHl9fHt4OiBudW1iZXIsIHk6IG51bWJlcn19XHJcbiAgICAgKi9cclxuICAgIHRyYW5zZm9ybVBvaW50KHgsIHkpIHtcclxuICAgICAgICAvLyB0cmFuc2Zvcm1zIGEgcG9pbnQgaW50byBjb250ZXh0IGNvb3JkaW5hdGVzXHJcbiAgICAgICAgY29uc3QgaW52dGYgPSBsYXN0RWxlbWVudCh0aGlzLnRmKS5pbnZlcnNlKCk7XHJcbiAgICAgICAgcmV0dXJuIGludnRmLmFwcGx5VG9Qb2ludCh4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2Zvcm1Db29yZGluYXRlKHgsIHkpIHtcclxuICAgICAgICAvLyB0cmFuc2Zvcm0gY29udGV4dCBjb29yZGluYXRlcyBpbnRvIGEgcG9pbnRcclxuICAgICAgICByZXR1cm4gbGFzdEVsZW1lbnQodGhpcy50ZikuYXBwbHlUb1BvaW50KHgsIHkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHdyYXBwaW5nIGFyb3VuZCBleGlzdGluZyBtZXRob2RzXHJcbiAgICAvLyB0cmFuc2Zvcm1hdGlvbiBoYW5kbGluZ1xyXG4gICAgc2F2ZSgpIHtcclxuICAgICAgICB0aGlzLnRmLnB1c2gobGFzdEVsZW1lbnQodGhpcy50ZikuY2xvbmUoKSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXN0b3JlKCkge1xyXG4gICAgICAgIHRoaXMudGYucG9wKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZSh4LCB5KSB7XHJcbiAgICAgICAgbGFzdEVsZW1lbnQodGhpcy50Zikuc2NhbGUoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNsYXRlKHgsIHkpIHtcclxuICAgICAgICBsYXN0RWxlbWVudCh0aGlzLnRmKS50cmFuc2xhdGUoeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHtcclxuICAgICAgICBsYXN0RWxlbWVudCh0aGlzLnRmKS5zZXRUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XHJcbiAgICB9XHJcblxyXG4gICAgcm90YXRlKGFuZ2xlKSB7XHJcbiAgICAgICAgbGFzdEVsZW1lbnQodGhpcy50Zikucm90YXRlKGFuZ2xlKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlUGVuKHgsIHkpIHtcclxuICAgICAgICBjb25zdCB0ID0gdGhpcy5jZigpLmFwcGx5VG9Qb2ludCh4LCB5KTtcclxuICAgICAgICBpZiAodGhpcy5qdXN0QmVndW4pIHtcclxuICAgICAgICAgICAgdGhpcy5qdXN0QmVndW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5icGVueCA9IHQueDtcclxuICAgICAgICAgICAgdGhpcy5icGVueSA9IHQueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wZW54ID0gdC54O1xyXG4gICAgICAgIHRoaXMucGVueSA9IHQueTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBtZXRob2RzIHRoYXQgaGF2ZSBwb3NpdGlvbnMgc28gbmVlZCB1cyB0byBhcHBseSB0aGUgcG9pbnRzLi4uXHJcbiAgICBfcmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBvcCkge1xyXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KHgsIHkpO1xyXG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIG9wLmNhbGwodGhpcy5jb250ZXh0LCB0LngsIHQueSwgcy54LCBzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgdGhpcy5fcmVjdCguLi5hcmd1bWVudHMsIHRoaXMuY29udGV4dC5jbGVhclJlY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGxSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICB0aGlzLl9yZWN0KC4uLmFyZ3VtZW50cywgdGhpcy5jb250ZXh0LmZpbGxSZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICBzdHJva2VSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICB0aGlzLnVzaW5nU2NhbGVkTGluZVdpZHRoKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVjdCguLi5hcmd1bWVudHMsIHRoaXMuY29udGV4dC5zdHJva2VSZWN0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICB0aGlzLl9yZWN0KC4uLmFyZ3VtZW50cywgdGhpcy5jb250ZXh0LnJlY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGxUZXh0KHRleHQsIHgsIHksIG1heFdpZHRoKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeCwgeSk7XHJcbiAgICAgICAgdGhpcy51c2luZ1NjYWxlZEZvbnRTaXplKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRleHQsIHQueCwgdC55LCBtYXhXaWR0aCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3Ryb2tlVGV4dCh0ZXh0LCB4LCB5LCBtYXhXaWR0aCkge1xyXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KHgsIHkpO1xyXG4gICAgICAgIHRoaXMudXNpbmdTY2FsZWRMaW5lV2lkdGgoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnVzaW5nU2NhbGVkRm9udFNpemUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZVRleHQodGV4dCwgdC54LCB0LnksIG1heFdpZHRoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlTGluZWFyR3JhZGllbnQoeDAsIHkwLCB4MSwgeTEpIHtcclxuICAgICAgICBjb25zdCB0MCA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeDAsIHkwKTtcclxuICAgICAgICBjb25zdCB0MSA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeDEsIHkxKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmNyZWF0ZUxpbmVhckdyYWRpZW50KHQwLngsIHQwLnksIHQxLngsIHQxLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVJhZGlhbEdyYWRpZW50KHgwLCB5MCwgcjAsIHgxLCB5MSwgcjEpIHtcclxuICAgICAgICBjb25zdCB0MCA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeDAsIHkwKTtcclxuICAgICAgICBjb25zdCB0MSA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeDEsIHkxKTtcclxuICAgICAgICAvLyBUT0RPIHByb2JsZW1hdGljIHJhZGl1cyBiZWNhdXNlIHdlIGNhbid0IHRyYW5zZm9ybSBkaWZmZXJlbnRseSBmb3IgeCBhbmQgeVxyXG4gICAgICAgIGNvbnN0IHRyMCA9IHRoaXMuY2YoKS5hICogcjA7XHJcbiAgICAgICAgY29uc3QgdHIxID0gdGhpcy5jZigpLmEgKiByMTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHQwLngsIHQwLnksIHRyMCwgdDEueCwgdDEueSwgdHIxKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBtZXRob2RzIHRoYXQgY2hhbmdlIHBlbiBwb3NpdGlvbiB3aWxsIGJlIG92ZXJyaWRlblxyXG4gICAgYmVnaW5QYXRoKCkge1xyXG4gICAgICAgIHRoaXMuanVzdEJlZ3VuID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZVRvKHgsIHkpIHtcclxuICAgICAgICB0aGlzLm1vdmVQZW4oeCwgeSk7XHJcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeCwgeSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0Lm1vdmVUbyh0LngsIHQueSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGluZVRvKHgsIHksIGRlYnVnT3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KHgsIHkpO1xyXG4gICAgICAgIGlmIChkZWJ1Z09wdGlvbnMgfHwgdGhpcy5zaG93Y29udHJvbCkge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLl9nZXREZWZhdWx0RGVidWdPcHRpb25zKCksIGRlYnVnT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYXdDdXJ2ZUNvbnRyb2wodGhpcy5fZ2V0RGVidWdQb2ludCh0LngsIHQueSksIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHQueCwgdC55KTtcclxuICAgICAgICB0aGlzLm1vdmVQZW4oeCwgeSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGJlemllckN1cnZlVG8oY3B4MSwgY3B5MSwgY3B4MiwgY3B5MiwgeCwgeSwgZGVidWdPcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeCwgeSk7XHJcbiAgICAgICAgY29uc3QgdGNwMSA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoY3B4MSwgY3B5MSk7XHJcbiAgICAgICAgY29uc3QgdGNwMiA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoY3B4MiwgY3B5Mik7XHJcbiAgICAgICAgaWYgKGRlYnVnT3B0aW9ucyB8fCB0aGlzLnNob3djb250cm9sKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMuX2dldERlZmF1bHREZWJ1Z09wdGlvbnMoKSwgZGVidWdPcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5fZHJhd0N1cnZlQ29udHJvbCh0aGlzLl9nZXREZWJ1Z1BvaW50KHQueCwgdC55LCB0Y3AxLngsIHRjcDEueSwgdGNwMi54LCB0Y3AyLnkpLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc3Qgb2YgY3VydmVcclxuICAgICAgICB0aGlzLmNvbnRleHQuYmV6aWVyQ3VydmVUbyh0Y3AxLngsIHRjcDEueSwgdGNwMi54LCB0Y3AyLnksIHQueCwgdC55KTtcclxuICAgICAgICB0aGlzLm1vdmVQZW4oeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcXVhZHJhdGljQ3VydmVUbyhjcHgsIGNweSwgeCwgeSwgZGVidWdPcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoeCwgeSk7XHJcbiAgICAgICAgY29uc3QgdGNwID0gdGhpcy5jZigpLmFwcGx5VG9Qb2ludChjcHgsIGNweSk7XHJcbiAgICAgICAgaWYgKGRlYnVnT3B0aW9ucyB8fCB0aGlzLnNob3djb250cm9sKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMuX2dldERlZmF1bHREZWJ1Z09wdGlvbnMoKSwgZGVidWdPcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5fZHJhd0N1cnZlQ29udHJvbCh0aGlzLl9nZXREZWJ1Z1BvaW50KHQueCwgdC55LCB0Y3AueCwgdGNwLnkpLCBvcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmVzdCBvZiBjdXJ2ZVxyXG4gICAgICAgIHRoaXMuY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKHRjcC54LCB0Y3AueSwgdC54LCB0LnkpO1xyXG4gICAgICAgIHRoaXMubW92ZVBlbih4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICBhcmMoeCwgeSwgcmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSkge1xyXG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KHgsIHkpO1xyXG4gICAgICAgIC8vIFRPRE8gcHJvYmxlbWF0aWMgcmFkaXVzIGJlY2F1c2Ugd2UgY2FuJ3QgdHJhbnNmb3JtIGRpZmZlcmVudGx5IGZvciB4IGFuZCB5XHJcbiAgICAgICAgLy8gd2UnbGwganVzdCB1c2UgdGhlIHggc2NhbGVcclxuICAgICAgICBjb25zdCByID0gdGhpcy5jZigpLmEgKiByYWRpdXM7XHJcbiAgICAgICAgLy8gZmlyc3QgbW92ZSB0byBzdGFydGluZyBsb2NhdGlvblxyXG4gICAgICAgIC8vIHVzaW5nIGEgYml0IG9mIHRyaWdcclxuICAgICAgICBjb25zdCBzeCA9IHQueCArIE1hdGguY29zKHN0YXJ0QW5nbGUpICogciwgc3kgPSB0LnkgKyBNYXRoLnNpbihzdGFydEFuZ2xlKSAqIHI7XHJcbiAgICAgICAgdGhpcy5tb3ZlUGVuKHN4LCBzeSk7XHJcbiAgICAgICAgLy8gZHJhdyBhcmNcclxuICAgICAgICB0aGlzLmNvbnRleHQuYXJjKHQueCwgdC55LCByLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aWNsb2Nrd2lzZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGV4ID0gdC54ICsgTWF0aC5jb3MoZW5kQW5nbGUpICogciwgZXkgPSB0LnkgKyBNYXRoLnNpbihlbmRBbmdsZSkgKiByO1xyXG4gICAgICAgIHRoaXMubW92ZVBlbihleCwgZXkpO1xyXG4gICAgICAgIC8vIGJ1Zz8gZmlsbHMgdG8gdGhlIHN0YXJ0IG9mIHRoZVxyXG4gICAgICAgIC8vIHBhdGgsIGJ1dCB0aGUgY29udGludWF0aW9uIGZvclxyXG4gICAgICAgIC8vIHRoZSBuZXh0IHBhcnQgb2YgdGhlIGxpbmUgaXNcclxuICAgICAgICAvLyBhY3R1YWxseSB0aGUgZW5kIHBvaW50XHJcbiAgICAgICAgdGhpcy5icGVueCA9IGV4O1xyXG4gICAgICAgIHRoaXMuYnBlbnkgPSBleTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgc1dpZHRoLCBzSGVpZ2h0LCBkeCwgZHksIGRXaWR0aCwgZEhlaWdodCkge1xyXG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KHN4LCBzeSk7XHJcbiAgICAgICAgaWYgKHNXaWR0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHMueCwgcy55KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzZGltID0gdGhpcy5jZigpLmFwcGx5VG9Qb2ludChzV2lkdGgsIHNIZWlnaHQpO1xyXG4gICAgICAgIGlmIChkeCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHMueCwgcy55LCBzZGltLngsIHNkaW0ueSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZCA9IHRoaXMuY2YoKS5hcHBseVRvUG9pbnQoZHgsIGR5KTtcclxuICAgICAgICBjb25zdCBkZGltID0gdGhpcy5jZigpLmFwcGx5VG9Qb2ludChkV2lkdGgsIGRIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIHMueCwgcy55LCBzZGltLngsIHNkaW0ueSwgZC54LCBkLnksIGRkaW0ueCwgZGRpbS55KTtcclxuICAgIH1cclxuXHJcbiAgICBwdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCBkeCwgZHksIGRpcnR5WCwgZGlydHlZLCBkaXJ0eVdpZHRoLCBkaXJ0eUhlaWdodCkge1xyXG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KGR4LCBkeSk7XHJcbiAgICAgICAgaWYgKGRpcnR5WCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCBkLngsIGQueSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGlydHkgPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KGRpcnR5WCwgZGlydHlZKTtcclxuICAgICAgICBjb25zdCBkaW0gPSB0aGlzLmNmKCkuYXBwbHlUb1BvaW50KGRpcnR5V2lkdGgsIGRpcnR5SGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmNvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlRGF0YSwgZC54LCBkLnksIGRpcnR5LngsIGRpcnR5LnksIGRpbS54LCBkaW0ueSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVU5TVVBQT1JURUQgZnVuY3Rpb25zIChiZWhhdmlvdXIgd2lsbCBiZSB1bmV4cGVjdGVkKTogZWxsaXBzZSwgYXJjVG8sXHJcblxyXG4gICAgc3Ryb2tlKCkge1xyXG4gICAgICAgIC8vIGhhdmUgdG8gbWFudWFsbHkgZG8gdGhpcyBiZWNhdXNlIHdlJ3JlIG5vdCBzY2FsaW5nIGNvbnRleHRcclxuICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlICE9PSBcInJnYmEoMCwgMCwgMCwgMClcIikge1xyXG4gICAgICAgICAgICB0aGlzLnVzaW5nU2NhbGVkTGluZVdpZHRoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGZpbGwgYWx3YXlzIGRyYXdzIHN0cmFpZ2h0XHJcbiAgICAvLyBsaW5lIHRvIHBvaW50IHN0YXJ0aW5nIHRoZVxyXG4gICAgLy8gcGF0aFxyXG4gICAgZmlsbCgpIHtcclxuICAgICAgICB0aGlzLm1vdmVQZW4odGhpcy5icGVueCwgdGhpcy5icGVueSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGwuYXBwbHkodGhpcy5jb250ZXh0LCBhcmd1bWVudHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsaXAoKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlUGVuKHRoaXMuYnBlbngsIHRoaXMuYnBlbnkpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5jbGlwLmFwcGx5KHRoaXMuY29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8gbmV3IHV0aWxpdHkgbWV0aG9kc1xyXG4gICAgX2RyYXdDdXJ2ZUNvbnRyb2wocG9pbnQsIHN0eWxlKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcclxuICAgICAgICAvLyBhc3N1bWUgcGF0aFxyXG4gICAgICAgIC8vIGhhcyBhbHJlYWR5XHJcbiAgICAgICAgLy8gYmVndW5cclxuXHJcbiAgICAgICAgY29uc3QgcHRwcmludCA9IFtwb2ludC5wMV07XHJcbiAgICAgICAgLy8gZHJhdyBjb250cm9sXHJcbiAgICAgICAgLy8gbGluZXNcclxuICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSBzdHlsZS5jb250cm9sTGluZS5jb2xvcjtcclxuICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gc3R5bGUuY29udHJvbExpbmUud2lkdGg7XHJcbiAgICAgICAgaWYgKHBvaW50LmNwMSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubW92ZVRvKHBvaW50LnAxLngsIHBvaW50LnAxLnkpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHBvaW50LmNwMS54LCBwb2ludC5jcDEueSk7XHJcbiAgICAgICAgICAgIHB0cHJpbnQucHVzaChwb2ludC5jcDEpO1xyXG4gICAgICAgICAgICBpZiAocG9pbnQuY3AyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAyXHJcbiAgICAgICAgICAgICAgICAvLyBjb250cm9sXHJcbiAgICAgICAgICAgICAgICAvLyBwb2ludHMsXHJcbiAgICAgICAgICAgICAgICAvLyBjdWJpY1xyXG4gICAgICAgICAgICAgICAgLy8gYmV6aWVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHBvaW50LmNwMi54LCBwb2ludC5jcDIueSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHBvaW50LnAyLngsIHBvaW50LnAyLnkpO1xyXG4gICAgICAgICAgICAgICAgcHRwcmludC5wdXNoKHBvaW50LmNwMik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHBvaW50LnAyLngsIHBvaW50LnAyLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICBwdHByaW50LnB1c2gocG9pbnQucDIpO1xyXG5cclxuICAgICAgICAvLyBjb250cm9sXHJcbiAgICAgICAgLy8gcG9pbnRzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwdHByaW50Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBwdHByaW50W2ldO1xyXG4gICAgICAgICAgICBwdHByaW50W2ldID0gXCIoXCIgKyBNYXRoLnJvdW5kKHB0cHJpbnRbaV0ueCAqIDEwKSAvIDEwICsgXCIsIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQocHRwcmludFtpXS55ICogMTApIC8gMTAgKyBcIilcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVXaWR0aCA9IHN0eWxlLnBvaW50LndpZHRoO1xyXG4gICAgICAgICAgICAvLyB1c2UgZGlmZmVyZW50IGNvbG91ciBmb3IgZGVzdGluYXRpb24gY29sb3VyXHJcbiAgICAgICAgICAgIGlmIChwID09PSBwb2ludC5wMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZVN0eWxlID0gc3R5bGUucG9pbnQuZGVzdGluYXRpb25Db2xvcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9IHN0eWxlLnBvaW50LmNvbG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBzdHlsZS5wb2ludC5maWxsO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5hcmMocC54LCBwLnksIHN0eWxlLnBvaW50LnJhZGl1cywgMCwgMiAqIE1hdGguUEksIHRydWUpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgICAvLyB0YXJnZXQuZm9udCA9IHN0eWxlLnBvaW50LnJhZGl1cyAqIDQgKyBcInB4IGFyaWFsXCI7XHJcbiAgICAgICAgICAgIC8vIHRhcmdldC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgIC8vIHRhcmdldC5maWxsVGV4dChpICsgMSwgcC54LCBwLnkgKyBzdHlsZS5wb2ludC5yYWRpdXMgKiA1KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcImZyb20gcG9pbnRzXCIsIHB0cHJpbnQuam9pbihcIiB0byBcIikpO1xyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTsgIC8vIHJldHVybiB0b1xyXG4gICAgICAgIC8vIHByZXZpb3VzbHlcclxuICAgICAgICAvLyBvcGVuIHBhdGhcclxuICAgICAgICB0aGlzLmNvbnRleHQubW92ZVRvKHBvaW50LnAxLngsIHBvaW50LnAxLnkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBfZ2V0RGVidWdQb2ludCh4LCB5LCBjcHgxLCBjcHkxLCBjcHgyLCBjcHkyKSB7XHJcbiAgICAgICAgY29uc3QgcG9pbnQgPSB7XHJcbiAgICAgICAgICAgIHAxOiB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aGlzLnBlbngsXHJcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnBlbnlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcDI6IHtcclxuICAgICAgICAgICAgICAgIHg6IHgsXHJcbiAgICAgICAgICAgICAgICB5OiB5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0eXBlb2YgY3B4MSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgY3B5MSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBwb2ludC5jcDEgPVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGNweDEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTogY3B5MVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjcHgyID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBjcHkyID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludC5jcDIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDogY3B4MixcclxuICAgICAgICAgICAgICAgICAgICB5OiBjcHkyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwb2ludDtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0RGVmYXVsdERlYnVnT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb250cm9sTGluZToge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IFwicmdiKDIwMCwxMDAsMTAwKVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDAuNVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwb2ludCAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgICAgICAgICAgIDogXCJyZ2IoMjAwLDUwLDUwKVwiLFxyXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25Db2xvcjogXCIjMDAwXCIsXHJcbiAgICAgICAgICAgICAgICBmaWxsICAgICAgICAgICAgOiBcIndoaXRlXCIsXHJcbiAgICAgICAgICAgICAgICB3aWR0aCAgICAgICAgICAgOiAxLFxyXG4gICAgICAgICAgICAgICAgcmFkaXVzICAgICAgICAgIDogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XHJcblxyXG4iLCIvKiFcclxuICAyRCBUcmFuc2Zvcm1hdGlvbiBNYXRyaXggdjIuNy41XHJcbiAgKGMpIEVwaXN0ZW1leC5jb20gMjAxNC0yMDE4XHJcbiAgTGljZW5zZTogTUlUXHJcbiovXHJcblxyXG4vKipcclxuICogMkQgdHJhbnNmb3JtYXRpb24gbWF0cml4IG9iamVjdCBpbml0aWFsaXplZCB3aXRoIGlkZW50aXR5IG1hdHJpeC5cclxuICpcclxuICogVGhlIG1hdHJpeCBjYW4gc3luY2hyb25pemUgYSBjYW52YXMgMkQgY29udGV4dCBieSBzdXBwbHlpbmcgdGhlIGNvbnRleHRcclxuICogYXMgYW4gYXJndW1lbnQsIG9yIGxhdGVyIGFwcGx5IGN1cnJlbnQgYWJzb2x1dGUgdHJhbnNmb3JtIHRvIGFuXHJcbiAqIGV4aXN0aW5nIGNvbnRleHQuXHJcbiAqXHJcbiAqIFRvIHN5bmNocm9uaXplIGEgRE9NIGVsZW1lbnQgeW91IGNhbiB1c2UgW2B0b0NTUygpYF17QGxpbmsgTWF0cml4I3RvQ1NTfSBvciBbYHRvQ1NTM0QoKWBde0BsaW5rIE1hdHJpeCN0b0NTUzNEfS5cclxuICogdG9nZXRoZXIgd2l0aCBmb3IgZXhhbXBsZSB0aGUgYHN0eWxlLnRyYW5zZm9ybWAgcHJvcGVydHkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBPcHRpb25hbCBjb250ZXh0IHRvIHN5bmMgd2l0aCBNYXRyaXhcclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW2VsZW1lbnQ9bnVsbF0gLSBET00gRWxlbWVudCB0byBzeW5jaHJvbml6ZVxyXG4gKiBAcHJvcCB7bnVtYmVyfSBhIC0gc2NhbGUgeFxyXG4gKiBAcHJvcCB7bnVtYmVyfSBiIC0gc2hlYXIgeVxyXG4gKiBAcHJvcCB7bnVtYmVyfSBjIC0gc2hlYXIgeFxyXG4gKiBAcHJvcCB7bnVtYmVyfSBkIC0gc2NhbGUgeVxyXG4gKiBAcHJvcCB7bnVtYmVyfSBlIC0gdHJhbnNsYXRlIHhcclxuICogQHByb3Age251bWJlcn0gZiAtIHRyYW5zbGF0ZSB5XHJcbiAqIEBwcm9wIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IFtjb250ZXh0XSAtIHNldCBvciBnZXQgY3VycmVudCBzeW5jaHJvbml6ZWQgMkQgY29udGV4dFxyXG4gKiBAcHJvcCB7SFRNTEVsZW1lbnR9IFtlbGVtZW50XSAtIGdldCBjdXJyZW50IHN5bmNocm9uaXplZCBET00gZWxlbWVudFxyXG4gKiBAcHJvcCB7Ym9vbGVhbn0gW3VzZUNTUzNEPWZhbHNlXSAtIGlzIGEgRE9NIGVsZW1lbnQgaXMgZGVmaW5lZCBmb3Igc3luYy4sIGNob29zZSB3aGV0aGVyIHRvIHVzZSAyRCAoZmFsc2UpIG9yIDNEICh0cnVlKSBtYXRyaXggdG8gc3luYyBpdC5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBsaWNlbnNlIE1JVCBsaWNlbnNlXHJcbiAqIEBjb3B5cmlnaHQgRXBpc3RlbWV4LmNvbSAyMDE0LTIwMThcclxuICovXHJcbmZ1bmN0aW9uIE1hdHJpeChjb250ZXh0LCBlbGVtZW50KSB7XHJcblxyXG4gIHZhciBtZSA9IHRoaXMsIF9lbDtcclxuICBtZS5fdCA9IG1lLnRyYW5zZm9ybTtcclxuXHJcbiAgbWUuYSA9IG1lLmQgPSAxO1xyXG4gIG1lLmIgPSBtZS5jID0gbWUuZSA9IG1lLmYgPSAwO1xyXG5cclxuICAvLyBzeW5jIGNvbnRleHRcclxuICBpZiAoY29udGV4dClcclxuICAgIChtZS5jb250ZXh0ID0gY29udGV4dCkuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xyXG5cclxuICAvLyBzeW5jIERPTSBlbGVtZW50XHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1lLCBcImVsZW1lbnRcIiwge1xyXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtyZXR1cm4gX2VsfSxcclxuICAgIHNldDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgaWYgKCFfZWwpIHtcclxuICAgICAgICBtZS5fcHggPSBtZS5fZ2V0UFgoKTtcclxuICAgICAgICBtZS51c2VDU1MzRCA9IGZhbHNlXHJcbiAgICAgIH1cclxuICAgICAgX2VsID0gZWw7XHJcbiAgICAgIChtZS5fc3QgPSBfZWwuc3R5bGUpW21lLl9weF0gPSBtZS50b0NTUygpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBpZiAoZWxlbWVudCkgbWUuZWxlbWVudCA9IGVsZW1lbnRcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBuZXcgbWF0cml4IHRoYXQgdHJhbnNmb3JtcyBhIHRyaWFuZ2xlIGB0MWAgaW50byBhbm90aGVyIHRyaWFuZ2xlXHJcbiAqIGB0MmAsIG9yIHRocm93cyBhbiBleGNlcHRpb24gaWYgaXQgaXMgaW1wb3NzaWJsZS5cclxuICpcclxuICogTm90ZTogdGhlIG1ldGhvZCBjYW4gdGFrZSBib3RoIGFycmF5cyBhcyB3ZWxsIGFzIGxpdGVyYWwgb2JqZWN0cy5cclxuICogSnVzdCBtYWtlIHN1cmUgdGhhdCBib3RoIGFyZ3VtZW50cyAoYHQxYCwgYHQyYCkgYXJlIG9mIHRoZSBzYW1lIHR5cGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7e3B4OiBudW1iZXIsIHB5OiBudW1iZXIsIHF4OiBudW1iZXIsIHF5OiBudW1iZXIsIHJ4OiBudW1iZXIsIHJ5OiBudW1iZXJ9fEFycmF5fSB0MSAtIE9iamVjdCBvciBhcnJheSBjb250YWluaW5nIHRoZSB0aHJlZSBwb2ludHMgZm9yIHRoZSB0cmlhbmdsZS5cclxuICogRm9yIG9iamVjdCB1c2Ugb2JqLnB4LCBvYmoucHksIG9iai5xeCwgb2JqLnF5LCBvYmoucnggYW5kIG9iai5yeS4gRm9yIGFycmF5cyBwcm92aWRlIHRoZSBwb2ludHMgaW4gdGhlIG9yZGVyIFtweCwgcHksIHF4LCBxeSwgcngsIHJ5XSwgb3IgYXMgcG9pbnQgYXJyYXkgW3t4Oix5On0sIHt4Oix5On0sIHt4Oix5On1dXHJcbiAqIEBwYXJhbSB7e3B4OiBudW1iZXIsIHB5OiBudW1iZXIsIHF4OiBudW1iZXIsIHF5OiBudW1iZXIsIHJ4OiBudW1iZXIsIHJ5OiBudW1iZXJ9fEFycmF5fSB0MiAtIFNlZSBkZXNjcmlwdGlvbiBmb3IgdDEuXHJcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBvcHRpb25hbCBjYW52YXMgMkQgY29udGV4dCB0byB1c2UgZm9yIHRoZSBtYXRyaXhcclxuICogQHJldHVybnMge01hdHJpeH1cclxuICogQHRocm93cyBFeGNlcHRpb24gaXMgbWF0cml4IGJlY29tZXMgbm90IGludmVydGlibGVcclxuICogQHN0YXRpY1xyXG4gKi9cclxuTWF0cml4LmZyb21UcmlhbmdsZXMgPSBmdW5jdGlvbih0MSwgdDIsIGNvbnRleHQpIHtcclxuXHJcbiAgdmFyXHJcbiAgICBtMSA9IG5ldyBNYXRyaXgoKSxcclxuICAgIG0yID0gbmV3IE1hdHJpeChjb250ZXh0KSxcclxuICAgIHIxLCByMiwgcngxLCByeTEsIHJ4MiwgcnkyO1xyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheSh0MSkpIHtcclxuICAgIGlmICh0eXBlb2YgdDFbMF0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgcngxID0gdDFbNF07IHJ5MSA9IHQxWzVdOyByeDIgPSB0Mls0XTsgcnkyID0gdDJbNV07XHJcbiAgICAgIHIxID0gW3QxWzBdIC0gcngxLCB0MVsxXSAtIHJ5MSwgdDFbMl0gLSByeDEsIHQxWzNdIC0gcnkxLCByeDEsIHJ5MV07XHJcbiAgICAgIHIyID0gW3QyWzBdIC0gcngyLCB0MlsxXSAtIHJ5MiwgdDJbMl0gLSByeDIsIHQyWzNdIC0gcnkyLCByeDIsIHJ5Ml1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByeDEgPSB0MVsyXS54OyByeTEgPSB0MVsyXS55OyByeDIgPSB0MlsyXS54OyByeTIgPSB0MlsyXS55O1xyXG4gICAgICByMSA9IFt0MVswXS54IC0gcngxLCB0MVswXS55IC0gcnkxLCB0MVsxXS54IC0gcngxLCB0MVsxXS55IC0gcnkxLCByeDEsIHJ5MV07XHJcbiAgICAgIHIyID0gW3QyWzBdLnggLSByeDIsIHQyWzBdLnkgLSByeTIsIHQyWzFdLnggLSByeDIsIHQyWzFdLnkgLSByeTIsIHJ4MiwgcnkyXVxyXG4gICAgfVxyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHIxID0gW3QxLnB4IC0gdDEucngsIHQxLnB5IC0gdDEucnksIHQxLnF4IC0gdDEucngsIHQxLnF5IC0gdDEucnksIHQxLnJ4LCB0MS5yeV07XHJcbiAgICByMiA9IFt0Mi5weCAtIHQyLnJ4LCB0Mi5weSAtIHQyLnJ5LCB0Mi5xeCAtIHQyLnJ4LCB0Mi5xeSAtIHQyLnJ5LCB0Mi5yeCwgdDIucnldXHJcbiAgfVxyXG5cclxuICBtMS5zZXRUcmFuc2Zvcm0uYXBwbHkobTEsIHIxKTtcclxuICBtMi5zZXRUcmFuc2Zvcm0uYXBwbHkobTIsIHIyKTtcclxuXHJcbiAgcmV0dXJuIG0yLm11bHRpcGx5KG0xLmludmVyc2UoKSlcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBtYXRyaXggZnJvbSBhIHRyYW5zZm9ybSBsaXN0IGZyb20gYW4gU1ZHIHNoYXBlLiBUaGUgbGlzdFxyXG4gKiBjYW4gYmUgZm9yIGV4YW1wbGUgYmFzZVZhbCAoaS5lLiBgc2hhcGUudHJhbnNmb3JtLmJhc2VWYWxgKS5cclxuICpcclxuICogVGhlIHJlc3VsdGluZyBtYXRyaXggaGFzIGFsbCB0cmFuc2Zvcm1hdGlvbnMgZnJvbSB0aGF0IGxpc3QgYXBwbGllZFxyXG4gKiBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgbGlzdC5cclxuICpcclxuICogQHBhcmFtIHtTVkdUcmFuc2Zvcm1MaXN0fSB0TGlzdCAtIHRyYW5zZm9ybSBsaXN0IGZyb20gYW4gU1ZHIHNoYXBlLlxyXG4gKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2NvbnRleHRdIC0gb3B0aW9uYWwgY2FudmFzIDJEIGNvbnRleHQgdG8gdXNlIGZvciB0aGUgbWF0cml4XHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtkb21dIC0gb3B0aW9uYWwgRE9NIGVsZW1lbnQgdG8gdXNlIGZvciB0aGUgbWF0cml4XHJcbiAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TVkdUcmFuc2Zvcm1MaXN0fE1ETiAvIFNWR1RyYW5zZm9ybUxpc3R9XHJcbiAqL1xyXG5NYXRyaXguZnJvbVNWR1RyYW5zZm9ybUxpc3QgPSBmdW5jdGlvbih0TGlzdCwgY29udGV4dCwgZG9tKSB7XHJcblxyXG4gIHZhclxyXG4gICAgbSA9IG5ldyBNYXRyaXgoY29udGV4dCwgZG9tKSxcclxuICAgIGkgPSAwO1xyXG5cclxuICB3aGlsZShpIDwgdExpc3QubGVuZ3RoKVxyXG4gICAgbS5tdWx0aXBseSh0TGlzdFtpKytdLm1hdHJpeCk7XHJcblxyXG4gIHJldHVybiBtXHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGFuZCB0cmFuc2Zvcm0gYSBuZXcgbWF0cml4IGJhc2VkIG9uIGdpdmVuIG1hdHJpeCB2YWx1ZXMsIG9yXHJcbiAqIHByb3ZpZGUgU1ZHTWF0cml4IG9yIGEgKDJEKSBET01NYXRyaXgsIFdlYktpdENTU01hdHJpeCBvciBhbm90aGVyXHJcbiAqIGluc3RhbmNlIG9mIGEgZ2VuZXJpYyBNYXRyaXguXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIHZhciBtID0gTWF0cml4LmZyb20oMSwgMC4yLCAwLCAyLCAxMjAsIDk3KTtcclxuICogdmFyIG0gPSBNYXRyaXguZnJvbShkb21NYXRyaXgsIGN0eCk7XHJcbiAqIHZhciBtID0gTWF0cml4LmZyb20oc3ZnTWF0cml4KTtcclxuICogdmFyIG0gPSBNYXRyaXguZnJvbShjc3NNYXRyaXgpO1xyXG4gKiB2YXIgbSA9IE1hdHJpeC5mcm9tKG1hdHJpeCk7XHJcbiAqIHZhciBtID0gTWF0cml4LmZyb20odmVjdG9yIFsscHJlLXhdIFsscHJlLXldIFssZG9TY2FsZV0pO1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IGEgLSBudW1iZXIgcmVwcmVzZW50aW5nIGEgaW4gW2EtZl0sIG9yIGEgTWF0cml4IG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYS1mLiBWZWN0b3IgaXMgZ2l2ZW4gYXMgYW4gb2JqZWN0IHdpdGggcHJvcGVydGllcyB4IGFuZCB5LlxyXG4gKiBAcGFyYW0geyp9IFtiXSAtIGIgcHJvcGVydHkgaWYgYSBpcyBub3QgYSBtYXRyaXggb2JqZWN0LCBvciBvcHRpb25hbCBjYW52YXMgMkQgY29udGV4dC5cclxuICogSWYgdmVjdG9yIGlzIGlucHV0IHRoaXMgd2lsbCBiZSBwcmUtdHJhbnNsYXRlIGZvciB4LlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2NdIC0gSWYgdmVjdG9yIGlzIGlucHV0IHRoaXMgd2lsbCBiZSBwcmUtdHJhbnNsYXRlIGZvciB5LlxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2RdIC0gSWYgdmVjdG9yIGlzIGlucHV0LCBzZXQgdGhpcyB0byB0cnVlIHRvIHVzZSBzY2FsZSBhbmQgdHJhbnNsYXRlIG9mIDEsXHJcbiAqIGZhbHNlIHRvIHVzZSBoeXBvdGVudXNlIGFzIHRyYW5zbGF0ZSBkaXN0YW5jZSBpbnN0ZWFkIGFuZCBubyBzY2FsZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IFtlXVxyXG4gKiBAcGFyYW0ge251bWJlcn0gW2ZdXHJcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBvcHRpb25hbCBjYW52YXMgY29udGV4dCB0byBzeW5jaHJvbml6ZVxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbZG9tXSAtIG9wdGlvbmFsIERPTSBlbGVtZW50IHRvIHVzZSBmb3IgdGhlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gKiBAc3RhdGljXHJcbiAqL1xyXG5NYXRyaXguZnJvbSA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYsIGNvbnRleHQsIGRvbSkge1xyXG5cclxuICB2YXIgbSA9IG5ldyBNYXRyaXgoY29udGV4dCwgZG9tKSwgc2NhbGUsIGRpc3QsIHE7XHJcblxyXG4gIGlmICh0eXBlb2YgYSA9PT0gXCJudW1iZXJcIilcclxuICAgIG0uc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpO1xyXG5cclxuICBlbHNlIGlmICh0eXBlb2YgYS54ID09PSBcIm51bWJlclwiKSB7XHRcdC8vIHZlY3RvclxyXG5cclxuICAgIHEgPSBNYXRoLnNxcnQoYS54KmEueCArIGEueSphLnkpO1xyXG4gICAgc2NhbGUgPSBkaXN0ID0gMTtcclxuXHJcbiAgICBpZiAoZCkgc2NhbGUgPSBxO1xyXG4gICAgZWxzZSBkaXN0ID0gcTtcclxuXHJcbiAgICBtXHJcbiAgICAgIC50cmFuc2xhdGUoYiB8fCAwLCBjIHx8IDApXHJcbiAgICAgIC5yb3RhdGVGcm9tVmVjdG9yKGEpXHJcbiAgICAgIC5zY2FsZVUoc2NhbGUpXHJcbiAgICAgIC50cmFuc2xhdGUoZGlzdCwgMCk7XHJcblxyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIGlmICh0eXBlb2YgYS5pczJEID09PSBcImJvb2xlYW5cIiAmJiAhYS5pczJEKSB0aHJvdyBcIkNhbm5vdCB1c2UgM0QgRE9NTWF0cml4LlwiO1xyXG4gICAgaWYgKGIpIG0uY29udGV4dCA9IGI7XHJcbiAgICBpZiAoYykgbS5lbGVtZW50ID0gYztcclxuICAgIG0ubXVsdGlwbHkoYSlcclxuICB9XHJcblxyXG4gIHJldHVybiBtXHJcbn07XHJcblxyXG5NYXRyaXgucHJvdG90eXBlID0ge1xyXG5cclxuICBfZ2V0UFg6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHZhclxyXG4gICAgICBsc3QgICA9IFtcInRcIiwgXCJvVFwiLCBcIm1zVFwiLCBcIm1velRcIiwgXCJ3ZWJraXRUXCIsIFwia2h0bWxUXCJdLCBpID0gMCwgcCxcclxuICAgICAgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlO1xyXG5cclxuICAgIHdoaWxlKHAgPSBsc3RbaSsrXSlcclxuICAgICAgaWYgKHR5cGVvZiBzdHlsZVtwICsgXCJyYW5zZm9ybVwiXSAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIHAgKyBcInJhbnNmb3JtXCI7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ29uY2F0ZW5hdGVzIHRyYW5zZm9ybXMgb2YgdGhpcyBtYXRyaXggb250byB0aGUgZ2l2ZW4gY2hpbGQgbWF0cml4IGFuZFxyXG4gICAqIHJldHVybnMgYSBuZXcgbWF0cml4LiBUaGlzIGluc3RhbmNlIGlzIHVzZWQgb24gbGVmdCBzaWRlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtNYXRyaXh8U1ZHTWF0cml4fSBjbSAtIGNoaWxkIG1hdHJpeCB0byBhcHBseSBjb25jYXRlbmF0aW9uIHRvXHJcbiAgICogQHJldHVybnMge01hdHJpeH0gLSBuZXcgTWF0cml4IGluc3RhbmNlXHJcbiAgICovXHJcbiAgY29uY2F0OiBmdW5jdGlvbihjbSkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWx0aXBseShjbSlcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBGbGlwcyB0aGUgaG9yaXpvbnRhbCB2YWx1ZXMuXHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICBmbGlwWDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fdCgtMSwgMCwgMCwgMSwgMCwgMClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBGbGlwcyB0aGUgdmVydGljYWwgdmFsdWVzLlxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgZmxpcFk6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgLTEsIDAsIDApXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogUmVmbGVjdHMgaW5jb21pbmcgKHZlbG9jaXR5KSB2ZWN0b3Igb24gdGhlIG5vcm1hbCB3aGljaCB3aWxsIGJlIHRoZVxyXG4gICAqIGN1cnJlbnQgdHJhbnNmb3JtZWQgeCBheGlzLiBDYWxsIHdoZW4gYSB0cmlnZ2VyIGNvbmRpdGlvbiBpcyBtZXQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIHZlY3RvciBlbmQgcG9pbnQgZm9yIHggKHN0YXJ0ID0gMClcclxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHZlY3RvciBlbmQgcG9pbnQgZm9yIHkgKHN0YXJ0ID0gMClcclxuICAgKiBAcmV0dXJucyB7e3g6IG51bWJlciwgeTogbnVtYmVyfX1cclxuICAgKi9cclxuICByZWZsZWN0VmVjdG9yOiBmdW5jdGlvbih4LCB5KSB7XHJcblxyXG4gICAgdmFyXHJcbiAgICAgIHYgPSB0aGlzLmFwcGx5VG9Qb2ludCgwLCAxKSxcclxuICAgICAgZCA9ICh2LnggKiB4ICsgdi55ICogeSkgKiAyO1xyXG5cclxuICAgIHggLT0gZCAqIHYueDtcclxuICAgIHkgLT0gZCAqIHYueTtcclxuXHJcbiAgICByZXR1cm4ge3g6IHgsIHk6IHl9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogU2hvcnQtaGFuZCB0byByZXNldCBjdXJyZW50IG1hdHJpeCB0byBhbiBpZGVudGl0eSBtYXRyaXguXHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICByZXNldDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBSb3RhdGVzIGN1cnJlbnQgbWF0cml4IGJ5IGFuZ2xlIChhY2N1bXVsYXRpdmUpLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSAtIGFuZ2xlIGluIHJhZGlhbnNcclxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAqL1xyXG4gIHJvdGF0ZTogZnVuY3Rpb24oYW5nbGUpIHtcclxuICAgIHZhclxyXG4gICAgICBjb3MgPSBNYXRoLmNvcyhhbmdsZSksXHJcbiAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcclxuICAgIHJldHVybiB0aGlzLl90KGNvcywgc2luLCAtc2luLCBjb3MsIDAsIDApXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydHMgYSB2ZWN0b3IgZ2l2ZW4gYXMgYHhgIGFuZCBgeWAgdG8gYW5nbGUsIGFuZFxyXG4gICAqIHJvdGF0ZXMgKGFjY3VtdWxhdGl2ZSkuIHggY2FuIGluc3RlYWQgY29udGFpbiBhbiBvYmplY3Qgd2l0aFxyXG4gICAqIHByb3BlcnRpZXMgeCBhbmQgeSBhbmQgaWYgc28sIHkgcGFyYW1ldGVyIHdpbGwgYmUgaWdub3JlZC5cclxuICAgKiBAcGFyYW0ge251bWJlcnwqfSB4XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt5XVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgcm90YXRlRnJvbVZlY3RvcjogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgcmV0dXJuIHRoaXMucm90YXRlKHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gTWF0aC5hdGFuMih5LCB4KSA6IE1hdGguYXRhbjIoeC55LCB4LngpKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEhlbHBlciBtZXRob2QgdG8gbWFrZSBhIHJvdGF0aW9uIGJhc2VkIG9uIGFuIGFuZ2xlIGluIGRlZ3JlZXMuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gYW5nbGUgaW4gZGVncmVlc1xyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgcm90YXRlRGVnOiBmdW5jdGlvbihhbmdsZSkge1xyXG4gICAgcmV0dXJuIHRoaXMucm90YXRlKGFuZ2xlICogTWF0aC5QSSAvIDE4MClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBTY2FsZXMgY3VycmVudCBtYXRyaXggdW5pZm9ybWx5IGFuZCBhY2N1bXVsYXRpdmUuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGYgLSBzY2FsZSBmYWN0b3IgZm9yIGJvdGggeCBhbmQgeSAoMSBkb2VzIG5vdGhpbmcpXHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICBzY2FsZVU6IGZ1bmN0aW9uKGYpIHtcclxuICAgIHJldHVybiB0aGlzLl90KGYsIDAsIDAsIGYsIDAsIDApXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogU2NhbGVzIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gc3ggLSBzY2FsZSBmYWN0b3IgeCAoMSBkb2VzIG5vdGhpbmcpXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN5IC0gc2NhbGUgZmFjdG9yIHkgKDEgZG9lcyBub3RoaW5nKVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgc2NhbGU6IGZ1bmN0aW9uKHN4LCBzeSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Qoc3gsIDAsIDAsIHN5LCAwLCAwKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFNjYWxlcyBjdXJyZW50IG1hdHJpeCBvbiB4IGF4aXMgYWNjdW11bGF0aXZlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzeCAtIHNjYWxlIGZhY3RvciB4ICgxIGRvZXMgbm90aGluZylcclxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAqL1xyXG4gIHNjYWxlWDogZnVuY3Rpb24oc3gpIHtcclxuICAgIHJldHVybiB0aGlzLl90KHN4LCAwLCAwLCAxLCAwLCAwKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFNjYWxlcyBjdXJyZW50IG1hdHJpeCBvbiB5IGF4aXMgYWNjdW11bGF0aXZlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzeSAtIHNjYWxlIGZhY3RvciB5ICgxIGRvZXMgbm90aGluZylcclxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAqL1xyXG4gIHNjYWxlWTogZnVuY3Rpb24oc3kpIHtcclxuICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIHN5LCAwLCAwKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIGEgdmVjdG9yIGdpdmVuIGFzIGB4YCBhbmQgYHlgIHRvIG5vcm1hbGl6ZWQgc2NhbGUuXHJcbiAgICogQHBhcmFtIHhcclxuICAgKiBAcGFyYW0geVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgc2NhbGVGcm9tVmVjdG9yOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5zY2FsZVUoTWF0aC5zcXJ0KHgqeCArIHkqeSkpXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgc2hlYXIgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gc3ggLSBhbW91bnQgb2Ygc2hlYXIgZm9yIHhcclxuICAgKiBAcGFyYW0ge251bWJlcn0gc3kgLSBhbW91bnQgb2Ygc2hlYXIgZm9yIHlcclxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAqL1xyXG4gIHNoZWFyOiBmdW5jdGlvbihzeCwgc3kpIHtcclxuICAgIHJldHVybiB0aGlzLl90KDEsIHN5LCBzeCwgMSwgMCwgMClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBBcHBseSBzaGVhciBmb3IgeCB0byB0aGUgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzeCAtIGFtb3VudCBvZiBzaGVhciBmb3IgeFxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgc2hlYXJYOiBmdW5jdGlvbihzeCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgc3gsIDEsIDAsIDApXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgc2hlYXIgZm9yIHkgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gc3kgLSBhbW91bnQgb2Ygc2hlYXIgZm9yIHlcclxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAqL1xyXG4gIHNoZWFyWTogZnVuY3Rpb24oc3kpIHtcclxuICAgIHJldHVybiB0aGlzLl90KDEsIHN5LCAwLCAxLCAwLCAwKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IHNrZXcgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS4gQW5nbGVzIGluIHJhZGlhbnMuXHJcbiAgICogQWxzbyBzZWUgW2Bza2V3RGVnKClgXXtAbGluayBNYXRyaXgjc2tld0RlZ30uXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGF4IC0gYW5nbGUgb2Ygc2tldyBmb3IgeFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBheSAtIGFuZ2xlIG9mIHNrZXcgZm9yIHlcclxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAqL1xyXG4gIHNrZXc6IGZ1bmN0aW9uKGF4LCBheSkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hlYXIoTWF0aC50YW4oYXgpLCBNYXRoLnRhbihheSkpXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgc2tldyB0byB0aGUgY3VycmVudCBtYXRyaXggYWNjdW11bGF0aXZlLiBBbmdsZXMgaW4gZGVncmVlcy5cclxuICAgKiBBbHNvIHNlZSBbYHNrZXcoKWBde0BsaW5rIE1hdHJpeCNza2V3fS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gYXggLSBhbmdsZSBvZiBza2V3IGZvciB4XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGF5IC0gYW5nbGUgb2Ygc2tldyBmb3IgeVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgc2tld0RlZzogZnVuY3Rpb24oYXgsIGF5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVhcihNYXRoLnRhbihheCAvIDE4MCAqIE1hdGguUEkpLCBNYXRoLnRhbihheSAvIDE4MCAqIE1hdGguUEkpKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IHNrZXcgZm9yIHggdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS4gQW5nbGVzIGluIHJhZGlhbnMuXHJcbiAgICogQWxzbyBzZWUgW2Bza2V3RGVnKClgXXtAbGluayBNYXRyaXgjc2tld0RlZ30uXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGF4IC0gYW5nbGUgb2Ygc2tldyBmb3IgeFxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgc2tld1g6IGZ1bmN0aW9uKGF4KSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVhclgoTWF0aC50YW4oYXgpKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IHNrZXcgZm9yIHkgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFjY3VtdWxhdGl2ZS4gQW5nbGVzIGluIHJhZGlhbnMuXHJcbiAgICogQWxzbyBzZWUgW2Bza2V3RGVnKClgXXtAbGluayBNYXRyaXgjc2tld0RlZ30uXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGF5IC0gYW5nbGUgb2Ygc2tldyBmb3IgeVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgc2tld1k6IGZ1bmN0aW9uKGF5KSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVhclkoTWF0aC50YW4oYXkpKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBjdXJyZW50IG1hdHJpeCB0byBuZXcgYWJzb2x1dGUgbWF0cml4LlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhIC0gc2NhbGUgeFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiIC0gc2hlYXIgeVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjIC0gc2hlYXIgeFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkIC0gc2NhbGUgeVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBlIC0gdHJhbnNsYXRlIHhcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZiAtIHRyYW5zbGF0ZSB5XHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICBzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICBtZS5hID0gYTtcclxuICAgIG1lLmIgPSBiO1xyXG4gICAgbWUuYyA9IGM7XHJcbiAgICBtZS5kID0gZDtcclxuICAgIG1lLmUgPSBlO1xyXG4gICAgbWUuZiA9IGY7XHJcbiAgICByZXR1cm4gbWUuX3goKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zbGF0ZSBjdXJyZW50IG1hdHJpeCBhY2N1bXVsYXRpdmUuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHR4IC0gdHJhbnNsYXRpb24gZm9yIHhcclxuICAgKiBAcGFyYW0ge251bWJlcn0gdHkgLSB0cmFuc2xhdGlvbiBmb3IgeVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgdHJhbnNsYXRlOiBmdW5jdGlvbih0eCwgdHkpIHtcclxuICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDEsIHR4LCB0eSlcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBUcmFuc2xhdGUgY3VycmVudCBtYXRyaXggb24geCBheGlzIGFjY3VtdWxhdGl2ZS5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gdHggLSB0cmFuc2xhdGlvbiBmb3IgeFxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgdHJhbnNsYXRlWDogZnVuY3Rpb24odHgpIHtcclxuICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDEsIHR4LCAwKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zbGF0ZSBjdXJyZW50IG1hdHJpeCBvbiB5IGF4aXMgYWNjdW11bGF0aXZlLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0eSAtIHRyYW5zbGF0aW9uIGZvciB5XHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICB0cmFuc2xhdGVZOiBmdW5jdGlvbih0eSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgMSwgMCwgdHkpXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogTXVsdGlwbGllcyBjdXJyZW50IG1hdHJpeCB3aXRoIG5ldyBtYXRyaXggdmFsdWVzLiBBbHNvIHNlZSBbYG11bHRpcGx5KClgXXtAbGluayBNYXRyaXgjbXVsdGlwbHl9LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGEyIC0gc2NhbGUgeFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiMiAtIHNrZXcgeVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjMiAtIHNrZXcgeFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkMiAtIHNjYWxlIHlcclxuICAgKiBAcGFyYW0ge251bWJlcn0gZTIgLSB0cmFuc2xhdGUgeFxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmMiAtIHRyYW5zbGF0ZSB5XHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uKGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIpIHtcclxuXHJcbiAgICB2YXJcclxuICAgICAgbWUgPSB0aGlzLFxyXG4gICAgICBhMSA9IG1lLmEsXHJcbiAgICAgIGIxID0gbWUuYixcclxuICAgICAgYzEgPSBtZS5jLFxyXG4gICAgICBkMSA9IG1lLmQsXHJcbiAgICAgIGUxID0gbWUuZSxcclxuICAgICAgZjEgPSBtZS5mO1xyXG5cclxuICAgIC8qIG1hdHJpeCBjb2x1bW4gb3JkZXIgaXM6XHJcbiAgICAgKiAgIGEgYyBlXHJcbiAgICAgKiAgIGIgZCBmXHJcbiAgICAgKiAgIDAgMCAxXHJcbiAgICAgKi9cclxuICAgIG1lLmEgPSBhMSAqIGEyICsgYzEgKiBiMjtcclxuICAgIG1lLmIgPSBiMSAqIGEyICsgZDEgKiBiMjtcclxuICAgIG1lLmMgPSBhMSAqIGMyICsgYzEgKiBkMjtcclxuICAgIG1lLmQgPSBiMSAqIGMyICsgZDEgKiBkMjtcclxuICAgIG1lLmUgPSBhMSAqIGUyICsgYzEgKiBmMiArIGUxO1xyXG4gICAgbWUuZiA9IGIxICogZTIgKyBkMSAqIGYyICsgZjE7XHJcblxyXG4gICAgcmV0dXJuIG1lLl94KClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBNdWx0aXBsaWVzIGN1cnJlbnQgbWF0cml4IHdpdGggc291cmNlIG1hdHJpeC5cclxuICAgKiBAcGFyYW0ge01hdHJpeHxET01NYXRyaXh8U1ZHTWF0cml4fSBtIC0gc291cmNlIG1hdHJpeCB0byBtdWx0aXBseSB3aXRoLlxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgbXVsdGlwbHk6IGZ1bmN0aW9uKG0pIHtcclxuICAgIHJldHVybiB0aGlzLl90KG0uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmYpXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogRGl2aWRlIHRoaXMgbWF0cml4IG9uIGlucHV0IG1hdHJpeCB3aGljaCBtdXN0IGJlIGludmVydGlibGUuXHJcbiAgICogQHBhcmFtIHtNYXRyaXh9IG0gLSBtYXRyaXggdG8gZGl2aWRlIG9uIChkaXZpc29yKVxyXG4gICAqIEB0aHJvd3MgRXhjZXB0aW9uIGlmIGlucHV0IG1hdHJpeCBpcyBub3QgaW52ZXJ0aWJsZVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9XHJcbiAgICovXHJcbiAgZGl2aWRlOiBmdW5jdGlvbihtKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBseShtLmludmVyc2UoKSlcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBEaXZpZGUgY3VycmVudCBtYXRyaXggb24gc2NhbGFyIHZhbHVlICE9IDAuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGQgLSBkaXZpc29yXHJcbiAgICogQHRocm93cyBFeGNlcHRpb24gaWYgZGl2aXNvciBpcyB6ZXJvXHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICBkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uKGQpIHtcclxuXHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuICAgIGlmICghZCkgdGhyb3cgXCJEaXZpc2lvbiBvbiB6ZXJvXCI7XHJcblxyXG4gICAgbWUuYSAvPSBkO1xyXG4gICAgbWUuYiAvPSBkO1xyXG4gICAgbWUuYyAvPSBkO1xyXG4gICAgbWUuZCAvPSBkO1xyXG4gICAgbWUuZSAvPSBkO1xyXG4gICAgbWUuZiAvPSBkO1xyXG5cclxuICAgIHJldHVybiBtZS5feCgpXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGFuIGludmVyc2UgbWF0cml4IG9mIGN1cnJlbnQgbWF0cml4LiBUaGUgbWV0aG9kIHJldHVybnMgYSBuZXdcclxuICAgKiBtYXRyaXggd2l0aCB2YWx1ZXMgeW91IG5lZWQgdG8gdXNlIHRvIGdldCB0byBhbiBpZGVudGl0eSBtYXRyaXguXHJcbiAgICogQ29udGV4dCBmcm9tIHBhcmVudCBtYXRyaXggaXMgbm90IGFwcGxpZWQgdG8gdGhlIHJldHVybmVkIG1hdHJpeC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Nsb25lQ29udGV4dD1mYWxzZV0gLSBjbG9uZSBjdXJyZW50IGNvbnRleHQgdG8gcmVzdWx0aW5nIG1hdHJpeFxyXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Nsb25lRE9NPWZhbHNlXSAtIGNsb25lIGN1cnJlbnQgRE9NIGVsZW1lbnQgdG8gcmVzdWx0aW5nIG1hdHJpeFxyXG4gICAqIEB0aHJvd3MgRXhjZXB0aW9uIGlzIGlucHV0IG1hdHJpeCBpcyBub3QgaW52ZXJ0aWJsZVxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9IC0gbmV3IE1hdHJpeCBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIGludmVyc2U6IGZ1bmN0aW9uKGNsb25lQ29udGV4dCwgY2xvbmVET00pIHtcclxuXHJcbiAgICB2YXJcclxuICAgICAgbWUgPSB0aGlzLFxyXG4gICAgICBtICA9IG5ldyBNYXRyaXgoY2xvbmVDb250ZXh0ID8gbWUuY29udGV4dCA6IG51bGwsIGNsb25lRE9NID8gbWUuZWxlbWVudCA6IG51bGwpLFxyXG4gICAgICBkdCA9IG1lLmRldGVybWluYW50KCk7XHJcblxyXG4gICAgaWYgKCFkdCkgdGhyb3cgXCJNYXRyaXggbm90IGludmVydGlibGUuXCI7XHJcblxyXG4gICAgbS5hID0gbWUuZCAvIGR0O1xyXG4gICAgbS5iID0gLW1lLmIgLyBkdDtcclxuICAgIG0uYyA9IC1tZS5jIC8gZHQ7XHJcbiAgICBtLmQgPSBtZS5hIC8gZHQ7XHJcbiAgICBtLmUgPSAobWUuYyAqIG1lLmYgLSBtZS5kICogbWUuZSkgLyBkdDtcclxuICAgIG0uZiA9IC0obWUuYSAqIG1lLmYgLSBtZS5iICogbWUuZSkgLyBkdDtcclxuXHJcbiAgICByZXR1cm4gbVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEludGVycG9sYXRlIHRoaXMgbWF0cml4IHdpdGggYW5vdGhlciBhbmQgcHJvZHVjZSBhIG5ldyBtYXRyaXguXHJcbiAgICogYHRgIGlzIGEgdmFsdWUgaW4gdGhlIHJhbmdlIFswLjAsIDEuMF0gd2hlcmUgMCBpcyB0aGlzIGluc3RhbmNlIGFuZFxyXG4gICAqIDEgaXMgZXF1YWwgdG8gdGhlIHNlY29uZCBtYXRyaXguIFRoZSBgdGAgdmFsdWUgaXMgbm90IGNsYW1wZWQuXHJcbiAgICpcclxuICAgKiBDb250ZXh0IGZyb20gcGFyZW50IG1hdHJpeCBpcyBub3QgYXBwbGllZCB0byB0aGUgcmV0dXJuZWQgbWF0cml4LlxyXG4gICAqXHJcbiAgICogTm90ZTogdGhpcyBpbnRlcnBvbGF0aW9uIGlzIG5haXZlLiBGb3IgYW5pbWF0aW9uIGNvbnRhaW5pbmcgcm90YXRpb24sXHJcbiAgICogc2hlYXIgb3Igc2tldyB1c2UgdGhlIFtgaW50ZXJwb2xhdGVBbmltKClgXXtAbGluayBNYXRyaXgjaW50ZXJwb2xhdGVBbmltfSBtZXRob2QgaW5zdGVhZFxyXG4gICAqIHRvIGF2b2lkIHVuaW50ZW5kZWQgZmxpcHBpbmcuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge01hdHJpeHxTVkdNYXRyaXh9IG0yIC0gdGhlIG1hdHJpeCB0byBpbnRlcnBvbGF0ZSB3aXRoLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0IC0gaW50ZXJwb2xhdGlvbiBbMC4wLCAxLjBdXHJcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IFtjb250ZXh0XSAtIG9wdGlvbmFsIGNvbnRleHQgdG8gYWZmZWN0XHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW2RvbV0gLSBvcHRpb25hbCBET00gZWxlbWVudCB0byB1c2UgZm9yIHRoZSBtYXRyaXhcclxuICAgKiBAcmV0dXJucyB7TWF0cml4fSAtIG5ldyBNYXRyaXggaW5zdGFuY2Ugd2l0aCB0aGUgaW50ZXJwb2xhdGVkIHJlc3VsdFxyXG4gICAqL1xyXG4gIGludGVycG9sYXRlOiBmdW5jdGlvbihtMiwgdCwgY29udGV4dCwgZG9tKSB7XHJcblxyXG4gICAgdmFyXHJcbiAgICAgIG1lID0gdGhpcyxcclxuICAgICAgbSAgPSBuZXcgTWF0cml4KGNvbnRleHQsIGRvbSk7XHJcblxyXG4gICAgbS5hID0gbWUuYSArIChtMi5hIC0gbWUuYSkgKiB0O1xyXG4gICAgbS5iID0gbWUuYiArIChtMi5iIC0gbWUuYikgKiB0O1xyXG4gICAgbS5jID0gbWUuYyArIChtMi5jIC0gbWUuYykgKiB0O1xyXG4gICAgbS5kID0gbWUuZCArIChtMi5kIC0gbWUuZCkgKiB0O1xyXG4gICAgbS5lID0gbWUuZSArIChtMi5lIC0gbWUuZSkgKiB0O1xyXG4gICAgbS5mID0gbWUuZiArIChtMi5mIC0gbWUuZikgKiB0O1xyXG5cclxuICAgIHJldHVybiBtLl94KClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBJbnRlcnBvbGF0ZSB0aGlzIG1hdHJpeCB3aXRoIGFub3RoZXIgYW5kIHByb2R1Y2UgYSBuZXcgbWF0cml4LlxyXG4gICAqIGB0YCBpcyBhIHZhbHVlIGluIHRoZSByYW5nZSBbMC4wLCAxLjBdIHdoZXJlIDAgaXMgdGhpcyBpbnN0YW5jZSBhbmRcclxuICAgKiAxIGlzIGVxdWFsIHRvIHRoZSBzZWNvbmQgbWF0cml4LiBUaGUgYHRgIHZhbHVlIGlzIG5vdCBjb25zdHJhaW5lZC5cclxuICAgKlxyXG4gICAqIENvbnRleHQgZnJvbSBwYXJlbnQgbWF0cml4IGlzIG5vdCBhcHBsaWVkIHRvIHRoZSByZXR1cm5lZCBtYXRyaXguXHJcbiAgICpcclxuICAgKiBUbyBvYnRhaW4gZWFzaW5nIGB0YCBjYW4gYmUgcHJlcHJvY2Vzc2VkIHVzaW5nIGVhc2luZy1mdW5jdGlvbnNcclxuICAgKiBiZWZvcmUgYmVpbmcgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLlxyXG4gICAqXHJcbiAgICogTm90ZTogdGhpcyBpbnRlcnBvbGF0aW9uIG1ldGhvZCB1c2VzIGRlY29tcG9zaXRpb24gd2hpY2ggbWFrZXNcclxuICAgKiBpdCBzdWl0YWJsZSBmb3IgYW5pbWF0aW9ucyAoaW4gcGFydGljdWxhciB3aGVyZSByb3RhdGlvbiB0YWtlc1xyXG4gICAqIHBsYWNlcykuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge01hdHJpeH0gbTIgLSB0aGUgbWF0cml4IHRvIGludGVycG9sYXRlIHdpdGguXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHQgLSBpbnRlcnBvbGF0aW9uIFswLjAsIDEuMF1cclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2NvbnRleHRdIC0gb3B0aW9uYWwgY29udGV4dCB0byBhZmZlY3RcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbZG9tXSAtIG9wdGlvbmFsIERPTSBlbGVtZW50IHRvIHVzZSBmb3IgdGhlIG1hdHJpeFxyXG4gICAqIEByZXR1cm5zIHtNYXRyaXh9IC0gbmV3IE1hdHJpeCBpbnN0YW5jZSB3aXRoIHRoZSBpbnRlcnBvbGF0ZWQgcmVzdWx0XHJcbiAgICovXHJcbiAgaW50ZXJwb2xhdGVBbmltOiBmdW5jdGlvbihtMiwgdCwgY29udGV4dCwgZG9tKSB7XHJcblxyXG4gICAgdmFyXHJcbiAgICAgIG0gID0gbmV3IE1hdHJpeChjb250ZXh0LCBkb20pLFxyXG4gICAgICBkMSA9IHRoaXMuZGVjb21wb3NlKCksXHJcbiAgICAgIGQyID0gbTIuZGVjb21wb3NlKCksXHJcbiAgICAgIHQxID0gZDEudHJhbnNsYXRlLFxyXG4gICAgICB0MiA9IGQyLnRyYW5zbGF0ZSxcclxuICAgICAgczEgPSBkMS5zY2FsZTtcclxuXHJcbiAgICAvLyBRUiBvcmRlciAodC1yLXMtc2spXHJcbiAgICBtLnRyYW5zbGF0ZSh0MS54ICsgKHQyLnggLSB0MS54KSAqIHQsIHQxLnkgKyAodDIueSAtIHQxLnkpICogdCk7XHJcbiAgICBtLnJvdGF0ZShkMS5yb3RhdGlvbiArIChkMi5yb3RhdGlvbiAtIGQxLnJvdGF0aW9uKSAqIHQpO1xyXG4gICAgbS5zY2FsZShzMS54ICsgKGQyLnNjYWxlLnggLSBzMS54KSAqIHQsIHMxLnkgKyAoZDIuc2NhbGUueSAtIHMxLnkpICogdCk7XHJcbiAgICAvL3RvZG8gdGVzdCBza2V3IHNjZW5hcmlvc1xyXG5cclxuICAgIHJldHVybiBtLl94KClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBEZWNvbXBvc2UgdGhlIGN1cnJlbnQgbWF0cml4IGludG8gc2ltcGxlIHRyYW5zZm9ybXMgdXNpbmcgZWl0aGVyXHJcbiAgICogUVIgKGRlZmF1bHQpIG9yIExVIGRlY29tcG9zaXRpb24uXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2VMVT1mYWxzZV0gLSBzZXQgdG8gdHJ1ZSB0byB1c2UgTFUgcmF0aGVyIHRoYW4gUVIgZGVjb21wb3NpdGlvblxyXG4gICAqIEByZXR1cm5zIHsqfSAtIGFuIG9iamVjdCBjb250YWluaW5nIGN1cnJlbnQgZGVjb21wb3NlZCB2YWx1ZXMgKHRyYW5zbGF0ZSwgcm90YXRpb24sIHNjYWxlLCBza2V3KVxyXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1FSX2RlY29tcG9zaXRpb258TW9yZSBvbiBRUiBkZWNvbXBvc2l0aW9ufVxyXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xVX2RlY29tcG9zaXRpb258TW9yZSBvbiBMVSBkZWNvbXBvc2l0aW9ufVxyXG4gICAqL1xyXG4gIGRlY29tcG9zZTogZnVuY3Rpb24odXNlTFUpIHtcclxuXHJcbiAgICB2YXJcclxuICAgICAgbWUgICAgICAgID0gdGhpcyxcclxuICAgICAgYSAgICAgICAgID0gbWUuYSxcclxuICAgICAgYiAgICAgICAgID0gbWUuYixcclxuICAgICAgYyAgICAgICAgID0gbWUuYyxcclxuICAgICAgZCAgICAgICAgID0gbWUuZCxcclxuICAgICAgYWNvcyAgICAgID0gTWF0aC5hY29zLFxyXG4gICAgICBhdGFuICAgICAgPSBNYXRoLmF0YW4sXHJcbiAgICAgIHNxcnQgICAgICA9IE1hdGguc3FydCxcclxuICAgICAgcGkgICAgICAgID0gTWF0aC5QSSxcclxuXHJcbiAgICAgIHRyYW5zbGF0ZSA9IHt4OiBtZS5lLCB5OiBtZS5mfSxcclxuICAgICAgcm90YXRpb24gID0gMCxcclxuICAgICAgc2NhbGUgICAgID0ge3g6IDEsIHk6IDF9LFxyXG4gICAgICBza2V3ICAgICAgPSB7eDogMCwgeTogMH0sXHJcblxyXG4gICAgICBkZXRlcm0gICAgPSBhICogZCAtIGIgKiBjLFx0Ly8gZGV0ZXJtaW5hbnQoKSwgc2tpcCBEUlkgaGVyZS4uLlxyXG4gICAgICByLCBzO1xyXG5cclxuICAgIGlmICh1c2VMVSkge1xyXG4gICAgICBpZiAoYSkge1xyXG4gICAgICAgIHNrZXcgPSB7eDogYXRhbihjIC8gYSksIHk6IGF0YW4oYiAvIGEpfTtcclxuICAgICAgICBzY2FsZSA9IHt4OiBhLCB5OiBkZXRlcm0gLyBhfTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChiKSB7XHJcbiAgICAgICAgcm90YXRpb24gPSBwaSAqIDAuNTtcclxuICAgICAgICBzY2FsZSA9IHt4OiBiLCB5OiBkZXRlcm0gLyBifTtcclxuICAgICAgICBza2V3LnggPSBhdGFuKGQgLyBiKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHsgLy8gYSA9IGIgPSAwXHJcbiAgICAgICAgc2NhbGUgPSB7eDogYywgeTogZH07XHJcbiAgICAgICAgc2tldy54ID0gcGkgKiAwLjI1O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gQXBwbHkgdGhlIFFSLWxpa2UgZGVjb21wb3NpdGlvbi5cclxuICAgICAgaWYgKGEgfHwgYikge1xyXG4gICAgICAgIHIgPSBzcXJ0KGEgKiBhICsgYiAqIGIpO1xyXG4gICAgICAgIHJvdGF0aW9uID0gYiA+IDAgPyBhY29zKGEgLyByKSA6IC1hY29zKGEgLyByKTtcclxuICAgICAgICBzY2FsZSA9IHt4OiByLCB5OiBkZXRlcm0gLyByfTtcclxuICAgICAgICBza2V3LnggPSBhdGFuKChhICogYyArIGIgKiBkKSAvIChyICogcikpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKGMgfHwgZCkge1xyXG4gICAgICAgIHMgPSBzcXJ0KGMgKiBjICsgZCAqIGQpO1xyXG4gICAgICAgIHJvdGF0aW9uID0gcGkgKiAwLjUgLSAoZCA+IDAgPyBhY29zKC1jIC8gcykgOiAtYWNvcyhjIC8gcykpO1xyXG4gICAgICAgIHNjYWxlID0ge3g6IGRldGVybSAvIHMsIHk6IHN9O1xyXG4gICAgICAgIHNrZXcueSA9IGF0YW4oKGEgKiBjICsgYiAqIGQpIC8gKHMgKiBzKSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7IC8vIGEgPSBiID0gYyA9IGQgPSAwXHJcbiAgICAgICAgc2NhbGUgPSB7eDogMCwgeTogMH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcclxuICAgICAgcm90YXRpb24gOiByb3RhdGlvbixcclxuICAgICAgc2NhbGUgICAgOiBzY2FsZSxcclxuICAgICAgc2tldyAgICAgOiBza2V3XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0aGUgZGV0ZXJtaW5hbnQgb2YgdGhlIGN1cnJlbnQgbWF0cml4LlxyXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuYSAqIHRoaXMuZCAtIHRoaXMuYiAqIHRoaXMuY1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IGN1cnJlbnQgbWF0cml4IHRvIGB4YCBhbmQgYHlgIG9mIGEgcG9pbnQuXHJcbiAgICogUmV0dXJucyBhIHBvaW50IG9iamVjdC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gdmFsdWUgZm9yIHhcclxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHZhbHVlIGZvciB5XHJcbiAgICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn19IEEgbmV3IHRyYW5zZm9ybWVkIHBvaW50IG9iamVjdFxyXG4gICAqL1xyXG4gIGFwcGx5VG9Qb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IHggKiBtZS5hICsgeSAqIG1lLmMgKyBtZS5lLFxyXG4gICAgICB5OiB4ICogbWUuYiArIHkgKiBtZS5kICsgbWUuZlxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IGN1cnJlbnQgbWF0cml4IHRvIGFycmF5IHdpdGggcG9pbnQgb2JqZWN0cyBvciBwb2ludCBwYWlycy5cclxuICAgKiBSZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggcG9pbnRzIGluIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGUgaW5wdXQgYXJyYXkuXHJcbiAgICpcclxuICAgKiBBIHBvaW50IG9iamVjdCBpcyBhbiBvYmplY3QgbGl0ZXJhbDpcclxuICAgKlxyXG4gICAqICAgICB7eDogeCwgeTogeX1cclxuICAgKlxyXG4gICAqIHNvIGFuIGFycmF5IHdvdWxkIGNvbnRhaW4gZWl0aGVyOlxyXG4gICAqXHJcbiAgICogICAgIFt7eDogeDEsIHk6IHkxfSwge3g6IHgyLCB5OiB5Mn0sIC4uLiB7eDogeG4sIHk6IHlufV1cclxuICAgKlxyXG4gICAqIG9yXHJcbiAgICpcclxuICAgKiAgICAgW3gxLCB5MSwgeDIsIHkyLCAuLi4geG4sIHluXVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzIC0gYXJyYXkgd2l0aCBwb2ludCBvYmplY3RzIG9yIHBhaXJzXHJcbiAgICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSB3aXRoIHRyYW5zZm9ybWVkIHBvaW50c1xyXG4gICAqL1xyXG4gIGFwcGx5VG9BcnJheTogZnVuY3Rpb24ocG9pbnRzKSB7XHJcblxyXG4gICAgdmFyXHJcbiAgICAgIGkgPSAwLCBwLCBsLFxyXG4gICAgICBteFBvaW50cyA9IFtdO1xyXG5cclxuICAgIGlmICh0eXBlb2YgcG9pbnRzWzBdID09PSAnbnVtYmVyJykge1xyXG5cclxuICAgICAgbCA9IHBvaW50cy5sZW5ndGg7XHJcblxyXG4gICAgICB3aGlsZShpIDwgbCkge1xyXG4gICAgICAgIHAgPSB0aGlzLmFwcGx5VG9Qb2ludChwb2ludHNbaSsrXSwgcG9pbnRzW2krK10pO1xyXG4gICAgICAgIG14UG9pbnRzLnB1c2gocC54LCBwLnkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgd2hpbGUocCA9IHBvaW50c1tpKytdKSB7XHJcbiAgICAgICAgbXhQb2ludHMucHVzaCh0aGlzLmFwcGx5VG9Qb2ludChwLngsIHAueSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG14UG9pbnRzXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgY3VycmVudCBtYXRyaXggdG8gYSB0eXBlZCBhcnJheSB3aXRoIHBvaW50IHBhaXJzLiBBbHRob3VnaFxyXG4gICAqIHRoZSBpbnB1dCBhcnJheSBtYXkgYmUgYW4gb3JkaW5hcnkgYXJyYXksIHRoaXMgbWV0aG9kIGlzIGludGVuZGVkXHJcbiAgICogZm9yIG1vcmUgcGVyZm9ybWFudCB1c2Ugd2hlcmUgdHlwZWQgYXJyYXlzIGFyZSB1c2VkLiBUaGUgcmV0dXJuZWRcclxuICAgKiBhcnJheSBpcyByZWdhcmRsZXNzIGFsd2F5cyByZXR1cm5lZCBhcyBhIGBGbG9hdDMyQXJyYXlgLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsqfSBwb2ludHMgLSAodHlwZWQpIGFycmF5IHdpdGggcG9pbnQgcGFpcnMgW3gxLCB5MSwgLi4uLCB4biwgeW5dXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBbdXNlNjQ9ZmFsc2VdIC0gdXNlIEZsb2F0NjRBcnJheSBpbnN0ZWFkIG9mIEZsb2F0MzJBcnJheVxyXG4gICAqIEByZXR1cm5zIHsqfSBBIG5ldyB0eXBlZCBhcnJheSB3aXRoIHRyYW5zZm9ybWVkIHBvaW50c1xyXG4gICAqL1xyXG4gIGFwcGx5VG9UeXBlZEFycmF5OiBmdW5jdGlvbihwb2ludHMsIHVzZTY0KSB7XHJcblxyXG4gICAgdmFyXHJcbiAgICAgIGkgPSAwLCBwLFxyXG4gICAgICBsID0gcG9pbnRzLmxlbmd0aCxcclxuICAgICAgbXhQb2ludHMgPSB1c2U2NCA/IG5ldyBGbG9hdDY0QXJyYXkobCkgOiBuZXcgRmxvYXQzMkFycmF5KGwpO1xyXG5cclxuICAgIHdoaWxlKGkgPCBsKSB7XHJcbiAgICAgIHAgPSB0aGlzLmFwcGx5VG9Qb2ludChwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pO1xyXG4gICAgICBteFBvaW50c1tpKytdID0gcC54O1xyXG4gICAgICBteFBvaW50c1tpKytdID0gcC55O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBteFBvaW50c1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIEFwcGx5IHRvIGFueSBjYW52YXMgMkQgY29udGV4dCBvYmplY3QuIFRoaXMgZG9lcyBub3QgYWZmZWN0IHRoZVxyXG4gICAqIGNvbnRleHQgdGhhdCBvcHRpb25hbGx5IHdhcyByZWZlcmVuY2VkIGluIGNvbnN0cnVjdG9yIHVubGVzcyBpdCBpc1xyXG4gICAqIHRoZSBzYW1lIGNvbnRleHQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCAtIHRhcmdldCBjb250ZXh0XHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICBhcHBseVRvQ29udGV4dDogZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKG1lLmEsIG1lLmIsIG1lLmMsIG1lLmQsIG1lLmUsIG1lLmYpO1xyXG4gICAgcmV0dXJuIG1lXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgdG8gYW55IERPTSBlbGVtZW50LiBUaGlzIGRvZXMgbm90IGFmZmVjdCB0aGUgRE9NIGVsZW1lbnRcclxuICAgKiB0aGF0IG9wdGlvbmFsbHkgd2FzIHJlZmVyZW5jZWQgaW4gY29uc3RydWN0b3IgdW5sZXNzIGl0IGlzXHJcbiAgICogdGhlIHNhbWUgZWxlbWVudC5cclxuICAgKlxyXG4gICAqIFRoZSBtZXRob2Qgd2lsbCBhdXRvLWRldGVjdCB0aGUgY29ycmVjdCBicm93c2VyIHByZWZpeCBpZiBhbnkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gdGFyZ2V0IERPTSBlbGVtZW50XHJcbiAgICogQHBhcmFtIHtib29sZWFufSBbdXNlM0Q9ZmFsc2VdIC0gdXNlIDNEIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBpbnN0ZWFkIG9mIDJEXHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICBhcHBseVRvRWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgdXNlM0QpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICBpZiAoIW1lLl9weCkgbWUuX3B4ID0gbWUuX2dldFBYKCk7XHJcbiAgICBlbGVtZW50LnN0eWxlW21lLl9weF0gPSB1c2UzRCA/IG1lLnRvQ1NTM0QoKSA6IG1lLnRvQ1NTKCk7XHJcbiAgICByZXR1cm4gbWVcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBJbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IGluc3RhbmNlIG9mIGEgTWF0cml4LCBET01NYXRyaXggb3IgU1ZHTWF0cml4XHJcbiAgICogdGhlIGN1cnJlbnQgc2V0dGluZ3Mgb2YgdGhpcyBpbnN0YW5jZSBjYW4gYmUgYXBwbGllZCB0byBhbiBleHRlcm5hbFxyXG4gICAqIG9iamVjdCBvZiBhIGRpZmZlcmVudCAob3Igc2FtZSkgdHlwZS4gWW91IGNhbiBhbHNvIHBhc3MgaW4gYW5cclxuICAgKiBlbXB0eSBsaXRlcmFsIG9iamVjdC5cclxuICAgKlxyXG4gICAqIE5vdGUgdGhhdCB0aGUgcHJvcGVydGllcyBhLWYgd2lsbCBiZSBzZXQgcmVnYXJkbGVzcyBvZiBpZiB0aGV5XHJcbiAgICogYWxyZWFkeSBleGlzdCBvciBub3QuXHJcbiAgICpcclxuICAgKiBAcGFyYW0geyp9IG9iaiAtIHRhcmdldCBvYmplY3QuXHJcbiAgICogQHJldHVybnMge01hdHJpeH1cclxuICAgKi9cclxuICBhcHBseVRvT2JqZWN0OiBmdW5jdGlvbihvYmopIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICBvYmouYSA9IG1lLmE7XHJcbiAgICBvYmouYiA9IG1lLmI7XHJcbiAgICBvYmouYyA9IG1lLmM7XHJcbiAgICBvYmouZCA9IG1lLmQ7XHJcbiAgICBvYmouZSA9IG1lLmU7XHJcbiAgICBvYmouZiA9IG1lLmY7XHJcbiAgICByZXR1cm4gbWVcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRydWUgaWYgbWF0cml4IGlzIGFuIGlkZW50aXR5IG1hdHJpeCAobm8gdHJhbnNmb3JtcyBhcHBsaWVkKS5cclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBpc0lkZW50aXR5OiBmdW5jdGlvbigpIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICByZXR1cm4gbWUuYSA9PT0gMSAmJiAhbWUuYiAmJiAhbWUuYyAmJiBtZS5kID09PSAxICYmICFtZS5lICYmICFtZS5mXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIG1hdHJpeCBpcyBpbnZlcnRpYmxlXHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgaXNJbnZlcnRpYmxlOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAhdGhpcy5fcSh0aGlzLmRldGVybWluYW50KCksIDApXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3Igc2l0dWF0aW9ucyB3aGVyZSBzY2FsZSBpcyBhY2N1bXVsYXRlZFxyXG4gICAqIHZpYSBtdWx0aXBsaWNhdGlvbnMsIHRvIGRldGVjdCBzaXR1YXRpb25zIHdoZXJlIHNjYWxlIGJlY29tZXNcclxuICAgKiBcInRyYXBwZWRcIiB3aXRoIGEgdmFsdWUgb2YgemVyby4gQW5kIGluIHdoaWNoIGNhc2Ugc2NhbGUgbXVzdCBiZVxyXG4gICAqIHNldCBleHBsaWNpdGx5IHRvIGEgbm9uLXplcm8gdmFsdWUuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKi9cclxuICBpc1ZhbGlkOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiAhKHRoaXMuYSAqIHRoaXMuZClcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBDb21wYXJlcyBjdXJyZW50IG1hdHJpeCB3aXRoIGFub3RoZXIgbWF0cml4LiBSZXR1cm5zIHRydWUgaWYgZXF1YWxcclxuICAgKiAod2l0aGluIGVwc2lsb24gdG9sZXJhbmNlKS5cclxuICAgKiBAcGFyYW0ge01hdHJpeHxTVkdNYXRyaXh9IG0gLSBtYXRyaXggdG8gY29tcGFyZSB0aGlzIG1hdHJpeCB3aXRoXHJcbiAgICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAgICovXHJcbiAgaXNFcXVhbDogZnVuY3Rpb24obSkge1xyXG5cclxuICAgIHZhclxyXG4gICAgICBtZSA9IHRoaXMsXHJcbiAgICAgIHEgPSBtZS5fcTtcclxuXHJcbiAgICByZXR1cm4gcShtZS5hLCBtLmEpICYmXHJcbiAgICAgICAgICAgcShtZS5iLCBtLmIpICYmXHJcbiAgICAgICAgICAgcShtZS5jLCBtLmMpICYmXHJcbiAgICAgICAgICAgcShtZS5kLCBtLmQpICYmXHJcbiAgICAgICAgICAgcShtZS5lLCBtLmUpICYmXHJcbiAgICAgICAgICAgcShtZS5mLCBtLmYpXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ2xvbmVzIGN1cnJlbnQgaW5zdGFuY2UgYW5kIHJldHVybmluZyBhIG5ldyBtYXRyaXguXHJcbiAgICogQHBhcmFtIHtib29sZWFufSBbbm9Db250ZXh0PWZhbHNlXSBkb24ndCBjbG9uZSBjb250ZXh0IHJlZmVyZW5jZSBpZiB0cnVlXHJcbiAgICogQHJldHVybnMge01hdHJpeH0gLSBhIG5ldyBNYXRyaXggaW5zdGFuY2Ugd2l0aCBpZGVudGljYWwgdHJhbnNmb3JtYXRpb25zIGFzIHRoaXMgaW5zdGFuY2VcclxuICAgKi9cclxuICBjbG9uZTogZnVuY3Rpb24obm9Db250ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IE1hdHJpeChub0NvbnRleHQgPyBudWxsIDogdGhpcy5jb250ZXh0KS5tdWx0aXBseSh0aGlzKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCBjdXJyZW50IG1hdHJpeCB2YWx1ZXMuXHJcbiAgICogQHJldHVybnMge0FycmF5fVxyXG4gICAqL1xyXG4gIHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIHJldHVybiBbbWUuYSwgbWUuYiwgbWUuYywgbWUuZCwgbWUuZSwgbWUuZl1cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgYmluYXJ5IDMyLWJpdCBmbG9hdGluZyBwb2ludCB0eXBlZCBhcnJheS5cclxuICAgKiBAcmV0dXJucyB7Kn1cclxuICAgKi9cclxuICB0b1R5cGVkQXJyYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIG1lID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFttZS5hLCBtZS5iLCBtZS5jLCBtZS5kLCBtZS5lLCBtZS5mXSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGVzIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBDU1MgYHRyYW5zZm9ybWAuXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBtLnRvQ1NTKCk7XHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKi9cclxuICB0b0NTUzogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gXCJtYXRyaXgoXCIgKyB0aGlzLnRvQXJyYXkoKSArIFwiKVwiXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogR2VuZXJhdGVzIGEgYG1hdHJpeDNkKClgIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggQ1NTIGB0cmFuc2Zvcm1gLlxyXG4gICAqIEFsdGhvdWdoIHRoZSBtYXRyaXggaXMgZm9yIDJEIHVzZSB5b3UgbWF5IHNlZSBwZXJmb3JtYW5jZSBiZW5lZml0c1xyXG4gICAqIG9uIHNvbWUgZGV2aWNlcyB1c2luZyBhIDNEIENTUyB0cmFuc2Zvcm0gaW5zdGVhZCBvZiBhIDJELlxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gbS50b0NTUzNEKCk7XHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKi9cclxuICB0b0NTUzNEOiBmdW5jdGlvbigpIHtcclxuICAgIHZhciBtZSA9IHRoaXMsIG4yID0gXCIsMCwwLFwiO1xyXG4gICAgcmV0dXJuIFwibWF0cml4M2QoXCIgKyBtZS5hICsgXCIsXCIgKyBtZS5iICsgbjIgKyBtZS5jICsgXCIsXCIgKyBtZS5kICsgbjIgKyBuMiArIFwiLDEsMCxcIiArIG1lLmUgKyBcIixcIiArIG1lLmYgKyBcIiwwLDEpXCJcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgSlNPTiBjb21wYXRpYmxlIHN0cmluZyBvZiBjdXJyZW50IG1hdHJpeC5cclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAqL1xyXG4gIHRvSlNPTjogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbWUgPSB0aGlzO1xyXG4gICAgcmV0dXJuICd7XCJhXCI6JyArIG1lLmEgKyAnLFwiYlwiOicgKyBtZS5iICsgJyxcImNcIjonICsgbWUuYyArICcsXCJkXCI6JyArIG1lLmQgKyAnLFwiZVwiOicgKyBtZS5lICsgJyxcImZcIjonICsgbWUuZiArICd9J1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgYSBzdHJpbmcgd2l0aCBjdXJyZW50IG1hdHJpeCBhcyBjb21tYS1zZXBhcmF0ZWQgbGlzdC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gW2ZpeExlbj00XSAtIHRydW5jYXRlIGRlY2ltYWwgdmFsdWVzIHRvIG51bWJlciBvZiBkaWdpdHNcclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAqL1xyXG4gIHRvU3RyaW5nOiBmdW5jdGlvbihmaXhMZW4pIHtcclxuICAgIHZhciBtZSA9IHRoaXM7XHJcbiAgICBmaXhMZW4gPSBmaXhMZW4gfHwgNDtcclxuICAgIHJldHVybiBcImE9XCIgKyBtZS5hLnRvRml4ZWQoZml4TGVuKSArXHJcbiAgICAgICAgICAgXCIgYj1cIiArIG1lLmIudG9GaXhlZChmaXhMZW4pICtcclxuICAgICAgICAgICBcIiBjPVwiICsgbWUuYy50b0ZpeGVkKGZpeExlbikgK1xyXG4gICAgICAgICAgIFwiIGQ9XCIgKyBtZS5kLnRvRml4ZWQoZml4TGVuKSArXHJcbiAgICAgICAgICAgXCIgZT1cIiArIG1lLmUudG9GaXhlZChmaXhMZW4pICtcclxuICAgICAgICAgICBcIiBmPVwiICsgbWUuZi50b0ZpeGVkKGZpeExlbilcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggY3VycmVudCBtYXRyaXggYXMgY29tbWEtc2VwYXJhdGVkIHZhbHVlc1xyXG4gICAqIHN0cmluZyB3aXRoIGxpbmUtZW5kIChDUitMRikuXHJcbiAgICogQHJldHVybnMge3N0cmluZ31cclxuICAgKi9cclxuICB0b0NTVjogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy50b0FycmF5KCkuam9pbigpICsgXCJcXHJcXG5cIlxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnQgY3VycmVudCBtYXRyaXggaW50byBhIGBET01NYXRyaXhgLiBJZiBgRE9NTWF0cml4YCBpcyBub3RcclxuICAgKiBzdXBwb3J0ZWQsIGEgYG51bGxgIGlzIHJldHVybmVkLlxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0RPTU1hdHJpeH1cclxuICAgKiBAc2VlIHtAbGluayBodHRwczovL2RyYWZ0cy5meHRmLm9yZy9nZW9tZXRyeS8jZG9tbWF0cml4fE1ETiAvIFNWR01hdHJpeH1cclxuICAgKi9cclxuICB0b0RPTU1hdHJpeDogZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbSA9IG51bGw7XHJcbiAgICBpZiAoXCJET01NYXRyaXhcIiBpbiB3aW5kb3cpIHtcclxuICAgICAgbSA9IG5ldyBET01NYXRyaXgoKTtcclxuICAgICAgbS5hID0gdGhpcy5hO1xyXG4gICAgICBtLmIgPSB0aGlzLmI7XHJcbiAgICAgIG0uYyA9IHRoaXMuYztcclxuICAgICAgbS5kID0gdGhpcy5kO1xyXG4gICAgICBtLmUgPSB0aGlzLmU7XHJcbiAgICAgIG0uZiA9IHRoaXMuZjtcclxuICAgIH1cclxuICAgIHJldHVybiBtXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ29udmVydCBjdXJyZW50IG1hdHJpeCBpbnRvIGEgYFNWR01hdHJpeGAuIElmIGBTVkdNYXRyaXhgIGlzIG5vdFxyXG4gICAqIHN1cHBvcnRlZCwgYSBgbnVsbGAgaXMgcmV0dXJuZWQuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7U1ZHTWF0cml4fVxyXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TVkdNYXRyaXh8TUROIC8gU1ZHTWF0cml4fVxyXG4gICAqL1xyXG4gIHRvU1ZHTWF0cml4OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICB2YXJcclxuICAgICAgbWUgPSB0aGlzLFxyXG4gICAgICBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKSxcclxuICAgICAgc3ZnTWF0cml4ID0gbnVsbDtcclxuXHJcbiAgICBpZiAoc3ZnKSB7XHJcbiAgICAgIHN2Z01hdHJpeCA9IHN2Zy5jcmVhdGVTVkdNYXRyaXgoKTtcclxuICAgICAgc3ZnTWF0cml4LmEgPSBtZS5hO1xyXG4gICAgICBzdmdNYXRyaXguYiA9IG1lLmI7XHJcbiAgICAgIHN2Z01hdHJpeC5jID0gbWUuYztcclxuICAgICAgc3ZnTWF0cml4LmQgPSBtZS5kO1xyXG4gICAgICBzdmdNYXRyaXguZSA9IG1lLmU7XHJcbiAgICAgIHN2Z01hdHJpeC5mID0gbWUuZjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3ZnTWF0cml4XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQ29tcGFyZXMgZmxvYXRpbmcgcG9pbnQgdmFsdWVzIHdpdGggc29tZSB0b2xlcmFuY2UgKGVwc2lsb24pXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGYxIC0gZmxvYXQgMVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmMiAtIGZsb2F0IDJcclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIF9xOiBmdW5jdGlvbihmMSwgZjIpIHtcclxuICAgIHJldHVybiBNYXRoLmFicyhmMSAtIGYyKSA8IDFlLTE0XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgY3VycmVudCBhYnNvbHV0ZSBtYXRyaXggdG8gY29udGV4dCBpZiBkZWZpbmVkLCB0byBzeW5jIGl0LlxyXG4gICAqIEFwcGx5IGN1cnJlbnQgYWJzb2x1dGUgbWF0cml4IHRvIGVsZW1lbnQgaWYgZGVmaW5lZCwgdG8gc3luYyBpdC5cclxuICAgKiBAcmV0dXJucyB7TWF0cml4fVxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgX3g6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG4gICAgaWYgKG1lLmNvbnRleHQpXHJcbiAgICAgIG1lLmNvbnRleHQuc2V0VHJhbnNmb3JtKG1lLmEsIG1lLmIsIG1lLmMsIG1lLmQsIG1lLmUsIG1lLmYpO1xyXG5cclxuICAgIGlmIChtZS5fc3QpXHJcbiAgICAgIG1lLl9zdFttZS5fcHhdID0gbWUudXNlQ1NTM0QgPyBtZS50b0NTUzNEKCkgOiBtZS50b0NTUygpO1x0Ly8gY2FuIGJlIG9wdGltaXplZCBwcmUtc3RvcmluZyBmdW5jIHJlZi5cclxuXHJcbiAgICByZXR1cm4gbWVcclxuICB9XHJcbn07XHJcblxyXG4vLyBOb2RlIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSBleHBvcnRzLk1hdHJpeCA9IE1hdHJpeDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==